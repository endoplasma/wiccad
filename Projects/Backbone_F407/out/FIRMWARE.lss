
out/FIRMWARE.elf:     file format elf32-littlearm


Disassembly of section .text:

080001b0 <__aeabi_drsub>:
 80001b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001b4:	e002      	b.n	80001bc <__adddf3>
 80001b6:	bf00      	nop

080001b8 <__aeabi_dsub>:
 80001b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001bc <__adddf3>:
 80001bc:	b530      	push	{r4, r5, lr}
 80001be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001c6:	ea94 0f05 	teq	r4, r5
 80001ca:	bf08      	it	eq
 80001cc:	ea90 0f02 	teqeq	r0, r2
 80001d0:	bf1f      	itttt	ne
 80001d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001e2:	f000 80e2 	beq.w	80003aa <__adddf3+0x1ee>
 80001e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ee:	bfb8      	it	lt
 80001f0:	426d      	neglt	r5, r5
 80001f2:	dd0c      	ble.n	800020e <__adddf3+0x52>
 80001f4:	442c      	add	r4, r5
 80001f6:	ea80 0202 	eor.w	r2, r0, r2
 80001fa:	ea81 0303 	eor.w	r3, r1, r3
 80001fe:	ea82 0000 	eor.w	r0, r2, r0
 8000202:	ea83 0101 	eor.w	r1, r3, r1
 8000206:	ea80 0202 	eor.w	r2, r0, r2
 800020a:	ea81 0303 	eor.w	r3, r1, r3
 800020e:	2d36      	cmp	r5, #54	; 0x36
 8000210:	bf88      	it	hi
 8000212:	bd30      	pophi	{r4, r5, pc}
 8000214:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000218:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800021c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000220:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000224:	d002      	beq.n	800022c <__adddf3+0x70>
 8000226:	4240      	negs	r0, r0
 8000228:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800022c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000230:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000234:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000238:	d002      	beq.n	8000240 <__adddf3+0x84>
 800023a:	4252      	negs	r2, r2
 800023c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000240:	ea94 0f05 	teq	r4, r5
 8000244:	f000 80a7 	beq.w	8000396 <__adddf3+0x1da>
 8000248:	f1a4 0401 	sub.w	r4, r4, #1
 800024c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000250:	db0d      	blt.n	800026e <__adddf3+0xb2>
 8000252:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000256:	fa22 f205 	lsr.w	r2, r2, r5
 800025a:	1880      	adds	r0, r0, r2
 800025c:	f141 0100 	adc.w	r1, r1, #0
 8000260:	fa03 f20e 	lsl.w	r2, r3, lr
 8000264:	1880      	adds	r0, r0, r2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	4159      	adcs	r1, r3
 800026c:	e00e      	b.n	800028c <__adddf3+0xd0>
 800026e:	f1a5 0520 	sub.w	r5, r5, #32
 8000272:	f10e 0e20 	add.w	lr, lr, #32
 8000276:	2a01      	cmp	r2, #1
 8000278:	fa03 fc0e 	lsl.w	ip, r3, lr
 800027c:	bf28      	it	cs
 800027e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	18c0      	adds	r0, r0, r3
 8000288:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800028c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000290:	d507      	bpl.n	80002a2 <__adddf3+0xe6>
 8000292:	f04f 0e00 	mov.w	lr, #0
 8000296:	f1dc 0c00 	rsbs	ip, ip, #0
 800029a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800029e:	eb6e 0101 	sbc.w	r1, lr, r1
 80002a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002a6:	d31b      	bcc.n	80002e0 <__adddf3+0x124>
 80002a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ac:	d30c      	bcc.n	80002c8 <__adddf3+0x10c>
 80002ae:	0849      	lsrs	r1, r1, #1
 80002b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002b8:	f104 0401 	add.w	r4, r4, #1
 80002bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002c4:	f080 809a 	bcs.w	80003fc <__adddf3+0x240>
 80002c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	ea41 0105 	orr.w	r1, r1, r5
 80002de:	bd30      	pop	{r4, r5, pc}
 80002e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002e4:	4140      	adcs	r0, r0
 80002e6:	eb41 0101 	adc.w	r1, r1, r1
 80002ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ee:	f1a4 0401 	sub.w	r4, r4, #1
 80002f2:	d1e9      	bne.n	80002c8 <__adddf3+0x10c>
 80002f4:	f091 0f00 	teq	r1, #0
 80002f8:	bf04      	itt	eq
 80002fa:	4601      	moveq	r1, r0
 80002fc:	2000      	moveq	r0, #0
 80002fe:	fab1 f381 	clz	r3, r1
 8000302:	bf08      	it	eq
 8000304:	3320      	addeq	r3, #32
 8000306:	f1a3 030b 	sub.w	r3, r3, #11
 800030a:	f1b3 0220 	subs.w	r2, r3, #32
 800030e:	da0c      	bge.n	800032a <__adddf3+0x16e>
 8000310:	320c      	adds	r2, #12
 8000312:	dd08      	ble.n	8000326 <__adddf3+0x16a>
 8000314:	f102 0c14 	add.w	ip, r2, #20
 8000318:	f1c2 020c 	rsb	r2, r2, #12
 800031c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000320:	fa21 f102 	lsr.w	r1, r1, r2
 8000324:	e00c      	b.n	8000340 <__adddf3+0x184>
 8000326:	f102 0214 	add.w	r2, r2, #20
 800032a:	bfd8      	it	le
 800032c:	f1c2 0c20 	rsble	ip, r2, #32
 8000330:	fa01 f102 	lsl.w	r1, r1, r2
 8000334:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000338:	bfdc      	itt	le
 800033a:	ea41 010c 	orrle.w	r1, r1, ip
 800033e:	4090      	lslle	r0, r2
 8000340:	1ae4      	subs	r4, r4, r3
 8000342:	bfa2      	ittt	ge
 8000344:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000348:	4329      	orrge	r1, r5
 800034a:	bd30      	popge	{r4, r5, pc}
 800034c:	ea6f 0404 	mvn.w	r4, r4
 8000350:	3c1f      	subs	r4, #31
 8000352:	da1c      	bge.n	800038e <__adddf3+0x1d2>
 8000354:	340c      	adds	r4, #12
 8000356:	dc0e      	bgt.n	8000376 <__adddf3+0x1ba>
 8000358:	f104 0414 	add.w	r4, r4, #20
 800035c:	f1c4 0220 	rsb	r2, r4, #32
 8000360:	fa20 f004 	lsr.w	r0, r0, r4
 8000364:	fa01 f302 	lsl.w	r3, r1, r2
 8000368:	ea40 0003 	orr.w	r0, r0, r3
 800036c:	fa21 f304 	lsr.w	r3, r1, r4
 8000370:	ea45 0103 	orr.w	r1, r5, r3
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f1c4 040c 	rsb	r4, r4, #12
 800037a:	f1c4 0220 	rsb	r2, r4, #32
 800037e:	fa20 f002 	lsr.w	r0, r0, r2
 8000382:	fa01 f304 	lsl.w	r3, r1, r4
 8000386:	ea40 0003 	orr.w	r0, r0, r3
 800038a:	4629      	mov	r1, r5
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	fa21 f004 	lsr.w	r0, r1, r4
 8000392:	4629      	mov	r1, r5
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f094 0f00 	teq	r4, #0
 800039a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800039e:	bf06      	itte	eq
 80003a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003a4:	3401      	addeq	r4, #1
 80003a6:	3d01      	subne	r5, #1
 80003a8:	e74e      	b.n	8000248 <__adddf3+0x8c>
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf18      	it	ne
 80003b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b4:	d029      	beq.n	800040a <__adddf3+0x24e>
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	d005      	beq.n	80003ce <__adddf3+0x212>
 80003c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003c6:	bf04      	itt	eq
 80003c8:	4619      	moveq	r1, r3
 80003ca:	4610      	moveq	r0, r2
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea91 0f03 	teq	r1, r3
 80003d2:	bf1e      	ittt	ne
 80003d4:	2100      	movne	r1, #0
 80003d6:	2000      	movne	r0, #0
 80003d8:	bd30      	popne	{r4, r5, pc}
 80003da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003de:	d105      	bne.n	80003ec <__adddf3+0x230>
 80003e0:	0040      	lsls	r0, r0, #1
 80003e2:	4149      	adcs	r1, r1
 80003e4:	bf28      	it	cs
 80003e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ea:	bd30      	pop	{r4, r5, pc}
 80003ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003f0:	bf3c      	itt	cc
 80003f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003f6:	bd30      	popcc	{r4, r5, pc}
 80003f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000400:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000404:	f04f 0000 	mov.w	r0, #0
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf1a      	itte	ne
 8000410:	4619      	movne	r1, r3
 8000412:	4610      	movne	r0, r2
 8000414:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000418:	bf1c      	itt	ne
 800041a:	460b      	movne	r3, r1
 800041c:	4602      	movne	r2, r0
 800041e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000422:	bf06      	itte	eq
 8000424:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000428:	ea91 0f03 	teqeq	r1, r3
 800042c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	bf00      	nop

08000434 <__aeabi_ui2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f04f 0500 	mov.w	r5, #0
 800044c:	f04f 0100 	mov.w	r1, #0
 8000450:	e750      	b.n	80002f4 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_i2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800046c:	bf48      	it	mi
 800046e:	4240      	negmi	r0, r0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e73e      	b.n	80002f4 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_f2d>:
 8000478:	0042      	lsls	r2, r0, #1
 800047a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800047e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000482:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000486:	bf1f      	itttt	ne
 8000488:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800048c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000490:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000494:	4770      	bxne	lr
 8000496:	f092 0f00 	teq	r2, #0
 800049a:	bf14      	ite	ne
 800049c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a0:	4770      	bxeq	lr
 80004a2:	b530      	push	{r4, r5, lr}
 80004a4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	e720      	b.n	80002f4 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_ul2d>:
 80004b4:	ea50 0201 	orrs.w	r2, r0, r1
 80004b8:	bf08      	it	eq
 80004ba:	4770      	bxeq	lr
 80004bc:	b530      	push	{r4, r5, lr}
 80004be:	f04f 0500 	mov.w	r5, #0
 80004c2:	e00a      	b.n	80004da <__aeabi_l2d+0x16>

080004c4 <__aeabi_l2d>:
 80004c4:	ea50 0201 	orrs.w	r2, r0, r1
 80004c8:	bf08      	it	eq
 80004ca:	4770      	bxeq	lr
 80004cc:	b530      	push	{r4, r5, lr}
 80004ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004d2:	d502      	bpl.n	80004da <__aeabi_l2d+0x16>
 80004d4:	4240      	negs	r0, r0
 80004d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004de:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e6:	f43f aedc 	beq.w	80002a2 <__adddf3+0xe6>
 80004ea:	f04f 0203 	mov.w	r2, #3
 80004ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f2:	bf18      	it	ne
 80004f4:	3203      	addne	r2, #3
 80004f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004fa:	bf18      	it	ne
 80004fc:	3203      	addne	r2, #3
 80004fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000502:	f1c2 0320 	rsb	r3, r2, #32
 8000506:	fa00 fc03 	lsl.w	ip, r0, r3
 800050a:	fa20 f002 	lsr.w	r0, r0, r2
 800050e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000512:	ea40 000e 	orr.w	r0, r0, lr
 8000516:	fa21 f102 	lsr.w	r1, r1, r2
 800051a:	4414      	add	r4, r2
 800051c:	e6c1      	b.n	80002a2 <__adddf3+0xe6>
 800051e:	bf00      	nop

08000520 <__aeabi_dmul>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000526:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800052a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052e:	bf1d      	ittte	ne
 8000530:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000534:	ea94 0f0c 	teqne	r4, ip
 8000538:	ea95 0f0c 	teqne	r5, ip
 800053c:	f000 f8de 	bleq	80006fc <__aeabi_dmul+0x1dc>
 8000540:	442c      	add	r4, r5
 8000542:	ea81 0603 	eor.w	r6, r1, r3
 8000546:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800054a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000552:	bf18      	it	ne
 8000554:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000558:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800055c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000560:	d038      	beq.n	80005d4 <__aeabi_dmul+0xb4>
 8000562:	fba0 ce02 	umull	ip, lr, r0, r2
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000572:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000576:	f04f 0600 	mov.w	r6, #0
 800057a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057e:	f09c 0f00 	teq	ip, #0
 8000582:	bf18      	it	ne
 8000584:	f04e 0e01 	orrne.w	lr, lr, #1
 8000588:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800058c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000590:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000594:	d204      	bcs.n	80005a0 <__aeabi_dmul+0x80>
 8000596:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800059a:	416d      	adcs	r5, r5
 800059c:	eb46 0606 	adc.w	r6, r6, r6
 80005a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005b8:	bf88      	it	hi
 80005ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005be:	d81e      	bhi.n	80005fe <__aeabi_dmul+0xde>
 80005c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005c4:	bf08      	it	eq
 80005c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ca:	f150 0000 	adcs.w	r0, r0, #0
 80005ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005d8:	ea46 0101 	orr.w	r1, r6, r1
 80005dc:	ea40 0002 	orr.w	r0, r0, r2
 80005e0:	ea81 0103 	eor.w	r1, r1, r3
 80005e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e8:	bfc2      	ittt	gt
 80005ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	popgt	{r4, r5, r6, pc}
 80005f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f8:	f04f 0e00 	mov.w	lr, #0
 80005fc:	3c01      	subs	r4, #1
 80005fe:	f300 80ab 	bgt.w	8000758 <__aeabi_dmul+0x238>
 8000602:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000606:	bfde      	ittt	le
 8000608:	2000      	movle	r0, #0
 800060a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800060e:	bd70      	pople	{r4, r5, r6, pc}
 8000610:	f1c4 0400 	rsb	r4, r4, #0
 8000614:	3c20      	subs	r4, #32
 8000616:	da35      	bge.n	8000684 <__aeabi_dmul+0x164>
 8000618:	340c      	adds	r4, #12
 800061a:	dc1b      	bgt.n	8000654 <__aeabi_dmul+0x134>
 800061c:	f104 0414 	add.w	r4, r4, #20
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f305 	lsl.w	r3, r0, r5
 8000628:	fa20 f004 	lsr.w	r0, r0, r4
 800062c:	fa01 f205 	lsl.w	r2, r1, r5
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000638:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	fa21 f604 	lsr.w	r6, r1, r4
 8000644:	eb42 0106 	adc.w	r1, r2, r6
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 040c 	rsb	r4, r4, #12
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f304 	lsl.w	r3, r0, r4
 8000660:	fa20 f005 	lsr.w	r0, r0, r5
 8000664:	fa01 f204 	lsl.w	r2, r1, r4
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000674:	f141 0100 	adc.w	r1, r1, #0
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f205 	lsl.w	r2, r0, r5
 800068c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000690:	fa20 f304 	lsr.w	r3, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea43 0302 	orr.w	r3, r3, r2
 800069c:	fa21 f004 	lsr.w	r0, r1, r4
 80006a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	fa21 f204 	lsr.w	r2, r1, r4
 80006a8:	ea20 0002 	bic.w	r0, r0, r2
 80006ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f094 0f00 	teq	r4, #0
 80006c0:	d10f      	bne.n	80006e2 <__aeabi_dmul+0x1c2>
 80006c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006c6:	0040      	lsls	r0, r0, #1
 80006c8:	eb41 0101 	adc.w	r1, r1, r1
 80006cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3c01      	subeq	r4, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1a6>
 80006d6:	ea41 0106 	orr.w	r1, r1, r6
 80006da:	f095 0f00 	teq	r5, #0
 80006de:	bf18      	it	ne
 80006e0:	4770      	bxne	lr
 80006e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006e6:	0052      	lsls	r2, r2, #1
 80006e8:	eb43 0303 	adc.w	r3, r3, r3
 80006ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3d01      	subeq	r5, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1c6>
 80006f6:	ea43 0306 	orr.w	r3, r3, r6
 80006fa:	4770      	bx	lr
 80006fc:	ea94 0f0c 	teq	r4, ip
 8000700:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000704:	bf18      	it	ne
 8000706:	ea95 0f0c 	teqne	r5, ip
 800070a:	d00c      	beq.n	8000726 <__aeabi_dmul+0x206>
 800070c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000710:	bf18      	it	ne
 8000712:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000716:	d1d1      	bne.n	80006bc <__aeabi_dmul+0x19c>
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800072a:	bf06      	itte	eq
 800072c:	4610      	moveq	r0, r2
 800072e:	4619      	moveq	r1, r3
 8000730:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000734:	d019      	beq.n	800076a <__aeabi_dmul+0x24a>
 8000736:	ea94 0f0c 	teq	r4, ip
 800073a:	d102      	bne.n	8000742 <__aeabi_dmul+0x222>
 800073c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000740:	d113      	bne.n	800076a <__aeabi_dmul+0x24a>
 8000742:	ea95 0f0c 	teq	r5, ip
 8000746:	d105      	bne.n	8000754 <__aeabi_dmul+0x234>
 8000748:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800074c:	bf1c      	itt	ne
 800074e:	4610      	movne	r0, r2
 8000750:	4619      	movne	r1, r3
 8000752:	d10a      	bne.n	800076a <__aeabi_dmul+0x24a>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000760:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800076e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000772:	bd70      	pop	{r4, r5, r6, pc}

08000774 <__aeabi_ddiv>:
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800077a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000782:	bf1d      	ittte	ne
 8000784:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000788:	ea94 0f0c 	teqne	r4, ip
 800078c:	ea95 0f0c 	teqne	r5, ip
 8000790:	f000 f8a7 	bleq	80008e2 <__aeabi_ddiv+0x16e>
 8000794:	eba4 0405 	sub.w	r4, r4, r5
 8000798:	ea81 0e03 	eor.w	lr, r1, r3
 800079c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a4:	f000 8088 	beq.w	80008b8 <__aeabi_ddiv+0x144>
 80007a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007cc:	429d      	cmp	r5, r3
 80007ce:	bf08      	it	eq
 80007d0:	4296      	cmpeq	r6, r2
 80007d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007da:	d202      	bcs.n	80007e2 <__aeabi_ddiv+0x6e>
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	1ab6      	subs	r6, r6, r2
 80007e4:	eb65 0503 	sbc.w	r5, r5, r3
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 000c 	orrcs.w	r0, r0, ip
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000850:	ea55 0e06 	orrs.w	lr, r5, r6
 8000854:	d018      	beq.n	8000888 <__aeabi_ddiv+0x114>
 8000856:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800085a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000862:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000866:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800086a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000872:	d1c0      	bne.n	80007f6 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	d10b      	bne.n	8000892 <__aeabi_ddiv+0x11e>
 800087a:	ea41 0100 	orr.w	r1, r1, r0
 800087e:	f04f 0000 	mov.w	r0, #0
 8000882:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000886:	e7b6      	b.n	80007f6 <__aeabi_ddiv+0x82>
 8000888:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800088c:	bf04      	itt	eq
 800088e:	4301      	orreq	r1, r0
 8000890:	2000      	moveq	r0, #0
 8000892:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000896:	bf88      	it	hi
 8000898:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800089c:	f63f aeaf 	bhi.w	80005fe <__aeabi_dmul+0xde>
 80008a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a4:	bf04      	itt	eq
 80008a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ae:	f150 0000 	adcs.w	r0, r0, #0
 80008b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	pop	{r4, r5, r6, pc}
 80008b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c4:	bfc2      	ittt	gt
 80008c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	popgt	{r4, r5, r6, pc}
 80008d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d4:	f04f 0e00 	mov.w	lr, #0
 80008d8:	3c01      	subs	r4, #1
 80008da:	e690      	b.n	80005fe <__aeabi_dmul+0xde>
 80008dc:	ea45 0e06 	orr.w	lr, r5, r6
 80008e0:	e68d      	b.n	80005fe <__aeabi_dmul+0xde>
 80008e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e6:	ea94 0f0c 	teq	r4, ip
 80008ea:	bf08      	it	eq
 80008ec:	ea95 0f0c 	teqeq	r5, ip
 80008f0:	f43f af3b 	beq.w	800076a <__aeabi_dmul+0x24a>
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	d10a      	bne.n	8000910 <__aeabi_ddiv+0x19c>
 80008fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fe:	f47f af34 	bne.w	800076a <__aeabi_dmul+0x24a>
 8000902:	ea95 0f0c 	teq	r5, ip
 8000906:	f47f af25 	bne.w	8000754 <__aeabi_dmul+0x234>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e72c      	b.n	800076a <__aeabi_dmul+0x24a>
 8000910:	ea95 0f0c 	teq	r5, ip
 8000914:	d106      	bne.n	8000924 <__aeabi_ddiv+0x1b0>
 8000916:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800091a:	f43f aefd 	beq.w	8000718 <__aeabi_dmul+0x1f8>
 800091e:	4610      	mov	r0, r2
 8000920:	4619      	mov	r1, r3
 8000922:	e722      	b.n	800076a <__aeabi_dmul+0x24a>
 8000924:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000928:	bf18      	it	ne
 800092a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092e:	f47f aec5 	bne.w	80006bc <__aeabi_dmul+0x19c>
 8000932:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000936:	f47f af0d 	bne.w	8000754 <__aeabi_dmul+0x234>
 800093a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093e:	f47f aeeb 	bne.w	8000718 <__aeabi_dmul+0x1f8>
 8000942:	e712      	b.n	800076a <__aeabi_dmul+0x24a>

08000944 <__aeabi_d2uiz>:
 8000944:	004a      	lsls	r2, r1, #1
 8000946:	d211      	bcs.n	800096c <__aeabi_d2uiz+0x28>
 8000948:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800094c:	d211      	bcs.n	8000972 <__aeabi_d2uiz+0x2e>
 800094e:	d50d      	bpl.n	800096c <__aeabi_d2uiz+0x28>
 8000950:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000954:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000958:	d40e      	bmi.n	8000978 <__aeabi_d2uiz+0x34>
 800095a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800095e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000962:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000966:	fa23 f002 	lsr.w	r0, r3, r2
 800096a:	4770      	bx	lr
 800096c:	f04f 0000 	mov.w	r0, #0
 8000970:	4770      	bx	lr
 8000972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000976:	d102      	bne.n	800097e <__aeabi_d2uiz+0x3a>
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	4770      	bx	lr
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	4770      	bx	lr

08000984 <__aeabi_d2f>:
 8000984:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000988:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800098c:	bf24      	itt	cs
 800098e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000992:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000996:	d90d      	bls.n	80009b4 <__aeabi_d2f+0x30>
 8000998:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800099c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ac:	bf08      	it	eq
 80009ae:	f020 0001 	biceq.w	r0, r0, #1
 80009b2:	4770      	bx	lr
 80009b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b8:	d121      	bne.n	80009fe <__aeabi_d2f+0x7a>
 80009ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009be:	bfbc      	itt	lt
 80009c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009c4:	4770      	bxlt	lr
 80009c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ce:	f1c2 0218 	rsb	r2, r2, #24
 80009d2:	f1c2 0c20 	rsb	ip, r2, #32
 80009d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009da:	fa20 f002 	lsr.w	r0, r0, r2
 80009de:	bf18      	it	ne
 80009e0:	f040 0001 	orrne.w	r0, r0, #1
 80009e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f0:	ea40 000c 	orr.w	r0, r0, ip
 80009f4:	fa23 f302 	lsr.w	r3, r3, r2
 80009f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009fc:	e7cc      	b.n	8000998 <__aeabi_d2f+0x14>
 80009fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a02:	d107      	bne.n	8000a14 <__aeabi_d2f+0x90>
 8000a04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a08:	bf1e      	ittt	ne
 8000a0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a12:	4770      	bxne	lr
 8000a14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_frsub>:
 8000a24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a28:	e002      	b.n	8000a30 <__addsf3>
 8000a2a:	bf00      	nop

08000a2c <__aeabi_fsub>:
 8000a2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a30 <__addsf3>:
 8000a30:	0042      	lsls	r2, r0, #1
 8000a32:	bf1f      	itttt	ne
 8000a34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a38:	ea92 0f03 	teqne	r2, r3
 8000a3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a44:	d06a      	beq.n	8000b1c <__addsf3+0xec>
 8000a46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a4e:	bfc1      	itttt	gt
 8000a50:	18d2      	addgt	r2, r2, r3
 8000a52:	4041      	eorgt	r1, r0
 8000a54:	4048      	eorgt	r0, r1
 8000a56:	4041      	eorgt	r1, r0
 8000a58:	bfb8      	it	lt
 8000a5a:	425b      	neglt	r3, r3
 8000a5c:	2b19      	cmp	r3, #25
 8000a5e:	bf88      	it	hi
 8000a60:	4770      	bxhi	lr
 8000a62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a6e:	bf18      	it	ne
 8000a70:	4240      	negne	r0, r0
 8000a72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a7e:	bf18      	it	ne
 8000a80:	4249      	negne	r1, r1
 8000a82:	ea92 0f03 	teq	r2, r3
 8000a86:	d03f      	beq.n	8000b08 <__addsf3+0xd8>
 8000a88:	f1a2 0201 	sub.w	r2, r2, #1
 8000a8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a90:	eb10 000c 	adds.w	r0, r0, ip
 8000a94:	f1c3 0320 	rsb	r3, r3, #32
 8000a98:	fa01 f103 	lsl.w	r1, r1, r3
 8000a9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aa0:	d502      	bpl.n	8000aa8 <__addsf3+0x78>
 8000aa2:	4249      	negs	r1, r1
 8000aa4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aa8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000aac:	d313      	bcc.n	8000ad6 <__addsf3+0xa6>
 8000aae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ab2:	d306      	bcc.n	8000ac2 <__addsf3+0x92>
 8000ab4:	0840      	lsrs	r0, r0, #1
 8000ab6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aba:	f102 0201 	add.w	r2, r2, #1
 8000abe:	2afe      	cmp	r2, #254	; 0xfe
 8000ac0:	d251      	bcs.n	8000b66 <__addsf3+0x136>
 8000ac2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ac6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aca:	bf08      	it	eq
 8000acc:	f020 0001 	biceq.w	r0, r0, #1
 8000ad0:	ea40 0003 	orr.w	r0, r0, r3
 8000ad4:	4770      	bx	lr
 8000ad6:	0049      	lsls	r1, r1, #1
 8000ad8:	eb40 0000 	adc.w	r0, r0, r0
 8000adc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ae0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ae4:	d1ed      	bne.n	8000ac2 <__addsf3+0x92>
 8000ae6:	fab0 fc80 	clz	ip, r0
 8000aea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aee:	ebb2 020c 	subs.w	r2, r2, ip
 8000af2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000af6:	bfaa      	itet	ge
 8000af8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000afc:	4252      	neglt	r2, r2
 8000afe:	4318      	orrge	r0, r3
 8000b00:	bfbc      	itt	lt
 8000b02:	40d0      	lsrlt	r0, r2
 8000b04:	4318      	orrlt	r0, r3
 8000b06:	4770      	bx	lr
 8000b08:	f092 0f00 	teq	r2, #0
 8000b0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b10:	bf06      	itte	eq
 8000b12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b16:	3201      	addeq	r2, #1
 8000b18:	3b01      	subne	r3, #1
 8000b1a:	e7b5      	b.n	8000a88 <__addsf3+0x58>
 8000b1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b24:	bf18      	it	ne
 8000b26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b2a:	d021      	beq.n	8000b70 <__addsf3+0x140>
 8000b2c:	ea92 0f03 	teq	r2, r3
 8000b30:	d004      	beq.n	8000b3c <__addsf3+0x10c>
 8000b32:	f092 0f00 	teq	r2, #0
 8000b36:	bf08      	it	eq
 8000b38:	4608      	moveq	r0, r1
 8000b3a:	4770      	bx	lr
 8000b3c:	ea90 0f01 	teq	r0, r1
 8000b40:	bf1c      	itt	ne
 8000b42:	2000      	movne	r0, #0
 8000b44:	4770      	bxne	lr
 8000b46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b4a:	d104      	bne.n	8000b56 <__addsf3+0x126>
 8000b4c:	0040      	lsls	r0, r0, #1
 8000b4e:	bf28      	it	cs
 8000b50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	4770      	bx	lr
 8000b56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b5a:	bf3c      	itt	cc
 8000b5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bxcc	lr
 8000b62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	4770      	bx	lr
 8000b70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b74:	bf16      	itet	ne
 8000b76:	4608      	movne	r0, r1
 8000b78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b7c:	4601      	movne	r1, r0
 8000b7e:	0242      	lsls	r2, r0, #9
 8000b80:	bf06      	itte	eq
 8000b82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b86:	ea90 0f01 	teqeq	r0, r1
 8000b8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_ui2f>:
 8000b90:	f04f 0300 	mov.w	r3, #0
 8000b94:	e004      	b.n	8000ba0 <__aeabi_i2f+0x8>
 8000b96:	bf00      	nop

08000b98 <__aeabi_i2f>:
 8000b98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b9c:	bf48      	it	mi
 8000b9e:	4240      	negmi	r0, r0
 8000ba0:	ea5f 0c00 	movs.w	ip, r0
 8000ba4:	bf08      	it	eq
 8000ba6:	4770      	bxeq	lr
 8000ba8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bac:	4601      	mov	r1, r0
 8000bae:	f04f 0000 	mov.w	r0, #0
 8000bb2:	e01c      	b.n	8000bee <__aeabi_l2f+0x2a>

08000bb4 <__aeabi_ul2f>:
 8000bb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb8:	bf08      	it	eq
 8000bba:	4770      	bxeq	lr
 8000bbc:	f04f 0300 	mov.w	r3, #0
 8000bc0:	e00a      	b.n	8000bd8 <__aeabi_l2f+0x14>
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_l2f>:
 8000bc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bc8:	bf08      	it	eq
 8000bca:	4770      	bxeq	lr
 8000bcc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bd0:	d502      	bpl.n	8000bd8 <__aeabi_l2f+0x14>
 8000bd2:	4240      	negs	r0, r0
 8000bd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd8:	ea5f 0c01 	movs.w	ip, r1
 8000bdc:	bf02      	ittt	eq
 8000bde:	4684      	moveq	ip, r0
 8000be0:	4601      	moveq	r1, r0
 8000be2:	2000      	moveq	r0, #0
 8000be4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000be8:	bf08      	it	eq
 8000bea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bf2:	fabc f28c 	clz	r2, ip
 8000bf6:	3a08      	subs	r2, #8
 8000bf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bfc:	db10      	blt.n	8000c20 <__aeabi_l2f+0x5c>
 8000bfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c02:	4463      	add	r3, ip
 8000c04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c08:	f1c2 0220 	rsb	r2, r2, #32
 8000c0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c10:	fa20 f202 	lsr.w	r2, r0, r2
 8000c14:	eb43 0002 	adc.w	r0, r3, r2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f102 0220 	add.w	r2, r2, #32
 8000c24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c28:	f1c2 0220 	rsb	r2, r2, #32
 8000c2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c30:	fa21 f202 	lsr.w	r2, r1, r2
 8000c34:	eb43 0002 	adc.w	r0, r3, r2
 8000c38:	bf08      	it	eq
 8000c3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c3e:	4770      	bx	lr

08000c40 <__aeabi_fmul>:
 8000c40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c48:	bf1e      	ittt	ne
 8000c4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c4e:	ea92 0f0c 	teqne	r2, ip
 8000c52:	ea93 0f0c 	teqne	r3, ip
 8000c56:	d06f      	beq.n	8000d38 <__aeabi_fmul+0xf8>
 8000c58:	441a      	add	r2, r3
 8000c5a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c5e:	0240      	lsls	r0, r0, #9
 8000c60:	bf18      	it	ne
 8000c62:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c66:	d01e      	beq.n	8000ca6 <__aeabi_fmul+0x66>
 8000c68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c6c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c70:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c74:	fba0 3101 	umull	r3, r1, r0, r1
 8000c78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c7c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c80:	bf3e      	ittt	cc
 8000c82:	0049      	lslcc	r1, r1, #1
 8000c84:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c88:	005b      	lslcc	r3, r3, #1
 8000c8a:	ea40 0001 	orr.w	r0, r0, r1
 8000c8e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c92:	2afd      	cmp	r2, #253	; 0xfd
 8000c94:	d81d      	bhi.n	8000cd2 <__aeabi_fmul+0x92>
 8000c96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	4770      	bx	lr
 8000ca6:	f090 0f00 	teq	r0, #0
 8000caa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cae:	bf08      	it	eq
 8000cb0:	0249      	lsleq	r1, r1, #9
 8000cb2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cb6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cba:	3a7f      	subs	r2, #127	; 0x7f
 8000cbc:	bfc2      	ittt	gt
 8000cbe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cc2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cc6:	4770      	bxgt	lr
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	3a01      	subs	r2, #1
 8000cd2:	dc5d      	bgt.n	8000d90 <__aeabi_fmul+0x150>
 8000cd4:	f112 0f19 	cmn.w	r2, #25
 8000cd8:	bfdc      	itt	le
 8000cda:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cde:	4770      	bxle	lr
 8000ce0:	f1c2 0200 	rsb	r2, r2, #0
 8000ce4:	0041      	lsls	r1, r0, #1
 8000ce6:	fa21 f102 	lsr.w	r1, r1, r2
 8000cea:	f1c2 0220 	rsb	r2, r2, #32
 8000cee:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cf6:	f140 0000 	adc.w	r0, r0, #0
 8000cfa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cfe:	bf08      	it	eq
 8000d00:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d04:	4770      	bx	lr
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d0e:	bf02      	ittt	eq
 8000d10:	0040      	lsleq	r0, r0, #1
 8000d12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d16:	3a01      	subeq	r2, #1
 8000d18:	d0f9      	beq.n	8000d0e <__aeabi_fmul+0xce>
 8000d1a:	ea40 000c 	orr.w	r0, r0, ip
 8000d1e:	f093 0f00 	teq	r3, #0
 8000d22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d26:	bf02      	ittt	eq
 8000d28:	0049      	lsleq	r1, r1, #1
 8000d2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d2e:	3b01      	subeq	r3, #1
 8000d30:	d0f9      	beq.n	8000d26 <__aeabi_fmul+0xe6>
 8000d32:	ea41 010c 	orr.w	r1, r1, ip
 8000d36:	e78f      	b.n	8000c58 <__aeabi_fmul+0x18>
 8000d38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d3c:	ea92 0f0c 	teq	r2, ip
 8000d40:	bf18      	it	ne
 8000d42:	ea93 0f0c 	teqne	r3, ip
 8000d46:	d00a      	beq.n	8000d5e <__aeabi_fmul+0x11e>
 8000d48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d4c:	bf18      	it	ne
 8000d4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d52:	d1d8      	bne.n	8000d06 <__aeabi_fmul+0xc6>
 8000d54:	ea80 0001 	eor.w	r0, r0, r1
 8000d58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d5c:	4770      	bx	lr
 8000d5e:	f090 0f00 	teq	r0, #0
 8000d62:	bf17      	itett	ne
 8000d64:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d68:	4608      	moveq	r0, r1
 8000d6a:	f091 0f00 	teqne	r1, #0
 8000d6e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d72:	d014      	beq.n	8000d9e <__aeabi_fmul+0x15e>
 8000d74:	ea92 0f0c 	teq	r2, ip
 8000d78:	d101      	bne.n	8000d7e <__aeabi_fmul+0x13e>
 8000d7a:	0242      	lsls	r2, r0, #9
 8000d7c:	d10f      	bne.n	8000d9e <__aeabi_fmul+0x15e>
 8000d7e:	ea93 0f0c 	teq	r3, ip
 8000d82:	d103      	bne.n	8000d8c <__aeabi_fmul+0x14c>
 8000d84:	024b      	lsls	r3, r1, #9
 8000d86:	bf18      	it	ne
 8000d88:	4608      	movne	r0, r1
 8000d8a:	d108      	bne.n	8000d9e <__aeabi_fmul+0x15e>
 8000d8c:	ea80 0001 	eor.w	r0, r0, r1
 8000d90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d9c:	4770      	bx	lr
 8000d9e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000da6:	4770      	bx	lr

08000da8 <__aeabi_fdiv>:
 8000da8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000db0:	bf1e      	ittt	ne
 8000db2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000db6:	ea92 0f0c 	teqne	r2, ip
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d069      	beq.n	8000e94 <__aeabi_fdiv+0xec>
 8000dc0:	eba2 0203 	sub.w	r2, r2, r3
 8000dc4:	ea80 0c01 	eor.w	ip, r0, r1
 8000dc8:	0249      	lsls	r1, r1, #9
 8000dca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dce:	d037      	beq.n	8000e40 <__aeabi_fdiv+0x98>
 8000dd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dd4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000dd8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ddc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de0:	428b      	cmp	r3, r1
 8000de2:	bf38      	it	cc
 8000de4:	005b      	lslcc	r3, r3, #1
 8000de6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dee:	428b      	cmp	r3, r1
 8000df0:	bf24      	itt	cs
 8000df2:	1a5b      	subcs	r3, r3, r1
 8000df4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000df8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dfc:	bf24      	itt	cs
 8000dfe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e02:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e06:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e0a:	bf24      	itt	cs
 8000e0c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e14:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e18:	bf24      	itt	cs
 8000e1a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e1e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e22:	011b      	lsls	r3, r3, #4
 8000e24:	bf18      	it	ne
 8000e26:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e2a:	d1e0      	bne.n	8000dee <__aeabi_fdiv+0x46>
 8000e2c:	2afd      	cmp	r2, #253	; 0xfd
 8000e2e:	f63f af50 	bhi.w	8000cd2 <__aeabi_fmul+0x92>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e38:	bf08      	it	eq
 8000e3a:	f020 0001 	biceq.w	r0, r0, #1
 8000e3e:	4770      	bx	lr
 8000e40:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e44:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e48:	327f      	adds	r2, #127	; 0x7f
 8000e4a:	bfc2      	ittt	gt
 8000e4c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e50:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e54:	4770      	bxgt	lr
 8000e56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	3a01      	subs	r2, #1
 8000e60:	e737      	b.n	8000cd2 <__aeabi_fmul+0x92>
 8000e62:	f092 0f00 	teq	r2, #0
 8000e66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0040      	lsleq	r0, r0, #1
 8000e6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e72:	3a01      	subeq	r2, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fdiv+0xc2>
 8000e76:	ea40 000c 	orr.w	r0, r0, ip
 8000e7a:	f093 0f00 	teq	r3, #0
 8000e7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0049      	lsleq	r1, r1, #1
 8000e86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e8a:	3b01      	subeq	r3, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fdiv+0xda>
 8000e8e:	ea41 010c 	orr.w	r1, r1, ip
 8000e92:	e795      	b.n	8000dc0 <__aeabi_fdiv+0x18>
 8000e94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e98:	ea92 0f0c 	teq	r2, ip
 8000e9c:	d108      	bne.n	8000eb0 <__aeabi_fdiv+0x108>
 8000e9e:	0242      	lsls	r2, r0, #9
 8000ea0:	f47f af7d 	bne.w	8000d9e <__aeabi_fmul+0x15e>
 8000ea4:	ea93 0f0c 	teq	r3, ip
 8000ea8:	f47f af70 	bne.w	8000d8c <__aeabi_fmul+0x14c>
 8000eac:	4608      	mov	r0, r1
 8000eae:	e776      	b.n	8000d9e <__aeabi_fmul+0x15e>
 8000eb0:	ea93 0f0c 	teq	r3, ip
 8000eb4:	d104      	bne.n	8000ec0 <__aeabi_fdiv+0x118>
 8000eb6:	024b      	lsls	r3, r1, #9
 8000eb8:	f43f af4c 	beq.w	8000d54 <__aeabi_fmul+0x114>
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	e76e      	b.n	8000d9e <__aeabi_fmul+0x15e>
 8000ec0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec4:	bf18      	it	ne
 8000ec6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eca:	d1ca      	bne.n	8000e62 <__aeabi_fdiv+0xba>
 8000ecc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ed0:	f47f af5c 	bne.w	8000d8c <__aeabi_fmul+0x14c>
 8000ed4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ed8:	f47f af3c 	bne.w	8000d54 <__aeabi_fmul+0x114>
 8000edc:	e75f      	b.n	8000d9e <__aeabi_fmul+0x15e>
 8000ede:	bf00      	nop

08000ee0 <memcpy>:
 8000ee0:	4684      	mov	ip, r0
 8000ee2:	ea41 0300 	orr.w	r3, r1, r0
 8000ee6:	f013 0303 	ands.w	r3, r3, #3
 8000eea:	d16d      	bne.n	8000fc8 <memcpy+0xe8>
 8000eec:	3a40      	subs	r2, #64	; 0x40
 8000eee:	d341      	bcc.n	8000f74 <memcpy+0x94>
 8000ef0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ef4:	f840 3b04 	str.w	r3, [r0], #4
 8000ef8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000efc:	f840 3b04 	str.w	r3, [r0], #4
 8000f00:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f04:	f840 3b04 	str.w	r3, [r0], #4
 8000f08:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f0c:	f840 3b04 	str.w	r3, [r0], #4
 8000f10:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f14:	f840 3b04 	str.w	r3, [r0], #4
 8000f18:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f1c:	f840 3b04 	str.w	r3, [r0], #4
 8000f20:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f24:	f840 3b04 	str.w	r3, [r0], #4
 8000f28:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f2c:	f840 3b04 	str.w	r3, [r0], #4
 8000f30:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f34:	f840 3b04 	str.w	r3, [r0], #4
 8000f38:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f3c:	f840 3b04 	str.w	r3, [r0], #4
 8000f40:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f44:	f840 3b04 	str.w	r3, [r0], #4
 8000f48:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f4c:	f840 3b04 	str.w	r3, [r0], #4
 8000f50:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f54:	f840 3b04 	str.w	r3, [r0], #4
 8000f58:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f5c:	f840 3b04 	str.w	r3, [r0], #4
 8000f60:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f64:	f840 3b04 	str.w	r3, [r0], #4
 8000f68:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f6c:	f840 3b04 	str.w	r3, [r0], #4
 8000f70:	3a40      	subs	r2, #64	; 0x40
 8000f72:	d2bd      	bcs.n	8000ef0 <memcpy+0x10>
 8000f74:	3230      	adds	r2, #48	; 0x30
 8000f76:	d311      	bcc.n	8000f9c <memcpy+0xbc>
 8000f78:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f7c:	f840 3b04 	str.w	r3, [r0], #4
 8000f80:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f84:	f840 3b04 	str.w	r3, [r0], #4
 8000f88:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f8c:	f840 3b04 	str.w	r3, [r0], #4
 8000f90:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f94:	f840 3b04 	str.w	r3, [r0], #4
 8000f98:	3a10      	subs	r2, #16
 8000f9a:	d2ed      	bcs.n	8000f78 <memcpy+0x98>
 8000f9c:	320c      	adds	r2, #12
 8000f9e:	d305      	bcc.n	8000fac <memcpy+0xcc>
 8000fa0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000fa4:	f840 3b04 	str.w	r3, [r0], #4
 8000fa8:	3a04      	subs	r2, #4
 8000faa:	d2f9      	bcs.n	8000fa0 <memcpy+0xc0>
 8000fac:	3204      	adds	r2, #4
 8000fae:	d008      	beq.n	8000fc2 <memcpy+0xe2>
 8000fb0:	07d2      	lsls	r2, r2, #31
 8000fb2:	bf1c      	itt	ne
 8000fb4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000fb8:	f800 3b01 	strbne.w	r3, [r0], #1
 8000fbc:	d301      	bcc.n	8000fc2 <memcpy+0xe2>
 8000fbe:	880b      	ldrh	r3, [r1, #0]
 8000fc0:	8003      	strh	r3, [r0, #0]
 8000fc2:	4660      	mov	r0, ip
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	2a08      	cmp	r2, #8
 8000fca:	d313      	bcc.n	8000ff4 <memcpy+0x114>
 8000fcc:	078b      	lsls	r3, r1, #30
 8000fce:	d08d      	beq.n	8000eec <memcpy+0xc>
 8000fd0:	f010 0303 	ands.w	r3, r0, #3
 8000fd4:	d08a      	beq.n	8000eec <memcpy+0xc>
 8000fd6:	f1c3 0304 	rsb	r3, r3, #4
 8000fda:	1ad2      	subs	r2, r2, r3
 8000fdc:	07db      	lsls	r3, r3, #31
 8000fde:	bf1c      	itt	ne
 8000fe0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000fe4:	f800 3b01 	strbne.w	r3, [r0], #1
 8000fe8:	d380      	bcc.n	8000eec <memcpy+0xc>
 8000fea:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000fee:	f820 3b02 	strh.w	r3, [r0], #2
 8000ff2:	e77b      	b.n	8000eec <memcpy+0xc>
 8000ff4:	3a04      	subs	r2, #4
 8000ff6:	d3d9      	bcc.n	8000fac <memcpy+0xcc>
 8000ff8:	3a01      	subs	r2, #1
 8000ffa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ffe:	f800 3b01 	strb.w	r3, [r0], #1
 8001002:	d2f9      	bcs.n	8000ff8 <memcpy+0x118>
 8001004:	780b      	ldrb	r3, [r1, #0]
 8001006:	7003      	strb	r3, [r0, #0]
 8001008:	784b      	ldrb	r3, [r1, #1]
 800100a:	7043      	strb	r3, [r0, #1]
 800100c:	788b      	ldrb	r3, [r1, #2]
 800100e:	7083      	strb	r3, [r0, #2]
 8001010:	4660      	mov	r0, ip
 8001012:	4770      	bx	lr

08001014 <__gedf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpdf2+0x4>
 800101a:	bf00      	nop

0800101c <__ledf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpdf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpdf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001030:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001034:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001038:	bf18      	it	ne
 800103a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800103e:	d01b      	beq.n	8001078 <__cmpdf2+0x54>
 8001040:	b001      	add	sp, #4
 8001042:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8001046:	bf0c      	ite	eq
 8001048:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800104c:	ea91 0f03 	teqne	r1, r3
 8001050:	bf02      	ittt	eq
 8001052:	ea90 0f02 	teqeq	r0, r2
 8001056:	2000      	moveq	r0, #0
 8001058:	4770      	bxeq	lr
 800105a:	f110 0f00 	cmn.w	r0, #0
 800105e:	ea91 0f03 	teq	r1, r3
 8001062:	bf58      	it	pl
 8001064:	4299      	cmppl	r1, r3
 8001066:	bf08      	it	eq
 8001068:	4290      	cmpeq	r0, r2
 800106a:	bf2c      	ite	cs
 800106c:	17d8      	asrcs	r0, r3, #31
 800106e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8001072:	f040 0001 	orr.w	r0, r0, #1
 8001076:	4770      	bx	lr
 8001078:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800107c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001080:	d102      	bne.n	8001088 <__cmpdf2+0x64>
 8001082:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8001086:	d107      	bne.n	8001098 <__cmpdf2+0x74>
 8001088:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800108c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001090:	d1d6      	bne.n	8001040 <__cmpdf2+0x1c>
 8001092:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8001096:	d0d3      	beq.n	8001040 <__cmpdf2+0x1c>
 8001098:	f85d 0b04 	ldr.w	r0, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <__aeabi_cdrcmple>:
 80010a0:	4684      	mov	ip, r0
 80010a2:	4610      	mov	r0, r2
 80010a4:	4662      	mov	r2, ip
 80010a6:	468c      	mov	ip, r1
 80010a8:	4619      	mov	r1, r3
 80010aa:	4663      	mov	r3, ip
 80010ac:	e000      	b.n	80010b0 <__aeabi_cdcmpeq>
 80010ae:	bf00      	nop

080010b0 <__aeabi_cdcmpeq>:
 80010b0:	b501      	push	{r0, lr}
 80010b2:	f7ff ffb7 	bl	8001024 <__cmpdf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd01      	pop	{r0, pc}

080010c0 <__aeabi_dcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cdcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_dcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cdcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_dcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cdcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_dcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffce 	bl	80010a0 <__aeabi_cdrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_dcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc4 	bl	80010a0 <__aeabi_cdrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_d2iz>:
 8001124:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8001128:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800112c:	d215      	bcs.n	800115a <__aeabi_d2iz+0x36>
 800112e:	d511      	bpl.n	8001154 <__aeabi_d2iz+0x30>
 8001130:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001134:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001138:	d912      	bls.n	8001160 <__aeabi_d2iz+0x3c>
 800113a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800113e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001142:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001146:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800114a:	fa23 f002 	lsr.w	r0, r3, r2
 800114e:	bf18      	it	ne
 8001150:	4240      	negne	r0, r0
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800115e:	d105      	bne.n	800116c <__aeabi_d2iz+0x48>
 8001160:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8001164:	bf08      	it	eq
 8001166:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800116a:	4770      	bx	lr
 800116c:	f04f 0000 	mov.w	r0, #0
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop

08001174 <__aeabi_uldivmod>:
 8001174:	b94b      	cbnz	r3, 800118a <__aeabi_uldivmod+0x16>
 8001176:	b942      	cbnz	r2, 800118a <__aeabi_uldivmod+0x16>
 8001178:	2900      	cmp	r1, #0
 800117a:	bf08      	it	eq
 800117c:	2800      	cmpeq	r0, #0
 800117e:	d002      	beq.n	8001186 <__aeabi_uldivmod+0x12>
 8001180:	f04f 31ff 	mov.w	r1, #4294967295
 8001184:	4608      	mov	r0, r1
 8001186:	f000 b83b 	b.w	8001200 <__aeabi_idiv0>
 800118a:	b082      	sub	sp, #8
 800118c:	46ec      	mov	ip, sp
 800118e:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001192:	f000 f81d 	bl	80011d0 <__gnu_uldivmod_helper>
 8001196:	f8dd e004 	ldr.w	lr, [sp, #4]
 800119a:	b002      	add	sp, #8
 800119c:	bc0c      	pop	{r2, r3}
 800119e:	4770      	bx	lr

080011a0 <__gnu_ldivmod_helper>:
 80011a0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80011a4:	9e06      	ldr	r6, [sp, #24]
 80011a6:	4614      	mov	r4, r2
 80011a8:	461d      	mov	r5, r3
 80011aa:	4680      	mov	r8, r0
 80011ac:	4689      	mov	r9, r1
 80011ae:	f000 f829 	bl	8001204 <__divdi3>
 80011b2:	fb04 f301 	mul.w	r3, r4, r1
 80011b6:	fb00 3305 	mla	r3, r0, r5, r3
 80011ba:	fba4 4500 	umull	r4, r5, r4, r0
 80011be:	441d      	add	r5, r3
 80011c0:	ebb8 0404 	subs.w	r4, r8, r4
 80011c4:	eb69 0505 	sbc.w	r5, r9, r5
 80011c8:	e9c6 4500 	strd	r4, r5, [r6]
 80011cc:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

080011d0 <__gnu_uldivmod_helper>:
 80011d0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80011d4:	9e06      	ldr	r6, [sp, #24]
 80011d6:	4614      	mov	r4, r2
 80011d8:	4680      	mov	r8, r0
 80011da:	4689      	mov	r9, r1
 80011dc:	461d      	mov	r5, r3
 80011de:	f000 f95d 	bl	800149c <__udivdi3>
 80011e2:	fb00 f505 	mul.w	r5, r0, r5
 80011e6:	fb04 5301 	mla	r3, r4, r1, r5
 80011ea:	fba0 4504 	umull	r4, r5, r0, r4
 80011ee:	441d      	add	r5, r3
 80011f0:	ebb8 0404 	subs.w	r4, r8, r4
 80011f4:	eb69 0505 	sbc.w	r5, r9, r5
 80011f8:	e9c6 4500 	strd	r4, r5, [r6]
 80011fc:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08001200 <__aeabi_idiv0>:
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop

08001204 <__divdi3>:
 8001204:	2900      	cmp	r1, #0
 8001206:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800120a:	f2c0 809f 	blt.w	800134c <__divdi3+0x148>
 800120e:	2400      	movs	r4, #0
 8001210:	2b00      	cmp	r3, #0
 8001212:	f2c0 8096 	blt.w	8001342 <__divdi3+0x13e>
 8001216:	4615      	mov	r5, r2
 8001218:	4606      	mov	r6, r0
 800121a:	460f      	mov	r7, r1
 800121c:	2b00      	cmp	r3, #0
 800121e:	d13e      	bne.n	800129e <__divdi3+0x9a>
 8001220:	428a      	cmp	r2, r1
 8001222:	d957      	bls.n	80012d4 <__divdi3+0xd0>
 8001224:	fab2 f382 	clz	r3, r2
 8001228:	b14b      	cbz	r3, 800123e <__divdi3+0x3a>
 800122a:	f1c3 0220 	rsb	r2, r3, #32
 800122e:	fa01 f703 	lsl.w	r7, r1, r3
 8001232:	fa20 f202 	lsr.w	r2, r0, r2
 8001236:	409d      	lsls	r5, r3
 8001238:	4317      	orrs	r7, r2
 800123a:	fa00 f603 	lsl.w	r6, r0, r3
 800123e:	0c29      	lsrs	r1, r5, #16
 8001240:	fbb7 f2f1 	udiv	r2, r7, r1
 8001244:	0c33      	lsrs	r3, r6, #16
 8001246:	fb01 7c12 	mls	ip, r1, r2, r7
 800124a:	b2a8      	uxth	r0, r5
 800124c:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
 8001250:	fb00 f302 	mul.w	r3, r0, r2
 8001254:	42bb      	cmp	r3, r7
 8001256:	d909      	bls.n	800126c <__divdi3+0x68>
 8001258:	197f      	adds	r7, r7, r5
 800125a:	f102 3cff 	add.w	ip, r2, #4294967295
 800125e:	f080 8101 	bcs.w	8001464 <__divdi3+0x260>
 8001262:	42bb      	cmp	r3, r7
 8001264:	f240 80fe 	bls.w	8001464 <__divdi3+0x260>
 8001268:	3a02      	subs	r2, #2
 800126a:	442f      	add	r7, r5
 800126c:	1aff      	subs	r7, r7, r3
 800126e:	fbb7 f3f1 	udiv	r3, r7, r1
 8001272:	b2b6      	uxth	r6, r6
 8001274:	fb01 7113 	mls	r1, r1, r3, r7
 8001278:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 800127c:	fb00 f003 	mul.w	r0, r0, r3
 8001280:	4288      	cmp	r0, r1
 8001282:	d908      	bls.n	8001296 <__divdi3+0x92>
 8001284:	1949      	adds	r1, r1, r5
 8001286:	f103 37ff 	add.w	r7, r3, #4294967295
 800128a:	f080 80ed 	bcs.w	8001468 <__divdi3+0x264>
 800128e:	4288      	cmp	r0, r1
 8001290:	f240 80ea 	bls.w	8001468 <__divdi3+0x264>
 8001294:	3b02      	subs	r3, #2
 8001296:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800129a:	2300      	movs	r3, #0
 800129c:	e003      	b.n	80012a6 <__divdi3+0xa2>
 800129e:	428b      	cmp	r3, r1
 80012a0:	d90a      	bls.n	80012b8 <__divdi3+0xb4>
 80012a2:	2300      	movs	r3, #0
 80012a4:	461a      	mov	r2, r3
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	b114      	cbz	r4, 80012b2 <__divdi3+0xae>
 80012ac:	4240      	negs	r0, r0
 80012ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012b2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80012b6:	4770      	bx	lr
 80012b8:	fab3 f883 	clz	r8, r3
 80012bc:	f1b8 0f00 	cmp.w	r8, #0
 80012c0:	f040 8084 	bne.w	80013cc <__divdi3+0x1c8>
 80012c4:	428b      	cmp	r3, r1
 80012c6:	d302      	bcc.n	80012ce <__divdi3+0xca>
 80012c8:	4282      	cmp	r2, r0
 80012ca:	f200 80de 	bhi.w	800148a <__divdi3+0x286>
 80012ce:	2300      	movs	r3, #0
 80012d0:	2201      	movs	r2, #1
 80012d2:	e7e8      	b.n	80012a6 <__divdi3+0xa2>
 80012d4:	b912      	cbnz	r2, 80012dc <__divdi3+0xd8>
 80012d6:	2301      	movs	r3, #1
 80012d8:	fbb3 f5f2 	udiv	r5, r3, r2
 80012dc:	fab5 f285 	clz	r2, r5
 80012e0:	2a00      	cmp	r2, #0
 80012e2:	d139      	bne.n	8001358 <__divdi3+0x154>
 80012e4:	1b7f      	subs	r7, r7, r5
 80012e6:	0c28      	lsrs	r0, r5, #16
 80012e8:	fa1f fc85 	uxth.w	ip, r5
 80012ec:	2301      	movs	r3, #1
 80012ee:	fbb7 f1f0 	udiv	r1, r7, r0
 80012f2:	0c32      	lsrs	r2, r6, #16
 80012f4:	fb00 7711 	mls	r7, r0, r1, r7
 80012f8:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 80012fc:	fb0c f201 	mul.w	r2, ip, r1
 8001300:	42ba      	cmp	r2, r7
 8001302:	d907      	bls.n	8001314 <__divdi3+0x110>
 8001304:	197f      	adds	r7, r7, r5
 8001306:	f101 38ff 	add.w	r8, r1, #4294967295
 800130a:	d202      	bcs.n	8001312 <__divdi3+0x10e>
 800130c:	42ba      	cmp	r2, r7
 800130e:	f200 80c1 	bhi.w	8001494 <__divdi3+0x290>
 8001312:	4641      	mov	r1, r8
 8001314:	1abf      	subs	r7, r7, r2
 8001316:	fbb7 f2f0 	udiv	r2, r7, r0
 800131a:	b2b6      	uxth	r6, r6
 800131c:	fb00 7012 	mls	r0, r0, r2, r7
 8001320:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
 8001324:	fb0c fc02 	mul.w	ip, ip, r2
 8001328:	4584      	cmp	ip, r0
 800132a:	d907      	bls.n	800133c <__divdi3+0x138>
 800132c:	1940      	adds	r0, r0, r5
 800132e:	f102 37ff 	add.w	r7, r2, #4294967295
 8001332:	d202      	bcs.n	800133a <__divdi3+0x136>
 8001334:	4584      	cmp	ip, r0
 8001336:	f200 80ab 	bhi.w	8001490 <__divdi3+0x28c>
 800133a:	463a      	mov	r2, r7
 800133c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001340:	e7b1      	b.n	80012a6 <__divdi3+0xa2>
 8001342:	43e4      	mvns	r4, r4
 8001344:	4252      	negs	r2, r2
 8001346:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800134a:	e764      	b.n	8001216 <__divdi3+0x12>
 800134c:	4240      	negs	r0, r0
 800134e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001352:	f04f 34ff 	mov.w	r4, #4294967295
 8001356:	e75b      	b.n	8001210 <__divdi3+0xc>
 8001358:	4095      	lsls	r5, r2
 800135a:	f1c2 0320 	rsb	r3, r2, #32
 800135e:	fa27 f103 	lsr.w	r1, r7, r3
 8001362:	0c28      	lsrs	r0, r5, #16
 8001364:	fa26 f303 	lsr.w	r3, r6, r3
 8001368:	4097      	lsls	r7, r2
 800136a:	fbb1 f8f0 	udiv	r8, r1, r0
 800136e:	431f      	orrs	r7, r3
 8001370:	0c3b      	lsrs	r3, r7, #16
 8001372:	fb00 1118 	mls	r1, r0, r8, r1
 8001376:	fa1f fc85 	uxth.w	ip, r5
 800137a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800137e:	fb0c f308 	mul.w	r3, ip, r8
 8001382:	428b      	cmp	r3, r1
 8001384:	fa06 f602 	lsl.w	r6, r6, r2
 8001388:	d908      	bls.n	800139c <__divdi3+0x198>
 800138a:	1949      	adds	r1, r1, r5
 800138c:	f108 32ff 	add.w	r2, r8, #4294967295
 8001390:	d279      	bcs.n	8001486 <__divdi3+0x282>
 8001392:	428b      	cmp	r3, r1
 8001394:	d977      	bls.n	8001486 <__divdi3+0x282>
 8001396:	f1a8 0802 	sub.w	r8, r8, #2
 800139a:	4429      	add	r1, r5
 800139c:	1ac9      	subs	r1, r1, r3
 800139e:	fbb1 f3f0 	udiv	r3, r1, r0
 80013a2:	b2bf      	uxth	r7, r7
 80013a4:	fb00 1113 	mls	r1, r0, r3, r1
 80013a8:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80013ac:	fb0c f203 	mul.w	r2, ip, r3
 80013b0:	42ba      	cmp	r2, r7
 80013b2:	d907      	bls.n	80013c4 <__divdi3+0x1c0>
 80013b4:	197f      	adds	r7, r7, r5
 80013b6:	f103 31ff 	add.w	r1, r3, #4294967295
 80013ba:	d260      	bcs.n	800147e <__divdi3+0x27a>
 80013bc:	42ba      	cmp	r2, r7
 80013be:	d95e      	bls.n	800147e <__divdi3+0x27a>
 80013c0:	3b02      	subs	r3, #2
 80013c2:	442f      	add	r7, r5
 80013c4:	1abf      	subs	r7, r7, r2
 80013c6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80013ca:	e790      	b.n	80012ee <__divdi3+0xea>
 80013cc:	f1c8 0220 	rsb	r2, r8, #32
 80013d0:	fa03 fc08 	lsl.w	ip, r3, r8
 80013d4:	fa25 f302 	lsr.w	r3, r5, r2
 80013d8:	ea43 0c0c 	orr.w	ip, r3, ip
 80013dc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013e0:	fa21 f302 	lsr.w	r3, r1, r2
 80013e4:	fa01 f708 	lsl.w	r7, r1, r8
 80013e8:	fa20 f202 	lsr.w	r2, r0, r2
 80013ec:	fbb3 f1f9 	udiv	r1, r3, r9
 80013f0:	4317      	orrs	r7, r2
 80013f2:	fb09 3311 	mls	r3, r9, r1, r3
 80013f6:	0c3a      	lsrs	r2, r7, #16
 80013f8:	fa1f fb8c 	uxth.w	fp, ip
 80013fc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8001400:	fb0b fa01 	mul.w	sl, fp, r1
 8001404:	459a      	cmp	sl, r3
 8001406:	fa05 f008 	lsl.w	r0, r5, r8
 800140a:	d908      	bls.n	800141e <__divdi3+0x21a>
 800140c:	eb13 030c 	adds.w	r3, r3, ip
 8001410:	f101 32ff 	add.w	r2, r1, #4294967295
 8001414:	d235      	bcs.n	8001482 <__divdi3+0x27e>
 8001416:	459a      	cmp	sl, r3
 8001418:	d933      	bls.n	8001482 <__divdi3+0x27e>
 800141a:	3902      	subs	r1, #2
 800141c:	4463      	add	r3, ip
 800141e:	ebca 0303 	rsb	r3, sl, r3
 8001422:	fbb3 f2f9 	udiv	r2, r3, r9
 8001426:	fb09 3312 	mls	r3, r9, r2, r3
 800142a:	b2bf      	uxth	r7, r7
 800142c:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8001430:	fb0b f902 	mul.w	r9, fp, r2
 8001434:	45b9      	cmp	r9, r7
 8001436:	d908      	bls.n	800144a <__divdi3+0x246>
 8001438:	eb17 070c 	adds.w	r7, r7, ip
 800143c:	f102 33ff 	add.w	r3, r2, #4294967295
 8001440:	d21b      	bcs.n	800147a <__divdi3+0x276>
 8001442:	45b9      	cmp	r9, r7
 8001444:	d919      	bls.n	800147a <__divdi3+0x276>
 8001446:	3a02      	subs	r2, #2
 8001448:	4467      	add	r7, ip
 800144a:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
 800144e:	fba5 0100 	umull	r0, r1, r5, r0
 8001452:	ebc9 0707 	rsb	r7, r9, r7
 8001456:	428f      	cmp	r7, r1
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	d30a      	bcc.n	8001474 <__divdi3+0x270>
 800145e:	d005      	beq.n	800146c <__divdi3+0x268>
 8001460:	462a      	mov	r2, r5
 8001462:	e720      	b.n	80012a6 <__divdi3+0xa2>
 8001464:	4662      	mov	r2, ip
 8001466:	e701      	b.n	800126c <__divdi3+0x68>
 8001468:	463b      	mov	r3, r7
 800146a:	e714      	b.n	8001296 <__divdi3+0x92>
 800146c:	fa06 f608 	lsl.w	r6, r6, r8
 8001470:	4286      	cmp	r6, r0
 8001472:	d2f5      	bcs.n	8001460 <__divdi3+0x25c>
 8001474:	1e6a      	subs	r2, r5, #1
 8001476:	2300      	movs	r3, #0
 8001478:	e715      	b.n	80012a6 <__divdi3+0xa2>
 800147a:	461a      	mov	r2, r3
 800147c:	e7e5      	b.n	800144a <__divdi3+0x246>
 800147e:	460b      	mov	r3, r1
 8001480:	e7a0      	b.n	80013c4 <__divdi3+0x1c0>
 8001482:	4611      	mov	r1, r2
 8001484:	e7cb      	b.n	800141e <__divdi3+0x21a>
 8001486:	4690      	mov	r8, r2
 8001488:	e788      	b.n	800139c <__divdi3+0x198>
 800148a:	4643      	mov	r3, r8
 800148c:	4642      	mov	r2, r8
 800148e:	e70a      	b.n	80012a6 <__divdi3+0xa2>
 8001490:	3a02      	subs	r2, #2
 8001492:	e753      	b.n	800133c <__divdi3+0x138>
 8001494:	3902      	subs	r1, #2
 8001496:	442f      	add	r7, r5
 8001498:	e73c      	b.n	8001314 <__divdi3+0x110>
 800149a:	bf00      	nop

0800149c <__udivdi3>:
 800149c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80014a0:	4614      	mov	r4, r2
 80014a2:	4605      	mov	r5, r0
 80014a4:	460e      	mov	r6, r1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d143      	bne.n	8001532 <__udivdi3+0x96>
 80014aa:	428a      	cmp	r2, r1
 80014ac:	d953      	bls.n	8001556 <__udivdi3+0xba>
 80014ae:	fab2 f782 	clz	r7, r2
 80014b2:	b157      	cbz	r7, 80014ca <__udivdi3+0x2e>
 80014b4:	f1c7 0620 	rsb	r6, r7, #32
 80014b8:	fa20 f606 	lsr.w	r6, r0, r6
 80014bc:	fa01 f307 	lsl.w	r3, r1, r7
 80014c0:	fa02 f407 	lsl.w	r4, r2, r7
 80014c4:	431e      	orrs	r6, r3
 80014c6:	fa00 f507 	lsl.w	r5, r0, r7
 80014ca:	0c21      	lsrs	r1, r4, #16
 80014cc:	fbb6 f2f1 	udiv	r2, r6, r1
 80014d0:	0c2b      	lsrs	r3, r5, #16
 80014d2:	fb01 6712 	mls	r7, r1, r2, r6
 80014d6:	b2a0      	uxth	r0, r4
 80014d8:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
 80014dc:	fb00 f302 	mul.w	r3, r0, r2
 80014e0:	42b3      	cmp	r3, r6
 80014e2:	d909      	bls.n	80014f8 <__udivdi3+0x5c>
 80014e4:	1936      	adds	r6, r6, r4
 80014e6:	f102 37ff 	add.w	r7, r2, #4294967295
 80014ea:	f080 80f6 	bcs.w	80016da <__udivdi3+0x23e>
 80014ee:	42b3      	cmp	r3, r6
 80014f0:	f240 80f3 	bls.w	80016da <__udivdi3+0x23e>
 80014f4:	3a02      	subs	r2, #2
 80014f6:	4426      	add	r6, r4
 80014f8:	1af6      	subs	r6, r6, r3
 80014fa:	fbb6 f3f1 	udiv	r3, r6, r1
 80014fe:	b2ad      	uxth	r5, r5
 8001500:	fb01 6113 	mls	r1, r1, r3, r6
 8001504:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 8001508:	fb00 f003 	mul.w	r0, r0, r3
 800150c:	4288      	cmp	r0, r1
 800150e:	d908      	bls.n	8001522 <__udivdi3+0x86>
 8001510:	1909      	adds	r1, r1, r4
 8001512:	f103 36ff 	add.w	r6, r3, #4294967295
 8001516:	f080 80e2 	bcs.w	80016de <__udivdi3+0x242>
 800151a:	4288      	cmp	r0, r1
 800151c:	f240 80df 	bls.w	80016de <__udivdi3+0x242>
 8001520:	3b02      	subs	r3, #2
 8001522:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8001526:	2300      	movs	r3, #0
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001530:	4770      	bx	lr
 8001532:	428b      	cmp	r3, r1
 8001534:	d84a      	bhi.n	80015cc <__udivdi3+0x130>
 8001536:	fab3 f683 	clz	r6, r3
 800153a:	2e00      	cmp	r6, #0
 800153c:	d14d      	bne.n	80015da <__udivdi3+0x13e>
 800153e:	428b      	cmp	r3, r1
 8001540:	d302      	bcc.n	8001548 <__udivdi3+0xac>
 8001542:	4282      	cmp	r2, r0
 8001544:	f200 80d6 	bhi.w	80016f4 <__udivdi3+0x258>
 8001548:	2300      	movs	r3, #0
 800154a:	2201      	movs	r2, #1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001554:	4770      	bx	lr
 8001556:	b912      	cbnz	r2, 800155e <__udivdi3+0xc2>
 8001558:	2401      	movs	r4, #1
 800155a:	fbb4 f4f2 	udiv	r4, r4, r2
 800155e:	fab4 f284 	clz	r2, r4
 8001562:	2a00      	cmp	r2, #0
 8001564:	d17c      	bne.n	8001660 <__udivdi3+0x1c4>
 8001566:	1b09      	subs	r1, r1, r4
 8001568:	0c26      	lsrs	r6, r4, #16
 800156a:	b2a7      	uxth	r7, r4
 800156c:	2301      	movs	r3, #1
 800156e:	fbb1 f0f6 	udiv	r0, r1, r6
 8001572:	0c2a      	lsrs	r2, r5, #16
 8001574:	fb06 1110 	mls	r1, r6, r0, r1
 8001578:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800157c:	fb07 f200 	mul.w	r2, r7, r0
 8001580:	428a      	cmp	r2, r1
 8001582:	d907      	bls.n	8001594 <__udivdi3+0xf8>
 8001584:	1909      	adds	r1, r1, r4
 8001586:	f100 3cff 	add.w	ip, r0, #4294967295
 800158a:	d202      	bcs.n	8001592 <__udivdi3+0xf6>
 800158c:	428a      	cmp	r2, r1
 800158e:	f200 80c3 	bhi.w	8001718 <__udivdi3+0x27c>
 8001592:	4660      	mov	r0, ip
 8001594:	1a89      	subs	r1, r1, r2
 8001596:	fbb1 f2f6 	udiv	r2, r1, r6
 800159a:	b2ad      	uxth	r5, r5
 800159c:	fb06 1112 	mls	r1, r6, r2, r1
 80015a0:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80015a4:	fb07 f702 	mul.w	r7, r7, r2
 80015a8:	42af      	cmp	r7, r5
 80015aa:	d908      	bls.n	80015be <__udivdi3+0x122>
 80015ac:	192c      	adds	r4, r5, r4
 80015ae:	f102 31ff 	add.w	r1, r2, #4294967295
 80015b2:	f080 8096 	bcs.w	80016e2 <__udivdi3+0x246>
 80015b6:	42a7      	cmp	r7, r4
 80015b8:	f240 8093 	bls.w	80016e2 <__udivdi3+0x246>
 80015bc:	3a02      	subs	r2, #2
 80015be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80015ca:	4770      	bx	lr
 80015cc:	2300      	movs	r3, #0
 80015ce:	461a      	mov	r2, r3
 80015d0:	4610      	mov	r0, r2
 80015d2:	4619      	mov	r1, r3
 80015d4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80015d8:	4770      	bx	lr
 80015da:	f1c6 0520 	rsb	r5, r6, #32
 80015de:	fa22 f405 	lsr.w	r4, r2, r5
 80015e2:	40b3      	lsls	r3, r6
 80015e4:	431c      	orrs	r4, r3
 80015e6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80015ea:	fa21 f305 	lsr.w	r3, r1, r5
 80015ee:	fa01 f706 	lsl.w	r7, r1, r6
 80015f2:	fa20 f505 	lsr.w	r5, r0, r5
 80015f6:	fbb3 fcf8 	udiv	ip, r3, r8
 80015fa:	432f      	orrs	r7, r5
 80015fc:	fb08 331c 	mls	r3, r8, ip, r3
 8001600:	0c3d      	lsrs	r5, r7, #16
 8001602:	fa1f fa84 	uxth.w	sl, r4
 8001606:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800160a:	fb0a f90c 	mul.w	r9, sl, ip
 800160e:	4599      	cmp	r9, r3
 8001610:	fa02 fb06 	lsl.w	fp, r2, r6
 8001614:	d904      	bls.n	8001620 <__udivdi3+0x184>
 8001616:	191b      	adds	r3, r3, r4
 8001618:	f10c 32ff 	add.w	r2, ip, #4294967295
 800161c:	d36d      	bcc.n	80016fa <__udivdi3+0x25e>
 800161e:	4694      	mov	ip, r2
 8001620:	ebc9 0303 	rsb	r3, r9, r3
 8001624:	fbb3 f5f8 	udiv	r5, r3, r8
 8001628:	fb08 3315 	mls	r3, r8, r5, r3
 800162c:	b2bf      	uxth	r7, r7
 800162e:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8001632:	fb0a f805 	mul.w	r8, sl, r5
 8001636:	45b8      	cmp	r8, r7
 8001638:	d904      	bls.n	8001644 <__udivdi3+0x1a8>
 800163a:	193f      	adds	r7, r7, r4
 800163c:	f105 33ff 	add.w	r3, r5, #4294967295
 8001640:	d361      	bcc.n	8001706 <__udivdi3+0x26a>
 8001642:	461d      	mov	r5, r3
 8001644:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8001648:	fbac 230b 	umull	r2, r3, ip, fp
 800164c:	ebc8 0707 	rsb	r7, r8, r7
 8001650:	429f      	cmp	r7, r3
 8001652:	f04f 0500 	mov.w	r5, #0
 8001656:	d349      	bcc.n	80016ec <__udivdi3+0x250>
 8001658:	d045      	beq.n	80016e6 <__udivdi3+0x24a>
 800165a:	4662      	mov	r2, ip
 800165c:	462b      	mov	r3, r5
 800165e:	e763      	b.n	8001528 <__udivdi3+0x8c>
 8001660:	4094      	lsls	r4, r2
 8001662:	f1c2 0320 	rsb	r3, r2, #32
 8001666:	fa21 fc03 	lsr.w	ip, r1, r3
 800166a:	0c26      	lsrs	r6, r4, #16
 800166c:	fa20 f303 	lsr.w	r3, r0, r3
 8001670:	fa01 f502 	lsl.w	r5, r1, r2
 8001674:	fbbc f8f6 	udiv	r8, ip, r6
 8001678:	ea43 0105 	orr.w	r1, r3, r5
 800167c:	0c0b      	lsrs	r3, r1, #16
 800167e:	fb06 cc18 	mls	ip, r6, r8, ip
 8001682:	b2a7      	uxth	r7, r4
 8001684:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 8001688:	fb07 f308 	mul.w	r3, r7, r8
 800168c:	4563      	cmp	r3, ip
 800168e:	fa00 f502 	lsl.w	r5, r0, r2
 8001692:	d909      	bls.n	80016a8 <__udivdi3+0x20c>
 8001694:	eb1c 0c04 	adds.w	ip, ip, r4
 8001698:	f108 32ff 	add.w	r2, r8, #4294967295
 800169c:	d23a      	bcs.n	8001714 <__udivdi3+0x278>
 800169e:	4563      	cmp	r3, ip
 80016a0:	d938      	bls.n	8001714 <__udivdi3+0x278>
 80016a2:	f1a8 0802 	sub.w	r8, r8, #2
 80016a6:	44a4      	add	ip, r4
 80016a8:	ebc3 0c0c 	rsb	ip, r3, ip
 80016ac:	fbbc f3f6 	udiv	r3, ip, r6
 80016b0:	b289      	uxth	r1, r1
 80016b2:	fb06 cc13 	mls	ip, r6, r3, ip
 80016b6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80016ba:	fb07 f203 	mul.w	r2, r7, r3
 80016be:	428a      	cmp	r2, r1
 80016c0:	d907      	bls.n	80016d2 <__udivdi3+0x236>
 80016c2:	1909      	adds	r1, r1, r4
 80016c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80016c8:	d222      	bcs.n	8001710 <__udivdi3+0x274>
 80016ca:	428a      	cmp	r2, r1
 80016cc:	d920      	bls.n	8001710 <__udivdi3+0x274>
 80016ce:	3b02      	subs	r3, #2
 80016d0:	4421      	add	r1, r4
 80016d2:	1a89      	subs	r1, r1, r2
 80016d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80016d8:	e749      	b.n	800156e <__udivdi3+0xd2>
 80016da:	463a      	mov	r2, r7
 80016dc:	e70c      	b.n	80014f8 <__udivdi3+0x5c>
 80016de:	4633      	mov	r3, r6
 80016e0:	e71f      	b.n	8001522 <__udivdi3+0x86>
 80016e2:	460a      	mov	r2, r1
 80016e4:	e76b      	b.n	80015be <__udivdi3+0x122>
 80016e6:	40b0      	lsls	r0, r6
 80016e8:	4290      	cmp	r0, r2
 80016ea:	d2b6      	bcs.n	800165a <__udivdi3+0x1be>
 80016ec:	f10c 32ff 	add.w	r2, ip, #4294967295
 80016f0:	2300      	movs	r3, #0
 80016f2:	e719      	b.n	8001528 <__udivdi3+0x8c>
 80016f4:	4633      	mov	r3, r6
 80016f6:	4632      	mov	r2, r6
 80016f8:	e716      	b.n	8001528 <__udivdi3+0x8c>
 80016fa:	4599      	cmp	r9, r3
 80016fc:	d98f      	bls.n	800161e <__udivdi3+0x182>
 80016fe:	f1ac 0c02 	sub.w	ip, ip, #2
 8001702:	4423      	add	r3, r4
 8001704:	e78c      	b.n	8001620 <__udivdi3+0x184>
 8001706:	45b8      	cmp	r8, r7
 8001708:	d99b      	bls.n	8001642 <__udivdi3+0x1a6>
 800170a:	3d02      	subs	r5, #2
 800170c:	4427      	add	r7, r4
 800170e:	e799      	b.n	8001644 <__udivdi3+0x1a8>
 8001710:	4603      	mov	r3, r0
 8001712:	e7de      	b.n	80016d2 <__udivdi3+0x236>
 8001714:	4690      	mov	r8, r2
 8001716:	e7c7      	b.n	80016a8 <__udivdi3+0x20c>
 8001718:	3802      	subs	r0, #2
 800171a:	4421      	add	r1, r4
 800171c:	e73a      	b.n	8001594 <__udivdi3+0xf8>
 800171e:	bf00      	nop

08001720 <Reset_Handler>:
 8001720:	2100      	movs	r1, #0
 8001722:	f000 b804 	b.w	800172e <LoopCopyDataInit>

08001726 <CopyDataInit>:
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <LoopFillZerobss+0x12>)
 8001728:	585b      	ldr	r3, [r3, r1]
 800172a:	5043      	str	r3, [r0, r1]
 800172c:	3104      	adds	r1, #4

0800172e <LoopCopyDataInit>:
 800172e:	480b      	ldr	r0, [pc, #44]	; (800175c <LoopFillZerobss+0x16>)
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <LoopFillZerobss+0x1a>)
 8001732:	1842      	adds	r2, r0, r1
 8001734:	429a      	cmp	r2, r3
 8001736:	f4ff aff6 	bcc.w	8001726 <CopyDataInit>
 800173a:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <LoopFillZerobss+0x1e>)
 800173c:	f000 b803 	b.w	8001746 <LoopFillZerobss>

08001740 <FillZerobss>:
 8001740:	2300      	movs	r3, #0
 8001742:	f842 3b04 	str.w	r3, [r2], #4

08001746 <LoopFillZerobss>:
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <LoopFillZerobss+0x22>)
 8001748:	429a      	cmp	r2, r3
 800174a:	f4ff aff9 	bcc.w	8001740 <FillZerobss>
 800174e:	f001 f8cd 	bl	80028ec <SystemInit>
 8001752:	f000 fc39 	bl	8001fc8 <main>
 8001756:	4770      	bx	lr
 8001758:	0800f360 	.word	0x0800f360
 800175c:	20000000 	.word	0x20000000
 8001760:	20000a24 	.word	0x20000a24
 8001764:	20000a24 	.word	0x20000a24
 8001768:	20001c54 	.word	0x20001c54

0800176c <ADC_IRQHandler>:
 800176c:	f7ff bffe 	b.w	800176c <ADC_IRQHandler>

08001770 <_sbrk>:
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <_sbrk+0x24>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	b913      	cbnz	r3, 800177c <_sbrk+0xc>
 8001776:	4a08      	ldr	r2, [pc, #32]	; (8001798 <_sbrk+0x28>)
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <_sbrk+0x24>)
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <_sbrk+0x24>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4418      	add	r0, r3
 8001782:	466a      	mov	r2, sp
 8001784:	4290      	cmp	r0, r2
 8001786:	bf9d      	ittte	ls
 8001788:	4a02      	ldrls	r2, [pc, #8]	; (8001794 <_sbrk+0x24>)
 800178a:	6010      	strls	r0, [r2, #0]
 800178c:	4618      	movls	r0, r3
 800178e:	f04f 30ff 	movhi.w	r0, #4294967295
 8001792:	4770      	bx	lr
 8001794:	20000a24 	.word	0x20000a24
 8001798:	20001c54 	.word	0x20001c54

0800179c <adc_init>:
 800179c:	b570      	push	{r4, r5, r6, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <adc_init+0x58>)
 80017a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
 80017aa:	4c13      	ldr	r4, [pc, #76]	; (80017f8 <adc_init+0x5c>)
 80017ac:	f5a3 338c 	sub.w	r3, r3, #71680	; 0x11800
 80017b0:	6023      	str	r3, [r4, #0]
 80017b2:	2500      	movs	r5, #0
 80017b4:	6065      	str	r5, [r4, #4]
 80017b6:	60a5      	str	r5, [r4, #8]
 80017b8:	6125      	str	r5, [r4, #16]
 80017ba:	2601      	movs	r6, #1
 80017bc:	61a6      	str	r6, [r4, #24]
 80017be:	6265      	str	r5, [r4, #36]	; 0x24
 80017c0:	62a5      	str	r5, [r4, #40]	; 0x28
 80017c2:	62e5      	str	r5, [r4, #44]	; 0x2c
 80017c4:	6325      	str	r5, [r4, #48]	; 0x30
 80017c6:	60e5      	str	r5, [r4, #12]
 80017c8:	6226      	str	r6, [r4, #32]
 80017ca:	61e6      	str	r6, [r4, #28]
 80017cc:	6165      	str	r5, [r4, #20]
 80017ce:	4620      	mov	r0, r4
 80017d0:	f001 fb4c 	bl	8002e6c <HAL_ADC_Init>
 80017d4:	2310      	movs	r3, #16
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	9601      	str	r6, [sp, #4]
 80017da:	2306      	movs	r3, #6
 80017dc:	9302      	str	r3, [sp, #8]
 80017de:	9503      	str	r5, [sp, #12]
 80017e0:	4620      	mov	r0, r4
 80017e2:	4669      	mov	r1, sp
 80017e4:	f001 fc28 	bl	8003038 <HAL_ADC_ConfigChannel>
 80017e8:	4620      	mov	r0, r4
 80017ea:	f001 fbdd 	bl	8002fa8 <HAL_ADC_Start>
 80017ee:	b004      	add	sp, #16
 80017f0:	bd70      	pop	{r4, r5, r6, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	20000c18 	.word	0x20000c18
 80017fc:	00000000 	.word	0x00000000

08001800 <adc_get_temp_in_celsius>:
 8001800:	b538      	push	{r3, r4, r5, lr}
 8001802:	4827      	ldr	r0, [pc, #156]	; (80018a0 <adc_get_temp_in_celsius+0xa0>)
 8001804:	f001 fc14 	bl	8003030 <HAL_ADC_GetValue>
 8001808:	f7ff f9c2 	bl	8000b90 <__aeabi_ui2f>
 800180c:	f7fe fe34 	bl	8000478 <__aeabi_f2d>
 8001810:	a31d      	add	r3, pc, #116	; (adr r3, 8001888 <adc_get_temp_in_celsius+0x88>)
 8001812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001816:	f7fe fe83 	bl	8000520 <__aeabi_dmul>
 800181a:	f7ff f8b3 	bl	8000984 <__aeabi_d2f>
 800181e:	4921      	ldr	r1, [pc, #132]	; (80018a4 <adc_get_temp_in_celsius+0xa4>)
 8001820:	f7ff fac2 	bl	8000da8 <__aeabi_fdiv>
 8001824:	f7fe fe28 	bl	8000478 <__aeabi_f2d>
 8001828:	a319      	add	r3, pc, #100	; (adr r3, 8001890 <adc_get_temp_in_celsius+0x90>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7fe fcc3 	bl	80001b8 <__aeabi_dsub>
 8001832:	f7ff f8a7 	bl	8000984 <__aeabi_d2f>
 8001836:	f7fe fe1f 	bl	8000478 <__aeabi_f2d>
 800183a:	a317      	add	r3, pc, #92	; (adr r3, 8001898 <adc_get_temp_in_celsius+0x98>)
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	f7fe ff98 	bl	8000774 <__aeabi_ddiv>
 8001844:	f7ff f89e 	bl	8000984 <__aeabi_d2f>
 8001848:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <adc_get_temp_in_celsius+0xa8>)
 800184a:	781d      	ldrb	r5, [r3, #0]
 800184c:	1c6c      	adds	r4, r5, #1
 800184e:	b2e4      	uxtb	r4, r4
 8001850:	701c      	strb	r4, [r3, #0]
 8001852:	4916      	ldr	r1, [pc, #88]	; (80018ac <adc_get_temp_in_celsius+0xac>)
 8001854:	f7ff f8ec 	bl	8000a30 <__addsf3>
 8001858:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <adc_get_temp_in_celsius+0xb0>)
 800185a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800185e:	2c20      	cmp	r4, #32
 8001860:	d102      	bne.n	8001868 <adc_get_temp_in_celsius+0x68>
 8001862:	2200      	movs	r2, #0
 8001864:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <adc_get_temp_in_celsius+0xa8>)
 8001866:	701a      	strb	r2, [r3, #0]
 8001868:	4d11      	ldr	r5, [pc, #68]	; (80018b0 <adc_get_temp_in_celsius+0xb0>)
 800186a:	1f2c      	subs	r4, r5, #4
 800186c:	357c      	adds	r5, #124	; 0x7c
 800186e:	2000      	movs	r0, #0
 8001870:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8001874:	f7ff f8dc 	bl	8000a30 <__addsf3>
 8001878:	42ac      	cmp	r4, r5
 800187a:	d1f9      	bne.n	8001870 <adc_get_temp_in_celsius+0x70>
 800187c:	f04f 5174 	mov.w	r1, #1023410176	; 0x3d000000
 8001880:	f7ff f9de 	bl	8000c40 <__aeabi_fmul>
 8001884:	bd38      	pop	{r3, r4, r5, pc}
 8001886:	bf00      	nop
 8001888:	8f5c28f6 	.word	0x8f5c28f6
 800188c:	4006f5c2 	.word	0x4006f5c2
 8001890:	851eb852 	.word	0x851eb852
 8001894:	3fe851eb 	.word	0x3fe851eb
 8001898:	47ae147b 	.word	0x47ae147b
 800189c:	3f647ae1 	.word	0x3f647ae1
 80018a0:	20000c18 	.word	0x20000c18
 80018a4:	457ff000 	.word	0x457ff000
 80018a8:	20000aa8 	.word	0x20000aa8
 80018ac:	41c80000 	.word	0x41c80000
 80018b0:	20000a28 	.word	0x20000a28
 80018b4:	f3af 8000 	nop.w

080018b8 <TASK_shell_read>:
  * @brief	Task zur Eingabe der Shell
  * @param  none
  * @retval None
  */
void TASK_shell_read()
{
 80018b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Neue Daten bereit
	if (s_RxBuffer.ReadDone == 1)
 80018bc:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <TASK_shell_read+0xec>)
 80018be:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d16b      	bne.n	800199e <TASK_shell_read+0xe6>
	{
		// Anzahl empfangener Bytes
		int remaining = s_RxBuffer.Size - s_RxBuffer.Position;
 80018c6:	4b37      	ldr	r3, [pc, #220]	; (80019a4 <TASK_shell_read+0xec>)
 80018c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018d0:	ebc3 0902 	rsb	r9, r3, r2
		if(remaining > 0)
 80018d4:	f1b9 0f00 	cmp.w	r9, #0
 80018d8:	dd61      	ble.n	800199e <TASK_shell_read+0xe6>
		{
			// Dem shell_input Buffer hinzufügen und Befehl auswerten
			while(remaining-->0)
 80018da:	f109 39ff 	add.w	r9, r9, #4294967295
			{
				if(s_RxBuffer.Buffer[s_RxBuffer.Position] == 127)
 80018de:	4f31      	ldr	r7, [pc, #196]	; (80019a4 <TASK_shell_read+0xec>)
					memset(shell_input, 0, sizeof(shell_input));
					shell_input_idx = 0;
				}
				else
				{
					shell_input[shell_input_idx++] = s_RxBuffer.Buffer[s_RxBuffer.Position];
 80018e0:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80019b8 <TASK_shell_read+0x100>
		if(remaining > 0)
		{
			// Dem shell_input Buffer hinzufügen und Befehl auswerten
			while(remaining-->0)
			{
				if(s_RxBuffer.Buffer[s_RxBuffer.Position] == 127)
 80018e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018e8:	5cfb      	ldrb	r3, [r7, r3]
 80018ea:	2b7f      	cmp	r3, #127	; 0x7f
 80018ec:	d10a      	bne.n	8001904 <TASK_shell_read+0x4c>
				{
					if(shell_input_idx > 0)
 80018ee:	482e      	ldr	r0, [pc, #184]	; (80019a8 <TASK_shell_read+0xf0>)
 80018f0:	7803      	ldrb	r3, [r0, #0]
 80018f2:	b10b      	cbz	r3, 80018f8 <TASK_shell_read+0x40>
						shell_input_idx--;
 80018f4:	3b01      	subs	r3, #1
 80018f6:	7003      	strb	r3, [r0, #0]
					shell_input[shell_input_idx] = '\0';
 80018f8:	492b      	ldr	r1, [pc, #172]	; (80019a8 <TASK_shell_read+0xf0>)
 80018fa:	780b      	ldrb	r3, [r1, #0]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f808 2003 	strb.w	r2, [r8, r3]
 8001902:	e02f      	b.n	8001964 <TASK_shell_read+0xac>
				}
				else if(s_RxBuffer.Buffer[s_RxBuffer.Position] == '\r')
 8001904:	2b0d      	cmp	r3, #13
 8001906:	d127      	bne.n	8001958 <TASK_shell_read+0xa0>
				{
					// Auswertung bei erkanntem ENTER
					uint8_t i;
					for(i=0;i<shell_cmds_used;i++)
 8001908:	4b28      	ldr	r3, [pc, #160]	; (80019ac <TASK_shell_read+0xf4>)
 800190a:	f893 a000 	ldrb.w	sl, [r3]
 800190e:	f1ba 0f00 	cmp.w	sl, #0
 8001912:	d018      	beq.n	8001946 <TASK_shell_read+0x8e>
 8001914:	4c26      	ldr	r4, [pc, #152]	; (80019b0 <TASK_shell_read+0xf8>)
 8001916:	2500      	movs	r5, #0
					{
						if(strncmp(shell_input,shell_cmds[i].cmd_name,shell_cmds[i].cmd_len) == 0)
 8001918:	f894 602a 	ldrb.w	r6, [r4, #42]	; 0x2a
 800191c:	4640      	mov	r0, r8
 800191e:	4621      	mov	r1, r4
 8001920:	4632      	mov	r2, r6
 8001922:	f006 fd77 	bl	8008414 <strncmp>
 8001926:	b948      	cbnz	r0, 800193c <TASK_shell_read+0x84>
						{
							shell_cmds[i].cmd_function(i, shell_input+shell_cmds[i].cmd_len);
 8001928:	2234      	movs	r2, #52	; 0x34
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <TASK_shell_read+0xf8>)
 800192c:	fb02 3305 	mla	r3, r2, r5, r3
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	4628      	mov	r0, r5
 8001934:	eb08 0106 	add.w	r1, r8, r6
 8001938:	4798      	blx	r3
							break;
 800193a:	e004      	b.n	8001946 <TASK_shell_read+0x8e>
 800193c:	3501      	adds	r5, #1
 800193e:	3434      	adds	r4, #52	; 0x34
				}
				else if(s_RxBuffer.Buffer[s_RxBuffer.Position] == '\r')
				{
					// Auswertung bei erkanntem ENTER
					uint8_t i;
					for(i=0;i<shell_cmds_used;i++)
 8001940:	b2eb      	uxtb	r3, r5
 8001942:	4553      	cmp	r3, sl
 8001944:	d3e8      	bcc.n	8001918 <TASK_shell_read+0x60>
							break;
						}
					}

					// Buffer leeren
					memset(shell_input, 0, sizeof(shell_input));
 8001946:	4640      	mov	r0, r8
 8001948:	2100      	movs	r1, #0
 800194a:	22ff      	movs	r2, #255	; 0xff
 800194c:	f006 fc20 	bl	8008190 <memset>
					shell_input_idx = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <TASK_shell_read+0xf0>)
 8001954:	7013      	strb	r3, [r2, #0]
 8001956:	e005      	b.n	8001964 <TASK_shell_read+0xac>
				}
				else
				{
					shell_input[shell_input_idx++] = s_RxBuffer.Buffer[s_RxBuffer.Position];
 8001958:	4813      	ldr	r0, [pc, #76]	; (80019a8 <TASK_shell_read+0xf0>)
 800195a:	7802      	ldrb	r2, [r0, #0]
 800195c:	1c51      	adds	r1, r2, #1
 800195e:	7001      	strb	r1, [r0, #0]
 8001960:	f808 3002 	strb.w	r3, [r8, r2]
				}

				s_RxBuffer.Position++;
 8001964:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001968:	3301      	adds	r3, #1
 800196a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
		// Anzahl empfangener Bytes
		int remaining = s_RxBuffer.Size - s_RxBuffer.Position;
		if(remaining > 0)
		{
			// Dem shell_input Buffer hinzufügen und Befehl auswerten
			while(remaining-->0)
 800196e:	f109 39ff 	add.w	r9, r9, #4294967295
 8001972:	f1b9 3fff 	cmp.w	r9, #4294967295
 8001976:	d1b5      	bne.n	80018e4 <TASK_shell_read+0x2c>
					shell_input[shell_input_idx++] = s_RxBuffer.Buffer[s_RxBuffer.Position];
				}

				s_RxBuffer.Position++;
			}
			s_RxBuffer.ReadDone = 0;
 8001978:	4c0a      	ldr	r4, [pc, #40]	; (80019a4 <TASK_shell_read+0xec>)
 800197a:	2300      	movs	r3, #0
 800197c:	f884 3208 	strb.w	r3, [r4, #520]	; 0x208
			USBD_CDC_ReceivePacket(&USBD_Device);
 8001980:	480c      	ldr	r0, [pc, #48]	; (80019b4 <TASK_shell_read+0xfc>)
 8001982:	f003 fe2d 	bl	80055e0 <USBD_CDC_ReceivePacket>



			// Bereit, neue Daten zu empfangen
			if (s_RxBuffer.Position >= s_RxBuffer.Size)
 8001986:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800198a:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 800198e:	429a      	cmp	r2, r3
 8001990:	db05      	blt.n	800199e <TASK_shell_read+0xe6>
			{
				s_RxBuffer.ReadDone = 0;
 8001992:	2200      	movs	r2, #0
 8001994:	f884 2208 	strb.w	r2, [r4, #520]	; 0x208
				USBD_CDC_ReceivePacket(&USBD_Device);
 8001998:	4806      	ldr	r0, [pc, #24]	; (80019b4 <TASK_shell_read+0xfc>)
 800199a:	f003 fe21 	bl	80055e0 <USBD_CDC_ReceivePacket>
 800199e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019a2:	bf00      	nop
 80019a4:	20000c5c 	.word	0x20000c5c
 80019a8:	20000aac 	.word	0x20000aac
 80019ac:	20000aaa 	.word	0x20000aaa
 80019b0:	20001114 	.word	0x20001114
 80019b4:	20000e68 	.word	0x20000e68
 80019b8:	20000ab0 	.word	0x20000ab0

080019bc <shell_out>:
  * @brief  Sendet Zeichenketten per USB_CDC.
  * @param  none
  * @retval None
  */
int shell_out(char* str)
{
 80019bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019be:	4606      	mov	r6, r0
	if(shell_initiated == SET)
 80019c0:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <shell_out+0x80>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d130      	bne.n	8001a2a <shell_out+0x6e>
	{
		int size = strlen(str);
 80019c8:	f006 fcf4 	bl	80083b4 <strlen>
 80019cc:	4605      	mov	r5, r0
 80019ce:	4607      	mov	r7, r0
		if (size >= CDC_DATA_HS_OUT_PACKET_SIZE)
 80019d0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80019d4:	db13      	blt.n	80019fe <shell_out+0x42>
		{
			int offset;
			for (offset = 0; offset < size; offset++)
 80019d6:	2800      	cmp	r0, #0
 80019d8:	dd29      	ble.n	8001a2e <shell_out+0x72>
 80019da:	2400      	movs	r4, #0
			{
				int todo = MIN(CDC_DATA_HS_OUT_PACKET_SIZE,
							   size - offset);
				int done = shell_out(((char *)str) + offset);
 80019dc:	1930      	adds	r0, r6, r4
 80019de:	f7ff ffed 	bl	80019bc <shell_out>
 80019e2:	1b2b      	subs	r3, r5, r4
		if (size >= CDC_DATA_HS_OUT_PACKET_SIZE)
		{
			int offset;
			for (offset = 0; offset < size; offset++)
			{
				int todo = MIN(CDC_DATA_HS_OUT_PACKET_SIZE,
 80019e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e8:	bfa8      	it	ge
 80019ea:	f44f 7300 	movge.w	r3, #512	; 0x200
							   size - offset);
				int done = shell_out(((char *)str) + offset);
				if (done != todo)
 80019ee:	4298      	cmp	r0, r3
 80019f0:	d001      	beq.n	80019f6 <shell_out+0x3a>
					return offset + done;
 80019f2:	4420      	add	r0, r4
 80019f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	{
		int size = strlen(str);
		if (size >= CDC_DATA_HS_OUT_PACKET_SIZE)
		{
			int offset;
			for (offset = 0; offset < size; offset++)
 80019f6:	3401      	adds	r4, #1
 80019f8:	42a7      	cmp	r7, r4
 80019fa:	d1ef      	bne.n	80019dc <shell_out+0x20>
 80019fc:	e018      	b.n	8001a30 <shell_out+0x74>
			}

			return size;
		}

		USBD_CDC_HandleTypeDef *pCDC = (USBD_CDC_HandleTypeDef *)USBD_Device.pClassData;
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <shell_out+0x84>)
 8001a00:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
		while(pCDC->TxState) { } //Wait for previous transfer
 8001a04:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1fb      	bne.n	8001a04 <shell_out+0x48>

		USBD_CDC_SetTxBuffer(&USBD_Device, (uint8_t *)str, size);
 8001a0c:	4f0c      	ldr	r7, [pc, #48]	; (8001a40 <shell_out+0x84>)
 8001a0e:	4638      	mov	r0, r7
 8001a10:	4631      	mov	r1, r6
 8001a12:	b2aa      	uxth	r2, r5
 8001a14:	f003 fdbe 	bl	8005594 <USBD_CDC_SetTxBuffer>
		if (USBD_CDC_TransmitPacket(&USBD_Device) != USBD_OK)
 8001a18:	4638      	mov	r0, r7
 8001a1a:	f003 fdc9 	bl	80055b0 <USBD_CDC_TransmitPacket>
 8001a1e:	b948      	cbnz	r0, 8001a34 <shell_out+0x78>
			return 0;

		while(pCDC->TxState) { } //Wait until transfer is done
 8001a20:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1fb      	bne.n	8001a20 <shell_out+0x64>
 8001a28:	e006      	b.n	8001a38 <shell_out+0x7c>
		return size;
	}
	return 0;
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				int done = shell_out(((char *)str) + offset);
				if (done != todo)
					return offset + done;
			}

			return size;
 8001a30:	4628      	mov	r0, r5
 8001a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		USBD_CDC_HandleTypeDef *pCDC = (USBD_CDC_HandleTypeDef *)USBD_Device.pClassData;
		while(pCDC->TxState) { } //Wait for previous transfer

		USBD_CDC_SetTxBuffer(&USBD_Device, (uint8_t *)str, size);
		if (USBD_CDC_TransmitPacket(&USBD_Device) != USBD_OK)
			return 0;
 8001a34:	2000      	movs	r0, #0
 8001a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		while(pCDC->TxState) { } //Wait until transfer is done
		return size;
 8001a38:	4628      	mov	r0, r5
	}
	return 0;
}
 8001a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a3c:	20000aa9 	.word	0x20000aa9
 8001a40:	20000e68 	.word	0x20000e68

08001a44 <shell_info_out>:
  * @brief	Gibt Status-Informationen auf der Shell aus.
  * @param  none
  * @retval None
  */
void shell_info_out()
{
 8001a44:	b500      	push	{lr}
 8001a46:	b0cf      	sub	sp, #316	; 0x13c
	shell_out(ANSI_BOLD"Infos"ANSI_BOLD_OFF"\r\n");
 8001a48:	4819      	ldr	r0, [pc, #100]	; (8001ab0 <shell_info_out+0x6c>)
 8001a4a:	f7ff ffb7 	bl	80019bc <shell_out>

	char out[300];
	sprintf(out,"Speed:\t\t%u\r\n",SystemCoreClock);
 8001a4e:	a803      	add	r0, sp, #12
 8001a50:	4918      	ldr	r1, [pc, #96]	; (8001ab4 <shell_info_out+0x70>)
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <shell_info_out+0x74>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	f006 fbfb 	bl	8008250 <sprintf>
	shell_out(out);
 8001a5a:	a803      	add	r0, sp, #12
 8001a5c:	f7ff ffae 	bl	80019bc <shell_out>

	uint32_t *devID = (uint32_t *)0x1FFF7A10;
	sprintf(out,"Device-ID:\t%08X %08X %08X\r\n", devID[0], devID[1], devID[2]);
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <shell_info_out+0x78>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	3304      	adds	r3, #4
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4915      	ldr	r1, [pc, #84]	; (8001ac0 <shell_info_out+0x7c>)
 8001a6a:	6809      	ldr	r1, [r1, #0]
 8001a6c:	9100      	str	r1, [sp, #0]
 8001a6e:	a803      	add	r0, sp, #12
 8001a70:	4914      	ldr	r1, [pc, #80]	; (8001ac4 <shell_info_out+0x80>)
 8001a72:	f006 fbed 	bl	8008250 <sprintf>
	shell_out(out);
 8001a76:	a803      	add	r0, sp, #12
 8001a78:	f7ff ffa0 	bl	80019bc <shell_out>

	sprintf(out,"RNG:\t\t%u\r\n", rng());
 8001a7c:	f000 fb70 	bl	8002160 <rng>
 8001a80:	4602      	mov	r2, r0
 8001a82:	a803      	add	r0, sp, #12
 8001a84:	4910      	ldr	r1, [pc, #64]	; (8001ac8 <shell_info_out+0x84>)
 8001a86:	f006 fbe3 	bl	8008250 <sprintf>
	shell_out(out);
 8001a8a:	a803      	add	r0, sp, #12
 8001a8c:	f7ff ff96 	bl	80019bc <shell_out>

	sprintf(out,"Temp:\t\t%4.1f °C\r\n", adc_get_temp_in_celsius());
 8001a90:	f7ff feb6 	bl	8001800 <adc_get_temp_in_celsius>
 8001a94:	f7fe fcf0 	bl	8000478 <__aeabi_f2d>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	a803      	add	r0, sp, #12
 8001a9e:	490b      	ldr	r1, [pc, #44]	; (8001acc <shell_info_out+0x88>)
 8001aa0:	f006 fbd6 	bl	8008250 <sprintf>
	shell_out(out);
 8001aa4:	a803      	add	r0, sp, #12
 8001aa6:	f7ff ff89 	bl	80019bc <shell_out>
}
 8001aaa:	b04f      	add	sp, #316	; 0x13c
 8001aac:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ab0:	0800e864 	.word	0x0800e864
 8001ab4:	0800e878 	.word	0x0800e878
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	1fff7a10 	.word	0x1fff7a10
 8001ac0:	1fff7a18 	.word	0x1fff7a18
 8001ac4:	0800e888 	.word	0x0800e888
 8001ac8:	0800e8a4 	.word	0x0800e8a4
 8001acc:	0800e8b0 	.word	0x0800e8b0

08001ad0 <shell_help_out>:
  * @brief  Zeigt alle registrierten Befehle auf der Shell an.
  * @param  none
  * @retval None
  */
void shell_help_out()
{
 8001ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ad2:	b0a9      	sub	sp, #164	; 0xa4
	shell_out(ANSI_BOLD"Verfügbare Kommandos"ANSI_BOLD_OFF"\r\n");
 8001ad4:	4815      	ldr	r0, [pc, #84]	; (8001b2c <shell_help_out+0x5c>)
 8001ad6:	f7ff ff71 	bl	80019bc <shell_out>
	shell_out(ANSI_FG_GREEN"Anzeigeprogramm \t"ANSI_FG_ORANGE"Befehl"ANSI_FG_DEFAULT"\r\n");
 8001ada:	4815      	ldr	r0, [pc, #84]	; (8001b30 <shell_help_out+0x60>)
 8001adc:	f7ff ff6e 	bl	80019bc <shell_out>

	// Auswertung bei erkanntem ENTER
	uint8_t i;
	for(i=shell_hidden_cmds;i<shell_cmds_used;i++)
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <shell_help_out+0x64>)
 8001ae2:	781c      	ldrb	r4, [r3, #0]
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <shell_help_out+0x68>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	42a3      	cmp	r3, r4
 8001aea:	d91d      	bls.n	8001b28 <shell_help_out+0x58>
	{
		char out[150];
		sprintf(out,"#%d\t%s%s"ANSI_FG_DEFAULT"\r\n",
				i,
				(shell_cmds[i].cmd_out != RESET)?ANSI_FG_GREEN:ANSI_FG_ORANGE,
 8001aec:	4d13      	ldr	r5, [pc, #76]	; (8001b3c <shell_help_out+0x6c>)
	// Auswertung bei erkanntem ENTER
	uint8_t i;
	for(i=shell_hidden_cmds;i<shell_cmds_used;i++)
	{
		char out[150];
		sprintf(out,"#%d\t%s%s"ANSI_FG_DEFAULT"\r\n",
 8001aee:	4f14      	ldr	r7, [pc, #80]	; (8001b40 <shell_help_out+0x70>)
 8001af0:	4e14      	ldr	r6, [pc, #80]	; (8001b44 <shell_help_out+0x74>)
				i,
				(shell_cmds[i].cmd_out != RESET)?ANSI_FG_GREEN:ANSI_FG_ORANGE,
 8001af2:	4622      	mov	r2, r4
	// Auswertung bei erkanntem ENTER
	uint8_t i;
	for(i=shell_hidden_cmds;i<shell_cmds_used;i++)
	{
		char out[150];
		sprintf(out,"#%d\t%s%s"ANSI_FG_DEFAULT"\r\n",
 8001af4:	2334      	movs	r3, #52	; 0x34
 8001af6:	fb03 5304 	mla	r3, r3, r4, r5
 8001afa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001afe:	2134      	movs	r1, #52	; 0x34
 8001b00:	fb01 5104 	mla	r1, r1, r4, r5
 8001b04:	9100      	str	r1, [sp, #0]
 8001b06:	a802      	add	r0, sp, #8
 8001b08:	490f      	ldr	r1, [pc, #60]	; (8001b48 <shell_help_out+0x78>)
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	bf0c      	ite	eq
 8001b0e:	463b      	moveq	r3, r7
 8001b10:	4633      	movne	r3, r6
 8001b12:	f006 fb9d 	bl	8008250 <sprintf>
				i,
				(shell_cmds[i].cmd_out != RESET)?ANSI_FG_GREEN:ANSI_FG_ORANGE,
				shell_cmds[i].cmd_name);
		shell_out(out);
 8001b16:	a802      	add	r0, sp, #8
 8001b18:	f7ff ff50 	bl	80019bc <shell_out>
	shell_out(ANSI_BOLD"Verfügbare Kommandos"ANSI_BOLD_OFF"\r\n");
	shell_out(ANSI_FG_GREEN"Anzeigeprogramm \t"ANSI_FG_ORANGE"Befehl"ANSI_FG_DEFAULT"\r\n");

	// Auswertung bei erkanntem ENTER
	uint8_t i;
	for(i=shell_hidden_cmds;i<shell_cmds_used;i++)
 8001b1c:	3401      	adds	r4, #1
 8001b1e:	b2e4      	uxtb	r4, r4
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <shell_help_out+0x68>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	42a3      	cmp	r3, r4
 8001b26:	d8e4      	bhi.n	8001af2 <shell_help_out+0x22>
				i,
				(shell_cmds[i].cmd_out != RESET)?ANSI_FG_GREEN:ANSI_FG_ORANGE,
				shell_cmds[i].cmd_name);
		shell_out(out);
	}
}
 8001b28:	b029      	add	sp, #164	; 0xa4
 8001b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b2c:	0800e8d4 	.word	0x0800e8d4
 8001b30:	0800e8f8 	.word	0x0800e8f8
 8001b34:	20000aad 	.word	0x20000aad
 8001b38:	20000aaa 	.word	0x20000aaa
 8001b3c:	20001114 	.word	0x20001114
 8001b40:	0800e8cc 	.word	0x0800e8cc
 8001b44:	0800e8c4 	.word	0x0800e8c4
 8001b48:	0800e928 	.word	0x0800e928

08001b4c <shell_logo_out>:
	shell_out("   \\  /\\  /   _| || |___| |____ / ____ \\| |__| |\r\n");
	shell_out("    \\/  \\/   |_____\\_____\\_____/_/    \\_\\_____/\r\n\r\n");
	shell_out(ANSI_FG_DEFAULT);
}
void shell_logo_out()
{
 8001b4c:	b508      	push	{r3, lr}
	shell_out(ANSI_BOLD""ANSI_FG_RED"__      _____ ___ ___   _   ___ \r\n");
 8001b4e:	4806      	ldr	r0, [pc, #24]	; (8001b68 <shell_logo_out+0x1c>)
 8001b50:	f7ff ff34 	bl	80019bc <shell_out>
	shell_out("\\ \\    / /_ _/ __/ __| /_\\ |   \\ \r\n");
 8001b54:	4805      	ldr	r0, [pc, #20]	; (8001b6c <shell_logo_out+0x20>)
 8001b56:	f7ff ff31 	bl	80019bc <shell_out>
	shell_out(" \\ \\/\\/ / | | (_| (__ / _ \\| |) |\r\n");
 8001b5a:	4805      	ldr	r0, [pc, #20]	; (8001b70 <shell_logo_out+0x24>)
 8001b5c:	f7ff ff2e 	bl	80019bc <shell_out>
	shell_out("  \\_/\\_/ |___\\___\\___/_/ \\_\\___/\r\n\r\n"ANSI_BOLD_OFF""ANSI_FG_DEFAULT);
 8001b60:	4804      	ldr	r0, [pc, #16]	; (8001b74 <shell_logo_out+0x28>)
 8001b62:	f7ff ff2b 	bl	80019bc <shell_out>
 8001b66:	bd08      	pop	{r3, pc}
 8001b68:	0800ea84 	.word	0x0800ea84
 8001b6c:	0800eab4 	.word	0x0800eab4
 8001b70:	0800ead8 	.word	0x0800ead8
 8001b74:	0800eafc 	.word	0x0800eafc

08001b78 <shell_out_header>:
  * @brief	Shell-Header-Ausgabe
  * @param  none
  * @retval None
  */
void shell_out_header()
{
 8001b78:	b508      	push	{r3, lr}
	shell_out(ANSI_RESET);
 8001b7a:	4806      	ldr	r0, [pc, #24]	; (8001b94 <shell_out_header+0x1c>)
 8001b7c:	f7ff ff1e 	bl	80019bc <shell_out>
	shell_out(ANSI_CLEAR);
 8001b80:	4805      	ldr	r0, [pc, #20]	; (8001b98 <shell_out_header+0x20>)
 8001b82:	f7ff ff1b 	bl	80019bc <shell_out>
	shell_out(ANSI_HOME);
 8001b86:	4805      	ldr	r0, [pc, #20]	; (8001b9c <shell_out_header+0x24>)
 8001b88:	f7ff ff18 	bl	80019bc <shell_out>
	shell_logo_out();
 8001b8c:	f7ff ffde 	bl	8001b4c <shell_logo_out>
 8001b90:	bd08      	pop	{r3, pc}
 8001b92:	bf00      	nop
 8001b94:	0800eb30 	.word	0x0800eb30
 8001b98:	0800eb3c 	.word	0x0800eb3c
 8001b9c:	0800eb44 	.word	0x0800eb44

08001ba0 <shell_exit_program>:
  * @brief  Stoppt das aktuelle (genauer: alle) Ausgabe-Programm der Shell.
  * @param  id
  * @retval data
  */
void shell_exit_program()
{
 8001ba0:	b510      	push	{r4, lr}
	uint8_t i;
	for(i=0;i<shell_outs_used;i++)
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <shell_exit_program+0x30>)
 8001ba4:	7818      	ldrb	r0, [r3, #0]
 8001ba6:	b180      	cbz	r0, 8001bca <shell_exit_program+0x2a>
 8001ba8:	2300      	movs	r3, #0
	{
		if(shell_outs[i].out_active == 1)
 8001baa:	490a      	ldr	r1, [pc, #40]	; (8001bd4 <shell_exit_program+0x34>)
		{
			shell_outs[i].out_active = 0;
 8001bac:	461c      	mov	r4, r3
void shell_exit_program()
{
	uint8_t i;
	for(i=0;i<shell_outs_used;i++)
	{
		if(shell_outs[i].out_active == 1)
 8001bae:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8001bb2:	7852      	ldrb	r2, [r2, #1]
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	2a01      	cmp	r2, #1
 8001bb8:	d103      	bne.n	8001bc2 <shell_exit_program+0x22>
		{
			shell_outs[i].out_active = 0;
 8001bba:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8001bbe:	7054      	strb	r4, [r2, #1]
			shell_outs[i].out_exetuted = RESET;
 8001bc0:	70d4      	strb	r4, [r2, #3]
 8001bc2:	3301      	adds	r3, #1
  * @retval data
  */
void shell_exit_program()
{
	uint8_t i;
	for(i=0;i<shell_outs_used;i++)
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4282      	cmp	r2, r0
 8001bc8:	d3f1      	bcc.n	8001bae <shell_exit_program+0xe>
			shell_outs[i].out_active = 0;
			shell_outs[i].out_exetuted = RESET;
		}
	}

	shell_out_header();
 8001bca:	f7ff ffd5 	bl	8001b78 <shell_out_header>
 8001bce:	bd10      	pop	{r4, pc}
 8001bd0:	20000aab 	.word	0x20000aab
 8001bd4:	2000108c 	.word	0x2000108c

08001bd8 <shell_activate_program>:
  * @brief  Aktiviert ein neues Ausgabe-Programm auf der Shell.
  * @param  id:
  * @retval data
  */
void shell_activate_program(int id, char* data)
{
 8001bd8:	b538      	push	{r3, r4, r5, lr}
 8001bda:	4604      	mov	r4, r0
	// Vorheriges Programm beenden
	shell_exit_program(id, data);
 8001bdc:	f7ff ffe0 	bl	8001ba0 <shell_exit_program>

	// Neues Programm ausführen
	uint8_t i;
	for(i=0;i<shell_outs_used;i++)
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <shell_activate_program+0x44>)
 8001be2:	7819      	ldrb	r1, [r3, #0]
 8001be4:	b1c9      	cbz	r1, 8001c1a <shell_activate_program+0x42>
	{
		if(shell_outs[i].out_id == id)
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <shell_activate_program+0x48>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	42a3      	cmp	r3, r4
 8001bee:	d10f      	bne.n	8001c10 <shell_activate_program+0x38>
 8001bf0:	e007      	b.n	8001c02 <shell_activate_program+0x2a>
 8001bf2:	461d      	mov	r5, r3
 8001bf4:	f810 2033 	ldrb.w	r2, [r0, r3, lsl #3]
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	42a2      	cmp	r2, r4
 8001bfe:	d109      	bne.n	8001c14 <shell_activate_program+0x3c>
 8001c00:	e000      	b.n	8001c04 <shell_activate_program+0x2c>
 8001c02:	2500      	movs	r5, #0
		{
			shell_outs[i].out_active = 1;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <shell_activate_program+0x48>)
 8001c06:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	706b      	strb	r3, [r5, #1]
			break;
 8001c0e:	bd38      	pop	{r3, r4, r5, pc}

	// Neues Programm ausführen
	uint8_t i;
	for(i=0;i<shell_outs_used;i++)
	{
		if(shell_outs[i].out_id == id)
 8001c10:	2301      	movs	r3, #1
 8001c12:	4803      	ldr	r0, [pc, #12]	; (8001c20 <shell_activate_program+0x48>)
	// Vorheriges Programm beenden
	shell_exit_program(id, data);

	// Neues Programm ausführen
	uint8_t i;
	for(i=0;i<shell_outs_used;i++)
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	428a      	cmp	r2, r1
 8001c18:	d3eb      	bcc.n	8001bf2 <shell_activate_program+0x1a>
 8001c1a:	bd38      	pop	{r3, r4, r5, pc}
 8001c1c:	20000aab 	.word	0x20000aab
 8001c20:	2000108c 	.word	0x2000108c

08001c24 <TASK_shell>:
  * @brief	Task zur Ausgabe der Shell.
  * @param  none
  * @retval None
  */
void TASK_shell()
{
 8001c24:	b510      	push	{r4, lr}
	uint8_t program_executed = RESET;

	// Show current programm
	uint8_t i;
	for(i=0;i<shell_outs_used;i++)
 8001c26:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <TASK_shell+0x80>)
 8001c28:	7819      	ldrb	r1, [r3, #0]
 8001c2a:	2900      	cmp	r1, #0
 8001c2c:	d037      	beq.n	8001c9e <TASK_shell+0x7a>
	{
		// Programm gefunden zum AUsführen
		if(shell_outs[i].out_active != RESET)
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <TASK_shell+0x84>)
 8001c30:	785b      	ldrb	r3, [r3, #1]
 8001c32:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001c36:	d025      	beq.n	8001c84 <TASK_shell+0x60>
 8001c38:	e008      	b.n	8001c4c <TASK_shell+0x28>
 8001c3a:	461c      	mov	r4, r3
 8001c3c:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8001c40:	7852      	ldrb	r2, [r2, #1]
 8001c42:	3301      	adds	r3, #1
 8001c44:	f012 0fff 	tst.w	r2, #255	; 0xff
 8001c48:	d01e      	beq.n	8001c88 <TASK_shell+0x64>
 8001c4a:	e000      	b.n	8001c4e <TASK_shell+0x2a>
 8001c4c:	2400      	movs	r4, #0
		{
			// Programm soll auch wirklich ausgeführt werden (endlose Aktualisierung oder erstmaliges Ausführen)
			if(shell_outs[i].out_refresh != RESET || shell_outs[i].out_exetuted == RESET)
 8001c4e:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <TASK_shell+0x84>)
 8001c50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001c54:	789b      	ldrb	r3, [r3, #2]
 8001c56:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001c5a:	d106      	bne.n	8001c6a <TASK_shell+0x46>
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <TASK_shell+0x84>)
 8001c5e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001c62:	78db      	ldrb	r3, [r3, #3]
 8001c64:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001c68:	d112      	bne.n	8001c90 <TASK_shell+0x6c>
			{
				shell_out_header();
 8001c6a:	f7ff ff85 	bl	8001b78 <shell_out_header>

				shell_outs[i].out_exetuted = SET;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <TASK_shell+0x84>)
 8001c70:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8001c74:	2301      	movs	r3, #1
 8001c76:	70e3      	strb	r3, [r4, #3]
				shell_outs[i].out_function();
 8001c78:	6863      	ldr	r3, [r4, #4]
 8001c7a:	4798      	blx	r3

				shell_out("\r\n\r\n");
 8001c7c:	480b      	ldr	r0, [pc, #44]	; (8001cac <TASK_shell+0x88>)
 8001c7e:	f7ff fe9d 	bl	80019bc <shell_out>
 8001c82:	e005      	b.n	8001c90 <TASK_shell+0x6c>
	// Show current programm
	uint8_t i;
	for(i=0;i<shell_outs_used;i++)
	{
		// Programm gefunden zum AUsführen
		if(shell_outs[i].out_active != RESET)
 8001c84:	2301      	movs	r3, #1
 8001c86:	4808      	ldr	r0, [pc, #32]	; (8001ca8 <TASK_shell+0x84>)
{
	uint8_t program_executed = RESET;

	// Show current programm
	uint8_t i;
	for(i=0;i<shell_outs_used;i++)
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	428a      	cmp	r2, r1
 8001c8c:	d3d5      	bcc.n	8001c3a <TASK_shell+0x16>
 8001c8e:	e006      	b.n	8001c9e <TASK_shell+0x7a>
	if(program_executed == RESET)
	{
		shell_out_header();
	}

	shell_out(ANSI_ERASE_LINE""ANSI_GOTO_COL1""ANSI_FG_DEFAULT"> "ANSI_FG_CYAN);
 8001c90:	4807      	ldr	r0, [pc, #28]	; (8001cb0 <TASK_shell+0x8c>)
 8001c92:	f7ff fe93 	bl	80019bc <shell_out>
	shell_out(shell_input);
 8001c96:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <TASK_shell+0x90>)
 8001c98:	f7ff fe90 	bl	80019bc <shell_out>
 8001c9c:	bd10      	pop	{r4, pc}
		}
	}

	if(program_executed == RESET)
	{
		shell_out_header();
 8001c9e:	f7ff ff6b 	bl	8001b78 <shell_out_header>
 8001ca2:	e7f5      	b.n	8001c90 <TASK_shell+0x6c>
 8001ca4:	20000aab 	.word	0x20000aab
 8001ca8:	2000108c 	.word	0x2000108c
 8001cac:	0800eb48 	.word	0x0800eb48
 8001cb0:	0800eb50 	.word	0x0800eb50
 8001cb4:	20000ab0 	.word	0x20000ab0

08001cb8 <shell_hidden_42>:
  * @brief  Sinn des Lebens...
  * @param  none
  * @retval None
  */
void shell_hidden_42()
{
 8001cb8:	b508      	push	{r3, lr}
	shell_out("\r\n\r\n\r\n"ANSI_BOLD"Du kennst die Antwort.\r\nAber kennst du auch die Frage?"ANSI_BOLD_OFF"\r\n\r\n");
 8001cba:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <shell_hidden_42+0xc>)
 8001cbc:	f7ff fe7e 	bl	80019bc <shell_out>
 8001cc0:	bd08      	pop	{r3, pc}
 8001cc2:	bf00      	nop
 8001cc4:	0800eb7c 	.word	0x0800eb7c

08001cc8 <shell_error_handler>:
void shell_error_handler(char* str)
{
	// Guckst du, was in "str" steht, dann weißt du, wo Probelm steckt
	while(1)
	{
		LED_PORT->ODR ^= LED_red;
 8001cc8:	4b02      	ldr	r3, [pc, #8]	; (8001cd4 <shell_error_handler+0xc>)
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	f482 4280 	eor.w	r2, r2, #16384	; 0x4000
 8001cd0:	615a      	str	r2, [r3, #20]
 8001cd2:	e7fa      	b.n	8001cca <shell_error_handler+0x2>
 8001cd4:	40020c00 	.word	0x40020c00

08001cd8 <shell_register_cmd>:
  * 		ACHTUNG: Es darf keine Ausgabe auf der Shell durch diesen Befehl erfolgen!
  * @param  none
  * @retval None
  */
uint8_t shell_register_cmd(char* name, void(*fctn)(int,char*))
{
 8001cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cda:	4606      	mov	r6, r0
 8001cdc:	460f      	mov	r7, r1
	if(shell_cmds_used < SHELL_CMDs_SLOTS)
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <shell_register_cmd+0x40>)
 8001ce0:	781c      	ldrb	r4, [r3, #0]
 8001ce2:	2c10      	cmp	r4, #16
 8001ce4:	d902      	bls.n	8001cec <shell_register_cmd+0x14>

		return shell_cmds_used++;
	}
	else
	{
		shell_error_handler("SHELL_CMDs_SLOTS: Give me more slots please :'( And money! Don't forget the money :)");
 8001ce6:	480d      	ldr	r0, [pc, #52]	; (8001d1c <shell_register_cmd+0x44>)
 8001ce8:	f7ff ffee 	bl	8001cc8 <shell_error_handler>
  */
uint8_t shell_register_cmd(char* name, void(*fctn)(int,char*))
{
	if(shell_cmds_used < SHELL_CMDs_SLOTS)
	{
		strcpy(shell_cmds[shell_cmds_used].cmd_name, name);
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <shell_register_cmd+0x48>)
 8001cee:	2534      	movs	r5, #52	; 0x34
 8001cf0:	fb05 3504 	mla	r5, r5, r4, r3
 8001cf4:	4628      	mov	r0, r5
 8001cf6:	4631      	mov	r1, r6
 8001cf8:	f006 fafe 	bl	80082f8 <strcpy>
		shell_cmds[shell_cmds_used].cmd_len = strlen(name);
 8001cfc:	4630      	mov	r0, r6
 8001cfe:	f006 fb59 	bl	80083b4 <strlen>
 8001d02:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
		shell_cmds[shell_cmds_used].cmd_function = fctn;
 8001d06:	62ef      	str	r7, [r5, #44]	; 0x2c
		shell_cmds[shell_cmds_used].cmd_out = RESET;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30

		return shell_cmds_used++;
 8001d0e:	1c62      	adds	r2, r4, #1
 8001d10:	4b01      	ldr	r3, [pc, #4]	; (8001d18 <shell_register_cmd+0x40>)
 8001d12:	701a      	strb	r2, [r3, #0]
	else
	{
		shell_error_handler("SHELL_CMDs_SLOTS: Give me more slots please :'( And money! Don't forget the money :)");
	}
	return 0;
}
 8001d14:	4620      	mov	r0, r4
 8001d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d18:	20000aaa 	.word	0x20000aaa
 8001d1c:	0800ebc8 	.word	0x0800ebc8
 8001d20:	20001114 	.word	0x20001114

08001d24 <shell_register_out>:
  * @brief	Registriert einen Befehl, der eine Funktion zur Ausgabe auf der Shell aufruft.
  * @param  none
  * @retval None
  */
void shell_register_out(char* name, uint8_t refresh, void(*fctn)())
{
 8001d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d26:	460f      	mov	r7, r1
 8001d28:	4616      	mov	r6, r2
	if(shell_outs_used < SHELL_OUTs_SLOTS)
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <shell_register_out+0x48>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b10      	cmp	r3, #16
 8001d30:	d818      	bhi.n	8001d64 <shell_register_out+0x40>
	{
		uint8_t id = shell_register_cmd(name,shell_activate_program);
 8001d32:	490f      	ldr	r1, [pc, #60]	; (8001d70 <shell_register_out+0x4c>)
 8001d34:	f7ff ffd0 	bl	8001cd8 <shell_register_cmd>
		shell_cmds[id].cmd_out = SET;
 8001d38:	2234      	movs	r2, #52	; 0x34
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <shell_register_out+0x50>)
 8001d3c:	fb02 3300 	mla	r3, r2, r0, r3
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		shell_outs[shell_outs_used].out_id = id;
 8001d46:	4d09      	ldr	r5, [pc, #36]	; (8001d6c <shell_register_out+0x48>)
 8001d48:	782c      	ldrb	r4, [r5, #0]
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <shell_register_out+0x54>)
 8001d4c:	f803 0034 	strb.w	r0, [r3, r4, lsl #3]
		shell_outs[shell_outs_used].out_active = 0;
 8001d50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001d54:	2000      	movs	r0, #0
 8001d56:	7058      	strb	r0, [r3, #1]
		shell_outs[shell_outs_used].out_refresh = refresh;
 8001d58:	709f      	strb	r7, [r3, #2]
		shell_outs[shell_outs_used].out_exetuted = RESET;
 8001d5a:	70d8      	strb	r0, [r3, #3]
		shell_outs[shell_outs_used].out_function = fctn;
 8001d5c:	605e      	str	r6, [r3, #4]
		shell_outs_used++;
 8001d5e:	4414      	add	r4, r2
 8001d60:	702c      	strb	r4, [r5, #0]
 8001d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	else
	{
		shell_error_handler("SHELL_OUTs_SLOTS: Give me more slots please :'( And money! Don't forget the money :)");
 8001d64:	4805      	ldr	r0, [pc, #20]	; (8001d7c <shell_register_out+0x58>)
 8001d66:	f7ff ffaf 	bl	8001cc8 <shell_error_handler>
 8001d6a:	bf00      	nop
 8001d6c:	20000aab 	.word	0x20000aab
 8001d70:	08001bd9 	.word	0x08001bd9
 8001d74:	20001114 	.word	0x20001114
 8001d78:	2000108c 	.word	0x2000108c
 8001d7c:	0800ec20 	.word	0x0800ec20

08001d80 <shell_init>:
  * @brief  Initialisiert die USB-CDC Verbindung und startet die Shell-Ausgabe.
  * @param  none
  * @retval None
  */
void shell_init()
{
 8001d80:	b510      	push	{r4, lr}
 8001d82:	b084      	sub	sp, #16
	if(
			// Initialize USB
			USBD_Init(&USBD_Device, &VCP_Desc, 0) == USBD_OK
 8001d84:	482c      	ldr	r0, [pc, #176]	; (8001e38 <shell_init+0xb8>)
 8001d86:	492d      	ldr	r1, [pc, #180]	; (8001e3c <shell_init+0xbc>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f003 fc43 	bl	8005614 <USBD_Init>
  * @param  none
  * @retval None
  */
void shell_init()
{
	if(
 8001d8e:	2800      	cmp	r0, #0
 8001d90:	d150      	bne.n	8001e34 <shell_init+0xb4>
			// Initialize USB
			USBD_Init(&USBD_Device, &VCP_Desc, 0) == USBD_OK
			// Add Supported Class
			&& USBD_RegisterClass(&USBD_Device, USBD_CDC_CLASS) == USBD_OK
 8001d92:	4829      	ldr	r0, [pc, #164]	; (8001e38 <shell_init+0xb8>)
 8001d94:	492a      	ldr	r1, [pc, #168]	; (8001e40 <shell_init+0xc0>)
 8001d96:	f003 fc55 	bl	8005644 <USBD_RegisterClass>
 8001d9a:	2800      	cmp	r0, #0
 8001d9c:	d14a      	bne.n	8001e34 <shell_init+0xb4>
			// Add CDC Interface Class
			&& USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops) == USBD_OK
 8001d9e:	4826      	ldr	r0, [pc, #152]	; (8001e38 <shell_init+0xb8>)
 8001da0:	4928      	ldr	r1, [pc, #160]	; (8001e44 <shell_init+0xc4>)
 8001da2:	f003 fbef 	bl	8005584 <USBD_CDC_RegisterInterface>
 8001da6:	2800      	cmp	r0, #0
 8001da8:	d144      	bne.n	8001e34 <shell_init+0xb4>
			//* Start Device Process
			&& USBD_Start(&USBD_Device) == USBD_OK
 8001daa:	4823      	ldr	r0, [pc, #140]	; (8001e38 <shell_init+0xb8>)
 8001dac:	f003 fc52 	bl	8005654 <USBD_Start>
 8001db0:	2800      	cmp	r0, #0
 8001db2:	d13f      	bne.n	8001e34 <shell_init+0xb4>
		)
	{
		// Warte, bis USB-Verbindung erfolgreich aufgebaut
		uint8_t TASK_USB_check_connection;
		SCHEDULER_set_statustask(&TASK_USB_check_connection, "USB_CON", 10 _s);
 8001db4:	f10d 000f 	add.w	r0, sp, #15
 8001db8:	4923      	ldr	r1, [pc, #140]	; (8001e48 <shell_init+0xc8>)
 8001dba:	4a24      	ldr	r2, [pc, #144]	; (8001e4c <shell_init+0xcc>)
 8001dbc:	f000 fb32 	bl	8002424 <SCHEDULER_set_statustask>

		// Verusche USB-Verbindung herzustellen
		while(1)
		{
			// Verbindung erfolgreich hergestellt
			if(cdc_connected == 42)
 8001dc0:	4c23      	ldr	r4, [pc, #140]	; (8001e50 <shell_init+0xd0>)
 8001dc2:	7823      	ldrb	r3, [r4, #0]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8001dc8:	d12b      	bne.n	8001e22 <shell_init+0xa2>
			{
				shell_initiated = SET;
 8001dca:	2401      	movs	r4, #1
 8001dcc:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <shell_init+0xd4>)
 8001dce:	701c      	strb	r4, [r3, #0]

				// Tasks zur Shell-Aus-Eingabe erstellen
				SCHEDULER_set_task(&TASK_shell_read_H, "shell_r", 60 _ms,1,TASK_shell_read);
 8001dd0:	4b21      	ldr	r3, [pc, #132]	; (8001e58 <shell_init+0xd8>)
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	4821      	ldr	r0, [pc, #132]	; (8001e5c <shell_init+0xdc>)
 8001dd6:	4922      	ldr	r1, [pc, #136]	; (8001e60 <shell_init+0xe0>)
 8001dd8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001ddc:	4623      	mov	r3, r4
 8001dde:	f000 faad 	bl	800233c <SCHEDULER_set_task>
				SCHEDULER_set_task(&TASK_shell_H, "shell_o", 60 _ms,1,TASK_shell);
 8001de2:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <shell_init+0xe4>)
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	4820      	ldr	r0, [pc, #128]	; (8001e68 <shell_init+0xe8>)
 8001de8:	4920      	ldr	r1, [pc, #128]	; (8001e6c <shell_init+0xec>)
 8001dea:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001dee:	4623      	mov	r3, r4
 8001df0:	f000 faa4 	bl	800233c <SCHEDULER_set_task>

				// Grundlegende Befehle erstellen:
				shell_register_out("42",RESET,shell_hidden_42);
 8001df4:	481e      	ldr	r0, [pc, #120]	; (8001e70 <shell_init+0xf0>)
 8001df6:	2100      	movs	r1, #0
 8001df8:	4a1e      	ldr	r2, [pc, #120]	; (8001e74 <shell_init+0xf4>)
 8001dfa:	f7ff ff93 	bl	8001d24 <shell_register_out>
				shell_register_out("exit",RESET,shell_exit_program);
 8001dfe:	481e      	ldr	r0, [pc, #120]	; (8001e78 <shell_init+0xf8>)
 8001e00:	2100      	movs	r1, #0
 8001e02:	4a1e      	ldr	r2, [pc, #120]	; (8001e7c <shell_init+0xfc>)
 8001e04:	f7ff ff8e 	bl	8001d24 <shell_register_out>
				shell_register_out("help",RESET,shell_help_out);
 8001e08:	481d      	ldr	r0, [pc, #116]	; (8001e80 <shell_init+0x100>)
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4a1d      	ldr	r2, [pc, #116]	; (8001e84 <shell_init+0x104>)
 8001e0e:	f7ff ff89 	bl	8001d24 <shell_register_out>
				shell_register_out("info",SET,shell_info_out);
 8001e12:	481d      	ldr	r0, [pc, #116]	; (8001e88 <shell_init+0x108>)
 8001e14:	4621      	mov	r1, r4
 8001e16:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <shell_init+0x10c>)
 8001e18:	f7ff ff84 	bl	8001d24 <shell_register_out>


				shell_hidden_cmds = 1;	// Wers findet, darfs behalten
 8001e1c:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <shell_init+0x110>)
 8001e1e:	701c      	strb	r4, [r3, #0]
				break;
 8001e20:	e008      	b.n	8001e34 <shell_init+0xb4>
			}
			else if(SCHEDULER_get_statustask(&TASK_USB_check_connection) != RESET)
 8001e22:	f10d 000f 	add.w	r0, sp, #15
 8001e26:	f000 fb39 	bl	800249c <SCHEDULER_get_statustask>
 8001e2a:	2800      	cmp	r0, #0
 8001e2c:	d0c9      	beq.n	8001dc2 <shell_init+0x42>
			{
				shell_initiated = RESET;
 8001e2e:	2200      	movs	r2, #0
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <shell_init+0xd4>)
 8001e32:	701a      	strb	r2, [r3, #0]
				break;
			}
		}
	}
}
 8001e34:	b004      	add	sp, #16
 8001e36:	bd10      	pop	{r4, pc}
 8001e38:	20000e68 	.word	0x20000e68
 8001e3c:	2000001c 	.word	0x2000001c
 8001e40:	200000b0 	.word	0x200000b0
 8001e44:	2000000c 	.word	0x2000000c
 8001e48:	0800ec78 	.word	0x0800ec78
 8001e4c:	000186a0 	.word	0x000186a0
 8001e50:	20000bb0 	.word	0x20000bb0
 8001e54:	20000aa9 	.word	0x20000aa9
 8001e58:	080018b9 	.word	0x080018b9
 8001e5c:	20000bcc 	.word	0x20000bcc
 8001e60:	0800ec80 	.word	0x0800ec80
 8001e64:	08001c25 	.word	0x08001c25
 8001e68:	20000bb4 	.word	0x20000bb4
 8001e6c:	0800ec88 	.word	0x0800ec88
 8001e70:	0800ec90 	.word	0x0800ec90
 8001e74:	08001cb9 	.word	0x08001cb9
 8001e78:	0800ec94 	.word	0x0800ec94
 8001e7c:	08001ba1 	.word	0x08001ba1
 8001e80:	0800ec9c 	.word	0x0800ec9c
 8001e84:	08001ad1 	.word	0x08001ad1
 8001e88:	0800eca4 	.word	0x0800eca4
 8001e8c:	08001a45 	.word	0x08001a45
 8001e90:	20000aad 	.word	0x20000aad

08001e94 <TASK_alive>:
		LED_PORT->ODR ^= LED_blue;
	}
}
void TASK_alive()
{
	LED_PORT->ODR ^= LED_green;
 8001e94:	4b02      	ldr	r3, [pc, #8]	; (8001ea0 <TASK_alive+0xc>)
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8001e9c:	615a      	str	r2, [r3, #20]
 8001e9e:	4770      	bx	lr
 8001ea0:	40020c00 	.word	0x40020c00

08001ea4 <TASK_demo1>:
}
void TASK_demo1()
{
	LED_PORT->ODR ^= LED_red;
 8001ea4:	4b02      	ldr	r3, [pc, #8]	; (8001eb0 <TASK_demo1+0xc>)
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	f482 4280 	eor.w	r2, r2, #16384	; 0x4000
 8001eac:	615a      	str	r2, [r3, #20]
 8001eae:	4770      	bx	lr
 8001eb0:	40020c00 	.word	0x40020c00

08001eb4 <TASK_demo2>:
}
void TASK_demo2()
{
	LED_PORT->ODR ^= LED_blue;
 8001eb4:	4b02      	ldr	r3, [pc, #8]	; (8001ec0 <TASK_demo2+0xc>)
 8001eb6:	695a      	ldr	r2, [r3, #20]
 8001eb8:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
 8001ebc:	615a      	str	r2, [r3, #20]
 8001ebe:	4770      	bx	lr
 8001ec0:	40020c00 	.word	0x40020c00

08001ec4 <tgl>:
}



void tgl(int id, char* data)
{
 8001ec4:	b500      	push	{lr}
 8001ec6:	b083      	sub	sp, #12
	int a;
	sscanf(data,"%d",&a);
 8001ec8:	4608      	mov	r0, r1
 8001eca:	4911      	ldr	r1, [pc, #68]	; (8001f10 <tgl+0x4c>)
 8001ecc:	aa01      	add	r2, sp, #4
 8001ece:	f006 f9e5 	bl	800829c <sscanf>

	if(a == 1)
 8001ed2:	9b01      	ldr	r3, [sp, #4]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d105      	bne.n	8001ee4 <tgl+0x20>
		LED_PORT->ODR ^= LED_red;
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <tgl+0x50>)
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	f482 4280 	eor.w	r2, r2, #16384	; 0x4000
 8001ee0:	615a      	str	r2, [r3, #20]
 8001ee2:	e012      	b.n	8001f0a <tgl+0x46>
	else if(a == 2)
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d105      	bne.n	8001ef4 <tgl+0x30>
		LED_PORT->ODR ^= LED_blue;
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <tgl+0x50>)
 8001eea:	695a      	ldr	r2, [r3, #20]
 8001eec:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
 8001ef0:	615a      	str	r2, [r3, #20]
 8001ef2:	e00a      	b.n	8001f0a <tgl+0x46>
	else if(a == 3)
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d108      	bne.n	8001f0a <tgl+0x46>
	{
		LED_PORT->ODR ^= LED_red;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <tgl+0x50>)
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	f482 4280 	eor.w	r2, r2, #16384	; 0x4000
 8001f00:	615a      	str	r2, [r3, #20]
		LED_PORT->ODR ^= LED_blue;
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
 8001f08:	615a      	str	r2, [r3, #20]
	}
}
 8001f0a:	b003      	add	sp, #12
 8001f0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f10:	0800ecac 	.word	0x0800ecac
 8001f14:	40020c00 	.word	0x40020c00

08001f18 <TASK_demo3>:
void TASK_demo2()
{
	LED_PORT->ODR ^= LED_blue;
}
void TASK_demo3()
{
 8001f18:	b508      	push	{r3, lr}
	LED_PORT->ODR ^= LED_orange;
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <TASK_demo3+0x1c>)
 8001f1c:	695a      	ldr	r2, [r3, #20]
 8001f1e:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8001f22:	615a      	str	r2, [r3, #20]

	if(SCHEDULER_get_statustask(&TASK_demo4_H) != RESET)
 8001f24:	4804      	ldr	r0, [pc, #16]	; (8001f38 <TASK_demo3+0x20>)
 8001f26:	f000 fab9 	bl	800249c <SCHEDULER_get_statustask>
 8001f2a:	b110      	cbz	r0, 8001f32 <TASK_demo3+0x1a>
	{
		SCHEDULER_disable_task(&TASK_demo3_H);
 8001f2c:	4803      	ldr	r0, [pc, #12]	; (8001f3c <TASK_demo3+0x24>)
 8001f2e:	f000 fadf 	bl	80024f0 <SCHEDULER_disable_task>
 8001f32:	bd08      	pop	{r3, pc}
 8001f34:	40020c00 	.word	0x40020c00
 8001f38:	20000bb8 	.word	0x20000bb8
 8001f3c:	20000bc0 	.word	0x20000bc0

08001f40 <test_start>:
	}
}
void test_start(int id, char* data)
{
 8001f40:	b508      	push	{r3, lr}
	SCHEDULER_enable_task(&TASK_demo3_H);
 8001f42:	4804      	ldr	r0, [pc, #16]	; (8001f54 <test_start+0x14>)
 8001f44:	f000 fae2 	bl	800250c <SCHEDULER_enable_task>
	SCHEDULER_set_statustask(&TASK_demo4_H, "TEEEST", 7 _s);
 8001f48:	4803      	ldr	r0, [pc, #12]	; (8001f58 <test_start+0x18>)
 8001f4a:	4904      	ldr	r1, [pc, #16]	; (8001f5c <test_start+0x1c>)
 8001f4c:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <test_start+0x20>)
 8001f4e:	f000 fa69 	bl	8002424 <SCHEDULER_set_statustask>
 8001f52:	bd08      	pop	{r3, pc}
 8001f54:	20000bc0 	.word	0x20000bc0
 8001f58:	20000bb8 	.word	0x20000bb8
 8001f5c:	0800ecb0 	.word	0x0800ecb0
 8001f60:	00011170 	.word	0x00011170

08001f64 <LED_init>:
  * @brief  Initialisiert die LEDs.
  * @param  None
  * @retval None
  */
void LED_init()
{
 8001f64:	b530      	push	{r4, r5, lr}
 8001f66:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStructure;
	__GPIOD_CLK_ENABLE();
 8001f68:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <LED_init+0x5c>)
 8001f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f6c:	f042 0208 	orr.w	r2, r2, #8
 8001f70:	631a      	str	r2, [r3, #48]	; 0x30

	//RCC_AHB1PeriphClockCmd(LED_RCC, ENABLE);
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001f72:	2501      	movs	r5, #1
 8001f74:	9502      	str	r5, [sp, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001f76:	2302      	movs	r3, #2
 8001f78:	9304      	str	r3, [sp, #16]
	GPIO_InitStructure.Pin = LED_blue | LED_green | LED_orange | LED_red;
 8001f7a:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8001f7e:	9201      	str	r2, [sp, #4]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001f80:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(LED_PORT, &GPIO_InitStructure);
 8001f82:	4c10      	ldr	r4, [pc, #64]	; (8001fc4 <LED_init+0x60>)
 8001f84:	4620      	mov	r0, r4
 8001f86:	a901      	add	r1, sp, #4
 8001f88:	f001 f95c 	bl	8003244 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LED_PORT, LED_blue, SET);
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f92:	462a      	mov	r2, r5
 8001f94:	f001 fa42 	bl	800341c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_PORT, LED_green, SET);
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9e:	462a      	mov	r2, r5
 8001fa0:	f001 fa3c 	bl	800341c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_PORT, LED_orange, RESET);
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001faa:	2200      	movs	r2, #0
 8001fac:	f001 fa36 	bl	800341c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_PORT, LED_red, SET);
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fb6:	462a      	mov	r2, r5
 8001fb8:	f001 fa30 	bl	800341c <HAL_GPIO_WritePin>
}
 8001fbc:	b007      	add	sp, #28
 8001fbe:	bd30      	pop	{r4, r5, pc}
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020c00 	.word	0x40020c00

08001fc8 <main>:
  * @brief  Simply the main-function!
  * @param  None
  * @retval 0
  */
int main(void)
{
 8001fc8:	b530      	push	{r4, r5, lr}
 8001fca:	f2ad 4dac 	subw	sp, sp, #1196	; 0x4ac
	HAL_Init();
 8001fce:	f000 ff15 	bl	8002dfc <HAL_Init>
static void SystemClock_Config(void)
{
    RCC_ClkInitTypeDef RCC_ClkInitStruct;
    RCC_OscInitTypeDef RCC_OscInitStruct;

    __PWR_CLK_ENABLE();
 8001fd2:	4b43      	ldr	r3, [pc, #268]	; (80020e0 <main+0x118>)
 8001fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fda:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fdc:	f5a3 33e4 	sub.w	r3, r3, #116736	; 0x1c800
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001fe6:	601a      	str	r2, [r3, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fe8:	2401      	movs	r4, #1
 8001fea:	9407      	str	r4, [sp, #28]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fec:	9408      	str	r4, [sp, #32]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fee:	2502      	movs	r5, #2
 8001ff0:	950d      	str	r5, [sp, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ff2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ff6:	930e      	str	r3, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 8;
 8001ff8:	2308      	movs	r3, #8
 8001ffa:	930f      	str	r3, [sp, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 336;
 8001ffc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002000:	9310      	str	r3, [sp, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002002:	9511      	str	r5, [sp, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8002004:	2307      	movs	r3, #7
 8002006:	9312      	str	r3, [sp, #72]	; 0x48
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002008:	a807      	add	r0, sp, #28
 800200a:	f001 fe4f 	bl	8003cac <HAL_RCC_OscConfig>

    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK |
 800200e:	230f      	movs	r3, #15
 8002010:	9302      	str	r3, [sp, #8]
                                   RCC_CLOCKTYPE_HCLK |
                                   RCC_CLOCKTYPE_PCLK1 |
                                   RCC_CLOCKTYPE_PCLK2);

    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002012:	9503      	str	r5, [sp, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002014:	2300      	movs	r3, #0
 8002016:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002018:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800201c:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800201e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002022:	9306      	str	r3, [sp, #24]
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002024:	a802      	add	r0, sp, #8
 8002026:	2105      	movs	r1, #5
 8002028:	f002 f82a 	bl	8004080 <HAL_RCC_ClockConfig>
	  }
#endif


	// Initialize scheduler
	SCHEDULER_init();
 800202c:	f000 f914 	bl	8002258 <SCHEDULER_init>
	// ------------------------------- //
	// DO NOT CHANGE ANYTHING ABOVE!!! //
	//     STEFFEN IS WARNING YOU :)   //
	// ------------------------------- //
		// Initialize hardware
			LED_init();
 8002030:	f7ff ff98 	bl	8001f64 <LED_init>
		// Initialize RNG
			rng_init();
 8002034:	f000 f87e 	bl	8002134 <rng_init>
		// Initialize shell
			shell_init();
 8002038:	f7ff fea2 	bl	8001d80 <shell_init>
			shell_register_cmd("tgl:",tgl);
 800203c:	4829      	ldr	r0, [pc, #164]	; (80020e4 <main+0x11c>)
 800203e:	492a      	ldr	r1, [pc, #168]	; (80020e8 <main+0x120>)
 8002040:	f7ff fe4a 	bl	8001cd8 <shell_register_cmd>
			shell_register_cmd("test",test_start);
 8002044:	4829      	ldr	r0, [pc, #164]	; (80020ec <main+0x124>)
 8002046:	492a      	ldr	r1, [pc, #168]	; (80020f0 <main+0x128>)
 8002048:	f7ff fe46 	bl	8001cd8 <shell_register_cmd>
		// Initialize tasks
			SCHEDULER_set_task(&TASK_alive_H, "alive", 50 _ms,1,TASK_alive);
 800204c:	4b29      	ldr	r3, [pc, #164]	; (80020f4 <main+0x12c>)
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	4829      	ldr	r0, [pc, #164]	; (80020f8 <main+0x130>)
 8002052:	492a      	ldr	r1, [pc, #168]	; (80020fc <main+0x134>)
 8002054:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002058:	4623      	mov	r3, r4
 800205a:	f000 f96f 	bl	800233c <SCHEDULER_set_task>
			SCHEDULER_set_task(&TASK_demo1_H, "demo1", 666 _ms,1,TASK_demo1);
 800205e:	4b28      	ldr	r3, [pc, #160]	; (8002100 <main+0x138>)
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	4828      	ldr	r0, [pc, #160]	; (8002104 <main+0x13c>)
 8002064:	4928      	ldr	r1, [pc, #160]	; (8002108 <main+0x140>)
 8002066:	f641 2204 	movw	r2, #6660	; 0x1a04
 800206a:	4623      	mov	r3, r4
 800206c:	f000 f966 	bl	800233c <SCHEDULER_set_task>
			SCHEDULER_set_task(&TASK_demo2_H, "demo2", 222 _ms,1,TASK_demo2);
 8002070:	4b26      	ldr	r3, [pc, #152]	; (800210c <main+0x144>)
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	4826      	ldr	r0, [pc, #152]	; (8002110 <main+0x148>)
 8002076:	4927      	ldr	r1, [pc, #156]	; (8002114 <main+0x14c>)
 8002078:	f640 02ac 	movw	r2, #2220	; 0x8ac
 800207c:	4623      	mov	r3, r4
 800207e:	f000 f95d 	bl	800233c <SCHEDULER_set_task>
			SCHEDULER_set_task(&TASK_demo3_H, "demo3", 777 _ms,1,TASK_demo3);
 8002082:	4b25      	ldr	r3, [pc, #148]	; (8002118 <main+0x150>)
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	4825      	ldr	r0, [pc, #148]	; (800211c <main+0x154>)
 8002088:	4925      	ldr	r1, [pc, #148]	; (8002120 <main+0x158>)
 800208a:	f641 625a 	movw	r2, #7770	; 0x1e5a
 800208e:	4623      	mov	r3, r4
 8002090:	f000 f954 	bl	800233c <SCHEDULER_set_task>
		//
			adc_init();
 8002094:	f7ff fb82 	bl	800179c <adc_init>

			FATFS FatFs;
			FIL fil;
			uint32_t total, free;
			//Mount drive
			if (f_mount(&FatFs, "", 1) == FR_OK)
 8002098:	a89e      	add	r0, sp, #632	; 0x278
 800209a:	4922      	ldr	r1, [pc, #136]	; (8002124 <main+0x15c>)
 800209c:	4622      	mov	r2, r4
 800209e:	f005 f985 	bl	80073ac <f_mount>
 80020a2:	b9b8      	cbnz	r0, 80020d4 <main+0x10c>
			{
				//Try to open file
				if (f_open(&fil, "123.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE) == FR_OK)
 80020a4:	a815      	add	r0, sp, #84	; 0x54
 80020a6:	4920      	ldr	r1, [pc, #128]	; (8002128 <main+0x160>)
 80020a8:	2213      	movs	r2, #19
 80020aa:	f005 f9b1 	bl	8007410 <f_open>
 80020ae:	b960      	cbnz	r0, 80020ca <main+0x102>
				{

					//If we put more than 0 characters (everything OK)
					if (f_puts("First string in my file\n", &fil) > 0)
 80020b0:	481e      	ldr	r0, [pc, #120]	; (800212c <main+0x164>)
 80020b2:	a915      	add	r1, sp, #84	; 0x54
 80020b4:	f005 fd96 	bl	8007be4 <f_puts>
 80020b8:	2800      	cmp	r0, #0
 80020ba:	dd03      	ble.n	80020c4 <main+0xfc>
					{
						if (TM_FATFS_DriveSize(&total, &free) == FR_OK)
 80020bc:	a814      	add	r0, sp, #80	; 0x50
 80020be:	a913      	add	r1, sp, #76	; 0x4c
 80020c0:	f000 fbde 	bl	8002880 <TM_FATFS_DriveSize>
							//Data for drive size are valid
						}
					}

					//Close file, don't forget this!
					f_close(&fil);
 80020c4:	a815      	add	r0, sp, #84	; 0x54
 80020c6:	f005 fbad 	bl	8007824 <f_close>
				}

				//Unmount drive, don't forget this!
				f_mount(0, "", 1);
 80020ca:	2000      	movs	r0, #0
 80020cc:	4915      	ldr	r1, [pc, #84]	; (8002124 <main+0x15c>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	f005 f96c 	bl	80073ac <f_mount>
	// ------------------------------- //
	// DO NOT CHANGE ANYTHING BELOW!!! //
	//     STEFFEN IS WARNING YOU :)   //
	// ------------------------------- //
	// Let the scheduler take control...
	SCHEDULER_main();
 80020d4:	f000 fa88 	bl	80025e8 <SCHEDULER_main>
	return 0;
}
 80020d8:	2000      	movs	r0, #0
 80020da:	f20d 4dac 	addw	sp, sp, #1196	; 0x4ac
 80020de:	bd30      	pop	{r4, r5, pc}
 80020e0:	40023800 	.word	0x40023800
 80020e4:	0800ecb8 	.word	0x0800ecb8
 80020e8:	08001ec5 	.word	0x08001ec5
 80020ec:	0800ecc0 	.word	0x0800ecc0
 80020f0:	08001f41 	.word	0x08001f41
 80020f4:	08001e95 	.word	0x08001e95
 80020f8:	20000bc4 	.word	0x20000bc4
 80020fc:	0800ecc8 	.word	0x0800ecc8
 8002100:	08001ea5 	.word	0x08001ea5
 8002104:	20000bc8 	.word	0x20000bc8
 8002108:	0800ecd0 	.word	0x0800ecd0
 800210c:	08001eb5 	.word	0x08001eb5
 8002110:	20000bbc 	.word	0x20000bbc
 8002114:	0800ecd8 	.word	0x0800ecd8
 8002118:	08001f19 	.word	0x08001f19
 800211c:	20000bc0 	.word	0x20000bc0
 8002120:	0800ece0 	.word	0x0800ece0
 8002124:	0800eb4c 	.word	0x0800eb4c
 8002128:	0800ece8 	.word	0x0800ece8
 800212c:	0800ecf0 	.word	0x0800ecf0

08002130 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8002130:	e7fe      	b.n	8002130 <Error_Handler>
 8002132:	bf00      	nop

08002134 <rng_init>:
 8002134:	b508      	push	{r3, lr}
 8002136:	4b07      	ldr	r3, [pc, #28]	; (8002154 <rng_init+0x20>)
 8002138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800213a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800213e:	635a      	str	r2, [r3, #52]	; 0x34
 8002140:	4805      	ldr	r0, [pc, #20]	; (8002158 <rng_init+0x24>)
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <rng_init+0x28>)
 8002144:	6003      	str	r3, [r0, #0]
 8002146:	f002 f92d 	bl	80043a4 <HAL_RNG_Init>
 800214a:	b108      	cbz	r0, 8002150 <rng_init+0x1c>
 800214c:	f7ff fff0 	bl	8002130 <Error_Handler>
 8002150:	bd08      	pop	{r3, pc}
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	20001488 	.word	0x20001488
 800215c:	50060800 	.word	0x50060800

08002160 <rng>:
 8002160:	b508      	push	{r3, lr}
 8002162:	4802      	ldr	r0, [pc, #8]	; (800216c <rng+0xc>)
 8002164:	f002 f934 	bl	80043d0 <HAL_RNG_GetRandomNumber>
 8002168:	bd08      	pop	{r3, pc}
 800216a:	bf00      	nop
 800216c:	20001488 	.word	0x20001488

08002170 <SCHEDULER_foo>:
/**
  * @brief  Dummy-Funktion
  * @param  None
  * @retval None
  */
void SCHEDULER_foo(){}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop

08002174 <SCHEDULER_shell_out>:
  * @brief  Gibt alle aktuellen Tasks in der shell aus.
  * @param  none
  * @retval None
  */
void SCHEDULER_shell_out()
{
 8002174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002178:	b0b9      	sub	sp, #228	; 0xe4
	shell_out(ANSI_BOLD"Scheduler-Informationen"ANSI_BOLD_OFF"\r\n");
 800217a:	4831      	ldr	r0, [pc, #196]	; (8002240 <SCHEDULER_shell_out+0xcc>)
 800217c:	f7ff fc1e 	bl	80019bc <shell_out>
 8002180:	4d30      	ldr	r5, [pc, #192]	; (8002244 <SCHEDULER_shell_out+0xd0>)
 8002182:	2400      	movs	r4, #0
	// Alle Slots durchlaufen
	uint8_t i;
	for(i=0;i<SCHEDULER_TASK_SLOTS;i++)
	{
		char ansicolor[10];
		if(BIT_IS_SET(SCHEDULER_task_list[i].task_flags, FLAG_active))
 8002184:	f1a5 0610 	sub.w	r6, r5, #16
 8002188:	4623      	mov	r3, r4
 800218a:	eb06 1284 	add.w	r2, r6, r4, lsl #6
 800218e:	7852      	ldrb	r2, [r2, #1]
 8002190:	f012 0f01 	tst.w	r2, #1
 8002194:	d00e      	beq.n	80021b4 <SCHEDULER_shell_out+0x40>
		{
			if(BIT_IS_SET(SCHEDULER_task_list[i].task_flags, FLAG_enabled))
 8002196:	eb06 1284 	add.w	r2, r6, r4, lsl #6
 800219a:	7852      	ldrb	r2, [r2, #1]
 800219c:	f012 0f02 	tst.w	r2, #2
				strcpy(ansicolor,ANSI_FG_GREEN);
 80021a0:	aa0f      	add	r2, sp, #60	; 0x3c
 80021a2:	bf19      	ittee	ne
 80021a4:	4928      	ldrne	r1, [pc, #160]	; (8002248 <SCHEDULER_shell_out+0xd4>)
 80021a6:	c903      	ldmiane	r1, {r0, r1}
			else
				strcpy(ansicolor,ANSI_FG_GRAY);
 80021a8:	4f28      	ldreq	r7, [pc, #160]	; (800224c <SCHEDULER_shell_out+0xd8>)
 80021aa:	e897 0003 	ldmiaeq.w	r7, {r0, r1}
 80021ae:	e882 0003 	stmia.w	r2, {r0, r1}
 80021b2:	e005      	b.n	80021c0 <SCHEDULER_shell_out+0x4c>
		}
		else
		{
			strcpy(ansicolor,ANSI_FG_RED);
 80021b4:	aa0f      	add	r2, sp, #60	; 0x3c
 80021b6:	4f26      	ldr	r7, [pc, #152]	; (8002250 <SCHEDULER_shell_out+0xdc>)
 80021b8:	e897 0003 	ldmia.w	r7, {r0, r1}
 80021bc:	e882 0003 	stmia.w	r2, {r0, r1}
		}

		char out[150];
		sprintf(out,"%s#%d\t%s\t%d\t"SHELL_BYTE"\t%d\t%d\r\n",
 80021c0:	eb06 1283 	add.w	r2, r6, r3, lsl #6
 80021c4:	6891      	ldr	r1, [r2, #8]
 80021c6:	9101      	str	r1, [sp, #4]
				ansicolor,
				i,
				SCHEDULER_task_list[i].task_name,
				SCHEDULER_task_list[i].task_interval,
				SHELL_BYTE2BIN(SCHEDULER_task_list[i].task_flags),
 80021c8:	f892 a001 	ldrb.w	sl, [r2, #1]
 80021cc:	f892 9001 	ldrb.w	r9, [r2, #1]
 80021d0:	f892 8001 	ldrb.w	r8, [r2, #1]
 80021d4:	f892 c001 	ldrb.w	ip, [r2, #1]
 80021d8:	f892 e001 	ldrb.w	lr, [r2, #1]
 80021dc:	7857      	ldrb	r7, [r2, #1]
 80021de:	970d      	str	r7, [sp, #52]	; 0x34
 80021e0:	7850      	ldrb	r0, [r2, #1]
 80021e2:	7851      	ldrb	r1, [r2, #1]
		{
			strcpy(ansicolor,ANSI_FG_RED);
		}

		char out[150];
		sprintf(out,"%s#%d\t%s\t%d\t"SHELL_BYTE"\t%d\t%d\r\n",
 80021e4:	68d7      	ldr	r7, [r2, #12]
 80021e6:	970a      	str	r7, [sp, #40]	; 0x28
 80021e8:	6852      	ldr	r2, [r2, #4]
 80021ea:	920b      	str	r2, [sp, #44]	; 0x2c
 80021ec:	9500      	str	r5, [sp, #0]
 80021ee:	ea4f 12da 	mov.w	r2, sl, lsr #7
 80021f2:	9202      	str	r2, [sp, #8]
 80021f4:	f3c9 1280 	ubfx	r2, r9, #6, #1
 80021f8:	9203      	str	r2, [sp, #12]
 80021fa:	f3c8 1240 	ubfx	r2, r8, #5, #1
 80021fe:	9204      	str	r2, [sp, #16]
 8002200:	f3cc 1200 	ubfx	r2, ip, #4, #1
 8002204:	9205      	str	r2, [sp, #20]
 8002206:	f3ce 02c0 	ubfx	r2, lr, #3, #1
 800220a:	9206      	str	r2, [sp, #24]
 800220c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800220e:	f3c2 0780 	ubfx	r7, r2, #2, #1
 8002212:	9707      	str	r7, [sp, #28]
 8002214:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002218:	9008      	str	r0, [sp, #32]
 800221a:	f001 0101 	and.w	r1, r1, #1
 800221e:	9109      	str	r1, [sp, #36]	; 0x24
 8002220:	a812      	add	r0, sp, #72	; 0x48
 8002222:	490c      	ldr	r1, [pc, #48]	; (8002254 <SCHEDULER_shell_out+0xe0>)
 8002224:	aa0f      	add	r2, sp, #60	; 0x3c
 8002226:	f006 f813 	bl	8008250 <sprintf>
				SCHEDULER_task_list[i].task_interval,
				SHELL_BYTE2BIN(SCHEDULER_task_list[i].task_flags),
				SCHEDULER_task_list[i].task_executed,
				SCHEDULER_task_list[i].task_exetime
				);
		shell_out(out);
 800222a:	a812      	add	r0, sp, #72	; 0x48
 800222c:	f7ff fbc6 	bl	80019bc <shell_out>
 8002230:	3401      	adds	r4, #1
 8002232:	3540      	adds	r5, #64	; 0x40
void SCHEDULER_shell_out()
{
	shell_out(ANSI_BOLD"Scheduler-Informationen"ANSI_BOLD_OFF"\r\n");
	// Alle Slots durchlaufen
	uint8_t i;
	for(i=0;i<SCHEDULER_TASK_SLOTS;i++)
 8002234:	2c0a      	cmp	r4, #10
 8002236:	d1a7      	bne.n	8002188 <SCHEDULER_shell_out+0x14>
				SCHEDULER_task_list[i].task_executed,
				SCHEDULER_task_list[i].task_exetime
				);
		shell_out(out);
	}
}
 8002238:	b039      	add	sp, #228	; 0xe4
 800223a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800223e:	bf00      	nop
 8002240:	0800ed0c 	.word	0x0800ed0c
 8002244:	200014a0 	.word	0x200014a0
 8002248:	0800e8c4 	.word	0x0800e8c4
 800224c:	0800ed30 	.word	0x0800ed30
 8002250:	0800e93c 	.word	0x0800e93c
 8002254:	0800ed38 	.word	0x0800ed38

08002258 <SCHEDULER_init>:
  * @brief  Initialisiert den Scheduler.
  * @param  None
  * @retval None
  */
void SCHEDULER_init()
{
 8002258:	b570      	push	{r4, r5, r6, lr}
	SCHEDULER_CLK_ENABLE();
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <SCHEDULER_init+0x64>)
 800225c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800225e:	f042 0220 	orr.w	r2, r2, #32
 8002262:	641a      	str	r2, [r3, #64]	; 0x40
	SCHEDULER_Handle.Instance = SCHEDULER_TIM;
 8002264:	4816      	ldr	r0, [pc, #88]	; (80022c0 <SCHEDULER_init+0x68>)
 8002266:	f5a3 3309 	sub.w	r3, r3, #140288	; 0x22400
 800226a:	6003      	str	r3, [r0, #0]
	SCHEDULER_Handle.Init.Period = 1;
 800226c:	2301      	movs	r3, #1
 800226e:	60c3      	str	r3, [r0, #12]
	SCHEDULER_Handle.Init.Prescaler = SCHEDULER_PRESCALER;
 8002270:	f241 0367 	movw	r3, #4199	; 0x1067
 8002274:	6043      	str	r3, [r0, #4]
	SCHEDULER_Handle.Init.ClockDivision = 0;
 8002276:	2400      	movs	r4, #0
 8002278:	6104      	str	r4, [r0, #16]
	SCHEDULER_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227a:	6084      	str	r4, [r0, #8]
	HAL_TIM_Base_Init(&SCHEDULER_Handle);
 800227c:	f002 fba2 	bl	80049c4 <HAL_TIM_Base_Init>

	HAL_NVIC_SetPriority(SCHEDULER_IRQn, 4, 0);
 8002280:	2037      	movs	r0, #55	; 0x37
 8002282:	2104      	movs	r1, #4
 8002284:	4622      	mov	r2, r4
 8002286:	f000 ff89 	bl	800319c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SCHEDULER_IRQn);
 800228a:	2037      	movs	r0, #55	; 0x37
 800228c:	f000 ffb8 	bl	8003200 <HAL_NVIC_EnableIRQ>
 8002290:	4622      	mov	r2, r4

	uint8_t i;
	for(i=0;i<SCHEDULER_TASK_SLOTS;i++)
	{
		SCHEDULER_task_list[i].task_ID = i;
 8002292:	4c0c      	ldr	r4, [pc, #48]	; (80022c4 <SCHEDULER_init+0x6c>)
		SCHEDULER_task_list[i].task_flags = 0;
 8002294:	4611      	mov	r1, r2
		SCHEDULER_task_list[i].task_executed = 0;
		SCHEDULER_task_list[i].task_exetime = 0;
		SCHEDULER_task_list[i].task_interval = 0;
		SCHEDULER_task_list[i].task_function = SCHEDULER_foo;
 8002296:	4e0c      	ldr	r6, [pc, #48]	; (80022c8 <SCHEDULER_init+0x70>)
 8002298:	b2d5      	uxtb	r5, r2
	HAL_NVIC_EnableIRQ(SCHEDULER_IRQn);

	uint8_t i;
	for(i=0;i<SCHEDULER_TASK_SLOTS;i++)
	{
		SCHEDULER_task_list[i].task_ID = i;
 800229a:	0190      	lsls	r0, r2, #6
 800229c:	1823      	adds	r3, r4, r0
 800229e:	5425      	strb	r5, [r4, r0]
		SCHEDULER_task_list[i].task_flags = 0;
 80022a0:	7059      	strb	r1, [r3, #1]
		SCHEDULER_task_list[i].task_executed = 0;
 80022a2:	60d9      	str	r1, [r3, #12]
		SCHEDULER_task_list[i].task_exetime = 0;
 80022a4:	6059      	str	r1, [r3, #4]
		SCHEDULER_task_list[i].task_interval = 0;
 80022a6:	6099      	str	r1, [r3, #8]
		SCHEDULER_task_list[i].task_function = SCHEDULER_foo;
 80022a8:	63de      	str	r6, [r3, #60]	; 0x3c
		SCHEDULER_task_list[i].task_name[0] = '\0';
 80022aa:	7419      	strb	r1, [r3, #16]
 80022ac:	3201      	adds	r2, #1

	HAL_NVIC_SetPriority(SCHEDULER_IRQn, 4, 0);
	HAL_NVIC_EnableIRQ(SCHEDULER_IRQn);

	uint8_t i;
	for(i=0;i<SCHEDULER_TASK_SLOTS;i++)
 80022ae:	2a0a      	cmp	r2, #10
 80022b0:	d1f2      	bne.n	8002298 <SCHEDULER_init+0x40>
		SCHEDULER_task_list[i].task_name[0] = '\0';
	}



	HAL_TIM_Base_Start_IT(&SCHEDULER_Handle);
 80022b2:	4803      	ldr	r0, [pc, #12]	; (80022c0 <SCHEDULER_init+0x68>)
 80022b4:	f002 fb12 	bl	80048dc <HAL_TIM_Base_Start_IT>
 80022b8:	bd70      	pop	{r4, r5, r6, pc}
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800
 80022c0:	20001710 	.word	0x20001710
 80022c4:	20001490 	.word	0x20001490
 80022c8:	08002171 	.word	0x08002171

080022cc <TIM7_IRQHandler>:
  * @param  None
  * @retval None
  */
void SCHEDULER_IRQHandler(void)
{
	if(__HAL_TIM_GET_ITSTATUS(&SCHEDULER_Handle, TIM_IT_UPDATE) !=RESET)
 80022cc:	4b18      	ldr	r3, [pc, #96]	; (8002330 <TIM7_IRQHandler+0x64>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	f012 0f01 	tst.w	r2, #1
 80022d6:	d029      	beq.n	800232c <TIM7_IRQHandler+0x60>
	{
		__HAL_TIM_CLEAR_IT(&SCHEDULER_Handle, TIM_IT_UPDATE);
 80022d8:	f06f 0201 	mvn.w	r2, #1
 80022dc:	611a      	str	r2, [r3, #16]

		SCHEDULER_time++;
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <TIM7_IRQHandler+0x68>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	3201      	adds	r2, #1
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	2300      	movs	r3, #0

		// Prüfue Tasks auf Auslösung
		uint8_t i;
		for(i=0;i<SCHEDULER_TASK_SLOTS;i++)
		{
			if(BIT_IS_SET(SCHEDULER_task_list[i].task_flags, FLAG_enabled))
 80022e8:	4a13      	ldr	r2, [pc, #76]	; (8002338 <TIM7_IRQHandler+0x6c>)
 80022ea:	eb02 1183 	add.w	r1, r2, r3, lsl #6
 80022ee:	7849      	ldrb	r1, [r1, #1]
 80022f0:	f011 0f02 	tst.w	r1, #2
 80022f4:	d017      	beq.n	8002326 <TIM7_IRQHandler+0x5a>
			{
				if( SCHEDULER_task_list[i].task_exetime > 0)
 80022f6:	eb02 1183 	add.w	r1, r2, r3, lsl #6
 80022fa:	6849      	ldr	r1, [r1, #4]
 80022fc:	b129      	cbz	r1, 800230a <TIM7_IRQHandler+0x3e>
				{
					SCHEDULER_task_list[i].task_exetime--;
 80022fe:	eb02 1083 	add.w	r0, r2, r3, lsl #6
 8002302:	6841      	ldr	r1, [r0, #4]
 8002304:	3901      	subs	r1, #1
 8002306:	6041      	str	r1, [r0, #4]
 8002308:	e00d      	b.n	8002326 <TIM7_IRQHandler+0x5a>
				}
				else
				{
					// Normaler Task -> Flag zum Ausführen setzen
					if(BIT_IS_SET(SCHEDULER_task_list[i].task_flags, FLAG_auto_delete))
 800230a:	eb02 1183 	add.w	r1, r2, r3, lsl #6
 800230e:	7849      	ldrb	r1, [r1, #1]
 8002310:	f011 0f20 	tst.w	r1, #32
					{
						BIT_SET(SCHEDULER_task_list[i].task_flags, FLAG_triggered);
 8002314:	eb02 1083 	add.w	r0, r2, r3, lsl #6
 8002318:	7841      	ldrb	r1, [r0, #1]
 800231a:	bf14      	ite	ne
 800231c:	f041 0108 	orrne.w	r1, r1, #8
					}

					// StatusTask
					else
					{
						BIT_SET(SCHEDULER_task_list[i].task_flags, FLAG_done);
 8002320:	f041 0140 	orreq.w	r1, r1, #64	; 0x40
 8002324:	7041      	strb	r1, [r0, #1]
 8002326:	3301      	adds	r3, #1

		SCHEDULER_time++;

		// Prüfue Tasks auf Auslösung
		uint8_t i;
		for(i=0;i<SCHEDULER_TASK_SLOTS;i++)
 8002328:	2b0a      	cmp	r3, #10
 800232a:	d1de      	bne.n	80022ea <TIM7_IRQHandler+0x1e>
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20001710 	.word	0x20001710
 8002334:	20000bd0 	.word	0x20000bd0
 8002338:	20001490 	.word	0x20001490

0800233c <SCHEDULER_set_task>:
  * @param  repeat:		true: Tasks wird regelmäßig wiederholt
  * @param  fctn:	Zeiger auf auszuführene Funktion
  * @retval None
  */
void SCHEDULER_set_task(SCHEDULER_taskhandler* handler, char* name, uint32_t interval, uint8_t repeat, void(*fctn)() )
{
 800233c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002340:	4617      	mov	r7, r2
 8002342:	4698      	mov	r8, r3
 8002344:	9e08      	ldr	r6, [sp, #32]
	uint8_t task_ID;

	// Task existiert bereits, wird nun aktualisiert
	if(handler->task_active != RESET)
 8002346:	7843      	ldrb	r3, [r0, #1]
 8002348:	b92b      	cbnz	r3, 8002356 <SCHEDULER_set_task+0x1a>
		task_ID = 255;
		// Suche ersten freien Slot
		uint8_t i;
		for(i=0;i<SCHEDULER_TASK_SLOTS;i++)
		{
			if(BIT_IS_CLR(SCHEDULER_task_list[i].task_flags, FLAG_active))
 800234a:	4b34      	ldr	r3, [pc, #208]	; (800241c <SCHEDULER_set_task+0xe0>)
 800234c:	785b      	ldrb	r3, [r3, #1]
 800234e:	f013 0f01 	tst.w	r3, #1
 8002352:	d102      	bne.n	800235a <SCHEDULER_set_task+0x1e>
 8002354:	e011      	b.n	800237a <SCHEDULER_set_task+0x3e>
	uint8_t task_ID;

	// Task existiert bereits, wird nun aktualisiert
	if(handler->task_active != RESET)
	{
		task_ID = handler->task_ID;
 8002356:	7804      	ldrb	r4, [r0, #0]
 8002358:	e00c      	b.n	8002374 <SCHEDULER_set_task+0x38>
		task_ID = 255;
		// Suche ersten freien Slot
		uint8_t i;
		for(i=0;i<SCHEDULER_TASK_SLOTS;i++)
		{
			if(BIT_IS_CLR(SCHEDULER_task_list[i].task_flags, FLAG_active))
 800235a:	2501      	movs	r5, #1
 800235c:	4b2f      	ldr	r3, [pc, #188]	; (800241c <SCHEDULER_set_task+0xe0>)
 800235e:	b2ec      	uxtb	r4, r5
 8002360:	eb03 1285 	add.w	r2, r3, r5, lsl #6
 8002364:	7852      	ldrb	r2, [r2, #1]
 8002366:	f012 0f01 	tst.w	r2, #1
 800236a:	d003      	beq.n	8002374 <SCHEDULER_set_task+0x38>
 800236c:	3501      	adds	r5, #1
	else
	{
		task_ID = 255;
		// Suche ersten freien Slot
		uint8_t i;
		for(i=0;i<SCHEDULER_TASK_SLOTS;i++)
 800236e:	2d0a      	cmp	r5, #10
 8002370:	d1f5      	bne.n	800235e <SCHEDULER_set_task+0x22>
 8002372:	e051      	b.n	8002418 <SCHEDULER_set_task+0xdc>
			}
		}
	}

	// Slot gefunden
	if(task_ID != 255)
 8002374:	2cff      	cmp	r4, #255	; 0xff
 8002376:	d101      	bne.n	800237c <SCHEDULER_set_task+0x40>
 8002378:	e04e      	b.n	8002418 <SCHEDULER_set_task+0xdc>
		task_ID = 255;
		// Suche ersten freien Slot
		uint8_t i;
		for(i=0;i<SCHEDULER_TASK_SLOTS;i++)
		{
			if(BIT_IS_CLR(SCHEDULER_task_list[i].task_flags, FLAG_active))
 800237a:	2400      	movs	r4, #0

	// Slot gefunden
	if(task_ID != 255)
	{
		// Zuweisung für Handler
		handler->task_ID = task_ID;
 800237c:	7004      	strb	r4, [r0, #0]
		handler->task_active = SET;
 800237e:	2301      	movs	r3, #1
 8002380:	7043      	strb	r3, [r0, #1]

		// Einstellungen speichern
		strcpy(SCHEDULER_task_list[task_ID].task_name,name);
 8002382:	4625      	mov	r5, r4
 8002384:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8002388:	f109 0010 	add.w	r0, r9, #16
 800238c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 800241c <SCHEDULER_set_task+0xe0>
 8002390:	4450      	add	r0, sl
 8002392:	f005 ffb1 	bl	80082f8 <strcpy>
		SCHEDULER_task_list[task_ID].task_executed = 0;
 8002396:	eb0a 0109 	add.w	r1, sl, r9
 800239a:	2200      	movs	r2, #0
 800239c:	60ca      	str	r2, [r1, #12]
		SCHEDULER_task_list[task_ID].task_interval = interval;
 800239e:	608f      	str	r7, [r1, #8]
		SCHEDULER_task_list[task_ID].task_exetime = interval;
 80023a0:	604f      	str	r7, [r1, #4]

		// Flags setzen/löschen
		BIT_SET(SCHEDULER_task_list[task_ID].task_flags, FLAG_active);
 80023a2:	784b      	ldrb	r3, [r1, #1]
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	704b      	strb	r3, [r1, #1]
		BIT_SET(SCHEDULER_task_list[task_ID].task_flags, FLAG_enabled);
 80023aa:	784b      	ldrb	r3, [r1, #1]
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	704b      	strb	r3, [r1, #1]
		BIT_CLR(SCHEDULER_task_list[task_ID].task_flags, FLAG_triggered);
 80023b2:	784b      	ldrb	r3, [r1, #1]
 80023b4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 80023b8:	704b      	strb	r3, [r1, #1]
		BIT_SET(SCHEDULER_task_list[task_ID].task_flags, FLAG_auto_delete);
 80023ba:	784b      	ldrb	r3, [r1, #1]
 80023bc:	f043 0320 	orr.w	r3, r3, #32
 80023c0:	704b      	strb	r3, [r1, #1]
		BIT_CLR(SCHEDULER_task_list[task_ID].task_flags, FLAG_done);
 80023c2:	784b      	ldrb	r3, [r1, #1]
 80023c4:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 80023c8:	704b      	strb	r3, [r1, #1]

		// Einmaliges Auslösen?
		if(repeat != 0)
 80023ca:	f1b8 0f00 	cmp.w	r8, #0
 80023ce:	d006      	beq.n	80023de <SCHEDULER_set_task+0xa2>
		{
			BIT_SET(SCHEDULER_task_list[task_ID].task_flags, FLAG_repeat);
 80023d0:	eb0a 1484 	add.w	r4, sl, r4, lsl #6
 80023d4:	7863      	ldrb	r3, [r4, #1]
 80023d6:	f043 0304 	orr.w	r3, r3, #4
 80023da:	7063      	strb	r3, [r4, #1]
 80023dc:	e006      	b.n	80023ec <SCHEDULER_set_task+0xb0>
		}
		else
		{
			BIT_CLR(SCHEDULER_task_list[task_ID].task_flags, FLAG_repeat);
 80023de:	4b0f      	ldr	r3, [pc, #60]	; (800241c <SCHEDULER_set_task+0xe0>)
 80023e0:	eb03 1484 	add.w	r4, r3, r4, lsl #6
 80023e4:	7863      	ldrb	r3, [r4, #1]
 80023e6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 80023ea:	7063      	strb	r3, [r4, #1]
		}

		// Automatischer Funktionsaufruf?
		if(fctn == 0)
 80023ec:	b956      	cbnz	r6, 8002404 <SCHEDULER_set_task+0xc8>
		{
			SCHEDULER_task_list[task_ID].task_function = SCHEDULER_foo;
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <SCHEDULER_set_task+0xe0>)
 80023f0:	eb03 1385 	add.w	r3, r3, r5, lsl #6
 80023f4:	490a      	ldr	r1, [pc, #40]	; (8002420 <SCHEDULER_set_task+0xe4>)
 80023f6:	63d9      	str	r1, [r3, #60]	; 0x3c
			BIT_CLR(SCHEDULER_task_list[task_ID].task_flags, FLAG_call_function);
 80023f8:	785a      	ldrb	r2, [r3, #1]
 80023fa:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 80023fe:	705a      	strb	r2, [r3, #1]
 8002400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		else
		{
			SCHEDULER_task_list[task_ID].task_function = fctn;
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <SCHEDULER_set_task+0xe0>)
 8002406:	eb03 1385 	add.w	r3, r3, r5, lsl #6
 800240a:	63de      	str	r6, [r3, #60]	; 0x3c
			BIT_SET(SCHEDULER_task_list[task_ID].task_flags, FLAG_call_function);
 800240c:	785a      	ldrb	r2, [r3, #1]
 800240e:	f042 0210 	orr.w	r2, r2, #16
 8002412:	705a      	strb	r2, [r3, #1]
 8002414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002418:	e7fe      	b.n	8002418 <SCHEDULER_set_task+0xdc>
 800241a:	bf00      	nop
 800241c:	20001490 	.word	0x20001490
 8002420:	08002171 	.word	0x08002171

08002424 <SCHEDULER_set_statustask>:
  * @param  name:		Name des Tasks
  * @param  interval:	Verzögerung des Tasks
  * @retval None
  */
void SCHEDULER_set_statustask(SCHEDULER_taskhandler* handler, char* name, uint32_t interval)
{
 8002424:	b510      	push	{r4, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	4604      	mov	r4, r0
	SCHEDULER_set_task(handler, name, interval, 0, 0);
 800242a:	2300      	movs	r3, #0
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	f7ff ff85 	bl	800233c <SCHEDULER_set_task>
	BIT_CLR(SCHEDULER_task_list[handler->task_ID].task_flags, FLAG_auto_delete);
 8002432:	7822      	ldrb	r2, [r4, #0]
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <SCHEDULER_set_statustask+0x24>)
 8002436:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 800243a:	785a      	ldrb	r2, [r3, #1]
 800243c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8002440:	705a      	strb	r2, [r3, #1]
}
 8002442:	b002      	add	sp, #8
 8002444:	bd10      	pop	{r4, pc}
 8002446:	bf00      	nop
 8002448:	20001490 	.word	0x20001490

0800244c <SCHEDULER_delete_task>:
  * @brief  Löscht einen bestehenden Task und gibt den Slot für andere Tasks frei
  * @param  handler:	Handler (ID) des Tasks
  * @retval None
  */
void SCHEDULER_delete_task(SCHEDULER_taskhandler* handler)
{
 800244c:	b410      	push	{r4}
	//if(*handler < SCHEDULER_TASK_SLOTS)
	if(handler->task_active != RESET)
 800244e:	7843      	ldrb	r3, [r0, #1]
 8002450:	b1eb      	cbz	r3, 800248e <SCHEDULER_delete_task+0x42>
	{
		SCHEDULER_task_list[handler->task_ID].task_interval = 0;
 8002452:	7801      	ldrb	r1, [r0, #0]
 8002454:	4a0f      	ldr	r2, [pc, #60]	; (8002494 <SCHEDULER_delete_task+0x48>)
 8002456:	eb02 1181 	add.w	r1, r2, r1, lsl #6
 800245a:	2300      	movs	r3, #0
 800245c:	608b      	str	r3, [r1, #8]
		SCHEDULER_task_list[handler->task_ID].task_name[0] = '\0';
 800245e:	7801      	ldrb	r1, [r0, #0]
 8002460:	eb02 1181 	add.w	r1, r2, r1, lsl #6
 8002464:	740b      	strb	r3, [r1, #16]
		SCHEDULER_task_list[handler->task_ID].task_flags = 0;
 8002466:	7801      	ldrb	r1, [r0, #0]
 8002468:	eb02 1181 	add.w	r1, r2, r1, lsl #6
 800246c:	704b      	strb	r3, [r1, #1]
		SCHEDULER_task_list[handler->task_ID].task_function = SCHEDULER_foo;
 800246e:	7801      	ldrb	r1, [r0, #0]
 8002470:	eb02 1181 	add.w	r1, r2, r1, lsl #6
 8002474:	4c08      	ldr	r4, [pc, #32]	; (8002498 <SCHEDULER_delete_task+0x4c>)
 8002476:	63cc      	str	r4, [r1, #60]	; 0x3c
		SCHEDULER_task_list[handler->task_ID].task_executed = 0;
 8002478:	7801      	ldrb	r1, [r0, #0]
 800247a:	eb02 1181 	add.w	r1, r2, r1, lsl #6
 800247e:	60cb      	str	r3, [r1, #12]
		SCHEDULER_task_list[handler->task_ID].task_exetime = 0;
 8002480:	7801      	ldrb	r1, [r0, #0]
 8002482:	eb02 1281 	add.w	r2, r2, r1, lsl #6
 8002486:	6053      	str	r3, [r2, #4]
		handler->task_ID = 255;
 8002488:	22ff      	movs	r2, #255	; 0xff
 800248a:	7002      	strb	r2, [r0, #0]
		handler->task_active = RESET;
 800248c:	7043      	strb	r3, [r0, #1]
	}
}
 800248e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	20001490 	.word	0x20001490
 8002498:	08002171 	.word	0x08002171

0800249c <SCHEDULER_get_statustask>:
  * @brief  Prüft einen Task auf Auslösung
  * @param  handler:	Handler (ID) des Tasks
  * @retval None
  */
uint8_t SCHEDULER_get_statustask(SCHEDULER_taskhandler* handler)
{
 800249c:	b508      	push	{r3, lr}
	if(
			handler->task_active != RESET
 800249e:	7843      	ldrb	r3, [r0, #1]
  * @param  handler:	Handler (ID) des Tasks
  * @retval None
  */
uint8_t SCHEDULER_get_statustask(SCHEDULER_taskhandler* handler)
{
	if(
 80024a0:	b163      	cbz	r3, 80024bc <SCHEDULER_get_statustask+0x20>
			handler->task_active != RESET
			//&& handler->task_ID < SCHEDULER_TASK_SLOTS
			&& BIT_IS_SET(SCHEDULER_task_list[handler->task_ID].task_flags, FLAG_done)
 80024a2:	7802      	ldrb	r2, [r0, #0]
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <SCHEDULER_get_statustask+0x24>)
 80024a6:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 80024aa:	785a      	ldrb	r2, [r3, #1]
 80024ac:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80024b0:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 80024b4:	b112      	cbz	r2, 80024bc <SCHEDULER_get_statustask+0x20>
		)
	{
		SCHEDULER_delete_task(handler);
 80024b6:	f7ff ffc9 	bl	800244c <SCHEDULER_delete_task>
		return SET;
 80024ba:	2301      	movs	r3, #1
	}
	return RESET;
}
 80024bc:	4618      	mov	r0, r3
 80024be:	bd08      	pop	{r3, pc}
 80024c0:	20001490 	.word	0x20001490

080024c4 <SCHEDULER_delete_task_shell>:
  * @brief  Shell-Befehl: Löscht einen bestehenden Task und gibt den Slot für andere Tasks frei
  * @param  data:	Befehlszeichenkette
  * @retval None
  */
void SCHEDULER_delete_task_shell(int id, char* cmd)
{
 80024c4:	b500      	push	{lr}
 80024c6:	b083      	sub	sp, #12
	int a;
	sscanf(cmd,"%d",&a);
 80024c8:	4608      	mov	r0, r1
 80024ca:	4908      	ldr	r1, [pc, #32]	; (80024ec <SCHEDULER_delete_task_shell+0x28>)
 80024cc:	aa01      	add	r2, sp, #4
 80024ce:	f005 fee5 	bl	800829c <sscanf>

	SCHEDULER_taskhandler tmp;
	tmp.task_ID = a;
 80024d2:	9b01      	ldr	r3, [sp, #4]
 80024d4:	f88d 3000 	strb.w	r3, [sp]
	tmp.task_active = SET;
 80024d8:	2301      	movs	r3, #1
 80024da:	f88d 3001 	strb.w	r3, [sp, #1]
	SCHEDULER_delete_task(&tmp);
 80024de:	4668      	mov	r0, sp
 80024e0:	f7ff ffb4 	bl	800244c <SCHEDULER_delete_task>
}
 80024e4:	b003      	add	sp, #12
 80024e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80024ea:	bf00      	nop
 80024ec:	0800ecac 	.word	0x0800ecac

080024f0 <SCHEDULER_disable_task>:
  * @retval None
  */
void SCHEDULER_disable_task(SCHEDULER_taskhandler* handler)
{
	//if(*handler < SCHEDULER_TASK_SLOTS)
	if(handler->task_active != RESET)
 80024f0:	7843      	ldrb	r3, [r0, #1]
 80024f2:	b13b      	cbz	r3, 8002504 <SCHEDULER_disable_task+0x14>
	{
		BIT_CLR(SCHEDULER_task_list[handler->task_ID].task_flags, FLAG_enabled);
 80024f4:	7802      	ldrb	r2, [r0, #0]
 80024f6:	4b04      	ldr	r3, [pc, #16]	; (8002508 <SCHEDULER_disable_task+0x18>)
 80024f8:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 80024fc:	785a      	ldrb	r2, [r3, #1]
 80024fe:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8002502:	705a      	strb	r2, [r3, #1]
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20001490 	.word	0x20001490

0800250c <SCHEDULER_enable_task>:
  * @retval None
  */
void SCHEDULER_enable_task(SCHEDULER_taskhandler* handler)
{
	//if(*handler < SCHEDULER_TASK_SLOTS)
	if(handler->task_active != RESET)
 800250c:	7843      	ldrb	r3, [r0, #1]
 800250e:	b19b      	cbz	r3, 8002538 <SCHEDULER_enable_task+0x2c>
	{
		BIT_SET(SCHEDULER_task_list[handler->task_ID].task_flags, FLAG_enabled);
 8002510:	7802      	ldrb	r2, [r0, #0]
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <SCHEDULER_enable_task+0x30>)
 8002514:	eb03 1282 	add.w	r2, r3, r2, lsl #6
 8002518:	7851      	ldrb	r1, [r2, #1]
 800251a:	f041 0102 	orr.w	r1, r1, #2
 800251e:	7051      	strb	r1, [r2, #1]
		BIT_CLR(SCHEDULER_task_list[handler->task_ID].task_flags, FLAG_triggered);
 8002520:	7802      	ldrb	r2, [r0, #0]
 8002522:	eb03 1282 	add.w	r2, r3, r2, lsl #6
 8002526:	7851      	ldrb	r1, [r2, #1]
 8002528:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 800252c:	7051      	strb	r1, [r2, #1]
		SCHEDULER_task_list[handler->task_ID].task_exetime = SCHEDULER_task_list[handler->task_ID].task_interval;
 800252e:	7802      	ldrb	r2, [r0, #0]
 8002530:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20001490 	.word	0x20001490

08002540 <SCHEDULER_task_status>:
  * @brief  Ändert den Zustand eines bestehenden Tasks
  * @param  handler:	Handler (ID) des Tasks
  * @retval None
  */
void SCHEDULER_task_status(SCHEDULER_taskhandler* handler, uint8_t status)
{
 8002540:	b508      	push	{r3, lr}
	if(status == RESET)
 8002542:	b911      	cbnz	r1, 800254a <SCHEDULER_task_status+0xa>
		SCHEDULER_disable_task(handler);
 8002544:	f7ff ffd4 	bl	80024f0 <SCHEDULER_disable_task>
 8002548:	bd08      	pop	{r3, pc}
	else
		SCHEDULER_enable_task(handler);
 800254a:	f7ff ffdf 	bl	800250c <SCHEDULER_enable_task>
 800254e:	bd08      	pop	{r3, pc}

08002550 <SCHEDULER_task_status_shell>:
  * @brief  Shell-Befehl: Ändert den Zustand eines bestehenden Tasks
  * @param  data:	Befehlszeichenkette
  * @retval None
  */
void SCHEDULER_task_status_shell(int id, char* cmd)
{
 8002550:	b500      	push	{lr}
 8002552:	b085      	sub	sp, #20
	int a,b;
	sscanf(cmd,"%d,%d",&a,&b);
 8002554:	4608      	mov	r0, r1
 8002556:	4909      	ldr	r1, [pc, #36]	; (800257c <SCHEDULER_task_status_shell+0x2c>)
 8002558:	aa03      	add	r2, sp, #12
 800255a:	ab02      	add	r3, sp, #8
 800255c:	f005 fe9e 	bl	800829c <sscanf>

	SCHEDULER_taskhandler tmp;
	tmp.task_ID = a;
 8002560:	9b03      	ldr	r3, [sp, #12]
 8002562:	f88d 3004 	strb.w	r3, [sp, #4]
	tmp.task_active = SET;
 8002566:	2301      	movs	r3, #1
 8002568:	f88d 3005 	strb.w	r3, [sp, #5]
	SCHEDULER_task_status(&tmp,b);
 800256c:	a801      	add	r0, sp, #4
 800256e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8002572:	f7ff ffe5 	bl	8002540 <SCHEDULER_task_status>
}
 8002576:	b005      	add	sp, #20
 8002578:	f85d fb04 	ldr.w	pc, [sp], #4
 800257c:	0800ed60 	.word	0x0800ed60

08002580 <SCHEDULER_set_interval>:
  * @retval None
  */
void SCHEDULER_set_interval(SCHEDULER_taskhandler* handler,uint32_t interval)
{
	//if(*handler < SCHEDULER_TASK_SLOTS)
	if(handler->task_active != RESET)
 8002580:	7843      	ldrb	r3, [r0, #1]
 8002582:	b123      	cbz	r3, 800258e <SCHEDULER_set_interval+0xe>
	{
		SCHEDULER_task_list[handler->task_ID].task_interval = interval;
 8002584:	7802      	ldrb	r2, [r0, #0]
 8002586:	4b02      	ldr	r3, [pc, #8]	; (8002590 <SCHEDULER_set_interval+0x10>)
 8002588:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 800258c:	6099      	str	r1, [r3, #8]
 800258e:	4770      	bx	lr
 8002590:	20001490 	.word	0x20001490

08002594 <SCHEDULER_set_interval_shell>:
  * @brief  Shell-Befehl: Ändert das Interval eines bestehenden Tasks
  * @param  data:	Befehlszeichenkette
  * @retval None
  */
void SCHEDULER_set_interval_shell(int id, char* cmd)
{
 8002594:	b500      	push	{lr}
 8002596:	b083      	sub	sp, #12
	int a,b;
	sscanf(cmd,"%d,%d",&a,&b);
 8002598:	4608      	mov	r0, r1
 800259a:	4906      	ldr	r1, [pc, #24]	; (80025b4 <SCHEDULER_set_interval_shell+0x20>)
 800259c:	aa01      	add	r2, sp, #4
 800259e:	466b      	mov	r3, sp
 80025a0:	f005 fe7c 	bl	800829c <sscanf>

	SCHEDULER_set_interval(&a,b);
 80025a4:	a801      	add	r0, sp, #4
 80025a6:	9900      	ldr	r1, [sp, #0]
 80025a8:	f7ff ffea 	bl	8002580 <SCHEDULER_set_interval>
}
 80025ac:	b003      	add	sp, #12
 80025ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80025b2:	bf00      	nop
 80025b4:	0800ed60 	.word	0x0800ed60

080025b8 <delay_ms>:
  * @brief  Warte angegebene Zeit in Millisekunden.
  * @param  delay:	Wartezeit
  * @retval None
  */
void delay_ms(uint32_t delay)
{
 80025b8:	b410      	push	{r4}
	uint32_t start = SCHEDULER_time;
 80025ba:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <delay_ms+0x28>)
 80025bc:	681b      	ldr	r3, [r3, #0]
	uint32_t stop = start + delay _ms;
 80025be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025c2:	fb01 f000 	mul.w	r0, r1, r0
 80025c6:	4a07      	ldr	r2, [pc, #28]	; (80025e4 <delay_ms+0x2c>)
 80025c8:	fba2 4100 	umull	r4, r1, r2, r0
 80025cc:	eb03 1151 	add.w	r1, r3, r1, lsr #5
	while(stop > SCHEDULER_time);
 80025d0:	4a03      	ldr	r2, [pc, #12]	; (80025e0 <delay_ms+0x28>)
 80025d2:	6813      	ldr	r3, [r2, #0]
 80025d4:	4299      	cmp	r1, r3
 80025d6:	d8fc      	bhi.n	80025d2 <delay_ms+0x1a>
}
 80025d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000bd0 	.word	0x20000bd0
 80025e4:	51eb851f 	.word	0x51eb851f

080025e8 <SCHEDULER_main>:
  * @brief  Startet den Scheduler
  * @param  None
  * @retval None
  */
void SCHEDULER_main()
{
 80025e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Falls die shell aktiv ist, erstelle entsprechende Kommandos
	if(shell_initiated != RESET)
 80025ea:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <SCHEDULER_main+0x7c>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	b183      	cbz	r3, 8002612 <SCHEDULER_main+0x2a>
	{
		shell_register_cmd("scheduler_interval:",SCHEDULER_set_interval_shell);
 80025f0:	481d      	ldr	r0, [pc, #116]	; (8002668 <SCHEDULER_main+0x80>)
 80025f2:	491e      	ldr	r1, [pc, #120]	; (800266c <SCHEDULER_main+0x84>)
 80025f4:	f7ff fb70 	bl	8001cd8 <shell_register_cmd>
		shell_register_cmd("scheduler_delete:",SCHEDULER_delete_task_shell);
 80025f8:	481d      	ldr	r0, [pc, #116]	; (8002670 <SCHEDULER_main+0x88>)
 80025fa:	491e      	ldr	r1, [pc, #120]	; (8002674 <SCHEDULER_main+0x8c>)
 80025fc:	f7ff fb6c 	bl	8001cd8 <shell_register_cmd>
		shell_register_cmd("scheduler_task:",SCHEDULER_task_status_shell);
 8002600:	481d      	ldr	r0, [pc, #116]	; (8002678 <SCHEDULER_main+0x90>)
 8002602:	491e      	ldr	r1, [pc, #120]	; (800267c <SCHEDULER_main+0x94>)
 8002604:	f7ff fb68 	bl	8001cd8 <shell_register_cmd>
		shell_register_out("scheduler",SET,SCHEDULER_shell_out);
 8002608:	481d      	ldr	r0, [pc, #116]	; (8002680 <SCHEDULER_main+0x98>)
 800260a:	2101      	movs	r1, #1
 800260c:	4a1d      	ldr	r2, [pc, #116]	; (8002684 <SCHEDULER_main+0x9c>)
 800260e:	f7ff fb89 	bl	8001d24 <shell_register_out>


	while(1) // The one and only ...
	{
		uint8_t i;
		for(i=0;i<SCHEDULER_TASK_SLOTS;i++)
 8002612:	2400      	movs	r4, #0
		{
			// Task ausführen
			if(
					BIT_IS_SET(SCHEDULER_task_list[i].task_flags, FLAG_enabled)
 8002614:	4d1c      	ldr	r5, [pc, #112]	; (8002688 <SCHEDULER_main+0xa0>)
 8002616:	eb05 1384 	add.w	r3, r5, r4, lsl #6
 800261a:	785b      	ldrb	r3, [r3, #1]
	{
		uint8_t i;
		for(i=0;i<SCHEDULER_TASK_SLOTS;i++)
		{
			// Task ausführen
			if(
 800261c:	f013 0f02 	tst.w	r3, #2
 8002620:	d01a      	beq.n	8002658 <SCHEDULER_main+0x70>
					BIT_IS_SET(SCHEDULER_task_list[i].task_flags, FLAG_enabled)
					&& BIT_IS_SET(SCHEDULER_task_list[i].task_flags, FLAG_triggered)
 8002622:	eb05 1384 	add.w	r3, r5, r4, lsl #6
 8002626:	785b      	ldrb	r3, [r3, #1]
 8002628:	f013 0f08 	tst.w	r3, #8
 800262c:	d014      	beq.n	8002658 <SCHEDULER_main+0x70>
					)
			{
				BIT_CLR(SCHEDULER_task_list[i].task_flags, FLAG_triggered);
 800262e:	eb05 1784 	add.w	r7, r5, r4, lsl #6
 8002632:	787b      	ldrb	r3, [r7, #1]
 8002634:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8002638:	707b      	strb	r3, [r7, #1]

				SCHEDULER_task_list[i].task_function();
 800263a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800263c:	4798      	blx	r3
				SCHEDULER_task_list[i].task_executed++;
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	3201      	adds	r2, #1
 8002642:	60fa      	str	r2, [r7, #12]

				// Task erneut ausführen...
				if(BIT_IS_SET(SCHEDULER_task_list[i].task_flags, FLAG_repeat))
 8002644:	787b      	ldrb	r3, [r7, #1]
 8002646:	f013 0f04 	tst.w	r3, #4
 800264a:	d002      	beq.n	8002652 <SCHEDULER_main+0x6a>
				{
					SCHEDULER_task_list[i].task_exetime = SCHEDULER_task_list[i].task_interval;
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	607b      	str	r3, [r7, #4]
 8002650:	e002      	b.n	8002658 <SCHEDULER_main+0x70>
				}
				// Task löschen
				else if(BIT_IS_SET(SCHEDULER_task_list[i].task_flags, FLAG_auto_delete))
 8002652:	eb05 1684 	add.w	r6, r5, r4, lsl #6
 8002656:	7873      	ldrb	r3, [r6, #1]


	while(1) // The one and only ...
	{
		uint8_t i;
		for(i=0;i<SCHEDULER_TASK_SLOTS;i++)
 8002658:	3401      	adds	r4, #1
 800265a:	b2e4      	uxtb	r4, r4
 800265c:	2c0a      	cmp	r4, #10
 800265e:	bf28      	it	cs
 8002660:	2400      	movcs	r4, #0
 8002662:	e7d8      	b.n	8002616 <SCHEDULER_main+0x2e>
 8002664:	20000aa9 	.word	0x20000aa9
 8002668:	0800ed68 	.word	0x0800ed68
 800266c:	08002595 	.word	0x08002595
 8002670:	0800ed7c 	.word	0x0800ed7c
 8002674:	080024c5 	.word	0x080024c5
 8002678:	0800ed90 	.word	0x0800ed90
 800267c:	08002551 	.word	0x08002551
 8002680:	0800eda0 	.word	0x0800eda0
 8002684:	08002175 	.word	0x08002175
 8002688:	20001490 	.word	0x20001490

0800268c <sd_cmd_ls>:




void sd_cmd_ls()
{
 800268c:	b510      	push	{r4, lr}
 800268e:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
	char path[20] = "";
 8002692:	2100      	movs	r1, #0
 8002694:	91b3      	str	r1, [sp, #716]	; 0x2cc
 8002696:	91b4      	str	r1, [sp, #720]	; 0x2d0
 8002698:	91b5      	str	r1, [sp, #724]	; 0x2d4
 800269a:	91b6      	str	r1, [sp, #728]	; 0x2d8
 800269c:	91b7      	str	r1, [sp, #732]	; 0x2dc
	char out[100] = "";
 800269e:	919a      	str	r1, [sp, #616]	; 0x268
 80026a0:	a89b      	add	r0, sp, #620	; 0x26c
 80026a2:	2260      	movs	r2, #96	; 0x60
 80026a4:	f005 fd74 	bl	8008190 <memset>


	shell_out("\r\n\r\nFiles:\r\n");
 80026a8:	4819      	ldr	r0, [pc, #100]	; (8002710 <sd_cmd_ls+0x84>)
 80026aa:	f7ff f987 	bl	80019bc <shell_out>
	FATFS FatFs;
	if (f_mount(&FatFs, "", 1) == FR_OK)
 80026ae:	a80e      	add	r0, sp, #56	; 0x38
 80026b0:	4918      	ldr	r1, [pc, #96]	; (8002714 <sd_cmd_ls+0x88>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	f004 fe7a 	bl	80073ac <f_mount>
 80026b8:	bb20      	cbnz	r0, 8002704 <sd_cmd_ls+0x78>
		FILINFO fno;
		DIR dir;
		int i;
		char *fn;   // This function assumes non-Unicode configuration

		res = f_opendir(&dir, path);                       // Open the directory
 80026ba:	a807      	add	r0, sp, #28
 80026bc:	a9b3      	add	r1, sp, #716	; 0x2cc
 80026be:	f005 f8c1 	bl	8007844 <f_opendir>
		if (res == FR_OK)
 80026c2:	bb10      	cbnz	r0, 800270a <sd_cmd_ls+0x7e>

					sprintf(out,ANSI_FG_MAGENTA"%s/%s/\r\n", path, fn);
				}
				else
				{
					sprintf(out,ANSI_FG_CYAN"%s/%s\r\n", path, fn);
 80026c4:	4c14      	ldr	r4, [pc, #80]	; (8002718 <sd_cmd_ls+0x8c>)
		if (res == FR_OK)
		{
			i = strlen(path);
			for (;;)
			{
				res = f_readdir(&dir, &fno);                   // Read a directory item
 80026c6:	a807      	add	r0, sp, #28
 80026c8:	a901      	add	r1, sp, #4
 80026ca:	f005 f903 	bl	80078d4 <f_readdir>
				if(res != FR_OK || fno.fname[0] == 0)
 80026ce:	b9a8      	cbnz	r0, 80026fc <sd_cmd_ls+0x70>
 80026d0:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80026d4:	b193      	cbz	r3, 80026fc <sd_cmd_ls+0x70>
					break;  // Break on error or end of dir

				if(fno.fname[0] == '.')
 80026d6:	2b2e      	cmp	r3, #46	; 0x2e
 80026d8:	d0f5      	beq.n	80026c6 <sd_cmd_ls+0x3a>
					continue;             // Ignore dot entry

				fn = fno.fname;
				// It is a directory
				if(fno.fattrib & AM_DIR)
 80026da:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80026de:	f013 0f10 	tst.w	r3, #16
				{

					sprintf(out,ANSI_FG_MAGENTA"%s/%s/\r\n", path, fn);
 80026e2:	a89a      	add	r0, sp, #616	; 0x268
 80026e4:	bf14      	ite	ne
 80026e6:	490d      	ldrne	r1, [pc, #52]	; (800271c <sd_cmd_ls+0x90>)
				}
				else
				{
					sprintf(out,ANSI_FG_CYAN"%s/%s\r\n", path, fn);
 80026e8:	4621      	moveq	r1, r4
 80026ea:	aab3      	add	r2, sp, #716	; 0x2cc
 80026ec:	f10d 030d 	add.w	r3, sp, #13
 80026f0:	f005 fdae 	bl	8008250 <sprintf>
				}
				shell_out(out);
 80026f4:	a89a      	add	r0, sp, #616	; 0x268
 80026f6:	f7ff f961 	bl	80019bc <shell_out>
 80026fa:	e7e4      	b.n	80026c6 <sd_cmd_ls+0x3a>
			}
			f_closedir(&dir);
 80026fc:	a807      	add	r0, sp, #28
 80026fe:	f005 f8df 	bl	80078c0 <f_closedir>
 8002702:	e002      	b.n	800270a <sd_cmd_ls+0x7e>
		}
	}
	else
	{
		shell_out(ANSI_FG_RED"Keine SD-Karte gefunden!\r\n");
 8002704:	4806      	ldr	r0, [pc, #24]	; (8002720 <sd_cmd_ls+0x94>)
 8002706:	f7ff f959 	bl	80019bc <shell_out>
	}
}
 800270a:	f50d 7d38 	add.w	sp, sp, #736	; 0x2e0
 800270e:	bd10      	pop	{r4, pc}
 8002710:	0800edac 	.word	0x0800edac
 8002714:	0800eb4c 	.word	0x0800eb4c
 8002718:	0800edcc 	.word	0x0800edcc
 800271c:	0800edbc 	.word	0x0800edbc
 8002720:	0800eddc 	.word	0x0800eddc

08002724 <sd_cmd_mkdir>:




void sd_cmd_mkdir(int id, char* cmd)
{
 8002724:	b500      	push	{lr}
 8002726:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
	FATFS FatFs;
	if (f_mount(&FatFs, "", 1) == FR_OK)
 800272a:	4668      	mov	r0, sp
 800272c:	4907      	ldr	r1, [pc, #28]	; (800274c <sd_cmd_mkdir+0x28>)
 800272e:	2201      	movs	r2, #1
 8002730:	f004 fe3c 	bl	80073ac <f_mount>
 8002734:	b918      	cbnz	r0, 800273e <sd_cmd_mkdir+0x1a>
	{
		f_mkdir ("blub");
 8002736:	4806      	ldr	r0, [pc, #24]	; (8002750 <sd_cmd_mkdir+0x2c>)
 8002738:	f005 f96e 	bl	8007a18 <f_mkdir>
 800273c:	e002      	b.n	8002744 <sd_cmd_mkdir+0x20>
	}
	else
	{
		shell_out(ANSI_FG_RED"Keine SD-Karte gefunden!\r\n");
 800273e:	4805      	ldr	r0, [pc, #20]	; (8002754 <sd_cmd_mkdir+0x30>)
 8002740:	f7ff f93c 	bl	80019bc <shell_out>
	}
}
 8002744:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
 8002748:	f85d fb04 	ldr.w	pc, [sp], #4
 800274c:	0800eb4c 	.word	0x0800eb4c
 8002750:	0800ee00 	.word	0x0800ee00
 8002754:	0800eddc 	.word	0x0800eddc

08002758 <__init_spi>:
SPI_HandleTypeDef SpiHandle;



void __init_spi()
{
 8002758:	b570      	push	{r4, r5, r6, lr}
 800275a:	b086      	sub	sp, #24
	GPIO_InitTypeDef  GPIO_InitStruct;

	SpiHandle.Instance               = SPI2;
 800275c:	4c1d      	ldr	r4, [pc, #116]	; (80027d4 <__init_spi+0x7c>)
 800275e:	4b1e      	ldr	r3, [pc, #120]	; (80027d8 <__init_spi+0x80>)
 8002760:	6023      	str	r3, [r4, #0]
	SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002762:	2320      	movs	r3, #32
 8002764:	61e3      	str	r3, [r4, #28]
	SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8002766:	2300      	movs	r3, #0
 8002768:	60a3      	str	r3, [r4, #8]
	SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800276a:	6163      	str	r3, [r4, #20]
	SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800276c:	6123      	str	r3, [r4, #16]
	SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 800276e:	62a3      	str	r3, [r4, #40]	; 0x28
	SpiHandle.Init.CRCPolynomial     = 7;
 8002770:	2207      	movs	r2, #7
 8002772:	62e2      	str	r2, [r4, #44]	; 0x2c
	SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8002774:	60e3      	str	r3, [r4, #12]
	SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8002776:	6223      	str	r3, [r4, #32]
	SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8002778:	f44f 7600 	mov.w	r6, #512	; 0x200
 800277c:	61a6      	str	r6, [r4, #24]
	SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 800277e:	6263      	str	r3, [r4, #36]	; 0x24
	SpiHandle.Init.Mode 			 = SPI_MODE_MASTER;
 8002780:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002784:	6063      	str	r3, [r4, #4]

	// Clock enable
	__GPIOB_CLK_ENABLE();
 8002786:	4b15      	ldr	r3, [pc, #84]	; (80027dc <__init_spi+0x84>)
 8002788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800278a:	f042 0202 	orr.w	r2, r2, #2
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
	__GPIOD_CLK_ENABLE();
 8002790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002792:	f042 0208 	orr.w	r2, r2, #8
 8002796:	631a      	str	r2, [r3, #48]	; 0x30
	__SPI2_CLK_ENABLE();
 8002798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800279a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800279e:	641a      	str	r2, [r3, #64]	; 0x40

	// SPI-Config (SCK, MISO, MOSI, CS)
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80027a0:	2502      	movs	r5, #2
 80027a2:	9502      	str	r5, [sp, #8]
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80027a4:	2301      	movs	r3, #1
 80027a6:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80027a8:	9504      	str	r5, [sp, #16]
	// SCK: 10		MISO: 14	MOSI: 15
	GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
 80027aa:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80027ae:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027b0:	2305      	movs	r3, #5
 80027b2:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b4:	480a      	ldr	r0, [pc, #40]	; (80027e0 <__init_spi+0x88>)
 80027b6:	a901      	add	r1, sp, #4
 80027b8:	f000 fd44 	bl	8003244 <HAL_GPIO_Init>
	// CS
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027bc:	9601      	str	r6, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027be:	9503      	str	r5, [sp, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027c0:	4808      	ldr	r0, [pc, #32]	; (80027e4 <__init_spi+0x8c>)
 80027c2:	a901      	add	r1, sp, #4
 80027c4:	f000 fd3e 	bl	8003244 <HAL_GPIO_Init>

	HAL_SPI_Init(&SpiHandle);
 80027c8:	4620      	mov	r0, r4
 80027ca:	f001 fe93 	bl	80044f4 <HAL_SPI_Init>
}
 80027ce:	b006      	add	sp, #24
 80027d0:	bd70      	pop	{r4, r5, r6, pc}
 80027d2:	bf00      	nop
 80027d4:	2000174c 	.word	0x2000174c
 80027d8:	40003800 	.word	0x40003800
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40020400 	.word	0x40020400
 80027e4:	40020c00 	.word	0x40020c00

080027e8 <__init_sd_cmds>:




void __init_sd_cmds()
{
 80027e8:	b508      	push	{r3, lr}
	if(shell_initiated != RESET)
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <__init_sd_cmds+0x1c>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	b143      	cbz	r3, 8002802 <__init_sd_cmds+0x1a>
	{
		shell_register_out("ls",RESET,sd_cmd_ls);
 80027f0:	4805      	ldr	r0, [pc, #20]	; (8002808 <__init_sd_cmds+0x20>)
 80027f2:	2100      	movs	r1, #0
 80027f4:	4a05      	ldr	r2, [pc, #20]	; (800280c <__init_sd_cmds+0x24>)
 80027f6:	f7ff fa95 	bl	8001d24 <shell_register_out>
		shell_register_cmd("mkdir",sd_cmd_mkdir);
 80027fa:	4805      	ldr	r0, [pc, #20]	; (8002810 <__init_sd_cmds+0x28>)
 80027fc:	4905      	ldr	r1, [pc, #20]	; (8002814 <__init_sd_cmds+0x2c>)
 80027fe:	f7ff fa6b 	bl	8001cd8 <shell_register_cmd>
 8002802:	bd08      	pop	{r3, pc}
 8002804:	20000aa9 	.word	0x20000aa9
 8002808:	0800ee08 	.word	0x0800ee08
 800280c:	0800268d 	.word	0x0800268d
 8002810:	0800ee0c 	.word	0x0800ee0c
 8002814:	08002725 	.word	0x08002725

08002818 <TM_SPI_Send>:




uint8_t TM_SPI_Send(uint8_t tx)
{
 8002818:	b500      	push	{lr}
 800281a:	b087      	sub	sp, #28
 800281c:	a906      	add	r1, sp, #24
 800281e:	f801 0d09 	strb.w	r0, [r1, #-9]!
	uint8_t rx;
	HAL_SPI_TransmitReceive(&SpiHandle, &tx, &rx, 1, 500);
 8002822:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	4805      	ldr	r0, [pc, #20]	; (8002840 <TM_SPI_Send+0x28>)
 800282a:	f10d 0217 	add.w	r2, sp, #23
 800282e:	2301      	movs	r3, #1
 8002830:	f001 fea2 	bl	8004578 <HAL_SPI_TransmitReceive>
	return rx;
}
 8002834:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002838:	b007      	add	sp, #28
 800283a:	f85d fb04 	ldr.w	pc, [sp], #4
 800283e:	bf00      	nop
 8002840:	2000174c 	.word	0x2000174c

08002844 <TM_SPI_WriteMulti>:
		dataIn[i] = TM_SPI_Send(dataOut[i]);
	}
}

void TM_SPI_WriteMulti(uint8_t* dataOut, uint16_t count)
{
 8002844:	b538      	push	{r3, r4, r5, lr}
	uint16_t i;
	for (i = 0; i < count; i++) {
 8002846:	b149      	cbz	r1, 800285c <TM_SPI_WriteMulti+0x18>
 8002848:	1e44      	subs	r4, r0, #1
 800284a:	1e4d      	subs	r5, r1, #1
 800284c:	fa10 f585 	uxtah	r5, r0, r5
		TM_SPI_Send(dataOut[i]);
 8002850:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002854:	f7ff ffe0 	bl	8002818 <TM_SPI_Send>
}

void TM_SPI_WriteMulti(uint8_t* dataOut, uint16_t count)
{
	uint16_t i;
	for (i = 0; i < count; i++) {
 8002858:	42ac      	cmp	r4, r5
 800285a:	d1f9      	bne.n	8002850 <TM_SPI_WriteMulti+0xc>
 800285c:	bd38      	pop	{r3, r4, r5, pc}
 800285e:	bf00      	nop

08002860 <TM_SPI_ReadMulti>:
		TM_SPI_Send(dataOut[i]);
	}
}

void TM_SPI_ReadMulti(uint8_t* dataIn, uint8_t dummy, uint16_t count)
{
 8002860:	b570      	push	{r4, r5, r6, lr}
 8002862:	460d      	mov	r5, r1
	uint16_t i;
	for (i = 0; i < count; i++) {
 8002864:	b152      	cbz	r2, 800287c <TM_SPI_ReadMulti+0x1c>
 8002866:	1e44      	subs	r4, r0, #1
 8002868:	1e56      	subs	r6, r2, #1
 800286a:	fa10 f686 	uxtah	r6, r0, r6
		dataIn[i] = TM_SPI_Send(dummy);
 800286e:	4628      	mov	r0, r5
 8002870:	f7ff ffd2 	bl	8002818 <TM_SPI_Send>
 8002874:	f804 0f01 	strb.w	r0, [r4, #1]!
}

void TM_SPI_ReadMulti(uint8_t* dataIn, uint8_t dummy, uint16_t count)
{
	uint16_t i;
	for (i = 0; i < count; i++) {
 8002878:	42b4      	cmp	r4, r6
 800287a:	d1f8      	bne.n	800286e <TM_SPI_ReadMulti+0xe>
 800287c:	bd70      	pop	{r4, r5, r6, pc}
 800287e:	bf00      	nop

08002880 <TM_FATFS_DriveSize>:




FRESULT TM_FATFS_DriveSize(uint32_t* total, uint32_t* free)
{
 8002880:	b530      	push	{r4, r5, lr}
 8002882:	b083      	sub	sp, #12
 8002884:	4605      	mov	r5, r0
 8002886:	460c      	mov	r4, r1
	FATFS *fs;
    DWORD fre_clust;
	FRESULT res;

    /* Get volume information and free clusters of drive */
    res = f_getfree("0:", &fre_clust, &fs);
 8002888:	480b      	ldr	r0, [pc, #44]	; (80028b8 <TM_FATFS_DriveSize+0x38>)
 800288a:	4669      	mov	r1, sp
 800288c:	aa01      	add	r2, sp, #4
 800288e:	f005 f84f 	bl	8007930 <f_getfree>
    if (res != FR_OK) {
 8002892:	4602      	mov	r2, r0
 8002894:	b968      	cbnz	r0, 80028b2 <TM_FATFS_DriveSize+0x32>
		return res;
	}

    /* Get total sectors and free sectors */
    *total = (fs->n_fatent - 2) * fs->csize / 2;
 8002896:	9b01      	ldr	r3, [sp, #4]
 8002898:	7898      	ldrb	r0, [r3, #2]
 800289a:	6959      	ldr	r1, [r3, #20]
 800289c:	3902      	subs	r1, #2
 800289e:	fb01 f100 	mul.w	r1, r1, r0
 80028a2:	0849      	lsrs	r1, r1, #1
 80028a4:	6029      	str	r1, [r5, #0]
    *free = fre_clust * fs->csize / 2;
 80028a6:	7899      	ldrb	r1, [r3, #2]
 80028a8:	9b00      	ldr	r3, [sp, #0]
 80028aa:	fb03 f301 	mul.w	r3, r3, r1
 80028ae:	085b      	lsrs	r3, r3, #1
 80028b0:	6023      	str	r3, [r4, #0]

	/* Return OK */
	return FR_OK;
}
 80028b2:	4610      	mov	r0, r2
 80028b4:	b003      	add	sp, #12
 80028b6:	bd30      	pop	{r4, r5, pc}
 80028b8:	0800ee14 	.word	0x0800ee14

080028bc <NMI_Handler>:
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop

080028c0 <HardFault_Handler>:
 80028c0:	e7fe      	b.n	80028c0 <HardFault_Handler>
 80028c2:	bf00      	nop

080028c4 <MemManage_Handler>:
 80028c4:	e7fe      	b.n	80028c4 <MemManage_Handler>
 80028c6:	bf00      	nop

080028c8 <BusFault_Handler>:
 80028c8:	e7fe      	b.n	80028c8 <BusFault_Handler>
 80028ca:	bf00      	nop

080028cc <UsageFault_Handler>:
 80028cc:	e7fe      	b.n	80028cc <UsageFault_Handler>
 80028ce:	bf00      	nop

080028d0 <DebugMon_Handler>:
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop

080028d4 <SysTick_Handler>:
 80028d4:	b508      	push	{r3, lr}
 80028d6:	f000 faab 	bl	8002e30 <HAL_IncTick>
 80028da:	bd08      	pop	{r3, pc}

080028dc <OTG_FS_IRQHandler>:
 80028dc:	b508      	push	{r3, lr}
 80028de:	4802      	ldr	r0, [pc, #8]	; (80028e8 <OTG_FS_IRQHandler+0xc>)
 80028e0:	f000 fe20 	bl	8003524 <HAL_PCD_IRQHandler>
 80028e4:	bd08      	pop	{r3, pc}
 80028e6:	bf00      	nop
 80028e8:	200017a0 	.word	0x200017a0

080028ec <SystemInit>:
 80028ec:	b082      	sub	sp, #8
 80028ee:	4b36      	ldr	r3, [pc, #216]	; (80029c8 <SystemInit+0xdc>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	6819      	ldr	r1, [r3, #0]
 80028fe:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8002902:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002906:	6019      	str	r1, [r3, #0]
 8002908:	4930      	ldr	r1, [pc, #192]	; (80029cc <SystemInit+0xe0>)
 800290a:	6059      	str	r1, [r3, #4]
 800290c:	6819      	ldr	r1, [r3, #0]
 800290e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002912:	6019      	str	r1, [r3, #0]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	9200      	str	r2, [sp, #0]
 8002918:	9201      	str	r2, [sp, #4]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	f241 3188 	movw	r1, #5000	; 0x1388
 8002928:	6813      	ldr	r3, [r2, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	9b00      	ldr	r3, [sp, #0]
 8002932:	3301      	adds	r3, #1
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	9b01      	ldr	r3, [sp, #4]
 8002938:	b913      	cbnz	r3, 8002940 <SystemInit+0x54>
 800293a:	9b00      	ldr	r3, [sp, #0]
 800293c:	428b      	cmp	r3, r1
 800293e:	d1f3      	bne.n	8002928 <SystemInit+0x3c>
 8002940:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <SystemInit+0xdc>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002948:	bf14      	ite	ne
 800294a:	2301      	movne	r3, #1
 800294c:	2300      	moveq	r3, #0
 800294e:	9301      	str	r3, [sp, #4]
 8002950:	9b01      	ldr	r3, [sp, #4]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d132      	bne.n	80029bc <SystemInit+0xd0>
 8002956:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <SystemInit+0xdc>)
 8002958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800295a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800295e:	641a      	str	r2, [r3, #64]	; 0x40
 8002960:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <SystemInit+0xe4>)
 8002962:	6811      	ldr	r1, [r2, #0]
 8002964:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8002968:	6011      	str	r1, [r2, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	609a      	str	r2, [r3, #8]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002974:	609a      	str	r2, [r3, #8]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <SystemInit+0xe8>)
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	6813      	ldr	r3, [r2, #0]
 800298e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002992:	d0fb      	beq.n	800298c <SystemInit+0xa0>
 8002994:	f240 6205 	movw	r2, #1541	; 0x605
 8002998:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <SystemInit+0xec>)
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	f022 0203 	bic.w	r2, r2, #3
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	f042 0202 	orr.w	r2, r2, #2
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	461a      	mov	r2, r3
 80029b2:	6893      	ldr	r3, [r2, #8]
 80029b4:	f003 030c 	and.w	r3, r3, #12
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d1fa      	bne.n	80029b2 <SystemInit+0xc6>
 80029bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <SystemInit+0xf0>)
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	b002      	add	sp, #8
 80029c6:	4770      	bx	lr
 80029c8:	40023800 	.word	0x40023800
 80029cc:	24003010 	.word	0x24003010
 80029d0:	40007000 	.word	0x40007000
 80029d4:	07405408 	.word	0x07405408
 80029d8:	40023c00 	.word	0x40023c00
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <USB_CDC_DeInit>:
{
  /*
     Add your deinitialization code here 
  */  
  return (0);
}
 80029e0:	2000      	movs	r0, #0
 80029e2:	4770      	bx	lr

080029e4 <USB_CDC_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USB_CDC_Control  (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
  switch (cmd)
 80029e4:	2820      	cmp	r0, #32
 80029e6:	d002      	beq.n	80029ee <USB_CDC_Control+0xa>
 80029e8:	2821      	cmp	r0, #33	; 0x21
 80029ea:	d013      	beq.n	8002a14 <USB_CDC_Control+0x30>
 80029ec:	e022      	b.n	8002a34 <USB_CDC_Control+0x50>
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80029ee:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <USB_CDC_Control+0x54>)
 80029f0:	7848      	ldrb	r0, [r1, #1]
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 80029f2:	788a      	ldrb	r2, [r1, #2]
 80029f4:	0412      	lsls	r2, r2, #16
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80029f6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80029fa:	7808      	ldrb	r0, [r1, #0]
 80029fc:	4302      	orrs	r2, r0
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 80029fe:	78c8      	ldrb	r0, [r1, #3]
 8002a00:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8002a04:	601a      	str	r2, [r3, #0]
                            (pbuf[2] << 16) | (pbuf[3] << 24));
    linecoding.format     = pbuf[4];
 8002a06:	790a      	ldrb	r2, [r1, #4]
 8002a08:	711a      	strb	r2, [r3, #4]
    linecoding.paritytype = pbuf[5];
 8002a0a:	794a      	ldrb	r2, [r1, #5]
 8002a0c:	715a      	strb	r2, [r3, #5]
    linecoding.datatype   = pbuf[6];
 8002a0e:	798a      	ldrb	r2, [r1, #6]
 8002a10:	719a      	strb	r2, [r3, #6]
    
    /* Add your code here */
    break;
 8002a12:	e00f      	b.n	8002a34 <USB_CDC_Control+0x50>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(linecoding.bitrate);
 8002a14:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <USB_CDC_Control+0x54>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	0a12      	lsrs	r2, r2, #8
 8002a1e:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 8002a20:	885a      	ldrh	r2, [r3, #2]
 8002a22:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 8002a24:	78da      	ldrb	r2, [r3, #3]
 8002a26:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = linecoding.format;
 8002a28:	791a      	ldrb	r2, [r3, #4]
 8002a2a:	710a      	strb	r2, [r1, #4]
    pbuf[5] = linecoding.paritytype;
 8002a2c:	795a      	ldrb	r2, [r3, #5]
 8002a2e:	714a      	strb	r2, [r1, #5]
    pbuf[6] = linecoding.datatype;     
 8002a30:	799b      	ldrb	r3, [r3, #6]
 8002a32:	718b      	strb	r3, [r1, #6]
  default:
    break;
  }

  return (0);
}
 8002a34:	2000      	movs	r0, #0
 8002a36:	4770      	bx	lr
 8002a38:	20000004 	.word	0x20000004

08002a3c <USB_CDC_Receive>:
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USB_CDC_Receive (uint8_t* Buf, uint32_t *Len)
{
	s_RxBuffer.Position = 0;
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <USB_CDC_Receive+0x18>)
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
	s_RxBuffer.Size = *Len;
 8002a44:	680a      	ldr	r2, [r1, #0]
 8002a46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	s_RxBuffer.ReadDone = 1;
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	return (0);
}
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	20000c5c 	.word	0x20000c5c

08002a58 <USB_CDC_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t USB_CDC_Init(void)
{
 8002a58:	b508      	push	{r3, lr}
  /*
     Add your initialization code here 
  */
	USBD_CDC_SetRxBuffer(&USBD_Device, s_RxBuffer.Buffer);
 8002a5a:	4804      	ldr	r0, [pc, #16]	; (8002a6c <USB_CDC_Init+0x14>)
 8002a5c:	4904      	ldr	r1, [pc, #16]	; (8002a70 <USB_CDC_Init+0x18>)
 8002a5e:	f002 fda1 	bl	80055a4 <USBD_CDC_SetRxBuffer>
	cdc_connected = 42;
 8002a62:	222a      	movs	r2, #42	; 0x2a
 8002a64:	4b03      	ldr	r3, [pc, #12]	; (8002a74 <USB_CDC_Init+0x1c>)
 8002a66:	701a      	strb	r2, [r3, #0]
	return (0);
}
 8002a68:	2000      	movs	r0, #0
 8002a6a:	bd08      	pop	{r3, pc}
 8002a6c:	20000e68 	.word	0x20000e68
 8002a70:	20000c5c 	.word	0x20000c5c
 8002a74:	20000bb0 	.word	0x20000bb0

08002a78 <HAL_PCD_MspInit>:
 8002a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	6803      	ldr	r3, [r0, #0]
 8002a7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a82:	d13a      	bne.n	8002afa <HAL_PCD_MspInit+0x82>
 8002a84:	4c20      	ldr	r4, [pc, #128]	; (8002b08 <HAL_PCD_MspInit+0x90>)
 8002a86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	6323      	str	r3, [r4, #48]	; 0x30
 8002a8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002a92:	9301      	str	r3, [sp, #4]
 8002a94:	2302      	movs	r3, #2
 8002a96:	9302      	str	r3, [sp, #8]
 8002a98:	2500      	movs	r5, #0
 8002a9a:	9503      	str	r5, [sp, #12]
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	9304      	str	r3, [sp, #16]
 8002aa0:	270a      	movs	r7, #10
 8002aa2:	9705      	str	r7, [sp, #20]
 8002aa4:	4e19      	ldr	r6, [pc, #100]	; (8002b0c <HAL_PCD_MspInit+0x94>)
 8002aa6:	4630      	mov	r0, r6
 8002aa8:	a901      	add	r1, sp, #4
 8002aaa:	f000 fbcb 	bl	8003244 <HAL_GPIO_Init>
 8002aae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	9502      	str	r5, [sp, #8]
 8002ab6:	9503      	str	r5, [sp, #12]
 8002ab8:	4630      	mov	r0, r6
 8002aba:	a901      	add	r1, sp, #4
 8002abc:	f000 fbc2 	bl	8003244 <HAL_GPIO_Init>
 8002ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	2312      	movs	r3, #18
 8002ac8:	9302      	str	r3, [sp, #8]
 8002aca:	2301      	movs	r3, #1
 8002acc:	9303      	str	r3, [sp, #12]
 8002ace:	9705      	str	r7, [sp, #20]
 8002ad0:	4630      	mov	r0, r6
 8002ad2:	a901      	add	r1, sp, #4
 8002ad4:	f000 fbb6 	bl	8003244 <HAL_GPIO_Init>
 8002ad8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ade:	6363      	str	r3, [r4, #52]	; 0x34
 8002ae0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ae2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ae6:	6463      	str	r3, [r4, #68]	; 0x44
 8002ae8:	2043      	movs	r0, #67	; 0x43
 8002aea:	2106      	movs	r1, #6
 8002aec:	462a      	mov	r2, r5
 8002aee:	f000 fb55 	bl	800319c <HAL_NVIC_SetPriority>
 8002af2:	2043      	movs	r0, #67	; 0x43
 8002af4:	f000 fb84 	bl	8003200 <HAL_NVIC_EnableIRQ>
 8002af8:	e003      	b.n	8002b02 <HAL_PCD_MspInit+0x8a>
 8002afa:	4a05      	ldr	r2, [pc, #20]	; (8002b10 <HAL_PCD_MspInit+0x98>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d100      	bne.n	8002b02 <HAL_PCD_MspInit+0x8a>
 8002b00:	e7fe      	b.n	8002b00 <HAL_PCD_MspInit+0x88>
 8002b02:	b007      	add	sp, #28
 8002b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40020000 	.word	0x40020000
 8002b10:	40040000 	.word	0x40040000

08002b14 <HAL_PCD_SetupStageCallback>:
 8002b14:	b508      	push	{r3, lr}
 8002b16:	4601      	mov	r1, r0
 8002b18:	f8d0 03ac 	ldr.w	r0, [r0, #940]	; 0x3ac
 8002b1c:	f501 715f 	add.w	r1, r1, #892	; 0x37c
 8002b20:	f002 fdb4 	bl	800568c <USBD_LL_SetupStage>
 8002b24:	bd08      	pop	{r3, pc}
 8002b26:	bf00      	nop

08002b28 <HAL_PCD_DataOutStageCallback>:
 8002b28:	b508      	push	{r3, lr}
 8002b2a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8002b2e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002b32:	f8d0 03ac 	ldr.w	r0, [r0, #940]	; 0x3ac
 8002b36:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8002b3a:	f002 fdd5 	bl	80056e8 <USBD_LL_DataOutStage>
 8002b3e:	bd08      	pop	{r3, pc}

08002b40 <HAL_PCD_DataInStageCallback>:
 8002b40:	b508      	push	{r3, lr}
 8002b42:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8002b46:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002b4a:	f8d0 03ac 	ldr.w	r0, [r0, #940]	; 0x3ac
 8002b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b50:	f002 fdfa 	bl	8005748 <USBD_LL_DataInStage>
 8002b54:	bd08      	pop	{r3, pc}
 8002b56:	bf00      	nop

08002b58 <HAL_PCD_SOFCallback>:
 8002b58:	b508      	push	{r3, lr}
 8002b5a:	f8d0 03ac 	ldr.w	r0, [r0, #940]	; 0x3ac
 8002b5e:	f002 fe6d 	bl	800583c <USBD_LL_SOF>
 8002b62:	bd08      	pop	{r3, pc}

08002b64 <HAL_PCD_ResetCallback>:
 8002b64:	b510      	push	{r4, lr}
 8002b66:	4604      	mov	r4, r0
 8002b68:	68c1      	ldr	r1, [r0, #12]
 8002b6a:	f8d0 03ac 	ldr.w	r0, [r0, #940]	; 0x3ac
 8002b6e:	3100      	adds	r1, #0
 8002b70:	bf18      	it	ne
 8002b72:	2101      	movne	r1, #1
 8002b74:	f002 fe4e 	bl	8005814 <USBD_LL_SetSpeed>
 8002b78:	f8d4 03ac 	ldr.w	r0, [r4, #940]	; 0x3ac
 8002b7c:	f002 fe2a 	bl	80057d4 <USBD_LL_Reset>
 8002b80:	bd10      	pop	{r4, pc}
 8002b82:	bf00      	nop

08002b84 <HAL_PCD_SuspendCallback>:
 8002b84:	b508      	push	{r3, lr}
 8002b86:	f8d0 03ac 	ldr.w	r0, [r0, #940]	; 0x3ac
 8002b8a:	f002 fe47 	bl	800581c <USBD_LL_Suspend>
 8002b8e:	bd08      	pop	{r3, pc}

08002b90 <HAL_PCD_ResumeCallback>:
 8002b90:	b508      	push	{r3, lr}
 8002b92:	f8d0 03ac 	ldr.w	r0, [r0, #940]	; 0x3ac
 8002b96:	f002 fe4b 	bl	8005830 <USBD_LL_Resume>
 8002b9a:	bd08      	pop	{r3, pc}

08002b9c <HAL_PCD_ISOOUTIncompleteCallback>:
 8002b9c:	b508      	push	{r3, lr}
 8002b9e:	f8d0 03ac 	ldr.w	r0, [r0, #940]	; 0x3ac
 8002ba2:	f002 fe59 	bl	8005858 <USBD_LL_IsoOUTIncomplete>
 8002ba6:	bd08      	pop	{r3, pc}

08002ba8 <HAL_PCD_ISOINIncompleteCallback>:
 8002ba8:	b508      	push	{r3, lr}
 8002baa:	f8d0 03ac 	ldr.w	r0, [r0, #940]	; 0x3ac
 8002bae:	f002 fe51 	bl	8005854 <USBD_LL_IsoINIncomplete>
 8002bb2:	bd08      	pop	{r3, pc}

08002bb4 <HAL_PCD_ConnectCallback>:
 8002bb4:	b508      	push	{r3, lr}
 8002bb6:	f8d0 03ac 	ldr.w	r0, [r0, #940]	; 0x3ac
 8002bba:	f002 fe4f 	bl	800585c <USBD_LL_DevConnected>
 8002bbe:	bd08      	pop	{r3, pc}

08002bc0 <HAL_PCD_DisconnectCallback>:
 8002bc0:	b508      	push	{r3, lr}
 8002bc2:	f8d0 03ac 	ldr.w	r0, [r0, #940]	; 0x3ac
 8002bc6:	f002 fe4b 	bl	8005860 <USBD_LL_DevDisconnected>
 8002bca:	bd08      	pop	{r3, pc}

08002bcc <USBD_LL_Init>:
 8002bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bce:	2500      	movs	r5, #0
 8002bd0:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <USBD_LL_Init+0x5c>)
 8002bd2:	f883 5023 	strb.w	r5, [r3, #35]	; 0x23
 8002bd6:	4c15      	ldr	r4, [pc, #84]	; (8002c2c <USBD_LL_Init+0x60>)
 8002bd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bdc:	6023      	str	r3, [r4, #0]
 8002bde:	2304      	movs	r3, #4
 8002be0:	6063      	str	r3, [r4, #4]
 8002be2:	62a5      	str	r5, [r4, #40]	; 0x28
 8002be4:	2740      	movs	r7, #64	; 0x40
 8002be6:	6167      	str	r7, [r4, #20]
 8002be8:	6125      	str	r5, [r4, #16]
 8002bea:	6225      	str	r5, [r4, #32]
 8002bec:	2302      	movs	r3, #2
 8002bee:	61a3      	str	r3, [r4, #24]
 8002bf0:	61e5      	str	r5, [r4, #28]
 8002bf2:	60e3      	str	r3, [r4, #12]
 8002bf4:	2601      	movs	r6, #1
 8002bf6:	6266      	str	r6, [r4, #36]	; 0x24
 8002bf8:	f8c4 03ac 	str.w	r0, [r4, #940]	; 0x3ac
 8002bfc:	f8c0 4220 	str.w	r4, [r0, #544]	; 0x220
 8002c00:	4620      	mov	r0, r4
 8002c02:	f000 fc13 	bl	800342c <HAL_PCD_Init>
 8002c06:	4620      	mov	r0, r4
 8002c08:	2180      	movs	r1, #128	; 0x80
 8002c0a:	f001 f84b 	bl	8003ca4 <HAL_PCDEx_SetRxFiFo>
 8002c0e:	4620      	mov	r0, r4
 8002c10:	4629      	mov	r1, r5
 8002c12:	463a      	mov	r2, r7
 8002c14:	f001 f822 	bl	8003c5c <HAL_PCDEx_SetTxFiFo>
 8002c18:	4620      	mov	r0, r4
 8002c1a:	4631      	mov	r1, r6
 8002c1c:	2280      	movs	r2, #128	; 0x80
 8002c1e:	f001 f81d 	bl	8003c5c <HAL_PCDEx_SetTxFiFo>
 8002c22:	4628      	mov	r0, r5
 8002c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c26:	bf00      	nop
 8002c28:	e000ed00 	.word	0xe000ed00
 8002c2c:	200017a0 	.word	0x200017a0

08002c30 <USBD_LL_Start>:
 8002c30:	b508      	push	{r3, lr}
 8002c32:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c36:	f000 fc5f 	bl	80034f8 <HAL_PCD_Start>
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	bd08      	pop	{r3, pc}
 8002c3e:	bf00      	nop

08002c40 <USBD_LL_OpenEP>:
 8002c40:	b510      	push	{r4, lr}
 8002c42:	4614      	mov	r4, r2
 8002c44:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4623      	mov	r3, r4
 8002c4c:	f000 feea 	bl	8003a24 <HAL_PCD_EP_Open>
 8002c50:	2000      	movs	r0, #0
 8002c52:	bd10      	pop	{r4, pc}

08002c54 <USBD_LL_CloseEP>:
 8002c54:	b508      	push	{r3, lr}
 8002c56:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c5a:	f000 ff19 	bl	8003a90 <HAL_PCD_EP_Close>
 8002c5e:	2000      	movs	r0, #0
 8002c60:	bd08      	pop	{r3, pc}
 8002c62:	bf00      	nop

08002c64 <USBD_LL_StallEP>:
 8002c64:	b508      	push	{r3, lr}
 8002c66:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c6a:	f000 ff99 	bl	8003ba0 <HAL_PCD_EP_SetStall>
 8002c6e:	2000      	movs	r0, #0
 8002c70:	bd08      	pop	{r3, pc}
 8002c72:	bf00      	nop

08002c74 <USBD_LL_ClearStallEP>:
 8002c74:	b508      	push	{r3, lr}
 8002c76:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c7a:	f000 ffc3 	bl	8003c04 <HAL_PCD_EP_ClrStall>
 8002c7e:	2000      	movs	r0, #0
 8002c80:	bd08      	pop	{r3, pc}
 8002c82:	bf00      	nop

08002c84 <USBD_LL_IsStallEP>:
 8002c84:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8002c88:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002c8c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002c90:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002c94:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8002c98:	bf14      	ite	ne
 8002c9a:	f893 0032 	ldrbne.w	r0, [r3, #50]	; 0x32
 8002c9e:	f893 01d6 	ldrbeq.w	r0, [r3, #470]	; 0x1d6
 8002ca2:	4770      	bx	lr

08002ca4 <USBD_LL_SetUSBAddress>:
 8002ca4:	b508      	push	{r3, lr}
 8002ca6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002caa:	f000 fea9 	bl	8003a00 <HAL_PCD_SetAddress>
 8002cae:	2000      	movs	r0, #0
 8002cb0:	bd08      	pop	{r3, pc}
 8002cb2:	bf00      	nop

08002cb4 <USBD_LL_Transmit>:
 8002cb4:	b508      	push	{r3, lr}
 8002cb6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002cba:	f000 ff45 	bl	8003b48 <HAL_PCD_EP_Transmit>
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	bd08      	pop	{r3, pc}
 8002cc2:	bf00      	nop

08002cc4 <USBD_LL_PrepareReceive>:
 8002cc4:	b508      	push	{r3, lr}
 8002cc6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002cca:	f000 ff07 	bl	8003adc <HAL_PCD_EP_Receive>
 8002cce:	2000      	movs	r0, #0
 8002cd0:	bd08      	pop	{r3, pc}
 8002cd2:	bf00      	nop

08002cd4 <USBD_LL_GetRxDataSize>:
 8002cd4:	b508      	push	{r3, lr}
 8002cd6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002cda:	f000 ff2b 	bl	8003b34 <HAL_PCD_EP_GetRxCount>
 8002cde:	bd08      	pop	{r3, pc}

08002ce0 <USBD_VCP_DeviceDescriptor>:
 8002ce0:	2312      	movs	r3, #18
 8002ce2:	800b      	strh	r3, [r1, #0]
 8002ce4:	4800      	ldr	r0, [pc, #0]	; (8002ce8 <USBD_VCP_DeviceDescriptor+0x8>)
 8002ce6:	4770      	bx	lr
 8002ce8:	2000003c 	.word	0x2000003c

08002cec <USBD_VCP_LangIDStrDescriptor>:
 8002cec:	2304      	movs	r3, #4
 8002cee:	800b      	strh	r3, [r1, #0]
 8002cf0:	4800      	ldr	r0, [pc, #0]	; (8002cf4 <USBD_VCP_LangIDStrDescriptor+0x8>)
 8002cf2:	4770      	bx	lr
 8002cf4:	20000038 	.word	0x20000038

08002cf8 <IntToUnicode>:
 8002cf8:	b430      	push	{r4, r5}
 8002cfa:	b192      	cbz	r2, 8002d22 <IntToUnicode+0x2a>
 8002cfc:	1c4b      	adds	r3, r1, #1
 8002cfe:	3103      	adds	r1, #3
 8002d00:	1e54      	subs	r4, r2, #1
 8002d02:	b2e4      	uxtb	r4, r4
 8002d04:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 8002d08:	2100      	movs	r1, #0
 8002d0a:	0f02      	lsrs	r2, r0, #28
 8002d0c:	2a09      	cmp	r2, #9
 8002d0e:	bf94      	ite	ls
 8002d10:	3230      	addls	r2, #48	; 0x30
 8002d12:	3237      	addhi	r2, #55	; 0x37
 8002d14:	f803 2c01 	strb.w	r2, [r3, #-1]
 8002d18:	0100      	lsls	r0, r0, #4
 8002d1a:	f803 1b02 	strb.w	r1, [r3], #2
 8002d1e:	42a3      	cmp	r3, r4
 8002d20:	d1f3      	bne.n	8002d0a <IntToUnicode+0x12>
 8002d22:	bc30      	pop	{r4, r5}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop

08002d28 <USBD_VCP_SerialStrDescriptor>:
 8002d28:	b538      	push	{r3, r4, r5, lr}
 8002d2a:	231a      	movs	r3, #26
 8002d2c:	800b      	strh	r3, [r1, #0]
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <USBD_VCP_SerialStrDescriptor+0x30>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	3304      	adds	r3, #4
 8002d34:	681c      	ldr	r4, [r3, #0]
 8002d36:	3304      	adds	r3, #4
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	18d0      	adds	r0, r2, r3
 8002d3c:	d00a      	beq.n	8002d54 <USBD_VCP_SerialStrDescriptor+0x2c>
 8002d3e:	4d07      	ldr	r5, [pc, #28]	; (8002d5c <USBD_VCP_SerialStrDescriptor+0x34>)
 8002d40:	1ca9      	adds	r1, r5, #2
 8002d42:	2208      	movs	r2, #8
 8002d44:	f7ff ffd8 	bl	8002cf8 <IntToUnicode>
 8002d48:	4620      	mov	r0, r4
 8002d4a:	f105 0112 	add.w	r1, r5, #18
 8002d4e:	2204      	movs	r2, #4
 8002d50:	f7ff ffd2 	bl	8002cf8 <IntToUnicode>
 8002d54:	4801      	ldr	r0, [pc, #4]	; (8002d5c <USBD_VCP_SerialStrDescriptor+0x34>)
 8002d56:	bd38      	pop	{r3, r4, r5, pc}
 8002d58:	1fff7a10 	.word	0x1fff7a10
 8002d5c:	20000050 	.word	0x20000050

08002d60 <USBD_VCP_ProductStrDescriptor>:
 8002d60:	b508      	push	{r3, lr}
 8002d62:	460a      	mov	r2, r1
 8002d64:	b920      	cbnz	r0, 8002d70 <USBD_VCP_ProductStrDescriptor+0x10>
 8002d66:	4805      	ldr	r0, [pc, #20]	; (8002d7c <USBD_VCP_ProductStrDescriptor+0x1c>)
 8002d68:	4905      	ldr	r1, [pc, #20]	; (8002d80 <USBD_VCP_ProductStrDescriptor+0x20>)
 8002d6a:	f002 ffc7 	bl	8005cfc <USBD_GetString>
 8002d6e:	e003      	b.n	8002d78 <USBD_VCP_ProductStrDescriptor+0x18>
 8002d70:	4804      	ldr	r0, [pc, #16]	; (8002d84 <USBD_VCP_ProductStrDescriptor+0x24>)
 8002d72:	4903      	ldr	r1, [pc, #12]	; (8002d80 <USBD_VCP_ProductStrDescriptor+0x20>)
 8002d74:	f002 ffc2 	bl	8005cfc <USBD_GetString>
 8002d78:	4801      	ldr	r0, [pc, #4]	; (8002d80 <USBD_VCP_ProductStrDescriptor+0x20>)
 8002d7a:	bd08      	pop	{r3, pc}
 8002d7c:	0800ee1c 	.word	0x0800ee1c
 8002d80:	20001b50 	.word	0x20001b50
 8002d84:	0800ee40 	.word	0x0800ee40

08002d88 <USBD_VCP_ManufacturerStrDescriptor>:
 8002d88:	b510      	push	{r4, lr}
 8002d8a:	460a      	mov	r2, r1
 8002d8c:	4c03      	ldr	r4, [pc, #12]	; (8002d9c <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 8002d8e:	4804      	ldr	r0, [pc, #16]	; (8002da0 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
 8002d90:	4621      	mov	r1, r4
 8002d92:	f002 ffb3 	bl	8005cfc <USBD_GetString>
 8002d96:	4620      	mov	r0, r4
 8002d98:	bd10      	pop	{r4, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20001b50 	.word	0x20001b50
 8002da0:	0800ee64 	.word	0x0800ee64

08002da4 <USBD_VCP_ConfigStrDescriptor>:
 8002da4:	b508      	push	{r3, lr}
 8002da6:	460a      	mov	r2, r1
 8002da8:	4802      	ldr	r0, [pc, #8]	; (8002db4 <USBD_VCP_ConfigStrDescriptor+0x10>)
 8002daa:	4903      	ldr	r1, [pc, #12]	; (8002db8 <USBD_VCP_ConfigStrDescriptor+0x14>)
 8002dac:	f002 ffa6 	bl	8005cfc <USBD_GetString>
 8002db0:	4801      	ldr	r0, [pc, #4]	; (8002db8 <USBD_VCP_ConfigStrDescriptor+0x14>)
 8002db2:	bd08      	pop	{r3, pc}
 8002db4:	0800ee78 	.word	0x0800ee78
 8002db8:	20001b50 	.word	0x20001b50

08002dbc <USBD_VCP_InterfaceStrDescriptor>:
 8002dbc:	b508      	push	{r3, lr}
 8002dbe:	460a      	mov	r2, r1
 8002dc0:	4802      	ldr	r0, [pc, #8]	; (8002dcc <USBD_VCP_InterfaceStrDescriptor+0x10>)
 8002dc2:	4903      	ldr	r1, [pc, #12]	; (8002dd0 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 8002dc4:	f002 ff9a 	bl	8005cfc <USBD_GetString>
 8002dc8:	4801      	ldr	r0, [pc, #4]	; (8002dd0 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 8002dca:	bd08      	pop	{r3, pc}
 8002dcc:	0800ee84 	.word	0x0800ee84
 8002dd0:	20001b50 	.word	0x20001b50

08002dd4 <HAL_InitTick>:
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	f001 fac6 	bl	8004368 <HAL_RCC_GetHCLKFreq>
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <HAL_InitTick+0x24>)
 8002dde:	fba3 2000 	umull	r2, r0, r3, r0
 8002de2:	0980      	lsrs	r0, r0, #6
 8002de4:	f000 fa18 	bl	8003218 <HAL_SYSTICK_Config>
 8002de8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dec:	4621      	mov	r1, r4
 8002dee:	2200      	movs	r2, #0
 8002df0:	f000 f9d4 	bl	800319c <HAL_NVIC_SetPriority>
 8002df4:	2000      	movs	r0, #0
 8002df6:	bd10      	pop	{r4, pc}
 8002df8:	10624dd3 	.word	0x10624dd3

08002dfc <HAL_Init>:
 8002dfc:	b508      	push	{r3, lr}
 8002dfe:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_Init+0x30>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	2003      	movs	r0, #3
 8002e1a:	f000 f9ad 	bl	8003178 <HAL_NVIC_SetPriorityGrouping>
 8002e1e:	2000      	movs	r0, #0
 8002e20:	f7ff ffd8 	bl	8002dd4 <HAL_InitTick>
 8002e24:	f000 fb00 	bl	8003428 <HAL_MspInit>
 8002e28:	2000      	movs	r0, #0
 8002e2a:	bd08      	pop	{r3, pc}
 8002e2c:	40023c00 	.word	0x40023c00

08002e30 <HAL_IncTick>:
 8002e30:	4b02      	ldr	r3, [pc, #8]	; (8002e3c <HAL_IncTick+0xc>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	3201      	adds	r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000bd4 	.word	0x20000bd4

08002e40 <HAL_GetTick>:
 8002e40:	4b01      	ldr	r3, [pc, #4]	; (8002e48 <HAL_GetTick+0x8>)
 8002e42:	6818      	ldr	r0, [r3, #0]
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000bd4 	.word	0x20000bd4

08002e4c <HAL_Delay>:
 8002e4c:	b510      	push	{r4, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	9001      	str	r0, [sp, #4]
 8002e52:	f7ff fff5 	bl	8002e40 <HAL_GetTick>
 8002e56:	4604      	mov	r4, r0
 8002e58:	f7ff fff2 	bl	8002e40 <HAL_GetTick>
 8002e5c:	9b01      	ldr	r3, [sp, #4]
 8002e5e:	1b00      	subs	r0, r0, r4
 8002e60:	4298      	cmp	r0, r3
 8002e62:	d3f9      	bcc.n	8002e58 <HAL_Delay+0xc>
 8002e64:	b002      	add	sp, #8
 8002e66:	bd10      	pop	{r4, pc}

08002e68 <HAL_ADC_MspInit>:
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop

08002e6c <HAL_ADC_Init>:
 8002e6c:	b510      	push	{r4, lr}
 8002e6e:	4604      	mov	r4, r0
 8002e70:	2800      	cmp	r0, #0
 8002e72:	f000 8094 	beq.w	8002f9e <HAL_ADC_Init+0x132>
 8002e76:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADC_Init+0x18>
 8002e80:	f7ff fff2 	bl	8002e68 <HAL_ADC_MspInit>
 8002e84:	2302      	movs	r3, #2
 8002e86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002e8a:	4b46      	ldr	r3, [pc, #280]	; (8002fa4 <HAL_ADC_Init+0x138>)
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002e92:	605a      	str	r2, [r3, #4]
 8002e94:	6859      	ldr	r1, [r3, #4]
 8002e96:	6862      	ldr	r2, [r4, #4]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	6859      	ldr	r1, [r3, #4]
 8002eaa:	6922      	ldr	r2, [r4, #16]
 8002eac:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	6823      	ldr	r3, [r4, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	6823      	ldr	r3, [r4, #0]
 8002ebe:	6859      	ldr	r1, [r3, #4]
 8002ec0:	68a2      	ldr	r2, [r4, #8]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	6899      	ldr	r1, [r3, #8]
 8002ed4:	68e2      	ldr	r2, [r4, #12]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	609a      	str	r2, [r3, #8]
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	6823      	ldr	r3, [r4, #0]
 8002ee6:	6899      	ldr	r1, [r3, #8]
 8002ee8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002eea:	430a      	orrs	r2, r1
 8002eec:	609a      	str	r2, [r3, #8]
 8002eee:	6823      	ldr	r3, [r4, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	6899      	ldr	r1, [r3, #8]
 8002efc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002efe:	430a      	orrs	r2, r1
 8002f00:	609a      	str	r2, [r3, #8]
 8002f02:	6823      	ldr	r3, [r4, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	f022 0202 	bic.w	r2, r2, #2
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	6899      	ldr	r1, [r3, #8]
 8002f10:	69a2      	ldr	r2, [r4, #24]
 8002f12:	ea41 0242 	orr.w	r2, r1, r2, lsl #1
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f1a:	b18b      	cbz	r3, 8002f40 <HAL_ADC_Init+0xd4>
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	6823      	ldr	r3, [r4, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	6859      	ldr	r1, [r3, #4]
 8002f34:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002f36:	3a01      	subs	r2, #1
 8002f38:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	e004      	b.n	8002f4a <HAL_ADC_Init+0xde>
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f52:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f54:	6823      	ldr	r3, [r4, #0]
 8002f56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f58:	6a22      	ldr	r2, [r4, #32]
 8002f5a:	3a01      	subs	r2, #1
 8002f5c:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 8002f60:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	6823      	ldr	r3, [r4, #0]
 8002f6e:	6899      	ldr	r1, [r3, #8]
 8002f70:	69e2      	ldr	r2, [r4, #28]
 8002f72:	ea41 2242 	orr.w	r2, r1, r2, lsl #9
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	6823      	ldr	r3, [r4, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f80:	609a      	str	r2, [r3, #8]
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	6899      	ldr	r1, [r3, #8]
 8002f86:	6962      	ldr	r2, [r4, #20]
 8002f88:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
 8002f8c:	609a      	str	r2, [r3, #8]
 8002f8e:	2000      	movs	r0, #0
 8002f90:	6420      	str	r0, [r4, #64]	; 0x40
 8002f92:	2301      	movs	r3, #1
 8002f94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002f98:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8002f9c:	bd10      	pop	{r4, pc}
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	bd10      	pop	{r4, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40012300 	.word	0x40012300

08002fa8 <HAL_ADC_Start>:
 8002fa8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d038      	beq.n	8003022 <HAL_ADC_Start+0x7a>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8002fb6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b22      	cmp	r3, #34	; 0x22
 8002fbe:	bf0c      	ite	eq
 8002fc0:	2332      	moveq	r3, #50	; 0x32
 8002fc2:	2312      	movne	r3, #18
 8002fc4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8002fc8:	6803      	ldr	r3, [r0, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	f012 0f01 	tst.w	r2, #1
 8002fd0:	d10a      	bne.n	8002fe8 <HAL_ADC_Start+0x40>
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	f042 0201 	orr.w	r2, r2, #1
 8002fd8:	609a      	str	r2, [r3, #8]
 8002fda:	f240 231d 	movw	r3, #541	; 0x21d
 8002fde:	bf00      	nop
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1fa      	bne.n	8002fde <HAL_ADC_Start+0x36>
 8002fe8:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <HAL_ADC_Start+0x80>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f013 0f1f 	tst.w	r3, #31
 8002ff0:	d107      	bne.n	8003002 <HAL_ADC_Start+0x5a>
 8002ff2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002ff4:	b983      	cbnz	r3, 8003018 <HAL_ADC_Start+0x70>
 8002ff6:	6803      	ldr	r3, [r0, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	e00a      	b.n	8003018 <HAL_ADC_Start+0x70>
 8003002:	6803      	ldr	r3, [r0, #0]
 8003004:	4a09      	ldr	r2, [pc, #36]	; (800302c <HAL_ADC_Start+0x84>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d106      	bne.n	8003018 <HAL_ADC_Start+0x70>
 800300a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800300c:	b923      	cbnz	r3, 8003018 <HAL_ADC_Start+0x70>
 800300e:	4613      	mov	r3, r2
 8003010:	6892      	ldr	r2, [r2, #8]
 8003012:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	2300      	movs	r3, #0
 800301a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800301e:	4618      	mov	r0, r3
 8003020:	4770      	bx	lr
 8003022:	2002      	movs	r0, #2
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40012300 	.word	0x40012300
 800302c:	40012000 	.word	0x40012000

08003030 <HAL_ADC_GetValue>:
 8003030:	6803      	ldr	r3, [r0, #0]
 8003032:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop

08003038 <HAL_ADC_ConfigChannel>:
 8003038:	b430      	push	{r4, r5}
 800303a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800303e:	2b01      	cmp	r3, #1
 8003040:	f000 8093 	beq.w	800316a <HAL_ADC_ConfigChannel+0x132>
 8003044:	2301      	movs	r3, #1
 8003046:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800304a:	680b      	ldr	r3, [r1, #0]
 800304c:	2b09      	cmp	r3, #9
 800304e:	d915      	bls.n	800307c <HAL_ADC_ConfigChannel+0x44>
 8003050:	6802      	ldr	r2, [r0, #0]
 8003052:	68d4      	ldr	r4, [r2, #12]
 8003054:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003058:	3b1e      	subs	r3, #30
 800305a:	2507      	movs	r5, #7
 800305c:	fa05 f303 	lsl.w	r3, r5, r3
 8003060:	ea24 0303 	bic.w	r3, r4, r3
 8003064:	60d3      	str	r3, [r2, #12]
 8003066:	6803      	ldr	r3, [r0, #0]
 8003068:	68dd      	ldr	r5, [r3, #12]
 800306a:	680a      	ldr	r2, [r1, #0]
 800306c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003070:	3a1e      	subs	r2, #30
 8003072:	688c      	ldr	r4, [r1, #8]
 8003074:	4094      	lsls	r4, r2
 8003076:	432c      	orrs	r4, r5
 8003078:	60dc      	str	r4, [r3, #12]
 800307a:	e012      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x6a>
 800307c:	6802      	ldr	r2, [r0, #0]
 800307e:	6914      	ldr	r4, [r2, #16]
 8003080:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003084:	2507      	movs	r5, #7
 8003086:	fa05 f303 	lsl.w	r3, r5, r3
 800308a:	ea24 0303 	bic.w	r3, r4, r3
 800308e:	6113      	str	r3, [r2, #16]
 8003090:	6803      	ldr	r3, [r0, #0]
 8003092:	691d      	ldr	r5, [r3, #16]
 8003094:	680a      	ldr	r2, [r1, #0]
 8003096:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800309a:	688c      	ldr	r4, [r1, #8]
 800309c:	4094      	lsls	r4, r2
 800309e:	432c      	orrs	r4, r5
 80030a0:	611c      	str	r4, [r3, #16]
 80030a2:	684b      	ldr	r3, [r1, #4]
 80030a4:	2b06      	cmp	r3, #6
 80030a6:	d815      	bhi.n	80030d4 <HAL_ADC_ConfigChannel+0x9c>
 80030a8:	6802      	ldr	r2, [r0, #0]
 80030aa:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80030ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80030b0:	3b05      	subs	r3, #5
 80030b2:	251f      	movs	r5, #31
 80030b4:	fa05 f303 	lsl.w	r3, r5, r3
 80030b8:	ea24 0303 	bic.w	r3, r4, r3
 80030bc:	6353      	str	r3, [r2, #52]	; 0x34
 80030be:	6803      	ldr	r3, [r0, #0]
 80030c0:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80030c2:	684a      	ldr	r2, [r1, #4]
 80030c4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80030c8:	3a05      	subs	r2, #5
 80030ca:	680c      	ldr	r4, [r1, #0]
 80030cc:	4094      	lsls	r4, r2
 80030ce:	432c      	orrs	r4, r5
 80030d0:	635c      	str	r4, [r3, #52]	; 0x34
 80030d2:	e02c      	b.n	800312e <HAL_ADC_ConfigChannel+0xf6>
 80030d4:	2b0c      	cmp	r3, #12
 80030d6:	d815      	bhi.n	8003104 <HAL_ADC_ConfigChannel+0xcc>
 80030d8:	6802      	ldr	r2, [r0, #0]
 80030da:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80030dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80030e0:	3b23      	subs	r3, #35	; 0x23
 80030e2:	251f      	movs	r5, #31
 80030e4:	fa05 f303 	lsl.w	r3, r5, r3
 80030e8:	ea24 0303 	bic.w	r3, r4, r3
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	6803      	ldr	r3, [r0, #0]
 80030f0:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80030f2:	684a      	ldr	r2, [r1, #4]
 80030f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80030f8:	3a23      	subs	r2, #35	; 0x23
 80030fa:	680c      	ldr	r4, [r1, #0]
 80030fc:	4094      	lsls	r4, r2
 80030fe:	432c      	orrs	r4, r5
 8003100:	631c      	str	r4, [r3, #48]	; 0x30
 8003102:	e014      	b.n	800312e <HAL_ADC_ConfigChannel+0xf6>
 8003104:	6802      	ldr	r2, [r0, #0]
 8003106:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8003108:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800310c:	3b41      	subs	r3, #65	; 0x41
 800310e:	251f      	movs	r5, #31
 8003110:	fa05 f303 	lsl.w	r3, r5, r3
 8003114:	ea24 0303 	bic.w	r3, r4, r3
 8003118:	62d3      	str	r3, [r2, #44]	; 0x2c
 800311a:	6803      	ldr	r3, [r0, #0]
 800311c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800311e:	684a      	ldr	r2, [r1, #4]
 8003120:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003124:	3a41      	subs	r2, #65	; 0x41
 8003126:	680c      	ldr	r4, [r1, #0]
 8003128:	4094      	lsls	r4, r2
 800312a:	432c      	orrs	r4, r5
 800312c:	62dc      	str	r4, [r3, #44]	; 0x2c
 800312e:	6803      	ldr	r3, [r0, #0]
 8003130:	4a0f      	ldr	r2, [pc, #60]	; (8003170 <HAL_ADC_ConfigChannel+0x138>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d114      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x128>
 8003136:	680b      	ldr	r3, [r1, #0]
 8003138:	2b12      	cmp	r3, #18
 800313a:	d108      	bne.n	800314e <HAL_ADC_ConfigChannel+0x116>
 800313c:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <HAL_ADC_ConfigChannel+0x13c>)
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	6803      	ldr	r3, [r0, #0]
 8003148:	4a09      	ldr	r2, [pc, #36]	; (8003170 <HAL_ADC_ConfigChannel+0x138>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d108      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x128>
 800314e:	680b      	ldr	r3, [r1, #0]
 8003150:	3b10      	subs	r3, #16
 8003152:	2b01      	cmp	r3, #1
 8003154:	d804      	bhi.n	8003160 <HAL_ADC_ConfigChannel+0x128>
 8003156:	4b07      	ldr	r3, [pc, #28]	; (8003174 <HAL_ADC_ConfigChannel+0x13c>)
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	2300      	movs	r3, #0
 8003162:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8003166:	4618      	mov	r0, r3
 8003168:	e000      	b.n	800316c <HAL_ADC_ConfigChannel+0x134>
 800316a:	2002      	movs	r0, #2
 800316c:	bc30      	pop	{r4, r5}
 800316e:	4770      	bx	lr
 8003170:	40012000 	.word	0x40012000
 8003174:	40012300 	.word	0x40012300

08003178 <HAL_NVIC_SetPriorityGrouping>:
 8003178:	4a07      	ldr	r2, [pc, #28]	; (8003198 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800317a:	68d3      	ldr	r3, [r2, #12]
 800317c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003180:	041b      	lsls	r3, r3, #16
 8003182:	0c1b      	lsrs	r3, r3, #16
 8003184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800318c:	f000 0007 	and.w	r0, r0, #7
 8003190:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003194:	60d3      	str	r3, [r2, #12]
 8003196:	4770      	bx	lr
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <HAL_NVIC_SetPriority>:
 800319c:	b470      	push	{r4, r5, r6}
 800319e:	4b16      	ldr	r3, [pc, #88]	; (80031f8 <HAL_NVIC_SetPriority+0x5c>)
 80031a0:	68dc      	ldr	r4, [r3, #12]
 80031a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
 80031a6:	f1c4 0307 	rsb	r3, r4, #7
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	bf28      	it	cs
 80031ae:	2304      	movcs	r3, #4
 80031b0:	1d25      	adds	r5, r4, #4
 80031b2:	2d06      	cmp	r5, #6
 80031b4:	bf8c      	ite	hi
 80031b6:	3c03      	subhi	r4, #3
 80031b8:	2400      	movls	r4, #0
 80031ba:	2501      	movs	r5, #1
 80031bc:	fa05 f604 	lsl.w	r6, r5, r4
 80031c0:	3e01      	subs	r6, #1
 80031c2:	4032      	ands	r2, r6
 80031c4:	fa05 f303 	lsl.w	r3, r5, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	4019      	ands	r1, r3
 80031cc:	fa01 f404 	lsl.w	r4, r1, r4
 80031d0:	4314      	orrs	r4, r2
 80031d2:	2800      	cmp	r0, #0
 80031d4:	da06      	bge.n	80031e4 <HAL_NVIC_SetPriority+0x48>
 80031d6:	f000 000f 	and.w	r0, r0, #15
 80031da:	0124      	lsls	r4, r4, #4
 80031dc:	b2e4      	uxtb	r4, r4
 80031de:	4b07      	ldr	r3, [pc, #28]	; (80031fc <HAL_NVIC_SetPriority+0x60>)
 80031e0:	541c      	strb	r4, [r3, r0]
 80031e2:	e007      	b.n	80031f4 <HAL_NVIC_SetPriority+0x58>
 80031e4:	0124      	lsls	r4, r4, #4
 80031e6:	b2e4      	uxtb	r4, r4
 80031e8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80031ec:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80031f0:	f880 4300 	strb.w	r4, [r0, #768]	; 0x300
 80031f4:	bc70      	pop	{r4, r5, r6}
 80031f6:	4770      	bx	lr
 80031f8:	e000ed00 	.word	0xe000ed00
 80031fc:	e000ed14 	.word	0xe000ed14

08003200 <HAL_NVIC_EnableIRQ>:
 8003200:	0942      	lsrs	r2, r0, #5
 8003202:	f000 001f 	and.w	r0, r0, #31
 8003206:	2301      	movs	r3, #1
 8003208:	fa03 f000 	lsl.w	r0, r3, r0
 800320c:	4b01      	ldr	r3, [pc, #4]	; (8003214 <HAL_NVIC_EnableIRQ+0x14>)
 800320e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003212:	4770      	bx	lr
 8003214:	e000e100 	.word	0xe000e100

08003218 <HAL_SYSTICK_Config>:
 8003218:	3801      	subs	r0, #1
 800321a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800321e:	d20a      	bcs.n	8003236 <HAL_SYSTICK_Config+0x1e>
 8003220:	4b06      	ldr	r3, [pc, #24]	; (800323c <HAL_SYSTICK_Config+0x24>)
 8003222:	6058      	str	r0, [r3, #4]
 8003224:	21f0      	movs	r1, #240	; 0xf0
 8003226:	4a06      	ldr	r2, [pc, #24]	; (8003240 <HAL_SYSTICK_Config+0x28>)
 8003228:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
 800322c:	2000      	movs	r0, #0
 800322e:	6098      	str	r0, [r3, #8]
 8003230:	2207      	movs	r2, #7
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	4770      	bx	lr
 8003236:	2001      	movs	r0, #1
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	e000e010 	.word	0xe000e010
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <HAL_GPIO_Init>:
 8003244:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003248:	2300      	movs	r3, #0
 800324a:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8003410 <HAL_GPIO_Init+0x1cc>
 800324e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8003414 <HAL_GPIO_Init+0x1d0>
 8003252:	4d6d      	ldr	r5, [pc, #436]	; (8003408 <HAL_GPIO_Init+0x1c4>)
 8003254:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8003418 <HAL_GPIO_Init+0x1d4>
 8003258:	4684      	mov	ip, r0
 800325a:	461c      	mov	r4, r3
 800325c:	2001      	movs	r0, #1
 800325e:	4098      	lsls	r0, r3
 8003260:	680a      	ldr	r2, [r1, #0]
 8003262:	4002      	ands	r2, r0
 8003264:	4282      	cmp	r2, r0
 8003266:	f040 80c8 	bne.w	80033fa <HAL_GPIO_Init+0x1b6>
 800326a:	6848      	ldr	r0, [r1, #4]
 800326c:	f020 0010 	bic.w	r0, r0, #16
 8003270:	2802      	cmp	r0, #2
 8003272:	d111      	bne.n	8003298 <HAL_GPIO_Init+0x54>
 8003274:	08d8      	lsrs	r0, r3, #3
 8003276:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 800327a:	6a06      	ldr	r6, [r0, #32]
 800327c:	f003 0707 	and.w	r7, r3, #7
 8003280:	00bf      	lsls	r7, r7, #2
 8003282:	f04f 0b0f 	mov.w	fp, #15
 8003286:	fa0b fb07 	lsl.w	fp, fp, r7
 800328a:	ea26 0b0b 	bic.w	fp, r6, fp
 800328e:	690e      	ldr	r6, [r1, #16]
 8003290:	40be      	lsls	r6, r7
 8003292:	ea4b 0606 	orr.w	r6, fp, r6
 8003296:	6206      	str	r6, [r0, #32]
 8003298:	f8dc 7000 	ldr.w	r7, [ip]
 800329c:	0058      	lsls	r0, r3, #1
 800329e:	2603      	movs	r6, #3
 80032a0:	4086      	lsls	r6, r0
 80032a2:	43f6      	mvns	r6, r6
 80032a4:	ea06 0b07 	and.w	fp, r6, r7
 80032a8:	684f      	ldr	r7, [r1, #4]
 80032aa:	f007 0703 	and.w	r7, r7, #3
 80032ae:	4087      	lsls	r7, r0
 80032b0:	ea4b 0707 	orr.w	r7, fp, r7
 80032b4:	f8cc 7000 	str.w	r7, [ip]
 80032b8:	684f      	ldr	r7, [r1, #4]
 80032ba:	f027 0710 	bic.w	r7, r7, #16
 80032be:	3f01      	subs	r7, #1
 80032c0:	2f01      	cmp	r7, #1
 80032c2:	d816      	bhi.n	80032f2 <HAL_GPIO_Init+0xae>
 80032c4:	f8dc 7008 	ldr.w	r7, [ip, #8]
 80032c8:	ea06 0b07 	and.w	fp, r6, r7
 80032cc:	68cf      	ldr	r7, [r1, #12]
 80032ce:	4087      	lsls	r7, r0
 80032d0:	ea4b 0707 	orr.w	r7, fp, r7
 80032d4:	f8cc 7008 	str.w	r7, [ip, #8]
 80032d8:	f8dc 7004 	ldr.w	r7, [ip, #4]
 80032dc:	ea27 0b02 	bic.w	fp, r7, r2
 80032e0:	684f      	ldr	r7, [r1, #4]
 80032e2:	f3c7 1700 	ubfx	r7, r7, #4, #1
 80032e6:	fa07 f404 	lsl.w	r4, r7, r4
 80032ea:	ea4b 0404 	orr.w	r4, fp, r4
 80032ee:	f8cc 4004 	str.w	r4, [ip, #4]
 80032f2:	f8dc 400c 	ldr.w	r4, [ip, #12]
 80032f6:	4026      	ands	r6, r4
 80032f8:	688c      	ldr	r4, [r1, #8]
 80032fa:	fa04 f000 	lsl.w	r0, r4, r0
 80032fe:	4330      	orrs	r0, r6
 8003300:	f8cc 000c 	str.w	r0, [ip, #12]
 8003304:	6848      	ldr	r0, [r1, #4]
 8003306:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 800330a:	d076      	beq.n	80033fa <HAL_GPIO_Init+0x1b6>
 800330c:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
 8003310:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 8003314:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
 8003318:	f023 0003 	bic.w	r0, r3, #3
 800331c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003320:	f500 309c 	add.w	r0, r0, #79872	; 0x13800
 8003324:	6887      	ldr	r7, [r0, #8]
 8003326:	f003 0403 	and.w	r4, r3, #3
 800332a:	00a4      	lsls	r4, r4, #2
 800332c:	260f      	movs	r6, #15
 800332e:	40a6      	lsls	r6, r4
 8003330:	ea27 0606 	bic.w	r6, r7, r6
 8003334:	45cc      	cmp	ip, r9
 8003336:	d023      	beq.n	8003380 <HAL_GPIO_Init+0x13c>
 8003338:	45d4      	cmp	ip, sl
 800333a:	d023      	beq.n	8003384 <HAL_GPIO_Init+0x140>
 800333c:	4f33      	ldr	r7, [pc, #204]	; (800340c <HAL_GPIO_Init+0x1c8>)
 800333e:	45bc      	cmp	ip, r7
 8003340:	d022      	beq.n	8003388 <HAL_GPIO_Init+0x144>
 8003342:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003346:	45bc      	cmp	ip, r7
 8003348:	d020      	beq.n	800338c <HAL_GPIO_Init+0x148>
 800334a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800334e:	45bc      	cmp	ip, r7
 8003350:	d01e      	beq.n	8003390 <HAL_GPIO_Init+0x14c>
 8003352:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003356:	45bc      	cmp	ip, r7
 8003358:	d01c      	beq.n	8003394 <HAL_GPIO_Init+0x150>
 800335a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800335e:	45bc      	cmp	ip, r7
 8003360:	d01a      	beq.n	8003398 <HAL_GPIO_Init+0x154>
 8003362:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003366:	45bc      	cmp	ip, r7
 8003368:	d018      	beq.n	800339c <HAL_GPIO_Init+0x158>
 800336a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800336e:	45bc      	cmp	ip, r7
 8003370:	d016      	beq.n	80033a0 <HAL_GPIO_Init+0x15c>
 8003372:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003376:	45bc      	cmp	ip, r7
 8003378:	bf14      	ite	ne
 800337a:	270a      	movne	r7, #10
 800337c:	2709      	moveq	r7, #9
 800337e:	e010      	b.n	80033a2 <HAL_GPIO_Init+0x15e>
 8003380:	2700      	movs	r7, #0
 8003382:	e00e      	b.n	80033a2 <HAL_GPIO_Init+0x15e>
 8003384:	2701      	movs	r7, #1
 8003386:	e00c      	b.n	80033a2 <HAL_GPIO_Init+0x15e>
 8003388:	2702      	movs	r7, #2
 800338a:	e00a      	b.n	80033a2 <HAL_GPIO_Init+0x15e>
 800338c:	2703      	movs	r7, #3
 800338e:	e008      	b.n	80033a2 <HAL_GPIO_Init+0x15e>
 8003390:	2704      	movs	r7, #4
 8003392:	e006      	b.n	80033a2 <HAL_GPIO_Init+0x15e>
 8003394:	2705      	movs	r7, #5
 8003396:	e004      	b.n	80033a2 <HAL_GPIO_Init+0x15e>
 8003398:	2706      	movs	r7, #6
 800339a:	e002      	b.n	80033a2 <HAL_GPIO_Init+0x15e>
 800339c:	2707      	movs	r7, #7
 800339e:	e000      	b.n	80033a2 <HAL_GPIO_Init+0x15e>
 80033a0:	2708      	movs	r7, #8
 80033a2:	fa07 f404 	lsl.w	r4, r7, r4
 80033a6:	4334      	orrs	r4, r6
 80033a8:	6084      	str	r4, [r0, #8]
 80033aa:	682e      	ldr	r6, [r5, #0]
 80033ac:	43d0      	mvns	r0, r2
 80033ae:	684c      	ldr	r4, [r1, #4]
 80033b0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80033b4:	bf0c      	ite	eq
 80033b6:	ea00 0406 	andeq.w	r4, r0, r6
 80033ba:	ea42 0406 	orrne.w	r4, r2, r6
 80033be:	602c      	str	r4, [r5, #0]
 80033c0:	686e      	ldr	r6, [r5, #4]
 80033c2:	684c      	ldr	r4, [r1, #4]
 80033c4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 80033c8:	bf0c      	ite	eq
 80033ca:	ea00 0406 	andeq.w	r4, r0, r6
 80033ce:	ea42 0406 	orrne.w	r4, r2, r6
 80033d2:	606c      	str	r4, [r5, #4]
 80033d4:	68ae      	ldr	r6, [r5, #8]
 80033d6:	684c      	ldr	r4, [r1, #4]
 80033d8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 80033dc:	bf0c      	ite	eq
 80033de:	ea00 0406 	andeq.w	r4, r0, r6
 80033e2:	ea42 0406 	orrne.w	r4, r2, r6
 80033e6:	60ac      	str	r4, [r5, #8]
 80033e8:	68ee      	ldr	r6, [r5, #12]
 80033ea:	684c      	ldr	r4, [r1, #4]
 80033ec:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 80033f0:	bf0c      	ite	eq
 80033f2:	ea00 0206 	andeq.w	r2, r0, r6
 80033f6:	4332      	orrne	r2, r6
 80033f8:	60ea      	str	r2, [r5, #12]
 80033fa:	3301      	adds	r3, #1
 80033fc:	2b10      	cmp	r3, #16
 80033fe:	f47f af2c 	bne.w	800325a <HAL_GPIO_Init+0x16>
 8003402:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003406:	4770      	bx	lr
 8003408:	40013c00 	.word	0x40013c00
 800340c:	40020800 	.word	0x40020800
 8003410:	40023800 	.word	0x40023800
 8003414:	40020000 	.word	0x40020000
 8003418:	40020400 	.word	0x40020400

0800341c <HAL_GPIO_WritePin>:
 800341c:	b10a      	cbz	r2, 8003422 <HAL_GPIO_WritePin+0x6>
 800341e:	8301      	strh	r1, [r0, #24]
 8003420:	4770      	bx	lr
 8003422:	8341      	strh	r1, [r0, #26]
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop

08003428 <HAL_MspInit>:
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop

0800342c <HAL_PCD_Init>:
 800342c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800342e:	b089      	sub	sp, #36	; 0x24
 8003430:	4605      	mov	r5, r0
 8003432:	2800      	cmp	r0, #0
 8003434:	d05d      	beq.n	80034f2 <HAL_PCD_Init+0xc6>
 8003436:	2303      	movs	r3, #3
 8003438:	f880 3379 	strb.w	r3, [r0, #889]	; 0x379
 800343c:	f7ff fb1c 	bl	8002a78 <HAL_PCD_MspInit>
 8003440:	6828      	ldr	r0, [r5, #0]
 8003442:	f001 fb37 	bl	8004ab4 <USB_DisableGlobalInt>
 8003446:	462c      	mov	r4, r5
 8003448:	f854 7b10 	ldr.w	r7, [r4], #16
 800344c:	466e      	mov	r6, sp
 800344e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003450:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003452:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003456:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800345a:	1d2b      	adds	r3, r5, #4
 800345c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800345e:	4638      	mov	r0, r7
 8003460:	f001 fae6 	bl	8004a30 <USB_CoreInit>
 8003464:	6828      	ldr	r0, [r5, #0]
 8003466:	2100      	movs	r1, #0
 8003468:	f001 fb2a 	bl	8004ac0 <USB_SetCurrentMode>
 800346c:	462b      	mov	r3, r5
 800346e:	2200      	movs	r2, #0
 8003470:	2001      	movs	r0, #1
 8003472:	4611      	mov	r1, r2
 8003474:	f883 0031 	strb.w	r0, [r3, #49]	; 0x31
 8003478:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800347c:	86da      	strh	r2, [r3, #54]	; 0x36
 800347e:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
 8003482:	6399      	str	r1, [r3, #56]	; 0x38
 8003484:	63d9      	str	r1, [r3, #60]	; 0x3c
 8003486:	6459      	str	r1, [r3, #68]	; 0x44
 8003488:	3201      	adds	r2, #1
 800348a:	331c      	adds	r3, #28
 800348c:	2a0f      	cmp	r2, #15
 800348e:	d1f1      	bne.n	8003474 <HAL_PCD_Init+0x48>
 8003490:	462b      	mov	r3, r5
 8003492:	2100      	movs	r1, #0
 8003494:	460a      	mov	r2, r1
 8003496:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
 800349a:	f883 11d4 	strb.w	r1, [r3, #468]	; 0x1d4
 800349e:	86d9      	strh	r1, [r3, #54]	; 0x36
 80034a0:	f883 21d7 	strb.w	r2, [r3, #471]	; 0x1d7
 80034a4:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
 80034a8:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
 80034ac:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
 80034b0:	682c      	ldr	r4, [r5, #0]
 80034b2:	f101 0040 	add.w	r0, r1, #64	; 0x40
 80034b6:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80034ba:	6062      	str	r2, [r4, #4]
 80034bc:	3101      	adds	r1, #1
 80034be:	331c      	adds	r3, #28
 80034c0:	290f      	cmp	r1, #15
 80034c2:	d1e8      	bne.n	8003496 <HAL_PCD_Init+0x6a>
 80034c4:	462c      	mov	r4, r5
 80034c6:	f854 7b10 	ldr.w	r7, [r4], #16
 80034ca:	466e      	mov	r6, sp
 80034cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80034d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80034d4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80034d8:	1d2b      	adds	r3, r5, #4
 80034da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034dc:	4638      	mov	r0, r7
 80034de:	f001 fb2f 	bl	8004b40 <USB_DevInit>
 80034e2:	2301      	movs	r3, #1
 80034e4:	f885 3379 	strb.w	r3, [r5, #889]	; 0x379
 80034e8:	6828      	ldr	r0, [r5, #0]
 80034ea:	f001 fee5 	bl	80052b8 <USB_DevDisconnect>
 80034ee:	2000      	movs	r0, #0
 80034f0:	e000      	b.n	80034f4 <HAL_PCD_Init+0xc8>
 80034f2:	2001      	movs	r0, #1
 80034f4:	b009      	add	sp, #36	; 0x24
 80034f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034f8 <HAL_PCD_Start>:
 80034f8:	b510      	push	{r4, lr}
 80034fa:	4604      	mov	r4, r0
 80034fc:	f890 3378 	ldrb.w	r3, [r0, #888]	; 0x378
 8003500:	2b01      	cmp	r3, #1
 8003502:	d00c      	beq.n	800351e <HAL_PCD_Start+0x26>
 8003504:	2301      	movs	r3, #1
 8003506:	f880 3378 	strb.w	r3, [r0, #888]	; 0x378
 800350a:	6800      	ldr	r0, [r0, #0]
 800350c:	f001 fec8 	bl	80052a0 <USB_DevConnect>
 8003510:	6820      	ldr	r0, [r4, #0]
 8003512:	f001 fac9 	bl	8004aa8 <USB_EnableGlobalInt>
 8003516:	2000      	movs	r0, #0
 8003518:	f884 0378 	strb.w	r0, [r4, #888]	; 0x378
 800351c:	bd10      	pop	{r4, pc}
 800351e:	2002      	movs	r0, #2
 8003520:	bd10      	pop	{r4, pc}
 8003522:	bf00      	nop

08003524 <HAL_PCD_IRQHandler>:
 8003524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003528:	b089      	sub	sp, #36	; 0x24
 800352a:	4604      	mov	r4, r0
 800352c:	f8d0 8000 	ldr.w	r8, [r0]
 8003530:	4640      	mov	r0, r8
 8003532:	f001 fefd 	bl	8005330 <USB_GetMode>
 8003536:	2800      	cmp	r0, #0
 8003538:	f040 825f 	bne.w	80039fa <HAL_PCD_IRQHandler+0x4d6>
 800353c:	6820      	ldr	r0, [r4, #0]
 800353e:	f001 fec7 	bl	80052d0 <USB_ReadInterrupts>
 8003542:	2800      	cmp	r0, #0
 8003544:	f000 8259 	beq.w	80039fa <HAL_PCD_IRQHandler+0x4d6>
 8003548:	6820      	ldr	r0, [r4, #0]
 800354a:	f001 fec1 	bl	80052d0 <USB_ReadInterrupts>
 800354e:	f010 0f02 	tst.w	r0, #2
 8003552:	d002      	beq.n	800355a <HAL_PCD_IRQHandler+0x36>
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	2202      	movs	r2, #2
 8003558:	615a      	str	r2, [r3, #20]
 800355a:	6820      	ldr	r0, [r4, #0]
 800355c:	f001 feb8 	bl	80052d0 <USB_ReadInterrupts>
 8003560:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 8003564:	d050      	beq.n	8003608 <HAL_PCD_IRQHandler+0xe4>
 8003566:	6820      	ldr	r0, [r4, #0]
 8003568:	f001 feb6 	bl	80052d8 <USB_ReadDevAllOutEpInterrupt>
 800356c:	4605      	mov	r5, r0
 800356e:	2800      	cmp	r0, #0
 8003570:	d04d      	beq.n	800360e <HAL_PCD_IRQHandler+0xea>
 8003572:	f508 6630 	add.w	r6, r8, #2816	; 0xb00
 8003576:	4627      	mov	r7, r4
 8003578:	f04f 0900 	mov.w	r9, #0
 800357c:	f015 0f01 	tst.w	r5, #1
 8003580:	d03b      	beq.n	80035fa <HAL_PCD_IRQHandler+0xd6>
 8003582:	fa5f fb89 	uxtb.w	fp, r9
 8003586:	6820      	ldr	r0, [r4, #0]
 8003588:	4659      	mov	r1, fp
 800358a:	f001 feb5 	bl	80052f8 <USB_ReadDevOutEPInterrupt>
 800358e:	4682      	mov	sl, r0
 8003590:	f010 0f01 	tst.w	r0, #1
 8003594:	d024      	beq.n	80035e0 <HAL_PCD_IRQHandler+0xbc>
 8003596:	2001      	movs	r0, #1
 8003598:	60b0      	str	r0, [r6, #8]
 800359a:	6923      	ldr	r3, [r4, #16]
 800359c:	4283      	cmp	r3, r0
 800359e:	d10c      	bne.n	80035ba <HAL_PCD_IRQHandler+0x96>
 80035a0:	6932      	ldr	r2, [r6, #16]
 80035a2:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80035a6:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80035aa:	1a9a      	subs	r2, r3, r2
 80035ac:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 80035b0:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80035b4:	4413      	add	r3, r2
 80035b6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80035ba:	4620      	mov	r0, r4
 80035bc:	4659      	mov	r1, fp
 80035be:	f7ff fab3 	bl	8002b28 <HAL_PCD_DataOutStageCallback>
 80035c2:	6923      	ldr	r3, [r4, #16]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d10b      	bne.n	80035e0 <HAL_PCD_IRQHandler+0xbc>
 80035c8:	f1b9 0f00 	cmp.w	r9, #0
 80035cc:	d108      	bne.n	80035e0 <HAL_PCD_IRQHandler+0xbc>
 80035ce:	f8d4 31e8 	ldr.w	r3, [r4, #488]	; 0x1e8
 80035d2:	b92b      	cbnz	r3, 80035e0 <HAL_PCD_IRQHandler+0xbc>
 80035d4:	6820      	ldr	r0, [r4, #0]
 80035d6:	2101      	movs	r1, #1
 80035d8:	f504 725f 	add.w	r2, r4, #892	; 0x37c
 80035dc:	f001 fec8 	bl	8005370 <USB_EP0_OutStart>
 80035e0:	f01a 0f08 	tst.w	sl, #8
 80035e4:	d004      	beq.n	80035f0 <HAL_PCD_IRQHandler+0xcc>
 80035e6:	4620      	mov	r0, r4
 80035e8:	f7ff fa94 	bl	8002b14 <HAL_PCD_SetupStageCallback>
 80035ec:	2108      	movs	r1, #8
 80035ee:	60b1      	str	r1, [r6, #8]
 80035f0:	f01a 0f10 	tst.w	sl, #16
 80035f4:	bf1c      	itt	ne
 80035f6:	2210      	movne	r2, #16
 80035f8:	60b2      	strne	r2, [r6, #8]
 80035fa:	f109 0901 	add.w	r9, r9, #1
 80035fe:	3620      	adds	r6, #32
 8003600:	371c      	adds	r7, #28
 8003602:	086d      	lsrs	r5, r5, #1
 8003604:	d1ba      	bne.n	800357c <HAL_PCD_IRQHandler+0x58>
 8003606:	e004      	b.n	8003612 <HAL_PCD_IRQHandler+0xee>
 8003608:	f04f 0900 	mov.w	r9, #0
 800360c:	e001      	b.n	8003612 <HAL_PCD_IRQHandler+0xee>
 800360e:	f04f 0900 	mov.w	r9, #0
 8003612:	6820      	ldr	r0, [r4, #0]
 8003614:	f001 fe5c 	bl	80052d0 <USB_ReadInterrupts>
 8003618:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 800361c:	f000 80cd 	beq.w	80037ba <HAL_PCD_IRQHandler+0x296>
 8003620:	6820      	ldr	r0, [r4, #0]
 8003622:	f001 fe61 	bl	80052e8 <USB_ReadDevAllInEpInterrupt>
 8003626:	4682      	mov	sl, r0
 8003628:	2800      	cmp	r0, #0
 800362a:	f000 80c4 	beq.w	80037b6 <HAL_PCD_IRQHandler+0x292>
 800362e:	4627      	mov	r7, r4
 8003630:	f8cd 8010 	str.w	r8, [sp, #16]
 8003634:	f508 6b10 	add.w	fp, r8, #2304	; 0x900
 8003638:	f04f 0900 	mov.w	r9, #0
 800363c:	f8cd 8014 	str.w	r8, [sp, #20]
 8003640:	f01a 0f01 	tst.w	sl, #1
 8003644:	f000 80ab 	beq.w	800379e <HAL_PCD_IRQHandler+0x27a>
 8003648:	fa5f f889 	uxtb.w	r8, r9
 800364c:	6820      	ldr	r0, [r4, #0]
 800364e:	4641      	mov	r1, r8
 8003650:	f001 fe5c 	bl	800530c <USB_ReadDevInEPInterrupt>
 8003654:	4605      	mov	r5, r0
 8003656:	f010 0f01 	tst.w	r0, #1
 800365a:	d025      	beq.n	80036a8 <HAL_PCD_IRQHandler+0x184>
 800365c:	9804      	ldr	r0, [sp, #16]
 800365e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8003662:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8003666:	2001      	movs	r0, #1
 8003668:	fa00 f109 	lsl.w	r1, r0, r9
 800366c:	ea22 0201 	bic.w	r2, r2, r1
 8003670:	635a      	str	r2, [r3, #52]	; 0x34
 8003672:	f8cb 0008 	str.w	r0, [fp, #8]
 8003676:	6923      	ldr	r3, [r4, #16]
 8003678:	4283      	cmp	r3, r0
 800367a:	d103      	bne.n	8003684 <HAL_PCD_IRQHandler+0x160>
 800367c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800367e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003680:	4413      	add	r3, r2
 8003682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003684:	4620      	mov	r0, r4
 8003686:	4641      	mov	r1, r8
 8003688:	f7ff fa5a 	bl	8002b40 <HAL_PCD_DataInStageCallback>
 800368c:	6923      	ldr	r3, [r4, #16]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d10a      	bne.n	80036a8 <HAL_PCD_IRQHandler+0x184>
 8003692:	f1b9 0f00 	cmp.w	r9, #0
 8003696:	d107      	bne.n	80036a8 <HAL_PCD_IRQHandler+0x184>
 8003698:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800369a:	b92b      	cbnz	r3, 80036a8 <HAL_PCD_IRQHandler+0x184>
 800369c:	6820      	ldr	r0, [r4, #0]
 800369e:	2101      	movs	r1, #1
 80036a0:	f504 725f 	add.w	r2, r4, #892	; 0x37c
 80036a4:	f001 fe64 	bl	8005370 <USB_EP0_OutStart>
 80036a8:	f015 0f08 	tst.w	r5, #8
 80036ac:	bf1c      	itt	ne
 80036ae:	2308      	movne	r3, #8
 80036b0:	f8cb 3008 	strne.w	r3, [fp, #8]
 80036b4:	f015 0f10 	tst.w	r5, #16
 80036b8:	bf1c      	itt	ne
 80036ba:	2310      	movne	r3, #16
 80036bc:	f8cb 3008 	strne.w	r3, [fp, #8]
 80036c0:	f015 0f40 	tst.w	r5, #64	; 0x40
 80036c4:	bf1c      	itt	ne
 80036c6:	2140      	movne	r1, #64	; 0x40
 80036c8:	f8cb 1008 	strne.w	r1, [fp, #8]
 80036cc:	f015 0f02 	tst.w	r5, #2
 80036d0:	bf1c      	itt	ne
 80036d2:	2202      	movne	r2, #2
 80036d4:	f8cb 2008 	strne.w	r2, [fp, #8]
 80036d8:	f015 0f80 	tst.w	r5, #128	; 0x80
 80036dc:	d05f      	beq.n	800379e <HAL_PCD_IRQHandler+0x27a>
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	9302      	str	r3, [sp, #8]
 80036e2:	463d      	mov	r5, r7
 80036e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036e8:	1a9e      	subs	r6, r3, r2
 80036ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036ec:	428e      	cmp	r6, r1
 80036ee:	bf28      	it	cs
 80036f0:	460e      	movcs	r6, r1
 80036f2:	9802      	ldr	r0, [sp, #8]
 80036f4:	f500 6110 	add.w	r1, r0, #2304	; 0x900
 80036f8:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 80036fc:	9103      	str	r1, [sp, #12]
 80036fe:	6988      	ldr	r0, [r1, #24]
 8003700:	1cf1      	adds	r1, r6, #3
 8003702:	bf48      	it	mi
 8003704:	3103      	addmi	r1, #3
 8003706:	b280      	uxth	r0, r0
 8003708:	ebb0 0fa1 	cmp.w	r0, r1, asr #2
 800370c:	d93a      	bls.n	8003784 <HAL_PCD_IRQHandler+0x260>
 800370e:	4293      	cmp	r3, r2
 8003710:	d938      	bls.n	8003784 <HAL_PCD_IRQHandler+0x260>
 8003712:	2b00      	cmp	r3, #0
 8003714:	d036      	beq.n	8003784 <HAL_PCD_IRQHandler+0x260>
 8003716:	f8cd 9018 	str.w	r9, [sp, #24]
 800371a:	f8cd a01c 	str.w	sl, [sp, #28]
 800371e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003722:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8003726:	1a9e      	subs	r6, r3, r2
 8003728:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800372a:	428e      	cmp	r6, r1
 800372c:	bf28      	it	cs
 800372e:	460e      	movcs	r6, r1
 8003730:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8003732:	7c23      	ldrb	r3, [r4, #16]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	4648      	mov	r0, r9
 8003738:	4642      	mov	r2, r8
 800373a:	b2b3      	uxth	r3, r6
 800373c:	f001 fc02 	bl	8004f44 <USB_WritePacket>
 8003740:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003742:	4433      	add	r3, r6
 8003744:	63eb      	str	r3, [r5, #60]	; 0x3c
 8003746:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8003748:	4432      	add	r2, r6
 800374a:	64aa      	str	r2, [r5, #72]	; 0x48
 800374c:	f8da 1018 	ldr.w	r1, [sl, #24]
 8003750:	1cf3      	adds	r3, r6, #3
 8003752:	bf48      	it	mi
 8003754:	3303      	addmi	r3, #3
 8003756:	b289      	uxth	r1, r1
 8003758:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 800375c:	d909      	bls.n	8003772 <HAL_PCD_IRQHandler+0x24e>
 800375e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003760:	4293      	cmp	r3, r2
 8003762:	d90b      	bls.n	800377c <HAL_PCD_IRQHandler+0x258>
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1de      	bne.n	8003726 <HAL_PCD_IRQHandler+0x202>
 8003768:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800376c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003770:	e008      	b.n	8003784 <HAL_PCD_IRQHandler+0x260>
 8003772:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8003776:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800377a:	e003      	b.n	8003784 <HAL_PCD_IRQHandler+0x260>
 800377c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8003780:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003784:	2e00      	cmp	r6, #0
 8003786:	dc0a      	bgt.n	800379e <HAL_PCD_IRQHandler+0x27a>
 8003788:	9902      	ldr	r1, [sp, #8]
 800378a:	f501 6300 	add.w	r3, r1, #2048	; 0x800
 800378e:	f8d1 2834 	ldr.w	r2, [r1, #2100]	; 0x834
 8003792:	2001      	movs	r0, #1
 8003794:	fa00 f109 	lsl.w	r1, r0, r9
 8003798:	ea22 0201 	bic.w	r2, r2, r1
 800379c:	635a      	str	r2, [r3, #52]	; 0x34
 800379e:	f109 0901 	add.w	r9, r9, #1
 80037a2:	371c      	adds	r7, #28
 80037a4:	f10b 0b20 	add.w	fp, fp, #32
 80037a8:	ea5f 0a5a 	movs.w	sl, sl, lsr #1
 80037ac:	f47f af48 	bne.w	8003640 <HAL_PCD_IRQHandler+0x11c>
 80037b0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80037b4:	e001      	b.n	80037ba <HAL_PCD_IRQHandler+0x296>
 80037b6:	f04f 0900 	mov.w	r9, #0
 80037ba:	6820      	ldr	r0, [r4, #0]
 80037bc:	f001 fd88 	bl	80052d0 <USB_ReadInterrupts>
 80037c0:	2800      	cmp	r0, #0
 80037c2:	da0c      	bge.n	80037de <HAL_PCD_IRQHandler+0x2ba>
 80037c4:	f8d8 2804 	ldr.w	r2, [r8, #2052]	; 0x804
 80037c8:	f022 0201 	bic.w	r2, r2, #1
 80037cc:	f8c8 2804 	str.w	r2, [r8, #2052]	; 0x804
 80037d0:	4620      	mov	r0, r4
 80037d2:	f7ff f9dd 	bl	8002b90 <HAL_PCD_ResumeCallback>
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80037dc:	615a      	str	r2, [r3, #20]
 80037de:	6820      	ldr	r0, [r4, #0]
 80037e0:	f001 fd76 	bl	80052d0 <USB_ReadInterrupts>
 80037e4:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80037e8:	d00b      	beq.n	8003802 <HAL_PCD_IRQHandler+0x2de>
 80037ea:	f8d8 3808 	ldr.w	r3, [r8, #2056]	; 0x808
 80037ee:	f013 0f01 	tst.w	r3, #1
 80037f2:	d002      	beq.n	80037fa <HAL_PCD_IRQHandler+0x2d6>
 80037f4:	4620      	mov	r0, r4
 80037f6:	f7ff f9c5 	bl	8002b84 <HAL_PCD_SuspendCallback>
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003800:	615a      	str	r2, [r3, #20]
 8003802:	6820      	ldr	r0, [r4, #0]
 8003804:	f001 fd64 	bl	80052d0 <USB_ReadInterrupts>
 8003808:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 800380c:	d043      	beq.n	8003896 <HAL_PCD_IRQHandler+0x372>
 800380e:	f508 6500 	add.w	r5, r8, #2048	; 0x800
 8003812:	686b      	ldr	r3, [r5, #4]
 8003814:	f023 0301 	bic.w	r3, r3, #1
 8003818:	606b      	str	r3, [r5, #4]
 800381a:	6820      	ldr	r0, [r4, #0]
 800381c:	2100      	movs	r1, #0
 800381e:	f001 f965 	bl	8004aec <USB_FlushTxFifo>
 8003822:	6863      	ldr	r3, [r4, #4]
 8003824:	b15b      	cbz	r3, 800383e <HAL_PCD_IRQHandler+0x31a>
 8003826:	f508 6310 	add.w	r3, r8, #2304	; 0x900
 800382a:	2200      	movs	r2, #0
 800382c:	21ff      	movs	r1, #255	; 0xff
 800382e:	6099      	str	r1, [r3, #8]
 8003830:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
 8003834:	3201      	adds	r2, #1
 8003836:	3320      	adds	r3, #32
 8003838:	6860      	ldr	r0, [r4, #4]
 800383a:	4290      	cmp	r0, r2
 800383c:	d8f7      	bhi.n	800382e <HAL_PCD_IRQHandler+0x30a>
 800383e:	f04f 33ff 	mov.w	r3, #4294967295
 8003842:	61ab      	str	r3, [r5, #24]
 8003844:	69eb      	ldr	r3, [r5, #28]
 8003846:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800384a:	61eb      	str	r3, [r5, #28]
 800384c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800384e:	b153      	cbz	r3, 8003866 <HAL_PCD_IRQHandler+0x342>
 8003850:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8003854:	f043 030b 	orr.w	r3, r3, #11
 8003858:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 800385c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800385e:	f043 030b 	orr.w	r3, r3, #11
 8003862:	646b      	str	r3, [r5, #68]	; 0x44
 8003864:	e007      	b.n	8003876 <HAL_PCD_IRQHandler+0x352>
 8003866:	696b      	ldr	r3, [r5, #20]
 8003868:	f043 030b 	orr.w	r3, r3, #11
 800386c:	616b      	str	r3, [r5, #20]
 800386e:	692b      	ldr	r3, [r5, #16]
 8003870:	f043 030b 	orr.w	r3, r3, #11
 8003874:	612b      	str	r3, [r5, #16]
 8003876:	f8d8 3800 	ldr.w	r3, [r8, #2048]	; 0x800
 800387a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800387e:	f8c8 3800 	str.w	r3, [r8, #2048]	; 0x800
 8003882:	6820      	ldr	r0, [r4, #0]
 8003884:	7c21      	ldrb	r1, [r4, #16]
 8003886:	f504 725f 	add.w	r2, r4, #892	; 0x37c
 800388a:	f001 fd71 	bl	8005370 <USB_EP0_OutStart>
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003894:	615a      	str	r2, [r3, #20]
 8003896:	6820      	ldr	r0, [r4, #0]
 8003898:	f001 fd1a 	bl	80052d0 <USB_ReadInterrupts>
 800389c:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80038a0:	d026      	beq.n	80038f0 <HAL_PCD_IRQHandler+0x3cc>
 80038a2:	6820      	ldr	r0, [r4, #0]
 80038a4:	f001 fd48 	bl	8005338 <USB_ActivateSetup>
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 80038b0:	60da      	str	r2, [r3, #12]
 80038b2:	6820      	ldr	r0, [r4, #0]
 80038b4:	f001 f9f2 	bl	8004c9c <USB_GetDevSpeed>
 80038b8:	b950      	cbnz	r0, 80038d0 <HAL_PCD_IRQHandler+0x3ac>
 80038ba:	2300      	movs	r3, #0
 80038bc:	60e3      	str	r3, [r4, #12]
 80038be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038c2:	6163      	str	r3, [r4, #20]
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 80038cc:	60da      	str	r2, [r3, #12]
 80038ce:	e008      	b.n	80038e2 <HAL_PCD_IRQHandler+0x3be>
 80038d0:	2303      	movs	r3, #3
 80038d2:	60e3      	str	r3, [r4, #12]
 80038d4:	2340      	movs	r3, #64	; 0x40
 80038d6:	6163      	str	r3, [r4, #20]
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	4620      	mov	r0, r4
 80038e4:	f7ff f93e 	bl	8002b64 <HAL_PCD_ResetCallback>
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038ee:	615a      	str	r2, [r3, #20]
 80038f0:	6820      	ldr	r0, [r4, #0]
 80038f2:	f001 fced 	bl	80052d0 <USB_ReadInterrupts>
 80038f6:	f010 0f10 	tst.w	r0, #16
 80038fa:	d035      	beq.n	8003968 <HAL_PCD_IRQHandler+0x444>
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	699a      	ldr	r2, [r3, #24]
 8003900:	f022 0210 	bic.w	r2, r2, #16
 8003904:	619a      	str	r2, [r3, #24]
 8003906:	f8d8 5020 	ldr.w	r5, [r8, #32]
 800390a:	f005 030f 	and.w	r3, r5, #15
 800390e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003912:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003916:	f503 76ea 	add.w	r6, r3, #468	; 0x1d4
 800391a:	f3c5 4243 	ubfx	r2, r5, #17, #4
 800391e:	2a02      	cmp	r2, #2
 8003920:	d110      	bne.n	8003944 <HAL_PCD_IRQHandler+0x420>
 8003922:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003926:	402b      	ands	r3, r5
 8003928:	d019      	beq.n	800395e <HAL_PCD_IRQHandler+0x43a>
 800392a:	091d      	lsrs	r5, r3, #4
 800392c:	4640      	mov	r0, r8
 800392e:	68f1      	ldr	r1, [r6, #12]
 8003930:	462a      	mov	r2, r5
 8003932:	f001 fc35 	bl	80051a0 <USB_ReadPacket>
 8003936:	68f3      	ldr	r3, [r6, #12]
 8003938:	442b      	add	r3, r5
 800393a:	60f3      	str	r3, [r6, #12]
 800393c:	69b3      	ldr	r3, [r6, #24]
 800393e:	442b      	add	r3, r5
 8003940:	61b3      	str	r3, [r6, #24]
 8003942:	e00c      	b.n	800395e <HAL_PCD_IRQHandler+0x43a>
 8003944:	2a06      	cmp	r2, #6
 8003946:	d10a      	bne.n	800395e <HAL_PCD_IRQHandler+0x43a>
 8003948:	4640      	mov	r0, r8
 800394a:	f504 715f 	add.w	r1, r4, #892	; 0x37c
 800394e:	2208      	movs	r2, #8
 8003950:	f001 fc26 	bl	80051a0 <USB_ReadPacket>
 8003954:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8003958:	69b3      	ldr	r3, [r6, #24]
 800395a:	442b      	add	r3, r5
 800395c:	61b3      	str	r3, [r6, #24]
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	699a      	ldr	r2, [r3, #24]
 8003962:	f042 0210 	orr.w	r2, r2, #16
 8003966:	619a      	str	r2, [r3, #24]
 8003968:	6820      	ldr	r0, [r4, #0]
 800396a:	f001 fcb1 	bl	80052d0 <USB_ReadInterrupts>
 800396e:	f010 0f08 	tst.w	r0, #8
 8003972:	d005      	beq.n	8003980 <HAL_PCD_IRQHandler+0x45c>
 8003974:	4620      	mov	r0, r4
 8003976:	f7ff f8ef 	bl	8002b58 <HAL_PCD_SOFCallback>
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	2208      	movs	r2, #8
 800397e:	615a      	str	r2, [r3, #20]
 8003980:	6820      	ldr	r0, [r4, #0]
 8003982:	f001 fca5 	bl	80052d0 <USB_ReadInterrupts>
 8003986:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800398a:	d008      	beq.n	800399e <HAL_PCD_IRQHandler+0x47a>
 800398c:	4620      	mov	r0, r4
 800398e:	fa5f f189 	uxtb.w	r1, r9
 8003992:	f7ff f909 	bl	8002ba8 <HAL_PCD_ISOINIncompleteCallback>
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800399c:	615a      	str	r2, [r3, #20]
 800399e:	6820      	ldr	r0, [r4, #0]
 80039a0:	f001 fc96 	bl	80052d0 <USB_ReadInterrupts>
 80039a4:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80039a8:	d008      	beq.n	80039bc <HAL_PCD_IRQHandler+0x498>
 80039aa:	4620      	mov	r0, r4
 80039ac:	fa5f f189 	uxtb.w	r1, r9
 80039b0:	f7ff f8f4 	bl	8002b9c <HAL_PCD_ISOOUTIncompleteCallback>
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80039ba:	615a      	str	r2, [r3, #20]
 80039bc:	6820      	ldr	r0, [r4, #0]
 80039be:	f001 fc87 	bl	80052d0 <USB_ReadInterrupts>
 80039c2:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80039c6:	d006      	beq.n	80039d6 <HAL_PCD_IRQHandler+0x4b2>
 80039c8:	4620      	mov	r0, r4
 80039ca:	f7ff f8f3 	bl	8002bb4 <HAL_PCD_ConnectCallback>
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039d4:	615a      	str	r2, [r3, #20]
 80039d6:	6820      	ldr	r0, [r4, #0]
 80039d8:	f001 fc7a 	bl	80052d0 <USB_ReadInterrupts>
 80039dc:	f010 0f04 	tst.w	r0, #4
 80039e0:	d00b      	beq.n	80039fa <HAL_PCD_IRQHandler+0x4d6>
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	685d      	ldr	r5, [r3, #4]
 80039e6:	f015 0f04 	tst.w	r5, #4
 80039ea:	d002      	beq.n	80039f2 <HAL_PCD_IRQHandler+0x4ce>
 80039ec:	4620      	mov	r0, r4
 80039ee:	f7ff f8e7 	bl	8002bc0 <HAL_PCD_DisconnectCallback>
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	4315      	orrs	r5, r2
 80039f8:	605d      	str	r5, [r3, #4]
 80039fa:	b009      	add	sp, #36	; 0x24
 80039fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003a00 <HAL_PCD_SetAddress>:
 8003a00:	b510      	push	{r4, lr}
 8003a02:	4604      	mov	r4, r0
 8003a04:	f890 3378 	ldrb.w	r3, [r0, #888]	; 0x378
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d009      	beq.n	8003a20 <HAL_PCD_SetAddress+0x20>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f880 3378 	strb.w	r3, [r0, #888]	; 0x378
 8003a12:	6800      	ldr	r0, [r0, #0]
 8003a14:	f001 fc34 	bl	8005280 <USB_SetDevAddress>
 8003a18:	2000      	movs	r0, #0
 8003a1a:	f884 0378 	strb.w	r0, [r4, #888]	; 0x378
 8003a1e:	bd10      	pop	{r4, pc}
 8003a20:	2002      	movs	r0, #2
 8003a22:	bd10      	pop	{r4, pc}

08003a24 <HAL_PCD_EP_Open>:
 8003a24:	b538      	push	{r3, r4, r5, lr}
 8003a26:	4604      	mov	r4, r0
 8003a28:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003a2c:	d00d      	beq.n	8003a4a <HAL_PCD_EP_Open+0x26>
 8003a2e:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 8003a32:	ebc0 05c0 	rsb	r5, r0, r0, lsl #3
 8003a36:	00ad      	lsls	r5, r5, #2
 8003a38:	3530      	adds	r5, #48	; 0x30
 8003a3a:	1961      	adds	r1, r4, r5
 8003a3c:	5560      	strb	r0, [r4, r5]
 8003a3e:	2501      	movs	r5, #1
 8003a40:	704d      	strb	r5, [r1, #1]
 8003a42:	608a      	str	r2, [r1, #8]
 8003a44:	70cb      	strb	r3, [r1, #3]
 8003a46:	80c8      	strh	r0, [r1, #6]
 8003a48:	e00d      	b.n	8003a66 <HAL_PCD_EP_Open+0x42>
 8003a4a:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 8003a4e:	ebc0 05c0 	rsb	r5, r0, r0, lsl #3
 8003a52:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8003a56:	f505 71ea 	add.w	r1, r5, #468	; 0x1d4
 8003a5a:	f885 01d4 	strb.w	r0, [r5, #468]	; 0x1d4
 8003a5e:	2000      	movs	r0, #0
 8003a60:	7048      	strb	r0, [r1, #1]
 8003a62:	608a      	str	r2, [r1, #8]
 8003a64:	70cb      	strb	r3, [r1, #3]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	bf04      	itt	eq
 8003a6a:	2300      	moveq	r3, #0
 8003a6c:	710b      	strbeq	r3, [r1, #4]
 8003a6e:	f894 3378 	ldrb.w	r3, [r4, #888]	; 0x378
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d009      	beq.n	8003a8a <HAL_PCD_EP_Open+0x66>
 8003a76:	2301      	movs	r3, #1
 8003a78:	f884 3378 	strb.w	r3, [r4, #888]	; 0x378
 8003a7c:	6820      	ldr	r0, [r4, #0]
 8003a7e:	f001 f92d 	bl	8004cdc <USB_ActivateEndpoint>
 8003a82:	2000      	movs	r0, #0
 8003a84:	f884 0378 	strb.w	r0, [r4, #888]	; 0x378
 8003a88:	bd38      	pop	{r3, r4, r5, pc}
 8003a8a:	2002      	movs	r0, #2
 8003a8c:	bd38      	pop	{r3, r4, r5, pc}
 8003a8e:	bf00      	nop

08003a90 <HAL_PCD_EP_Close>:
 8003a90:	b510      	push	{r4, lr}
 8003a92:	4604      	mov	r4, r0
 8003a94:	b2ca      	uxtb	r2, r1
 8003a96:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003a9a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8003a9e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003aa2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003aa6:	bf14      	ite	ne
 8003aa8:	3330      	addne	r3, #48	; 0x30
 8003aaa:	f503 73ea 	addeq.w	r3, r3, #468	; 0x1d4
 8003aae:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003ab2:	7019      	strb	r1, [r3, #0]
 8003ab4:	09d2      	lsrs	r2, r2, #7
 8003ab6:	705a      	strb	r2, [r3, #1]
 8003ab8:	f890 2378 	ldrb.w	r2, [r0, #888]	; 0x378
 8003abc:	2a01      	cmp	r2, #1
 8003abe:	d00a      	beq.n	8003ad6 <HAL_PCD_EP_Close+0x46>
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f880 2378 	strb.w	r2, [r0, #888]	; 0x378
 8003ac6:	6800      	ldr	r0, [r0, #0]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	f001 f94f 	bl	8004d6c <USB_DeactivateEndpoint>
 8003ace:	2000      	movs	r0, #0
 8003ad0:	f884 0378 	strb.w	r0, [r4, #888]	; 0x378
 8003ad4:	bd10      	pop	{r4, pc}
 8003ad6:	2002      	movs	r0, #2
 8003ad8:	bd10      	pop	{r4, pc}
 8003ada:	bf00      	nop

08003adc <HAL_PCD_EP_Receive>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	4604      	mov	r4, r0
 8003ae0:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 8003ae4:	ebc0 05c0 	rsb	r5, r0, r0, lsl #3
 8003ae8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8003aec:	f505 71ea 	add.w	r1, r5, #468	; 0x1d4
 8003af0:	60ca      	str	r2, [r1, #12]
 8003af2:	614b      	str	r3, [r1, #20]
 8003af4:	2300      	movs	r3, #0
 8003af6:	618b      	str	r3, [r1, #24]
 8003af8:	704b      	strb	r3, [r1, #1]
 8003afa:	f885 01d4 	strb.w	r0, [r5, #468]	; 0x1d4
 8003afe:	6923      	ldr	r3, [r4, #16]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	bf08      	it	eq
 8003b04:	610a      	streq	r2, [r1, #16]
 8003b06:	f894 3378 	ldrb.w	r3, [r4, #888]	; 0x378
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d010      	beq.n	8003b30 <HAL_PCD_EP_Receive+0x54>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f884 3378 	strb.w	r3, [r4, #888]	; 0x378
 8003b14:	b920      	cbnz	r0, 8003b20 <HAL_PCD_EP_Receive+0x44>
 8003b16:	6820      	ldr	r0, [r4, #0]
 8003b18:	7c22      	ldrb	r2, [r4, #16]
 8003b1a:	f001 f965 	bl	8004de8 <USB_EP0StartXfer>
 8003b1e:	e003      	b.n	8003b28 <HAL_PCD_EP_Receive+0x4c>
 8003b20:	6820      	ldr	r0, [r4, #0]
 8003b22:	7c22      	ldrb	r2, [r4, #16]
 8003b24:	f001 fa22 	bl	8004f6c <USB_EPStartXfer>
 8003b28:	2000      	movs	r0, #0
 8003b2a:	f884 0378 	strb.w	r0, [r4, #888]	; 0x378
 8003b2e:	bd38      	pop	{r3, r4, r5, pc}
 8003b30:	2002      	movs	r0, #2
 8003b32:	bd38      	pop	{r3, r4, r5, pc}

08003b34 <HAL_PCD_EP_GetRxCount>:
 8003b34:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003b38:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003b3c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8003b40:	f8b0 01ec 	ldrh.w	r0, [r0, #492]	; 0x1ec
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop

08003b48 <HAL_PCD_EP_Transmit>:
 8003b48:	b538      	push	{r3, r4, r5, lr}
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 8003b50:	ebc0 05c0 	rsb	r5, r0, r0, lsl #3
 8003b54:	00ad      	lsls	r5, r5, #2
 8003b56:	3530      	adds	r5, #48	; 0x30
 8003b58:	1961      	adds	r1, r4, r5
 8003b5a:	60ca      	str	r2, [r1, #12]
 8003b5c:	614b      	str	r3, [r1, #20]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	618b      	str	r3, [r1, #24]
 8003b62:	2301      	movs	r3, #1
 8003b64:	704b      	strb	r3, [r1, #1]
 8003b66:	5560      	strb	r0, [r4, r5]
 8003b68:	6923      	ldr	r3, [r4, #16]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	bf08      	it	eq
 8003b6e:	610a      	streq	r2, [r1, #16]
 8003b70:	f894 3378 	ldrb.w	r3, [r4, #888]	; 0x378
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d010      	beq.n	8003b9a <HAL_PCD_EP_Transmit+0x52>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f884 3378 	strb.w	r3, [r4, #888]	; 0x378
 8003b7e:	b920      	cbnz	r0, 8003b8a <HAL_PCD_EP_Transmit+0x42>
 8003b80:	6820      	ldr	r0, [r4, #0]
 8003b82:	7c22      	ldrb	r2, [r4, #16]
 8003b84:	f001 f930 	bl	8004de8 <USB_EP0StartXfer>
 8003b88:	e003      	b.n	8003b92 <HAL_PCD_EP_Transmit+0x4a>
 8003b8a:	6820      	ldr	r0, [r4, #0]
 8003b8c:	7c22      	ldrb	r2, [r4, #16]
 8003b8e:	f001 f9ed 	bl	8004f6c <USB_EPStartXfer>
 8003b92:	2000      	movs	r0, #0
 8003b94:	f884 0378 	strb.w	r0, [r4, #888]	; 0x378
 8003b98:	bd38      	pop	{r3, r4, r5, pc}
 8003b9a:	2002      	movs	r0, #2
 8003b9c:	bd38      	pop	{r3, r4, r5, pc}
 8003b9e:	bf00      	nop

08003ba0 <HAL_PCD_EP_SetStall>:
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	b2ca      	uxtb	r2, r1
 8003ba6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003baa:	d007      	beq.n	8003bbc <HAL_PCD_EP_SetStall+0x1c>
 8003bac:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8003bb0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003bb4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003bb8:	3330      	adds	r3, #48	; 0x30
 8003bba:	e005      	b.n	8003bc8 <HAL_PCD_EP_SetStall+0x28>
 8003bbc:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8003bc0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003bc4:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8003bc8:	2001      	movs	r0, #1
 8003bca:	7098      	strb	r0, [r3, #2]
 8003bcc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8003bd0:	701d      	strb	r5, [r3, #0]
 8003bd2:	09d2      	lsrs	r2, r2, #7
 8003bd4:	705a      	strb	r2, [r3, #1]
 8003bd6:	f894 2378 	ldrb.w	r2, [r4, #888]	; 0x378
 8003bda:	4282      	cmp	r2, r0
 8003bdc:	d010      	beq.n	8003c00 <HAL_PCD_EP_SetStall+0x60>
 8003bde:	f884 0378 	strb.w	r0, [r4, #888]	; 0x378
 8003be2:	6820      	ldr	r0, [r4, #0]
 8003be4:	4619      	mov	r1, r3
 8003be6:	f001 faef 	bl	80051c8 <USB_EPSetStall>
 8003bea:	b92d      	cbnz	r5, 8003bf8 <HAL_PCD_EP_SetStall+0x58>
 8003bec:	6820      	ldr	r0, [r4, #0]
 8003bee:	7c21      	ldrb	r1, [r4, #16]
 8003bf0:	f504 725f 	add.w	r2, r4, #892	; 0x37c
 8003bf4:	f001 fbbc 	bl	8005370 <USB_EP0_OutStart>
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	f884 0378 	strb.w	r0, [r4, #888]	; 0x378
 8003bfe:	bd38      	pop	{r3, r4, r5, pc}
 8003c00:	2002      	movs	r0, #2
 8003c02:	bd38      	pop	{r3, r4, r5, pc}

08003c04 <HAL_PCD_EP_ClrStall>:
 8003c04:	b510      	push	{r4, lr}
 8003c06:	4604      	mov	r4, r0
 8003c08:	b2ca      	uxtb	r2, r1
 8003c0a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003c0e:	d007      	beq.n	8003c20 <HAL_PCD_EP_ClrStall+0x1c>
 8003c10:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8003c14:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003c18:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003c1c:	3330      	adds	r3, #48	; 0x30
 8003c1e:	e005      	b.n	8003c2c <HAL_PCD_EP_ClrStall+0x28>
 8003c20:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8003c24:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003c28:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	7098      	strb	r0, [r3, #2]
 8003c30:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003c34:	7019      	strb	r1, [r3, #0]
 8003c36:	09d2      	lsrs	r2, r2, #7
 8003c38:	705a      	strb	r2, [r3, #1]
 8003c3a:	f894 2378 	ldrb.w	r2, [r4, #888]	; 0x378
 8003c3e:	2a01      	cmp	r2, #1
 8003c40:	d00a      	beq.n	8003c58 <HAL_PCD_EP_ClrStall+0x54>
 8003c42:	2201      	movs	r2, #1
 8003c44:	f884 2378 	strb.w	r2, [r4, #888]	; 0x378
 8003c48:	6820      	ldr	r0, [r4, #0]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	f001 fae8 	bl	8005220 <USB_EPClearStall>
 8003c50:	2000      	movs	r0, #0
 8003c52:	f884 0378 	strb.w	r0, [r4, #888]	; 0x378
 8003c56:	bd10      	pop	{r4, pc}
 8003c58:	2002      	movs	r0, #2
 8003c5a:	bd10      	pop	{r4, pc}

08003c5c <HAL_PCDEx_SetTxFiFo>:
 8003c5c:	b430      	push	{r4, r5}
 8003c5e:	6805      	ldr	r5, [r0, #0]
 8003c60:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003c62:	b919      	cbnz	r1, 8003c6c <HAL_PCDEx_SetTxFiFo+0x10>
 8003c64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c68:	62ab      	str	r3, [r5, #40]	; 0x28
 8003c6a:	e018      	b.n	8003c9e <HAL_PCDEx_SetTxFiFo+0x42>
 8003c6c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003c6e:	eb03 4010 	add.w	r0, r3, r0, lsr #16
 8003c72:	3901      	subs	r1, #1
 8003c74:	2900      	cmp	r1, #0
 8003c76:	dd0c      	ble.n	8003c92 <HAL_PCDEx_SetTxFiFo+0x36>
 8003c78:	2400      	movs	r4, #0
 8003c7a:	4623      	mov	r3, r4
 8003c7c:	3440      	adds	r4, #64	; 0x40
 8003c7e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8003c82:	6864      	ldr	r4, [r4, #4]
 8003c84:	eb00 4014 	add.w	r0, r0, r4, lsr #16
 8003c88:	3301      	adds	r3, #1
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	461c      	mov	r4, r3
 8003c8e:	428b      	cmp	r3, r1
 8003c90:	dbf4      	blt.n	8003c7c <HAL_PCDEx_SetTxFiFo+0x20>
 8003c92:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8003c96:	3140      	adds	r1, #64	; 0x40
 8003c98:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8003c9c:	6068      	str	r0, [r5, #4]
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	bc30      	pop	{r4, r5}
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_PCDEx_SetRxFiFo>:
 8003ca4:	6803      	ldr	r3, [r0, #0]
 8003ca6:	6259      	str	r1, [r3, #36]	; 0x24
 8003ca8:	2000      	movs	r0, #0
 8003caa:	4770      	bx	lr

08003cac <HAL_RCC_OscConfig>:
 8003cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cae:	4604      	mov	r4, r0
 8003cb0:	6803      	ldr	r3, [r0, #0]
 8003cb2:	f013 0f01 	tst.w	r3, #1
 8003cb6:	d057      	beq.n	8003d68 <HAL_RCC_OscConfig+0xbc>
 8003cb8:	4baa      	ldr	r3, [pc, #680]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 030c 	and.w	r3, r3, #12
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCC_OscConfig+0x2e>
 8003cc4:	4ba7      	ldr	r3, [pc, #668]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 030c 	and.w	r3, r3, #12
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d10e      	bne.n	8003cee <HAL_RCC_OscConfig+0x42>
 8003cd0:	4ba4      	ldr	r3, [pc, #656]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003cd8:	d009      	beq.n	8003cee <HAL_RCC_OscConfig+0x42>
 8003cda:	4ba2      	ldr	r3, [pc, #648]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003ce2:	d041      	beq.n	8003d68 <HAL_RCC_OscConfig+0xbc>
 8003ce4:	6863      	ldr	r3, [r4, #4]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	f040 81a2 	bne.w	8004030 <HAL_RCC_OscConfig+0x384>
 8003cec:	e03c      	b.n	8003d68 <HAL_RCC_OscConfig+0xbc>
 8003cee:	2200      	movs	r2, #0
 8003cf0:	4b9d      	ldr	r3, [pc, #628]	; (8003f68 <HAL_RCC_OscConfig+0x2bc>)
 8003cf2:	701a      	strb	r2, [r3, #0]
 8003cf4:	f7ff f8a4 	bl	8002e40 <HAL_GetTick>
 8003cf8:	4607      	mov	r7, r0
 8003cfa:	4d9a      	ldr	r5, [pc, #616]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003cfc:	f241 3688 	movw	r6, #5000	; 0x1388
 8003d00:	e005      	b.n	8003d0e <HAL_RCC_OscConfig+0x62>
 8003d02:	f7ff f89d 	bl	8002e40 <HAL_GetTick>
 8003d06:	1bc0      	subs	r0, r0, r7
 8003d08:	42b0      	cmp	r0, r6
 8003d0a:	f200 8193 	bhi.w	8004034 <HAL_RCC_OscConfig+0x388>
 8003d0e:	682b      	ldr	r3, [r5, #0]
 8003d10:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003d14:	d1f5      	bne.n	8003d02 <HAL_RCC_OscConfig+0x56>
 8003d16:	7922      	ldrb	r2, [r4, #4]
 8003d18:	4b93      	ldr	r3, [pc, #588]	; (8003f68 <HAL_RCC_OscConfig+0x2bc>)
 8003d1a:	701a      	strb	r2, [r3, #0]
 8003d1c:	6863      	ldr	r3, [r4, #4]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d111      	bne.n	8003d46 <HAL_RCC_OscConfig+0x9a>
 8003d22:	f7ff f88d 	bl	8002e40 <HAL_GetTick>
 8003d26:	4607      	mov	r7, r0
 8003d28:	4d8e      	ldr	r5, [pc, #568]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003d2a:	f241 3688 	movw	r6, #5000	; 0x1388
 8003d2e:	e005      	b.n	8003d3c <HAL_RCC_OscConfig+0x90>
 8003d30:	f7ff f886 	bl	8002e40 <HAL_GetTick>
 8003d34:	1bc0      	subs	r0, r0, r7
 8003d36:	42b0      	cmp	r0, r6
 8003d38:	f200 817e 	bhi.w	8004038 <HAL_RCC_OscConfig+0x38c>
 8003d3c:	682b      	ldr	r3, [r5, #0]
 8003d3e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003d42:	d0f5      	beq.n	8003d30 <HAL_RCC_OscConfig+0x84>
 8003d44:	e010      	b.n	8003d68 <HAL_RCC_OscConfig+0xbc>
 8003d46:	f7ff f87b 	bl	8002e40 <HAL_GetTick>
 8003d4a:	4607      	mov	r7, r0
 8003d4c:	4d85      	ldr	r5, [pc, #532]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003d4e:	f241 3688 	movw	r6, #5000	; 0x1388
 8003d52:	e005      	b.n	8003d60 <HAL_RCC_OscConfig+0xb4>
 8003d54:	f7ff f874 	bl	8002e40 <HAL_GetTick>
 8003d58:	1bc0      	subs	r0, r0, r7
 8003d5a:	42b0      	cmp	r0, r6
 8003d5c:	f200 816e 	bhi.w	800403c <HAL_RCC_OscConfig+0x390>
 8003d60:	682b      	ldr	r3, [r5, #0]
 8003d62:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003d66:	d1f5      	bne.n	8003d54 <HAL_RCC_OscConfig+0xa8>
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	f013 0f02 	tst.w	r3, #2
 8003d6e:	d05e      	beq.n	8003e2e <HAL_RCC_OscConfig+0x182>
 8003d70:	4b7c      	ldr	r3, [pc, #496]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f013 0f0c 	tst.w	r3, #12
 8003d78:	d00a      	beq.n	8003d90 <HAL_RCC_OscConfig+0xe4>
 8003d7a:	4b7a      	ldr	r3, [pc, #488]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d11d      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x116>
 8003d86:	4b77      	ldr	r3, [pc, #476]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003d8e:	d118      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x116>
 8003d90:	4b74      	ldr	r3, [pc, #464]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f013 0f02 	tst.w	r3, #2
 8003d98:	d003      	beq.n	8003da2 <HAL_RCC_OscConfig+0xf6>
 8003d9a:	68e3      	ldr	r3, [r4, #12]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	f040 814f 	bne.w	8004040 <HAL_RCC_OscConfig+0x394>
 8003da2:	4b70      	ldr	r3, [pc, #448]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	21f8      	movs	r1, #248	; 0xf8
 8003da8:	fa91 f1a1 	rbit	r1, r1
 8003dac:	fab1 f181 	clz	r1, r1
 8003db0:	b2c9      	uxtb	r1, r1
 8003db2:	6923      	ldr	r3, [r4, #16]
 8003db4:	408b      	lsls	r3, r1
 8003db6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	4a69      	ldr	r2, [pc, #420]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	e035      	b.n	8003e2e <HAL_RCC_OscConfig+0x182>
 8003dc2:	68e3      	ldr	r3, [r4, #12]
 8003dc4:	b30b      	cbz	r3, 8003e0a <HAL_RCC_OscConfig+0x15e>
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	4b68      	ldr	r3, [pc, #416]	; (8003f6c <HAL_RCC_OscConfig+0x2c0>)
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	f7ff f838 	bl	8002e40 <HAL_GetTick>
 8003dd0:	4606      	mov	r6, r0
 8003dd2:	4d64      	ldr	r5, [pc, #400]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003dd4:	e005      	b.n	8003de2 <HAL_RCC_OscConfig+0x136>
 8003dd6:	f7ff f833 	bl	8002e40 <HAL_GetTick>
 8003dda:	1b80      	subs	r0, r0, r6
 8003ddc:	2864      	cmp	r0, #100	; 0x64
 8003dde:	f200 8131 	bhi.w	8004044 <HAL_RCC_OscConfig+0x398>
 8003de2:	682b      	ldr	r3, [r5, #0]
 8003de4:	f013 0f02 	tst.w	r3, #2
 8003de8:	d0f5      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x12a>
 8003dea:	4b5e      	ldr	r3, [pc, #376]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	21f8      	movs	r1, #248	; 0xf8
 8003df0:	fa91 f1a1 	rbit	r1, r1
 8003df4:	fab1 f181 	clz	r1, r1
 8003df8:	b2c9      	uxtb	r1, r1
 8003dfa:	6923      	ldr	r3, [r4, #16]
 8003dfc:	408b      	lsls	r3, r1
 8003dfe:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003e02:	431a      	orrs	r2, r3
 8003e04:	4b57      	ldr	r3, [pc, #348]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	e011      	b.n	8003e2e <HAL_RCC_OscConfig+0x182>
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	4b57      	ldr	r3, [pc, #348]	; (8003f6c <HAL_RCC_OscConfig+0x2c0>)
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	f7ff f816 	bl	8002e40 <HAL_GetTick>
 8003e14:	4606      	mov	r6, r0
 8003e16:	4d53      	ldr	r5, [pc, #332]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003e18:	e005      	b.n	8003e26 <HAL_RCC_OscConfig+0x17a>
 8003e1a:	f7ff f811 	bl	8002e40 <HAL_GetTick>
 8003e1e:	1b80      	subs	r0, r0, r6
 8003e20:	2864      	cmp	r0, #100	; 0x64
 8003e22:	f200 8111 	bhi.w	8004048 <HAL_RCC_OscConfig+0x39c>
 8003e26:	682b      	ldr	r3, [r5, #0]
 8003e28:	f013 0f02 	tst.w	r3, #2
 8003e2c:	d1f5      	bne.n	8003e1a <HAL_RCC_OscConfig+0x16e>
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	f013 0f08 	tst.w	r3, #8
 8003e34:	d026      	beq.n	8003e84 <HAL_RCC_OscConfig+0x1d8>
 8003e36:	6963      	ldr	r3, [r4, #20]
 8003e38:	b193      	cbz	r3, 8003e60 <HAL_RCC_OscConfig+0x1b4>
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	4b4c      	ldr	r3, [pc, #304]	; (8003f70 <HAL_RCC_OscConfig+0x2c4>)
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	f7fe fffe 	bl	8002e40 <HAL_GetTick>
 8003e44:	4606      	mov	r6, r0
 8003e46:	4d47      	ldr	r5, [pc, #284]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003e48:	e005      	b.n	8003e56 <HAL_RCC_OscConfig+0x1aa>
 8003e4a:	f7fe fff9 	bl	8002e40 <HAL_GetTick>
 8003e4e:	1b80      	subs	r0, r0, r6
 8003e50:	2864      	cmp	r0, #100	; 0x64
 8003e52:	f200 80fb 	bhi.w	800404c <HAL_RCC_OscConfig+0x3a0>
 8003e56:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003e58:	f013 0f02 	tst.w	r3, #2
 8003e5c:	d0f5      	beq.n	8003e4a <HAL_RCC_OscConfig+0x19e>
 8003e5e:	e011      	b.n	8003e84 <HAL_RCC_OscConfig+0x1d8>
 8003e60:	2200      	movs	r2, #0
 8003e62:	4b43      	ldr	r3, [pc, #268]	; (8003f70 <HAL_RCC_OscConfig+0x2c4>)
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	f7fe ffeb 	bl	8002e40 <HAL_GetTick>
 8003e6a:	4606      	mov	r6, r0
 8003e6c:	4d3d      	ldr	r5, [pc, #244]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003e6e:	e005      	b.n	8003e7c <HAL_RCC_OscConfig+0x1d0>
 8003e70:	f7fe ffe6 	bl	8002e40 <HAL_GetTick>
 8003e74:	1b80      	subs	r0, r0, r6
 8003e76:	2864      	cmp	r0, #100	; 0x64
 8003e78:	f200 80ea 	bhi.w	8004050 <HAL_RCC_OscConfig+0x3a4>
 8003e7c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003e7e:	f013 0f02 	tst.w	r3, #2
 8003e82:	d1f5      	bne.n	8003e70 <HAL_RCC_OscConfig+0x1c4>
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	f013 0f04 	tst.w	r3, #4
 8003e8a:	d056      	beq.n	8003f3a <HAL_RCC_OscConfig+0x28e>
 8003e8c:	4b35      	ldr	r3, [pc, #212]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e94:	641a      	str	r2, [r3, #64]	; 0x40
 8003e96:	f5a3 33e4 	sub.w	r3, r3, #116736	; 0x1c800
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	f7fe ffcd 	bl	8002e40 <HAL_GetTick>
 8003ea6:	4606      	mov	r6, r0
 8003ea8:	4d32      	ldr	r5, [pc, #200]	; (8003f74 <HAL_RCC_OscConfig+0x2c8>)
 8003eaa:	e005      	b.n	8003eb8 <HAL_RCC_OscConfig+0x20c>
 8003eac:	f7fe ffc8 	bl	8002e40 <HAL_GetTick>
 8003eb0:	1b80      	subs	r0, r0, r6
 8003eb2:	2864      	cmp	r0, #100	; 0x64
 8003eb4:	f200 80ce 	bhi.w	8004054 <HAL_RCC_OscConfig+0x3a8>
 8003eb8:	682b      	ldr	r3, [r5, #0]
 8003eba:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ebe:	d0f5      	beq.n	8003eac <HAL_RCC_OscConfig+0x200>
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	4b2d      	ldr	r3, [pc, #180]	; (8003f78 <HAL_RCC_OscConfig+0x2cc>)
 8003ec4:	701a      	strb	r2, [r3, #0]
 8003ec6:	f7fe ffbb 	bl	8002e40 <HAL_GetTick>
 8003eca:	4607      	mov	r7, r0
 8003ecc:	4d25      	ldr	r5, [pc, #148]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003ece:	f241 3688 	movw	r6, #5000	; 0x1388
 8003ed2:	e005      	b.n	8003ee0 <HAL_RCC_OscConfig+0x234>
 8003ed4:	f7fe ffb4 	bl	8002e40 <HAL_GetTick>
 8003ed8:	1bc0      	subs	r0, r0, r7
 8003eda:	42b0      	cmp	r0, r6
 8003edc:	f200 80bc 	bhi.w	8004058 <HAL_RCC_OscConfig+0x3ac>
 8003ee0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003ee2:	f013 0f02 	tst.w	r3, #2
 8003ee6:	d1f5      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x228>
 8003ee8:	7a22      	ldrb	r2, [r4, #8]
 8003eea:	4b23      	ldr	r3, [pc, #140]	; (8003f78 <HAL_RCC_OscConfig+0x2cc>)
 8003eec:	701a      	strb	r2, [r3, #0]
 8003eee:	68a3      	ldr	r3, [r4, #8]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d111      	bne.n	8003f18 <HAL_RCC_OscConfig+0x26c>
 8003ef4:	f7fe ffa4 	bl	8002e40 <HAL_GetTick>
 8003ef8:	4607      	mov	r7, r0
 8003efa:	4d1a      	ldr	r5, [pc, #104]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003efc:	f241 3688 	movw	r6, #5000	; 0x1388
 8003f00:	e005      	b.n	8003f0e <HAL_RCC_OscConfig+0x262>
 8003f02:	f7fe ff9d 	bl	8002e40 <HAL_GetTick>
 8003f06:	1bc0      	subs	r0, r0, r7
 8003f08:	42b0      	cmp	r0, r6
 8003f0a:	f200 80a7 	bhi.w	800405c <HAL_RCC_OscConfig+0x3b0>
 8003f0e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003f10:	f013 0f02 	tst.w	r3, #2
 8003f14:	d0f5      	beq.n	8003f02 <HAL_RCC_OscConfig+0x256>
 8003f16:	e010      	b.n	8003f3a <HAL_RCC_OscConfig+0x28e>
 8003f18:	f7fe ff92 	bl	8002e40 <HAL_GetTick>
 8003f1c:	4607      	mov	r7, r0
 8003f1e:	4d11      	ldr	r5, [pc, #68]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003f20:	f241 3688 	movw	r6, #5000	; 0x1388
 8003f24:	e005      	b.n	8003f32 <HAL_RCC_OscConfig+0x286>
 8003f26:	f7fe ff8b 	bl	8002e40 <HAL_GetTick>
 8003f2a:	1bc0      	subs	r0, r0, r7
 8003f2c:	42b0      	cmp	r0, r6
 8003f2e:	f200 8097 	bhi.w	8004060 <HAL_RCC_OscConfig+0x3b4>
 8003f32:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003f34:	f013 0f02 	tst.w	r3, #2
 8003f38:	d1f5      	bne.n	8003f26 <HAL_RCC_OscConfig+0x27a>
 8003f3a:	69a3      	ldr	r3, [r4, #24]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8091 	beq.w	8004064 <HAL_RCC_OscConfig+0x3b8>
 8003f42:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003f44:	6892      	ldr	r2, [r2, #8]
 8003f46:	f002 020c 	and.w	r2, r2, #12
 8003f4a:	2a08      	cmp	r2, #8
 8003f4c:	f000 808c 	beq.w	8004068 <HAL_RCC_OscConfig+0x3bc>
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d15a      	bne.n	800400a <HAL_RCC_OscConfig+0x35e>
 8003f54:	2200      	movs	r2, #0
 8003f56:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <HAL_RCC_OscConfig+0x2d0>)
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	f7fe ff71 	bl	8002e40 <HAL_GetTick>
 8003f5e:	4606      	mov	r6, r0
 8003f60:	4d00      	ldr	r5, [pc, #0]	; (8003f64 <HAL_RCC_OscConfig+0x2b8>)
 8003f62:	e012      	b.n	8003f8a <HAL_RCC_OscConfig+0x2de>
 8003f64:	40023800 	.word	0x40023800
 8003f68:	40023802 	.word	0x40023802
 8003f6c:	42470000 	.word	0x42470000
 8003f70:	42470e80 	.word	0x42470e80
 8003f74:	40007000 	.word	0x40007000
 8003f78:	40023870 	.word	0x40023870
 8003f7c:	42470060 	.word	0x42470060
 8003f80:	f7fe ff5e 	bl	8002e40 <HAL_GetTick>
 8003f84:	1b80      	subs	r0, r0, r6
 8003f86:	2864      	cmp	r0, #100	; 0x64
 8003f88:	d870      	bhi.n	800406c <HAL_RCC_OscConfig+0x3c0>
 8003f8a:	682b      	ldr	r3, [r5, #0]
 8003f8c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003f90:	d1f6      	bne.n	8003f80 <HAL_RCC_OscConfig+0x2d4>
 8003f92:	f647 70c0 	movw	r0, #32704	; 0x7fc0
 8003f96:	fa90 f0a0 	rbit	r0, r0
 8003f9a:	fab0 f080 	clz	r0, r0
 8003f9e:	f44f 3540 	mov.w	r5, #196608	; 0x30000
 8003fa2:	fa95 f5a5 	rbit	r5, r5
 8003fa6:	fab5 f585 	clz	r5, r5
 8003faa:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8003fae:	fa91 f1a1 	rbit	r1, r1
 8003fb2:	fab1 f181 	clz	r1, r1
 8003fb6:	6a22      	ldr	r2, [r4, #32]
 8003fb8:	69e3      	ldr	r3, [r4, #28]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003fc0:	b2c0      	uxtb	r0, r0
 8003fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fc4:	4083      	lsls	r3, r0
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003fca:	085b      	lsrs	r3, r3, #1
 8003fcc:	1e58      	subs	r0, r3, #1
 8003fce:	b2eb      	uxtb	r3, r5
 8003fd0:	fa00 f303 	lsl.w	r3, r0, r3
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	b2cb      	uxtb	r3, r1
 8003fd8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003fda:	fa01 f303 	lsl.w	r3, r1, r3
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	4b25      	ldr	r3, [pc, #148]	; (8004078 <HAL_RCC_OscConfig+0x3cc>)
 8003fe2:	605a      	str	r2, [r3, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	4b25      	ldr	r3, [pc, #148]	; (800407c <HAL_RCC_OscConfig+0x3d0>)
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	f7fe ff29 	bl	8002e40 <HAL_GetTick>
 8003fee:	4605      	mov	r5, r0
 8003ff0:	4c21      	ldr	r4, [pc, #132]	; (8004078 <HAL_RCC_OscConfig+0x3cc>)
 8003ff2:	e004      	b.n	8003ffe <HAL_RCC_OscConfig+0x352>
 8003ff4:	f7fe ff24 	bl	8002e40 <HAL_GetTick>
 8003ff8:	1b40      	subs	r0, r0, r5
 8003ffa:	2864      	cmp	r0, #100	; 0x64
 8003ffc:	d838      	bhi.n	8004070 <HAL_RCC_OscConfig+0x3c4>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004004:	d0f6      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x348>
 8004006:	2000      	movs	r0, #0
 8004008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800400a:	2200      	movs	r2, #0
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <HAL_RCC_OscConfig+0x3d0>)
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	f7fe ff16 	bl	8002e40 <HAL_GetTick>
 8004014:	4605      	mov	r5, r0
 8004016:	4c18      	ldr	r4, [pc, #96]	; (8004078 <HAL_RCC_OscConfig+0x3cc>)
 8004018:	e004      	b.n	8004024 <HAL_RCC_OscConfig+0x378>
 800401a:	f7fe ff11 	bl	8002e40 <HAL_GetTick>
 800401e:	1b40      	subs	r0, r0, r5
 8004020:	2864      	cmp	r0, #100	; 0x64
 8004022:	d827      	bhi.n	8004074 <HAL_RCC_OscConfig+0x3c8>
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800402a:	d1f6      	bne.n	800401a <HAL_RCC_OscConfig+0x36e>
 800402c:	2000      	movs	r0, #0
 800402e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004030:	2001      	movs	r0, #1
 8004032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004034:	2003      	movs	r0, #3
 8004036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004038:	2003      	movs	r0, #3
 800403a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800403c:	2003      	movs	r0, #3
 800403e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004040:	2001      	movs	r0, #1
 8004042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004044:	2003      	movs	r0, #3
 8004046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004048:	2003      	movs	r0, #3
 800404a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800404c:	2003      	movs	r0, #3
 800404e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004050:	2003      	movs	r0, #3
 8004052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004054:	2003      	movs	r0, #3
 8004056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004058:	2003      	movs	r0, #3
 800405a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800405c:	2003      	movs	r0, #3
 800405e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004060:	2003      	movs	r0, #3
 8004062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004064:	2000      	movs	r0, #0
 8004066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004068:	2001      	movs	r0, #1
 800406a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800406c:	2003      	movs	r0, #3
 800406e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004070:	2003      	movs	r0, #3
 8004072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004074:	2003      	movs	r0, #3
 8004076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004078:	40023800 	.word	0x40023800
 800407c:	42470060 	.word	0x42470060

08004080 <HAL_RCC_ClockConfig>:
 8004080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004084:	4604      	mov	r4, r0
 8004086:	460d      	mov	r5, r1
 8004088:	4b8f      	ldr	r3, [pc, #572]	; (80042c8 <HAL_RCC_ClockConfig+0x248>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	428b      	cmp	r3, r1
 8004092:	d26c      	bcs.n	800416e <HAL_RCC_ClockConfig+0xee>
 8004094:	b2ca      	uxtb	r2, r1
 8004096:	4b8c      	ldr	r3, [pc, #560]	; (80042c8 <HAL_RCC_ClockConfig+0x248>)
 8004098:	701a      	strb	r2, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	428b      	cmp	r3, r1
 80040a2:	f040 80e7 	bne.w	8004274 <HAL_RCC_ClockConfig+0x1f4>
 80040a6:	6803      	ldr	r3, [r0, #0]
 80040a8:	f013 0f02 	tst.w	r3, #2
 80040ac:	d006      	beq.n	80040bc <HAL_RCC_ClockConfig+0x3c>
 80040ae:	4b87      	ldr	r3, [pc, #540]	; (80042cc <HAL_RCC_ClockConfig+0x24c>)
 80040b0:	6899      	ldr	r1, [r3, #8]
 80040b2:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80040b6:	6882      	ldr	r2, [r0, #8]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	609a      	str	r2, [r3, #8]
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	f013 0f01 	tst.w	r3, #1
 80040c2:	f000 80ba 	beq.w	800423a <HAL_RCC_ClockConfig+0x1ba>
 80040c6:	6863      	ldr	r3, [r4, #4]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d105      	bne.n	80040d8 <HAL_RCC_ClockConfig+0x58>
 80040cc:	4a7f      	ldr	r2, [pc, #508]	; (80042cc <HAL_RCC_ClockConfig+0x24c>)
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80040d4:	d10e      	bne.n	80040f4 <HAL_RCC_ClockConfig+0x74>
 80040d6:	e0d0      	b.n	800427a <HAL_RCC_ClockConfig+0x1fa>
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d105      	bne.n	80040e8 <HAL_RCC_ClockConfig+0x68>
 80040dc:	4a7b      	ldr	r2, [pc, #492]	; (80042cc <HAL_RCC_ClockConfig+0x24c>)
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80040e4:	d106      	bne.n	80040f4 <HAL_RCC_ClockConfig+0x74>
 80040e6:	e0cb      	b.n	8004280 <HAL_RCC_ClockConfig+0x200>
 80040e8:	4a78      	ldr	r2, [pc, #480]	; (80042cc <HAL_RCC_ClockConfig+0x24c>)
 80040ea:	6812      	ldr	r2, [r2, #0]
 80040ec:	f012 0f02 	tst.w	r2, #2
 80040f0:	f000 80c9 	beq.w	8004286 <HAL_RCC_ClockConfig+0x206>
 80040f4:	4a75      	ldr	r2, [pc, #468]	; (80042cc <HAL_RCC_ClockConfig+0x24c>)
 80040f6:	6891      	ldr	r1, [r2, #8]
 80040f8:	f021 0103 	bic.w	r1, r1, #3
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6093      	str	r3, [r2, #8]
 8004100:	f7fe fe9e 	bl	8002e40 <HAL_GetTick>
 8004104:	4605      	mov	r5, r0
 8004106:	6863      	ldr	r3, [r4, #4]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d10f      	bne.n	800412c <HAL_RCC_ClockConfig+0xac>
 800410c:	4e6f      	ldr	r6, [pc, #444]	; (80042cc <HAL_RCC_ClockConfig+0x24c>)
 800410e:	f241 3788 	movw	r7, #5000	; 0x1388
 8004112:	e005      	b.n	8004120 <HAL_RCC_ClockConfig+0xa0>
 8004114:	f7fe fe94 	bl	8002e40 <HAL_GetTick>
 8004118:	1b40      	subs	r0, r0, r5
 800411a:	42b8      	cmp	r0, r7
 800411c:	f200 80b6 	bhi.w	800428c <HAL_RCC_ClockConfig+0x20c>
 8004120:	68b3      	ldr	r3, [r6, #8]
 8004122:	f003 030c 	and.w	r3, r3, #12
 8004126:	2b04      	cmp	r3, #4
 8004128:	d1f4      	bne.n	8004114 <HAL_RCC_ClockConfig+0x94>
 800412a:	e086      	b.n	800423a <HAL_RCC_ClockConfig+0x1ba>
 800412c:	2b02      	cmp	r3, #2
 800412e:	d003      	beq.n	8004138 <HAL_RCC_ClockConfig+0xb8>
 8004130:	4e66      	ldr	r6, [pc, #408]	; (80042cc <HAL_RCC_ClockConfig+0x24c>)
 8004132:	f241 3788 	movw	r7, #5000	; 0x1388
 8004136:	e015      	b.n	8004164 <HAL_RCC_ClockConfig+0xe4>
 8004138:	4e64      	ldr	r6, [pc, #400]	; (80042cc <HAL_RCC_ClockConfig+0x24c>)
 800413a:	f241 3788 	movw	r7, #5000	; 0x1388
 800413e:	e005      	b.n	800414c <HAL_RCC_ClockConfig+0xcc>
 8004140:	f7fe fe7e 	bl	8002e40 <HAL_GetTick>
 8004144:	1b40      	subs	r0, r0, r5
 8004146:	42b8      	cmp	r0, r7
 8004148:	f200 80a3 	bhi.w	8004292 <HAL_RCC_ClockConfig+0x212>
 800414c:	68b3      	ldr	r3, [r6, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
 8004152:	2b08      	cmp	r3, #8
 8004154:	d1f4      	bne.n	8004140 <HAL_RCC_ClockConfig+0xc0>
 8004156:	e070      	b.n	800423a <HAL_RCC_ClockConfig+0x1ba>
 8004158:	f7fe fe72 	bl	8002e40 <HAL_GetTick>
 800415c:	1b40      	subs	r0, r0, r5
 800415e:	42b8      	cmp	r0, r7
 8004160:	f200 809a 	bhi.w	8004298 <HAL_RCC_ClockConfig+0x218>
 8004164:	68b3      	ldr	r3, [r6, #8]
 8004166:	f013 0f0c 	tst.w	r3, #12
 800416a:	d1f5      	bne.n	8004158 <HAL_RCC_ClockConfig+0xd8>
 800416c:	e065      	b.n	800423a <HAL_RCC_ClockConfig+0x1ba>
 800416e:	6803      	ldr	r3, [r0, #0]
 8004170:	f013 0f02 	tst.w	r3, #2
 8004174:	d006      	beq.n	8004184 <HAL_RCC_ClockConfig+0x104>
 8004176:	4b55      	ldr	r3, [pc, #340]	; (80042cc <HAL_RCC_ClockConfig+0x24c>)
 8004178:	6899      	ldr	r1, [r3, #8]
 800417a:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800417e:	6882      	ldr	r2, [r0, #8]
 8004180:	430a      	orrs	r2, r1
 8004182:	609a      	str	r2, [r3, #8]
 8004184:	6823      	ldr	r3, [r4, #0]
 8004186:	f013 0f01 	tst.w	r3, #1
 800418a:	d04e      	beq.n	800422a <HAL_RCC_ClockConfig+0x1aa>
 800418c:	6863      	ldr	r3, [r4, #4]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d105      	bne.n	800419e <HAL_RCC_ClockConfig+0x11e>
 8004192:	4a4e      	ldr	r2, [pc, #312]	; (80042cc <HAL_RCC_ClockConfig+0x24c>)
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800419a:	d10d      	bne.n	80041b8 <HAL_RCC_ClockConfig+0x138>
 800419c:	e07f      	b.n	800429e <HAL_RCC_ClockConfig+0x21e>
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d105      	bne.n	80041ae <HAL_RCC_ClockConfig+0x12e>
 80041a2:	4a4a      	ldr	r2, [pc, #296]	; (80042cc <HAL_RCC_ClockConfig+0x24c>)
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80041aa:	d105      	bne.n	80041b8 <HAL_RCC_ClockConfig+0x138>
 80041ac:	e07a      	b.n	80042a4 <HAL_RCC_ClockConfig+0x224>
 80041ae:	4a47      	ldr	r2, [pc, #284]	; (80042cc <HAL_RCC_ClockConfig+0x24c>)
 80041b0:	6812      	ldr	r2, [r2, #0]
 80041b2:	f012 0f02 	tst.w	r2, #2
 80041b6:	d078      	beq.n	80042aa <HAL_RCC_ClockConfig+0x22a>
 80041b8:	4a44      	ldr	r2, [pc, #272]	; (80042cc <HAL_RCC_ClockConfig+0x24c>)
 80041ba:	6891      	ldr	r1, [r2, #8]
 80041bc:	f021 0103 	bic.w	r1, r1, #3
 80041c0:	430b      	orrs	r3, r1
 80041c2:	6093      	str	r3, [r2, #8]
 80041c4:	f7fe fe3c 	bl	8002e40 <HAL_GetTick>
 80041c8:	4606      	mov	r6, r0
 80041ca:	6863      	ldr	r3, [r4, #4]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d10e      	bne.n	80041ee <HAL_RCC_ClockConfig+0x16e>
 80041d0:	4f3e      	ldr	r7, [pc, #248]	; (80042cc <HAL_RCC_ClockConfig+0x24c>)
 80041d2:	f241 3888 	movw	r8, #5000	; 0x1388
 80041d6:	e004      	b.n	80041e2 <HAL_RCC_ClockConfig+0x162>
 80041d8:	f7fe fe32 	bl	8002e40 <HAL_GetTick>
 80041dc:	1b80      	subs	r0, r0, r6
 80041de:	4540      	cmp	r0, r8
 80041e0:	d866      	bhi.n	80042b0 <HAL_RCC_ClockConfig+0x230>
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	f003 030c 	and.w	r3, r3, #12
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d1f5      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x158>
 80041ec:	e01d      	b.n	800422a <HAL_RCC_ClockConfig+0x1aa>
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d003      	beq.n	80041fa <HAL_RCC_ClockConfig+0x17a>
 80041f2:	4f36      	ldr	r7, [pc, #216]	; (80042cc <HAL_RCC_ClockConfig+0x24c>)
 80041f4:	f241 3888 	movw	r8, #5000	; 0x1388
 80041f8:	e013      	b.n	8004222 <HAL_RCC_ClockConfig+0x1a2>
 80041fa:	4f34      	ldr	r7, [pc, #208]	; (80042cc <HAL_RCC_ClockConfig+0x24c>)
 80041fc:	f241 3888 	movw	r8, #5000	; 0x1388
 8004200:	e004      	b.n	800420c <HAL_RCC_ClockConfig+0x18c>
 8004202:	f7fe fe1d 	bl	8002e40 <HAL_GetTick>
 8004206:	1b80      	subs	r0, r0, r6
 8004208:	4540      	cmp	r0, r8
 800420a:	d854      	bhi.n	80042b6 <HAL_RCC_ClockConfig+0x236>
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
 8004212:	2b08      	cmp	r3, #8
 8004214:	d1f5      	bne.n	8004202 <HAL_RCC_ClockConfig+0x182>
 8004216:	e008      	b.n	800422a <HAL_RCC_ClockConfig+0x1aa>
 8004218:	f7fe fe12 	bl	8002e40 <HAL_GetTick>
 800421c:	1b80      	subs	r0, r0, r6
 800421e:	4540      	cmp	r0, r8
 8004220:	d84c      	bhi.n	80042bc <HAL_RCC_ClockConfig+0x23c>
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f013 0f0c 	tst.w	r3, #12
 8004228:	d1f6      	bne.n	8004218 <HAL_RCC_ClockConfig+0x198>
 800422a:	b2ea      	uxtb	r2, r5
 800422c:	4b26      	ldr	r3, [pc, #152]	; (80042c8 <HAL_RCC_ClockConfig+0x248>)
 800422e:	701a      	strb	r2, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	42ab      	cmp	r3, r5
 8004238:	d143      	bne.n	80042c2 <HAL_RCC_ClockConfig+0x242>
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	f013 0f04 	tst.w	r3, #4
 8004240:	d006      	beq.n	8004250 <HAL_RCC_ClockConfig+0x1d0>
 8004242:	4b22      	ldr	r3, [pc, #136]	; (80042cc <HAL_RCC_ClockConfig+0x24c>)
 8004244:	6899      	ldr	r1, [r3, #8]
 8004246:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 800424a:	68e2      	ldr	r2, [r4, #12]
 800424c:	430a      	orrs	r2, r1
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	f013 0f08 	tst.w	r3, #8
 8004256:	d007      	beq.n	8004268 <HAL_RCC_ClockConfig+0x1e8>
 8004258:	4b1c      	ldr	r3, [pc, #112]	; (80042cc <HAL_RCC_ClockConfig+0x24c>)
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	6921      	ldr	r1, [r4, #16]
 800425e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004262:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004266:	609a      	str	r2, [r3, #8]
 8004268:	2000      	movs	r0, #0
 800426a:	f7fe fdb3 	bl	8002dd4 <HAL_InitTick>
 800426e:	2000      	movs	r0, #0
 8004270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004274:	2001      	movs	r0, #1
 8004276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800427a:	2001      	movs	r0, #1
 800427c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004280:	2001      	movs	r0, #1
 8004282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004286:	2001      	movs	r0, #1
 8004288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800428c:	2003      	movs	r0, #3
 800428e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004292:	2003      	movs	r0, #3
 8004294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004298:	2003      	movs	r0, #3
 800429a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800429e:	2001      	movs	r0, #1
 80042a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042a4:	2001      	movs	r0, #1
 80042a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042aa:	2001      	movs	r0, #1
 80042ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042b0:	2003      	movs	r0, #3
 80042b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042b6:	2003      	movs	r0, #3
 80042b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042bc:	2003      	movs	r0, #3
 80042be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042c2:	2001      	movs	r0, #1
 80042c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042c8:	40023c00 	.word	0x40023c00
 80042cc:	40023800 	.word	0x40023800

080042d0 <HAL_RCC_GetSysClockFreq>:
 80042d0:	4b22      	ldr	r3, [pc, #136]	; (800435c <HAL_RCC_GetSysClockFreq+0x8c>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 030c 	and.w	r3, r3, #12
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d03d      	beq.n	8004358 <HAL_RCC_GetSysClockFreq+0x88>
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d001      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x14>
 80042e0:	481f      	ldr	r0, [pc, #124]	; (8004360 <HAL_RCC_GetSysClockFreq+0x90>)
 80042e2:	4770      	bx	lr
 80042e4:	4b1d      	ldr	r3, [pc, #116]	; (800435c <HAL_RCC_GetSysClockFreq+0x8c>)
 80042e6:	6858      	ldr	r0, [r3, #4]
 80042e8:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80042f2:	fa93 f3a3 	rbit	r3, r3
 80042f6:	fab3 f383 	clz	r3, r3
 80042fa:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	fa32 f303 	lsrs.w	r3, r2, r3
 8004304:	4b15      	ldr	r3, [pc, #84]	; (800435c <HAL_RCC_GetSysClockFreq+0x8c>)
 8004306:	6858      	ldr	r0, [r3, #4]
 8004308:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800430c:	fa93 f3a3 	rbit	r3, r3
 8004310:	fab3 f383 	clz	r3, r3
 8004314:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8004318:	ea4f 4040 	mov.w	r0, r0, lsl #17
 800431c:	ea4f 4050 	mov.w	r0, r0, lsr #17
 8004320:	b2db      	uxtb	r3, r3
 8004322:	fa20 f303 	lsr.w	r3, r0, r3
 8004326:	bf14      	ite	ne
 8004328:	480e      	ldrne	r0, [pc, #56]	; (8004364 <HAL_RCC_GetSysClockFreq+0x94>)
 800432a:	480d      	ldreq	r0, [pc, #52]	; (8004360 <HAL_RCC_GetSysClockFreq+0x90>)
 800432c:	fbb0 f0f1 	udiv	r0, r0, r1
 8004330:	fb00 f003 	mul.w	r0, r0, r3
 8004334:	4b09      	ldr	r3, [pc, #36]	; (800435c <HAL_RCC_GetSysClockFreq+0x8c>)
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800433c:	fa93 f3a3 	rbit	r3, r3
 8004340:	fab3 f383 	clz	r3, r3
 8004344:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8004348:	b2db      	uxtb	r3, r3
 800434a:	fa22 f303 	lsr.w	r3, r2, r3
 800434e:	3301      	adds	r3, #1
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	fbb0 f0f3 	udiv	r0, r0, r3
 8004356:	4770      	bx	lr
 8004358:	4802      	ldr	r0, [pc, #8]	; (8004364 <HAL_RCC_GetSysClockFreq+0x94>)
 800435a:	4770      	bx	lr
 800435c:	40023800 	.word	0x40023800
 8004360:	00f42400 	.word	0x00f42400
 8004364:	007a1200 	.word	0x007a1200

08004368 <HAL_RCC_GetHCLKFreq>:
 8004368:	b508      	push	{r3, lr}
 800436a:	f7ff ffb1 	bl	80042d0 <HAL_RCC_GetSysClockFreq>
 800436e:	4b09      	ldr	r3, [pc, #36]	; (8004394 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	23f0      	movs	r3, #240	; 0xf0
 8004374:	fa93 f3a3 	rbit	r3, r3
 8004378:	fab3 f383 	clz	r3, r3
 800437c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	fa22 f303 	lsr.w	r3, r2, r3
 8004386:	4a04      	ldr	r2, [pc, #16]	; (8004398 <HAL_RCC_GetHCLKFreq+0x30>)
 8004388:	5cd3      	ldrb	r3, [r2, r3]
 800438a:	40d8      	lsrs	r0, r3
 800438c:	4b03      	ldr	r3, [pc, #12]	; (800439c <HAL_RCC_GetHCLKFreq+0x34>)
 800438e:	6018      	str	r0, [r3, #0]
 8004390:	bd08      	pop	{r3, pc}
 8004392:	bf00      	nop
 8004394:	40023800 	.word	0x40023800
 8004398:	0800ee94 	.word	0x0800ee94
 800439c:	20000000 	.word	0x20000000

080043a0 <HAL_RNG_MspInit>:
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop

080043a4 <HAL_RNG_Init>:
 80043a4:	b510      	push	{r4, lr}
 80043a6:	4604      	mov	r4, r0
 80043a8:	b180      	cbz	r0, 80043cc <HAL_RNG_Init+0x28>
 80043aa:	7943      	ldrb	r3, [r0, #5]
 80043ac:	f013 0fff 	tst.w	r3, #255	; 0xff
 80043b0:	d101      	bne.n	80043b6 <HAL_RNG_Init+0x12>
 80043b2:	f7ff fff5 	bl	80043a0 <HAL_RNG_MspInit>
 80043b6:	2302      	movs	r3, #2
 80043b8:	7163      	strb	r3, [r4, #5]
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	f042 0204 	orr.w	r2, r2, #4
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	2301      	movs	r3, #1
 80043c6:	7163      	strb	r3, [r4, #5]
 80043c8:	2000      	movs	r0, #0
 80043ca:	bd10      	pop	{r4, pc}
 80043cc:	2001      	movs	r0, #1
 80043ce:	bd10      	pop	{r4, pc}

080043d0 <HAL_RNG_GetRandomNumber>:
 80043d0:	b538      	push	{r3, r4, r5, lr}
 80043d2:	4604      	mov	r4, r0
 80043d4:	7903      	ldrb	r3, [r0, #4]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d014      	beq.n	8004404 <HAL_RNG_GetRandomNumber+0x34>
 80043da:	2301      	movs	r3, #1
 80043dc:	7103      	strb	r3, [r0, #4]
 80043de:	f7fe fd2f 	bl	8002e40 <HAL_GetTick>
 80043e2:	4605      	mov	r5, r0
 80043e4:	e005      	b.n	80043f2 <HAL_RNG_GetRandomNumber+0x22>
 80043e6:	f7fe fd2b 	bl	8002e40 <HAL_GetTick>
 80043ea:	1b40      	subs	r0, r0, r5
 80043ec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80043f0:	d80a      	bhi.n	8004408 <HAL_RNG_GetRandomNumber+0x38>
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	f012 0f01 	tst.w	r2, #1
 80043fa:	d0f4      	beq.n	80043e6 <HAL_RNG_GetRandomNumber+0x16>
 80043fc:	6898      	ldr	r0, [r3, #8]
 80043fe:	2300      	movs	r3, #0
 8004400:	7123      	strb	r3, [r4, #4]
 8004402:	bd38      	pop	{r3, r4, r5, pc}
 8004404:	2002      	movs	r0, #2
 8004406:	bd38      	pop	{r3, r4, r5, pc}
 8004408:	2003      	movs	r0, #3
 800440a:	bd38      	pop	{r3, r4, r5, pc}

0800440c <SPI_WaitOnFlagUntilTimeout>:
 800440c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004410:	4606      	mov	r6, r0
 8004412:	460c      	mov	r4, r1
 8004414:	4690      	mov	r8, r2
 8004416:	461d      	mov	r5, r3
 8004418:	f7fe fd12 	bl	8002e40 <HAL_GetTick>
 800441c:	4607      	mov	r7, r0
 800441e:	f1b8 0f00 	cmp.w	r8, #0
 8004422:	d02a      	beq.n	800447a <SPI_WaitOnFlagUntilTimeout+0x6e>
 8004424:	e05b      	b.n	80044de <SPI_WaitOnFlagUntilTimeout+0xd2>
 8004426:	f1b5 3fff 	cmp.w	r5, #4294967295
 800442a:	d027      	beq.n	800447c <SPI_WaitOnFlagUntilTimeout+0x70>
 800442c:	b125      	cbz	r5, 8004438 <SPI_WaitOnFlagUntilTimeout+0x2c>
 800442e:	f7fe fd07 	bl	8002e40 <HAL_GetTick>
 8004432:	1bc0      	subs	r0, r0, r7
 8004434:	4285      	cmp	r5, r0
 8004436:	d220      	bcs.n	800447a <SPI_WaitOnFlagUntilTimeout+0x6e>
 8004438:	6833      	ldr	r3, [r6, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004440:	605a      	str	r2, [r3, #4]
 8004442:	6833      	ldr	r3, [r6, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800444e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004452:	d109      	bne.n	8004468 <SPI_WaitOnFlagUntilTimeout+0x5c>
 8004454:	6833      	ldr	r3, [r6, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	6833      	ldr	r3, [r6, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	2301      	movs	r3, #1
 800446a:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
 800446e:	2300      	movs	r3, #0
 8004470:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8004474:	2003      	movs	r0, #3
 8004476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800447a:	6832      	ldr	r2, [r6, #0]
 800447c:	6893      	ldr	r3, [r2, #8]
 800447e:	4023      	ands	r3, r4
 8004480:	42a3      	cmp	r3, r4
 8004482:	d1d0      	bne.n	8004426 <SPI_WaitOnFlagUntilTimeout+0x1a>
 8004484:	2000      	movs	r0, #0
 8004486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800448a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800448e:	d027      	beq.n	80044e0 <SPI_WaitOnFlagUntilTimeout+0xd4>
 8004490:	b125      	cbz	r5, 800449c <SPI_WaitOnFlagUntilTimeout+0x90>
 8004492:	f7fe fcd5 	bl	8002e40 <HAL_GetTick>
 8004496:	1bc0      	subs	r0, r0, r7
 8004498:	4285      	cmp	r5, r0
 800449a:	d220      	bcs.n	80044de <SPI_WaitOnFlagUntilTimeout+0xd2>
 800449c:	6833      	ldr	r3, [r6, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044a4:	605a      	str	r2, [r3, #4]
 80044a6:	6833      	ldr	r3, [r6, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80044b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044b6:	d109      	bne.n	80044cc <SPI_WaitOnFlagUntilTimeout+0xc0>
 80044b8:	6833      	ldr	r3, [r6, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	6833      	ldr	r3, [r6, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	2301      	movs	r3, #1
 80044ce:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
 80044d2:	2300      	movs	r3, #0
 80044d4:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 80044d8:	2003      	movs	r0, #3
 80044da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044de:	6832      	ldr	r2, [r6, #0]
 80044e0:	6893      	ldr	r3, [r2, #8]
 80044e2:	4023      	ands	r3, r4
 80044e4:	42a3      	cmp	r3, r4
 80044e6:	d0d0      	beq.n	800448a <SPI_WaitOnFlagUntilTimeout+0x7e>
 80044e8:	2000      	movs	r0, #0
 80044ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044ee:	bf00      	nop

080044f0 <HAL_SPI_MspInit>:
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop

080044f4 <HAL_SPI_Init>:
 80044f4:	b510      	push	{r4, lr}
 80044f6:	4604      	mov	r4, r0
 80044f8:	2800      	cmp	r0, #0
 80044fa:	d03b      	beq.n	8004574 <HAL_SPI_Init+0x80>
 80044fc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8004500:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004504:	d101      	bne.n	800450a <HAL_SPI_Init+0x16>
 8004506:	f7ff fff3 	bl	80044f0 <HAL_SPI_MspInit>
 800450a:	2302      	movs	r3, #2
 800450c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	6823      	ldr	r3, [r4, #0]
 800451c:	68a1      	ldr	r1, [r4, #8]
 800451e:	6862      	ldr	r2, [r4, #4]
 8004520:	ea41 0002 	orr.w	r0, r1, r2
 8004524:	68e2      	ldr	r2, [r4, #12]
 8004526:	4310      	orrs	r0, r2
 8004528:	6922      	ldr	r2, [r4, #16]
 800452a:	4310      	orrs	r0, r2
 800452c:	6962      	ldr	r2, [r4, #20]
 800452e:	4310      	orrs	r0, r2
 8004530:	69e2      	ldr	r2, [r4, #28]
 8004532:	4310      	orrs	r0, r2
 8004534:	6a22      	ldr	r2, [r4, #32]
 8004536:	4310      	orrs	r0, r2
 8004538:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800453a:	4310      	orrs	r0, r2
 800453c:	69a2      	ldr	r2, [r4, #24]
 800453e:	f402 7100 	and.w	r1, r2, #512	; 0x200
 8004542:	ea40 0201 	orr.w	r2, r0, r1
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	8b61      	ldrh	r1, [r4, #26]
 800454c:	f001 0104 	and.w	r1, r1, #4
 8004550:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800455a:	611a      	str	r2, [r3, #16]
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	69da      	ldr	r2, [r3, #28]
 8004560:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004564:	61da      	str	r2, [r3, #28]
 8004566:	2000      	movs	r0, #0
 8004568:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
 800456c:	2301      	movs	r3, #1
 800456e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8004572:	bd10      	pop	{r4, pc}
 8004574:	2001      	movs	r0, #1
 8004576:	bd10      	pop	{r4, pc}

08004578 <HAL_SPI_TransmitReceive>:
 8004578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	4604      	mov	r4, r0
 8004580:	9d08      	ldr	r5, [sp, #32]
 8004582:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
 8004586:	b2c0      	uxtb	r0, r0
 8004588:	2801      	cmp	r0, #1
 800458a:	d002      	beq.n	8004592 <HAL_SPI_TransmitReceive+0x1a>
 800458c:	2822      	cmp	r0, #34	; 0x22
 800458e:	f040 8185 	bne.w	800489c <HAL_SPI_TransmitReceive+0x324>
 8004592:	2900      	cmp	r1, #0
 8004594:	f000 8184 	beq.w	80048a0 <HAL_SPI_TransmitReceive+0x328>
 8004598:	2a00      	cmp	r2, #0
 800459a:	f000 8183 	beq.w	80048a4 <HAL_SPI_TransmitReceive+0x32c>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 8182 	beq.w	80048a8 <HAL_SPI_TransmitReceive+0x330>
 80045a4:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 80045a8:	2801      	cmp	r0, #1
 80045aa:	f000 817f 	beq.w	80048ac <HAL_SPI_TransmitReceive+0x334>
 80045ae:	2001      	movs	r0, #1
 80045b0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
 80045b4:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80045b8:	b2c0      	uxtb	r0, r0
 80045ba:	2801      	cmp	r0, #1
 80045bc:	bf04      	itt	eq
 80045be:	2032      	moveq	r0, #50	; 0x32
 80045c0:	f884 0051 	strbeq.w	r0, [r4, #81]	; 0x51
 80045c4:	2000      	movs	r0, #0
 80045c6:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
 80045ca:	63a2      	str	r2, [r4, #56]	; 0x38
 80045cc:	87a3      	strh	r3, [r4, #60]	; 0x3c
 80045ce:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80045d0:	6321      	str	r1, [r4, #48]	; 0x30
 80045d2:	86a3      	strh	r3, [r4, #52]	; 0x34
 80045d4:	86e3      	strh	r3, [r4, #54]	; 0x36
 80045d6:	64a0      	str	r0, [r4, #72]	; 0x48
 80045d8:	64e0      	str	r0, [r4, #76]	; 0x4c
 80045da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80045dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e0:	d109      	bne.n	80045f6 <HAL_SPI_TransmitReceive+0x7e>
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	f012 0f40 	tst.w	r2, #64	; 0x40
 80045fe:	d103      	bne.n	8004608 <HAL_SPI_TransmitReceive+0x90>
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	68e3      	ldr	r3, [r4, #12]
 800460a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800460e:	f040 8082 	bne.w	8004716 <HAL_SPI_TransmitReceive+0x19e>
 8004612:	6863      	ldr	r3, [r4, #4]
 8004614:	b12b      	cbz	r3, 8004622 <HAL_SPI_TransmitReceive+0xaa>
 8004616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800461a:	d10c      	bne.n	8004636 <HAL_SPI_TransmitReceive+0xbe>
 800461c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800461e:	2b01      	cmp	r3, #1
 8004620:	d109      	bne.n	8004636 <HAL_SPI_TransmitReceive+0xbe>
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004626:	8812      	ldrh	r2, [r2, #0]
 8004628:	60da      	str	r2, [r3, #12]
 800462a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800462c:	3302      	adds	r3, #2
 800462e:	6323      	str	r3, [r4, #48]	; 0x30
 8004630:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004632:	3b01      	subs	r3, #1
 8004634:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004636:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004638:	b123      	cbz	r3, 8004644 <HAL_SPI_TransmitReceive+0xcc>
 800463a:	2702      	movs	r7, #2
 800463c:	2600      	movs	r6, #0
 800463e:	f04f 0801 	mov.w	r8, #1
 8004642:	e01c      	b.n	800467e <HAL_SPI_TransmitReceive+0x106>
 8004644:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800464a:	d104      	bne.n	8004656 <HAL_SPI_TransmitReceive+0xde>
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	4620      	mov	r0, r4
 8004658:	2101      	movs	r1, #1
 800465a:	2200      	movs	r2, #0
 800465c:	462b      	mov	r3, r5
 800465e:	f7ff fed5 	bl	800440c <SPI_WaitOnFlagUntilTimeout>
 8004662:	2800      	cmp	r0, #0
 8004664:	f040 8124 	bne.w	80048b0 <HAL_SPI_TransmitReceive+0x338>
 8004668:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800466a:	6822      	ldr	r2, [r4, #0]
 800466c:	68d2      	ldr	r2, [r2, #12]
 800466e:	801a      	strh	r2, [r3, #0]
 8004670:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004672:	3302      	adds	r3, #2
 8004674:	63a3      	str	r3, [r4, #56]	; 0x38
 8004676:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004678:	3b01      	subs	r3, #1
 800467a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800467c:	e0c2      	b.n	8004804 <HAL_SPI_TransmitReceive+0x28c>
 800467e:	4620      	mov	r0, r4
 8004680:	4639      	mov	r1, r7
 8004682:	4632      	mov	r2, r6
 8004684:	462b      	mov	r3, r5
 8004686:	f7ff fec1 	bl	800440c <SPI_WaitOnFlagUntilTimeout>
 800468a:	2800      	cmp	r0, #0
 800468c:	f040 8112 	bne.w	80048b4 <HAL_SPI_TransmitReceive+0x33c>
 8004690:	6823      	ldr	r3, [r4, #0]
 8004692:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004694:	8812      	ldrh	r2, [r2, #0]
 8004696:	60da      	str	r2, [r3, #12]
 8004698:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800469a:	3302      	adds	r3, #2
 800469c:	6323      	str	r3, [r4, #48]	; 0x30
 800469e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	86e3      	strh	r3, [r4, #54]	; 0x36
 80046a6:	b943      	cbnz	r3, 80046ba <HAL_SPI_TransmitReceive+0x142>
 80046a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80046aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ae:	d104      	bne.n	80046ba <HAL_SPI_TransmitReceive+0x142>
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	4620      	mov	r0, r4
 80046bc:	4641      	mov	r1, r8
 80046be:	4632      	mov	r2, r6
 80046c0:	462b      	mov	r3, r5
 80046c2:	f7ff fea3 	bl	800440c <SPI_WaitOnFlagUntilTimeout>
 80046c6:	2800      	cmp	r0, #0
 80046c8:	f040 80f6 	bne.w	80048b8 <HAL_SPI_TransmitReceive+0x340>
 80046cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046ce:	6822      	ldr	r2, [r4, #0]
 80046d0:	68d2      	ldr	r2, [r2, #12]
 80046d2:	801a      	strh	r2, [r3, #0]
 80046d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046d6:	3302      	adds	r3, #2
 80046d8:	63a3      	str	r3, [r4, #56]	; 0x38
 80046da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80046dc:	3b01      	subs	r3, #1
 80046de:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80046e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1cb      	bne.n	800467e <HAL_SPI_TransmitReceive+0x106>
 80046e6:	6863      	ldr	r3, [r4, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f040 808b 	bne.w	8004804 <HAL_SPI_TransmitReceive+0x28c>
 80046ee:	4620      	mov	r0, r4
 80046f0:	2101      	movs	r1, #1
 80046f2:	2200      	movs	r2, #0
 80046f4:	462b      	mov	r3, r5
 80046f6:	f7ff fe89 	bl	800440c <SPI_WaitOnFlagUntilTimeout>
 80046fa:	2800      	cmp	r0, #0
 80046fc:	f040 80de 	bne.w	80048bc <HAL_SPI_TransmitReceive+0x344>
 8004700:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004702:	6822      	ldr	r2, [r4, #0]
 8004704:	68d2      	ldr	r2, [r2, #12]
 8004706:	801a      	strh	r2, [r3, #0]
 8004708:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800470a:	3302      	adds	r3, #2
 800470c:	63a3      	str	r3, [r4, #56]	; 0x38
 800470e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004710:	3b01      	subs	r3, #1
 8004712:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004714:	e076      	b.n	8004804 <HAL_SPI_TransmitReceive+0x28c>
 8004716:	6863      	ldr	r3, [r4, #4]
 8004718:	b12b      	cbz	r3, 8004726 <HAL_SPI_TransmitReceive+0x1ae>
 800471a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800471e:	d10b      	bne.n	8004738 <HAL_SPI_TransmitReceive+0x1c0>
 8004720:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004722:	2b01      	cmp	r3, #1
 8004724:	d108      	bne.n	8004738 <HAL_SPI_TransmitReceive+0x1c0>
 8004726:	6822      	ldr	r2, [r4, #0]
 8004728:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800472a:	1c59      	adds	r1, r3, #1
 800472c:	6321      	str	r1, [r4, #48]	; 0x30
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	60d3      	str	r3, [r2, #12]
 8004732:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004734:	3b01      	subs	r3, #1
 8004736:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004738:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800473a:	b123      	cbz	r3, 8004746 <HAL_SPI_TransmitReceive+0x1ce>
 800473c:	2702      	movs	r7, #2
 800473e:	2600      	movs	r6, #0
 8004740:	f04f 0801 	mov.w	r8, #1
 8004744:	e019      	b.n	800477a <HAL_SPI_TransmitReceive+0x202>
 8004746:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474c:	d104      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x1e0>
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	4620      	mov	r0, r4
 800475a:	2101      	movs	r1, #1
 800475c:	2200      	movs	r2, #0
 800475e:	462b      	mov	r3, r5
 8004760:	f7ff fe54 	bl	800440c <SPI_WaitOnFlagUntilTimeout>
 8004764:	2800      	cmp	r0, #0
 8004766:	f040 80ab 	bne.w	80048c0 <HAL_SPI_TransmitReceive+0x348>
 800476a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800476c:	6822      	ldr	r2, [r4, #0]
 800476e:	68d2      	ldr	r2, [r2, #12]
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004774:	3b01      	subs	r3, #1
 8004776:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004778:	e044      	b.n	8004804 <HAL_SPI_TransmitReceive+0x28c>
 800477a:	4620      	mov	r0, r4
 800477c:	4639      	mov	r1, r7
 800477e:	4632      	mov	r2, r6
 8004780:	462b      	mov	r3, r5
 8004782:	f7ff fe43 	bl	800440c <SPI_WaitOnFlagUntilTimeout>
 8004786:	2800      	cmp	r0, #0
 8004788:	f040 809c 	bne.w	80048c4 <HAL_SPI_TransmitReceive+0x34c>
 800478c:	6822      	ldr	r2, [r4, #0]
 800478e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004790:	1c59      	adds	r1, r3, #1
 8004792:	6321      	str	r1, [r4, #48]	; 0x30
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	60d3      	str	r3, [r2, #12]
 8004798:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800479a:	3b01      	subs	r3, #1
 800479c:	b29b      	uxth	r3, r3
 800479e:	86e3      	strh	r3, [r4, #54]	; 0x36
 80047a0:	b943      	cbnz	r3, 80047b4 <HAL_SPI_TransmitReceive+0x23c>
 80047a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80047a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047a8:	d104      	bne.n	80047b4 <HAL_SPI_TransmitReceive+0x23c>
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	4620      	mov	r0, r4
 80047b6:	4641      	mov	r1, r8
 80047b8:	4632      	mov	r2, r6
 80047ba:	462b      	mov	r3, r5
 80047bc:	f7ff fe26 	bl	800440c <SPI_WaitOnFlagUntilTimeout>
 80047c0:	2800      	cmp	r0, #0
 80047c2:	f040 8081 	bne.w	80048c8 <HAL_SPI_TransmitReceive+0x350>
 80047c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	63a2      	str	r2, [r4, #56]	; 0x38
 80047cc:	6822      	ldr	r2, [r4, #0]
 80047ce:	68d2      	ldr	r2, [r2, #12]
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047d4:	3b01      	subs	r3, #1
 80047d6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80047d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1cd      	bne.n	800477a <HAL_SPI_TransmitReceive+0x202>
 80047de:	6863      	ldr	r3, [r4, #4]
 80047e0:	b983      	cbnz	r3, 8004804 <HAL_SPI_TransmitReceive+0x28c>
 80047e2:	4620      	mov	r0, r4
 80047e4:	2101      	movs	r1, #1
 80047e6:	2200      	movs	r2, #0
 80047e8:	462b      	mov	r3, r5
 80047ea:	f7ff fe0f 	bl	800440c <SPI_WaitOnFlagUntilTimeout>
 80047ee:	2800      	cmp	r0, #0
 80047f0:	d16c      	bne.n	80048cc <HAL_SPI_TransmitReceive+0x354>
 80047f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	63a2      	str	r2, [r4, #56]	; 0x38
 80047f8:	6822      	ldr	r2, [r4, #0]
 80047fa:	68d2      	ldr	r2, [r2, #12]
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004800:	3b01      	subs	r3, #1
 8004802:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004804:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800480a:	d113      	bne.n	8004834 <HAL_SPI_TransmitReceive+0x2bc>
 800480c:	4620      	mov	r0, r4
 800480e:	2101      	movs	r1, #1
 8004810:	2200      	movs	r2, #0
 8004812:	462b      	mov	r3, r5
 8004814:	f7ff fdfa 	bl	800440c <SPI_WaitOnFlagUntilTimeout>
 8004818:	b138      	cbz	r0, 800482a <HAL_SPI_TransmitReceive+0x2b2>
 800481a:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 800481e:	f043 0302 	orr.w	r3, r3, #2
 8004822:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 8004826:	2303      	movs	r3, #3
 8004828:	e051      	b.n	80048ce <HAL_SPI_TransmitReceive+0x356>
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	b29b      	uxth	r3, r3
 8004830:	f8ad 3006 	strh.w	r3, [sp, #6]
 8004834:	4620      	mov	r0, r4
 8004836:	2180      	movs	r1, #128	; 0x80
 8004838:	2201      	movs	r2, #1
 800483a:	462b      	mov	r3, r5
 800483c:	f7ff fde6 	bl	800440c <SPI_WaitOnFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	b138      	cbz	r0, 8004854 <HAL_SPI_TransmitReceive+0x2dc>
 8004844:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8004848:	f043 0320 	orr.w	r3, r3, #32
 800484c:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 8004850:	2303      	movs	r3, #3
 8004852:	e03c      	b.n	80048ce <HAL_SPI_TransmitReceive+0x356>
 8004854:	2201      	movs	r2, #1
 8004856:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 800485a:	6822      	ldr	r2, [r4, #0]
 800485c:	6890      	ldr	r0, [r2, #8]
 800485e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004860:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004864:	d116      	bne.n	8004894 <HAL_SPI_TransmitReceive+0x31c>
 8004866:	f010 0f10 	tst.w	r0, #16
 800486a:	d013      	beq.n	8004894 <HAL_SPI_TransmitReceive+0x31c>
 800486c:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8004870:	f043 0302 	orr.w	r3, r3, #2
 8004874:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 8004878:	6813      	ldr	r3, [r2, #0]
 800487a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	2300      	movs	r3, #0
 800488c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8004890:	2301      	movs	r3, #1
 8004892:	e01c      	b.n	80048ce <HAL_SPI_TransmitReceive+0x356>
 8004894:	2200      	movs	r2, #0
 8004896:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 800489a:	e018      	b.n	80048ce <HAL_SPI_TransmitReceive+0x356>
 800489c:	2302      	movs	r3, #2
 800489e:	e016      	b.n	80048ce <HAL_SPI_TransmitReceive+0x356>
 80048a0:	2301      	movs	r3, #1
 80048a2:	e014      	b.n	80048ce <HAL_SPI_TransmitReceive+0x356>
 80048a4:	2301      	movs	r3, #1
 80048a6:	e012      	b.n	80048ce <HAL_SPI_TransmitReceive+0x356>
 80048a8:	2301      	movs	r3, #1
 80048aa:	e010      	b.n	80048ce <HAL_SPI_TransmitReceive+0x356>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e00e      	b.n	80048ce <HAL_SPI_TransmitReceive+0x356>
 80048b0:	2303      	movs	r3, #3
 80048b2:	e00c      	b.n	80048ce <HAL_SPI_TransmitReceive+0x356>
 80048b4:	2303      	movs	r3, #3
 80048b6:	e00a      	b.n	80048ce <HAL_SPI_TransmitReceive+0x356>
 80048b8:	2303      	movs	r3, #3
 80048ba:	e008      	b.n	80048ce <HAL_SPI_TransmitReceive+0x356>
 80048bc:	2303      	movs	r3, #3
 80048be:	e006      	b.n	80048ce <HAL_SPI_TransmitReceive+0x356>
 80048c0:	2303      	movs	r3, #3
 80048c2:	e004      	b.n	80048ce <HAL_SPI_TransmitReceive+0x356>
 80048c4:	2303      	movs	r3, #3
 80048c6:	e002      	b.n	80048ce <HAL_SPI_TransmitReceive+0x356>
 80048c8:	2303      	movs	r3, #3
 80048ca:	e000      	b.n	80048ce <HAL_SPI_TransmitReceive+0x356>
 80048cc:	2303      	movs	r3, #3
 80048ce:	4618      	mov	r0, r3
 80048d0:	b002      	add	sp, #8
 80048d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048d6:	bf00      	nop

080048d8 <HAL_TIM_Base_MspInit>:
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop

080048dc <HAL_TIM_Base_Start_IT>:
 80048dc:	6803      	ldr	r3, [r0, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	f042 0201 	orr.w	r2, r2, #1
 80048e4:	60da      	str	r2, [r3, #12]
 80048e6:	6803      	ldr	r3, [r0, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	2000      	movs	r0, #0
 80048f2:	4770      	bx	lr

080048f4 <TIM_Base_SetConfig>:
 80048f4:	6803      	ldr	r3, [r0, #0]
 80048f6:	4a31      	ldr	r2, [pc, #196]	; (80049bc <TIM_Base_SetConfig+0xc8>)
 80048f8:	4290      	cmp	r0, r2
 80048fa:	d012      	beq.n	8004922 <TIM_Base_SetConfig+0x2e>
 80048fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004900:	d00f      	beq.n	8004922 <TIM_Base_SetConfig+0x2e>
 8004902:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004906:	4290      	cmp	r0, r2
 8004908:	d00b      	beq.n	8004922 <TIM_Base_SetConfig+0x2e>
 800490a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800490e:	4290      	cmp	r0, r2
 8004910:	d007      	beq.n	8004922 <TIM_Base_SetConfig+0x2e>
 8004912:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004916:	4290      	cmp	r0, r2
 8004918:	d003      	beq.n	8004922 <TIM_Base_SetConfig+0x2e>
 800491a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800491e:	4290      	cmp	r0, r2
 8004920:	d119      	bne.n	8004956 <TIM_Base_SetConfig+0x62>
 8004922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004926:	684a      	ldr	r2, [r1, #4]
 8004928:	4313      	orrs	r3, r2
 800492a:	4a24      	ldr	r2, [pc, #144]	; (80049bc <TIM_Base_SetConfig+0xc8>)
 800492c:	4290      	cmp	r0, r2
 800492e:	d029      	beq.n	8004984 <TIM_Base_SetConfig+0x90>
 8004930:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004934:	d026      	beq.n	8004984 <TIM_Base_SetConfig+0x90>
 8004936:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800493a:	4290      	cmp	r0, r2
 800493c:	d022      	beq.n	8004984 <TIM_Base_SetConfig+0x90>
 800493e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004942:	4290      	cmp	r0, r2
 8004944:	d01e      	beq.n	8004984 <TIM_Base_SetConfig+0x90>
 8004946:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800494a:	4290      	cmp	r0, r2
 800494c:	d01a      	beq.n	8004984 <TIM_Base_SetConfig+0x90>
 800494e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004952:	4290      	cmp	r0, r2
 8004954:	d016      	beq.n	8004984 <TIM_Base_SetConfig+0x90>
 8004956:	4a1a      	ldr	r2, [pc, #104]	; (80049c0 <TIM_Base_SetConfig+0xcc>)
 8004958:	4290      	cmp	r0, r2
 800495a:	d013      	beq.n	8004984 <TIM_Base_SetConfig+0x90>
 800495c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004960:	4290      	cmp	r0, r2
 8004962:	d00f      	beq.n	8004984 <TIM_Base_SetConfig+0x90>
 8004964:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004968:	4290      	cmp	r0, r2
 800496a:	d00b      	beq.n	8004984 <TIM_Base_SetConfig+0x90>
 800496c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004970:	4290      	cmp	r0, r2
 8004972:	d007      	beq.n	8004984 <TIM_Base_SetConfig+0x90>
 8004974:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004978:	4290      	cmp	r0, r2
 800497a:	d003      	beq.n	8004984 <TIM_Base_SetConfig+0x90>
 800497c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004980:	4290      	cmp	r0, r2
 8004982:	d114      	bne.n	80049ae <TIM_Base_SetConfig+0xba>
 8004984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004988:	68ca      	ldr	r2, [r1, #12]
 800498a:	431a      	orrs	r2, r3
 800498c:	6002      	str	r2, [r0, #0]
 800498e:	688b      	ldr	r3, [r1, #8]
 8004990:	62c3      	str	r3, [r0, #44]	; 0x2c
 8004992:	680b      	ldr	r3, [r1, #0]
 8004994:	6283      	str	r3, [r0, #40]	; 0x28
 8004996:	4b09      	ldr	r3, [pc, #36]	; (80049bc <TIM_Base_SetConfig+0xc8>)
 8004998:	4298      	cmp	r0, r3
 800499a:	d003      	beq.n	80049a4 <TIM_Base_SetConfig+0xb0>
 800499c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049a0:	4298      	cmp	r0, r3
 80049a2:	d101      	bne.n	80049a8 <TIM_Base_SetConfig+0xb4>
 80049a4:	690b      	ldr	r3, [r1, #16]
 80049a6:	6303      	str	r3, [r0, #48]	; 0x30
 80049a8:	2301      	movs	r3, #1
 80049aa:	6143      	str	r3, [r0, #20]
 80049ac:	4770      	bx	lr
 80049ae:	6003      	str	r3, [r0, #0]
 80049b0:	688b      	ldr	r3, [r1, #8]
 80049b2:	62c3      	str	r3, [r0, #44]	; 0x2c
 80049b4:	680b      	ldr	r3, [r1, #0]
 80049b6:	6283      	str	r3, [r0, #40]	; 0x28
 80049b8:	e7f6      	b.n	80049a8 <TIM_Base_SetConfig+0xb4>
 80049ba:	bf00      	nop
 80049bc:	40010000 	.word	0x40010000
 80049c0:	40014000 	.word	0x40014000

080049c4 <HAL_TIM_Base_Init>:
 80049c4:	b510      	push	{r4, lr}
 80049c6:	4604      	mov	r4, r0
 80049c8:	b198      	cbz	r0, 80049f2 <HAL_TIM_Base_Init+0x2e>
 80049ca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80049ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80049d2:	d101      	bne.n	80049d8 <HAL_TIM_Base_Init+0x14>
 80049d4:	f7ff ff80 	bl	80048d8 <HAL_TIM_Base_MspInit>
 80049d8:	2302      	movs	r3, #2
 80049da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80049de:	4621      	mov	r1, r4
 80049e0:	f851 0b04 	ldr.w	r0, [r1], #4
 80049e4:	f7ff ff86 	bl	80048f4 <TIM_Base_SetConfig>
 80049e8:	2301      	movs	r3, #1
 80049ea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80049ee:	2000      	movs	r0, #0
 80049f0:	bd10      	pop	{r4, pc}
 80049f2:	2001      	movs	r0, #1
 80049f4:	bd10      	pop	{r4, pc}
 80049f6:	bf00      	nop

080049f8 <USB_CoreReset>:
 80049f8:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <USB_CoreReset+0x34>)
 80049fa:	e001      	b.n	8004a00 <USB_CoreReset+0x8>
 80049fc:	3b01      	subs	r3, #1
 80049fe:	d010      	beq.n	8004a22 <USB_CoreReset+0x2a>
 8004a00:	6902      	ldr	r2, [r0, #16]
 8004a02:	2a00      	cmp	r2, #0
 8004a04:	dafa      	bge.n	80049fc <USB_CoreReset+0x4>
 8004a06:	6903      	ldr	r3, [r0, #16]
 8004a08:	f043 0301 	orr.w	r3, r3, #1
 8004a0c:	6103      	str	r3, [r0, #16]
 8004a0e:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <USB_CoreReset+0x34>)
 8004a10:	e001      	b.n	8004a16 <USB_CoreReset+0x1e>
 8004a12:	3b01      	subs	r3, #1
 8004a14:	d007      	beq.n	8004a26 <USB_CoreReset+0x2e>
 8004a16:	6902      	ldr	r2, [r0, #16]
 8004a18:	f012 0f01 	tst.w	r2, #1
 8004a1c:	d1f9      	bne.n	8004a12 <USB_CoreReset+0x1a>
 8004a1e:	2000      	movs	r0, #0
 8004a20:	4770      	bx	lr
 8004a22:	2003      	movs	r0, #3
 8004a24:	4770      	bx	lr
 8004a26:	2003      	movs	r0, #3
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	00030d40 	.word	0x00030d40

08004a30 <USB_CoreInit>:
 8004a30:	b084      	sub	sp, #16
 8004a32:	b510      	push	{r4, lr}
 8004a34:	4604      	mov	r4, r0
 8004a36:	a803      	add	r0, sp, #12
 8004a38:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004a3c:	9b08      	ldr	r3, [sp, #32]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d118      	bne.n	8004a74 <USB_CoreInit+0x44>
 8004a42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a48:	63a3      	str	r3, [r4, #56]	; 0x38
 8004a4a:	68e3      	ldr	r3, [r4, #12]
 8004a4c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a54:	60e3      	str	r3, [r4, #12]
 8004a56:	68e3      	ldr	r3, [r4, #12]
 8004a58:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004a5c:	60e3      	str	r3, [r4, #12]
 8004a5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d103      	bne.n	8004a6c <USB_CoreInit+0x3c>
 8004a64:	68e3      	ldr	r3, [r4, #12]
 8004a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a6a:	60e3      	str	r3, [r4, #12]
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f7ff ffc3 	bl	80049f8 <USB_CoreReset>
 8004a72:	e009      	b.n	8004a88 <USB_CoreInit+0x58>
 8004a74:	68e3      	ldr	r3, [r4, #12]
 8004a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a7a:	60e3      	str	r3, [r4, #12]
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	f7ff ffbb 	bl	80049f8 <USB_CoreReset>
 8004a82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a86:	63a3      	str	r3, [r4, #56]	; 0x38
 8004a88:	9b06      	ldr	r3, [sp, #24]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d107      	bne.n	8004a9e <USB_CoreInit+0x6e>
 8004a8e:	68a3      	ldr	r3, [r4, #8]
 8004a90:	f043 030c 	orr.w	r3, r3, #12
 8004a94:	60a3      	str	r3, [r4, #8]
 8004a96:	68a3      	ldr	r3, [r4, #8]
 8004a98:	f043 0320 	orr.w	r3, r3, #32
 8004a9c:	60a3      	str	r3, [r4, #8]
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aa4:	b004      	add	sp, #16
 8004aa6:	4770      	bx	lr

08004aa8 <USB_EnableGlobalInt>:
 8004aa8:	6883      	ldr	r3, [r0, #8]
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	6083      	str	r3, [r0, #8]
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	4770      	bx	lr

08004ab4 <USB_DisableGlobalInt>:
 8004ab4:	6883      	ldr	r3, [r0, #8]
 8004ab6:	f023 0301 	bic.w	r3, r3, #1
 8004aba:	6083      	str	r3, [r0, #8]
 8004abc:	2000      	movs	r0, #0
 8004abe:	4770      	bx	lr

08004ac0 <USB_SetCurrentMode>:
 8004ac0:	b508      	push	{r3, lr}
 8004ac2:	68c3      	ldr	r3, [r0, #12]
 8004ac4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ac8:	60c3      	str	r3, [r0, #12]
 8004aca:	2901      	cmp	r1, #1
 8004acc:	d104      	bne.n	8004ad8 <USB_SetCurrentMode+0x18>
 8004ace:	68c3      	ldr	r3, [r0, #12]
 8004ad0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ad4:	60c3      	str	r3, [r0, #12]
 8004ad6:	e004      	b.n	8004ae2 <USB_SetCurrentMode+0x22>
 8004ad8:	b919      	cbnz	r1, 8004ae2 <USB_SetCurrentMode+0x22>
 8004ada:	68c3      	ldr	r3, [r0, #12]
 8004adc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ae0:	60c3      	str	r3, [r0, #12]
 8004ae2:	2032      	movs	r0, #50	; 0x32
 8004ae4:	f7fe f9b2 	bl	8002e4c <HAL_Delay>
 8004ae8:	2000      	movs	r0, #0
 8004aea:	bd08      	pop	{r3, pc}

08004aec <USB_FlushTxFifo>:
 8004aec:	0149      	lsls	r1, r1, #5
 8004aee:	f041 0320 	orr.w	r3, r1, #32
 8004af2:	6103      	str	r3, [r0, #16]
 8004af4:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <USB_FlushTxFifo+0x20>)
 8004af6:	e001      	b.n	8004afc <USB_FlushTxFifo+0x10>
 8004af8:	3b01      	subs	r3, #1
 8004afa:	d005      	beq.n	8004b08 <USB_FlushTxFifo+0x1c>
 8004afc:	6902      	ldr	r2, [r0, #16]
 8004afe:	f012 0f20 	tst.w	r2, #32
 8004b02:	d1f9      	bne.n	8004af8 <USB_FlushTxFifo+0xc>
 8004b04:	2000      	movs	r0, #0
 8004b06:	4770      	bx	lr
 8004b08:	2003      	movs	r0, #3
 8004b0a:	4770      	bx	lr
 8004b0c:	00030d40 	.word	0x00030d40

08004b10 <USB_FlushRxFifo>:
 8004b10:	2310      	movs	r3, #16
 8004b12:	6103      	str	r3, [r0, #16]
 8004b14:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <USB_FlushRxFifo+0x1c>)
 8004b16:	e001      	b.n	8004b1c <USB_FlushRxFifo+0xc>
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	d005      	beq.n	8004b28 <USB_FlushRxFifo+0x18>
 8004b1c:	6902      	ldr	r2, [r0, #16]
 8004b1e:	f012 0f10 	tst.w	r2, #16
 8004b22:	d1f9      	bne.n	8004b18 <USB_FlushRxFifo+0x8>
 8004b24:	2000      	movs	r0, #0
 8004b26:	4770      	bx	lr
 8004b28:	2003      	movs	r0, #3
 8004b2a:	4770      	bx	lr
 8004b2c:	00030d40 	.word	0x00030d40

08004b30 <USB_SetDevSpeed>:
 8004b30:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004b34:	4319      	orrs	r1, r3
 8004b36:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop

08004b40 <USB_DevInit>:
 8004b40:	b084      	sub	sp, #16
 8004b42:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b46:	4604      	mov	r4, r0
 8004b48:	a80b      	add	r0, sp, #44	; 0x2c
 8004b4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004b4e:	460d      	mov	r5, r1
 8004b50:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8004b54:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8004b58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b5e:	63a3      	str	r3, [r4, #56]	; 0x38
 8004b60:	f1bb 0f00 	cmp.w	fp, #0
 8004b64:	d103      	bne.n	8004b6e <USB_DevInit+0x2e>
 8004b66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b6c:	63a3      	str	r3, [r4, #56]	; 0x38
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
 8004b74:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8004b78:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8004b7c:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
 8004b80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d10b      	bne.n	8004b9e <USB_DevInit+0x5e>
 8004b86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b88:	b923      	cbnz	r3, 8004b94 <USB_DevInit+0x54>
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	f7ff ffcf 	bl	8004b30 <USB_SetDevSpeed>
 8004b92:	e008      	b.n	8004ba6 <USB_DevInit+0x66>
 8004b94:	4620      	mov	r0, r4
 8004b96:	2101      	movs	r1, #1
 8004b98:	f7ff ffca 	bl	8004b30 <USB_SetDevSpeed>
 8004b9c:	e003      	b.n	8004ba6 <USB_DevInit+0x66>
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	2103      	movs	r1, #3
 8004ba2:	f7ff ffc5 	bl	8004b30 <USB_SetDevSpeed>
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	2110      	movs	r1, #16
 8004baa:	f7ff ff9f 	bl	8004aec <USB_FlushTxFifo>
 8004bae:	4620      	mov	r0, r4
 8004bb0:	f7ff ffae 	bl	8004b10 <USB_FlushRxFifo>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	6133      	str	r3, [r6, #16]
 8004bb8:	6173      	str	r3, [r6, #20]
 8004bba:	f04f 32ff 	mov.w	r2, #4294967295
 8004bbe:	61b2      	str	r2, [r6, #24]
 8004bc0:	61f3      	str	r3, [r6, #28]
 8004bc2:	b31d      	cbz	r5, 8004c0c <USB_DevInit+0xcc>
 8004bc4:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 8004bc8:	f04f 0900 	mov.w	r9, #0
 8004bcc:	4648      	mov	r0, r9
 8004bce:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
 8004bd2:	27ff      	movs	r7, #255	; 0xff
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	2a00      	cmp	r2, #0
 8004bd8:	bfb4      	ite	lt
 8004bda:	f8c3 c000 	strlt.w	ip, [r3]
 8004bde:	6018      	strge	r0, [r3, #0]
 8004be0:	e04a      	b.n	8004c78 <USB_DevInit+0x138>
 8004be2:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8004be6:	2200      	movs	r2, #0
 8004be8:	4617      	mov	r7, r2
 8004bea:	f04f 4a90 	mov.w	sl, #1207959552	; 0x48000000
 8004bee:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8004bf2:	6818      	ldr	r0, [r3, #0]
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	bfb4      	ite	lt
 8004bf8:	f8c3 a000 	strlt.w	sl, [r3]
 8004bfc:	601f      	strge	r7, [r3, #0]
 8004bfe:	611f      	str	r7, [r3, #16]
 8004c00:	f8c3 9008 	str.w	r9, [r3, #8]
 8004c04:	3201      	adds	r2, #1
 8004c06:	3320      	adds	r3, #32
 8004c08:	42aa      	cmp	r2, r5
 8004c0a:	d1f2      	bne.n	8004bf2 <USB_DevInit+0xb2>
 8004c0c:	6933      	ldr	r3, [r6, #16]
 8004c0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c12:	6133      	str	r3, [r6, #16]
 8004c14:	f1b8 0f01 	cmp.w	r8, #1
 8004c18:	d10e      	bne.n	8004c38 <USB_DevInit+0xf8>
 8004c1a:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <USB_DevInit+0x154>)
 8004c1c:	6333      	str	r3, [r6, #48]	; 0x30
 8004c1e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8004c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c24:	f043 0303 	orr.w	r3, r3, #3
 8004c28:	6333      	str	r3, [r6, #48]	; 0x30
 8004c2a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	61a3      	str	r3, [r4, #24]
 8004c30:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004c34:	6163      	str	r3, [r4, #20]
 8004c36:	e00b      	b.n	8004c50 <USB_DevInit+0x110>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61a3      	str	r3, [r4, #24]
 8004c3c:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004c40:	6163      	str	r3, [r4, #20]
 8004c42:	f1b8 0f00 	cmp.w	r8, #0
 8004c46:	d103      	bne.n	8004c50 <USB_DevInit+0x110>
 8004c48:	69a3      	ldr	r3, [r4, #24]
 8004c4a:	f043 0310 	orr.w	r3, r3, #16
 8004c4e:	61a3      	str	r3, [r4, #24]
 8004c50:	69a2      	ldr	r2, [r4, #24]
 8004c52:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <USB_DevInit+0x158>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	61a3      	str	r3, [r4, #24]
 8004c58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c5a:	b11b      	cbz	r3, 8004c64 <USB_DevInit+0x124>
 8004c5c:	69a3      	ldr	r3, [r4, #24]
 8004c5e:	f043 0308 	orr.w	r3, r3, #8
 8004c62:	61a3      	str	r3, [r4, #24]
 8004c64:	f1bb 0f01 	cmp.w	fp, #1
 8004c68:	d10e      	bne.n	8004c88 <USB_DevInit+0x148>
 8004c6a:	69a3      	ldr	r3, [r4, #24]
 8004c6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c70:	f043 0304 	orr.w	r3, r3, #4
 8004c74:	61a3      	str	r3, [r4, #24]
 8004c76:	e007      	b.n	8004c88 <USB_DevInit+0x148>
 8004c78:	6118      	str	r0, [r3, #16]
 8004c7a:	609f      	str	r7, [r3, #8]
 8004c7c:	f109 0901 	add.w	r9, r9, #1
 8004c80:	3320      	adds	r3, #32
 8004c82:	45a9      	cmp	r9, r5
 8004c84:	d1a6      	bne.n	8004bd4 <USB_DevInit+0x94>
 8004c86:	e7ac      	b.n	8004be2 <USB_DevInit+0xa2>
 8004c88:	2000      	movs	r0, #0
 8004c8a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c8e:	b004      	add	sp, #16
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	00800100 	.word	0x00800100
 8004c98:	803c3800 	.word	0x803c3800

08004c9c <USB_GetDevSpeed>:
 8004c9c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8004ca0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8004ca4:	f013 0f06 	tst.w	r3, #6
 8004ca8:	d011      	beq.n	8004cce <USB_GetDevSpeed+0x32>
 8004caa:	6883      	ldr	r3, [r0, #8]
 8004cac:	f003 0306 	and.w	r3, r3, #6
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d00e      	beq.n	8004cd2 <USB_GetDevSpeed+0x36>
 8004cb4:	6883      	ldr	r3, [r0, #8]
 8004cb6:	f003 0306 	and.w	r3, r3, #6
 8004cba:	2b06      	cmp	r3, #6
 8004cbc:	d00b      	beq.n	8004cd6 <USB_GetDevSpeed+0x3a>
 8004cbe:	6883      	ldr	r3, [r0, #8]
 8004cc0:	f003 0306 	and.w	r3, r3, #6
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	bf0c      	ite	eq
 8004cc8:	2002      	moveq	r0, #2
 8004cca:	2000      	movne	r0, #0
 8004ccc:	4770      	bx	lr
 8004cce:	2000      	movs	r0, #0
 8004cd0:	4770      	bx	lr
 8004cd2:	2003      	movs	r0, #3
 8004cd4:	4770      	bx	lr
 8004cd6:	2003      	movs	r0, #3
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop

08004cdc <USB_ActivateEndpoint>:
 8004cdc:	b430      	push	{r4, r5}
 8004cde:	784b      	ldrb	r3, [r1, #1]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d121      	bne.n	8004d28 <USB_ActivateEndpoint+0x4c>
 8004ce4:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8004ce8:	780a      	ldrb	r2, [r1, #0]
 8004cea:	2501      	movs	r5, #1
 8004cec:	fa05 f202 	lsl.w	r2, r5, r2
 8004cf0:	b292      	uxth	r2, r2
 8004cf2:	4322      	orrs	r2, r4
 8004cf4:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
 8004cf8:	780a      	ldrb	r2, [r1, #0]
 8004cfa:	0153      	lsls	r3, r2, #5
 8004cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d00:	581c      	ldr	r4, [r3, r0]
 8004d02:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8004d06:	d12e      	bne.n	8004d66 <USB_ActivateEndpoint+0x8a>
 8004d08:	581c      	ldr	r4, [r3, r0]
 8004d0a:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8004d0e:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8004d12:	688d      	ldr	r5, [r1, #8]
 8004d14:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8004d18:	432c      	orrs	r4, r5
 8004d1a:	78c9      	ldrb	r1, [r1, #3]
 8004d1c:	ea44 4481 	orr.w	r4, r4, r1, lsl #18
 8004d20:	ea44 5282 	orr.w	r2, r4, r2, lsl #22
 8004d24:	501a      	str	r2, [r3, r0]
 8004d26:	e01e      	b.n	8004d66 <USB_ActivateEndpoint+0x8a>
 8004d28:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8004d2c:	780a      	ldrb	r2, [r1, #0]
 8004d2e:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8004d32:	fa05 f202 	lsl.w	r2, r5, r2
 8004d36:	4322      	orrs	r2, r4
 8004d38:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
 8004d3c:	780b      	ldrb	r3, [r1, #0]
 8004d3e:	015b      	lsls	r3, r3, #5
 8004d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d44:	581a      	ldr	r2, [r3, r0]
 8004d46:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004d4a:	d10c      	bne.n	8004d66 <USB_ActivateEndpoint+0x8a>
 8004d4c:	581a      	ldr	r2, [r3, r0]
 8004d4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d56:	688c      	ldr	r4, [r1, #8]
 8004d58:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8004d5c:	4322      	orrs	r2, r4
 8004d5e:	78cc      	ldrb	r4, [r1, #3]
 8004d60:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
 8004d64:	501a      	str	r2, [r3, r0]
 8004d66:	2000      	movs	r0, #0
 8004d68:	bc30      	pop	{r4, r5}
 8004d6a:	4770      	bx	lr

08004d6c <USB_DeactivateEndpoint>:
 8004d6c:	b430      	push	{r4, r5}
 8004d6e:	784b      	ldrb	r3, [r1, #1]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d11c      	bne.n	8004dae <USB_DeactivateEndpoint+0x42>
 8004d74:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8004d78:	780c      	ldrb	r4, [r1, #0]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	fa02 f404 	lsl.w	r4, r2, r4
 8004d80:	b2a4      	uxth	r4, r4
 8004d82:	ea25 0404 	bic.w	r4, r5, r4
 8004d86:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
 8004d8a:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8004d8e:	780d      	ldrb	r5, [r1, #0]
 8004d90:	40aa      	lsls	r2, r5
 8004d92:	b292      	uxth	r2, r2
 8004d94:	ea24 0202 	bic.w	r2, r4, r2
 8004d98:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
 8004d9c:	780b      	ldrb	r3, [r1, #0]
 8004d9e:	015b      	lsls	r3, r3, #5
 8004da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da4:	581a      	ldr	r2, [r3, r0]
 8004da6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004daa:	501a      	str	r2, [r3, r0]
 8004dac:	e019      	b.n	8004de2 <USB_DeactivateEndpoint+0x76>
 8004dae:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8004db2:	780c      	ldrb	r4, [r1, #0]
 8004db4:	2201      	movs	r2, #1
 8004db6:	fa02 f404 	lsl.w	r4, r2, r4
 8004dba:	ea25 4404 	bic.w	r4, r5, r4, lsl #16
 8004dbe:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
 8004dc2:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8004dc6:	780d      	ldrb	r5, [r1, #0]
 8004dc8:	40aa      	lsls	r2, r5
 8004dca:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 8004dce:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
 8004dd2:	780b      	ldrb	r3, [r1, #0]
 8004dd4:	015b      	lsls	r3, r3, #5
 8004dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dda:	581a      	ldr	r2, [r3, r0]
 8004ddc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004de0:	501a      	str	r2, [r3, r0]
 8004de2:	2000      	movs	r0, #0
 8004de4:	bc30      	pop	{r4, r5}
 8004de6:	4770      	bx	lr

08004de8 <USB_EP0StartXfer>:
 8004de8:	b430      	push	{r4, r5}
 8004dea:	784b      	ldrb	r3, [r1, #1]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d169      	bne.n	8004ec4 <USB_EP0StartXfer+0xdc>
 8004df0:	694b      	ldr	r3, [r1, #20]
 8004df2:	b9eb      	cbnz	r3, 8004e30 <USB_EP0StartXfer+0x48>
 8004df4:	780c      	ldrb	r4, [r1, #0]
 8004df6:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8004dfa:	f8d4 3910 	ldr.w	r3, [r4, #2320]	; 0x910
 8004dfe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e06:	f8c4 3910 	str.w	r3, [r4, #2320]	; 0x910
 8004e0a:	780b      	ldrb	r3, [r1, #0]
 8004e0c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004e10:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8004e14:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004e18:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
 8004e1c:	780c      	ldrb	r4, [r1, #0]
 8004e1e:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8004e22:	f8d4 3910 	ldr.w	r3, [r4, #2320]	; 0x910
 8004e26:	0cdb      	lsrs	r3, r3, #19
 8004e28:	04db      	lsls	r3, r3, #19
 8004e2a:	f8c4 3910 	str.w	r3, [r4, #2320]	; 0x910
 8004e2e:	e02c      	b.n	8004e8a <USB_EP0StartXfer+0xa2>
 8004e30:	780c      	ldrb	r4, [r1, #0]
 8004e32:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8004e36:	f8d4 3910 	ldr.w	r3, [r4, #2320]	; 0x910
 8004e3a:	0cdb      	lsrs	r3, r3, #19
 8004e3c:	04db      	lsls	r3, r3, #19
 8004e3e:	f8c4 3910 	str.w	r3, [r4, #2320]	; 0x910
 8004e42:	780c      	ldrb	r4, [r1, #0]
 8004e44:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8004e48:	f8d4 3910 	ldr.w	r3, [r4, #2320]	; 0x910
 8004e4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e54:	f8c4 3910 	str.w	r3, [r4, #2320]	; 0x910
 8004e58:	688b      	ldr	r3, [r1, #8]
 8004e5a:	694c      	ldr	r4, [r1, #20]
 8004e5c:	429c      	cmp	r4, r3
 8004e5e:	bf88      	it	hi
 8004e60:	614b      	strhi	r3, [r1, #20]
 8004e62:	780b      	ldrb	r3, [r1, #0]
 8004e64:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004e68:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8004e6c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004e70:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
 8004e74:	780b      	ldrb	r3, [r1, #0]
 8004e76:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004e7a:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8004e7e:	694c      	ldr	r4, [r1, #20]
 8004e80:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8004e84:	432c      	orrs	r4, r5
 8004e86:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
 8004e8a:	2a01      	cmp	r2, #1
 8004e8c:	d106      	bne.n	8004e9c <USB_EP0StartXfer+0xb4>
 8004e8e:	780a      	ldrb	r2, [r1, #0]
 8004e90:	eb00 1242 	add.w	r2, r0, r2, lsl #5
 8004e94:	690b      	ldr	r3, [r1, #16]
 8004e96:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
 8004e9a:	e00a      	b.n	8004eb2 <USB_EP0StartXfer+0xca>
 8004e9c:	694b      	ldr	r3, [r1, #20]
 8004e9e:	b143      	cbz	r3, 8004eb2 <USB_EP0StartXfer+0xca>
 8004ea0:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 8004ea4:	780a      	ldrb	r2, [r1, #0]
 8004ea6:	2501      	movs	r5, #1
 8004ea8:	fa05 f202 	lsl.w	r2, r5, r2
 8004eac:	4322      	orrs	r2, r4
 8004eae:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8004eb2:	780b      	ldrb	r3, [r1, #0]
 8004eb4:	015b      	lsls	r3, r3, #5
 8004eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eba:	58c2      	ldr	r2, [r0, r3]
 8004ebc:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004ec0:	50c2      	str	r2, [r0, r3]
 8004ec2:	e03b      	b.n	8004f3c <USB_EP0StartXfer+0x154>
 8004ec4:	780c      	ldrb	r4, [r1, #0]
 8004ec6:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8004eca:	f8d4 3b10 	ldr.w	r3, [r4, #2832]	; 0xb10
 8004ece:	0cdb      	lsrs	r3, r3, #19
 8004ed0:	04db      	lsls	r3, r3, #19
 8004ed2:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
 8004ed6:	780c      	ldrb	r4, [r1, #0]
 8004ed8:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8004edc:	f8d4 3b10 	ldr.w	r3, [r4, #2832]	; 0xb10
 8004ee0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ee4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ee8:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
 8004eec:	694b      	ldr	r3, [r1, #20]
 8004eee:	b10b      	cbz	r3, 8004ef4 <USB_EP0StartXfer+0x10c>
 8004ef0:	688b      	ldr	r3, [r1, #8]
 8004ef2:	614b      	str	r3, [r1, #20]
 8004ef4:	780b      	ldrb	r3, [r1, #0]
 8004ef6:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004efa:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	; 0xb10
 8004efe:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004f02:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
 8004f06:	780b      	ldrb	r3, [r1, #0]
 8004f08:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004f0c:	f8d3 5b10 	ldr.w	r5, [r3, #2832]	; 0xb10
 8004f10:	688c      	ldr	r4, [r1, #8]
 8004f12:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8004f16:	432c      	orrs	r4, r5
 8004f18:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
 8004f1c:	2a01      	cmp	r2, #1
 8004f1e:	d105      	bne.n	8004f2c <USB_EP0StartXfer+0x144>
 8004f20:	780a      	ldrb	r2, [r1, #0]
 8004f22:	eb00 1242 	add.w	r2, r0, r2, lsl #5
 8004f26:	68cb      	ldr	r3, [r1, #12]
 8004f28:	f8c2 3b14 	str.w	r3, [r2, #2836]	; 0xb14
 8004f2c:	780b      	ldrb	r3, [r1, #0]
 8004f2e:	015b      	lsls	r3, r3, #5
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	58c2      	ldr	r2, [r0, r3]
 8004f36:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004f3a:	50c2      	str	r2, [r0, r3]
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	bc30      	pop	{r4, r5}
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop

08004f44 <USB_WritePacket>:
 8004f44:	b430      	push	{r4, r5}
 8004f46:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8004f4a:	b964      	cbnz	r4, 8004f66 <USB_WritePacket+0x22>
 8004f4c:	3303      	adds	r3, #3
 8004f4e:	109b      	asrs	r3, r3, #2
 8004f50:	d009      	beq.n	8004f66 <USB_WritePacket+0x22>
 8004f52:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8004f56:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8004f5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f5e:	6015      	str	r5, [r2, #0]
 8004f60:	3401      	adds	r4, #1
 8004f62:	42a3      	cmp	r3, r4
 8004f64:	d1f9      	bne.n	8004f5a <USB_WritePacket+0x16>
 8004f66:	2000      	movs	r0, #0
 8004f68:	bc30      	pop	{r4, r5}
 8004f6a:	4770      	bx	lr

08004f6c <USB_EPStartXfer>:
 8004f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	784b      	ldrb	r3, [r1, #1]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	f040 80a3 	bne.w	80050be <USB_EPStartXfer+0x152>
 8004f78:	694b      	ldr	r3, [r1, #20]
 8004f7a:	b9eb      	cbnz	r3, 8004fb8 <USB_EPStartXfer+0x4c>
 8004f7c:	780c      	ldrb	r4, [r1, #0]
 8004f7e:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8004f82:	f8d4 3910 	ldr.w	r3, [r4, #2320]	; 0x910
 8004f86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f8e:	f8c4 3910 	str.w	r3, [r4, #2320]	; 0x910
 8004f92:	780b      	ldrb	r3, [r1, #0]
 8004f94:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004f98:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8004f9c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004fa0:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
 8004fa4:	780c      	ldrb	r4, [r1, #0]
 8004fa6:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8004faa:	f8d4 3910 	ldr.w	r3, [r4, #2320]	; 0x910
 8004fae:	0cdb      	lsrs	r3, r3, #19
 8004fb0:	04db      	lsls	r3, r3, #19
 8004fb2:	f8c4 3910 	str.w	r3, [r4, #2320]	; 0x910
 8004fb6:	e044      	b.n	8005042 <USB_EPStartXfer+0xd6>
 8004fb8:	780c      	ldrb	r4, [r1, #0]
 8004fba:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8004fbe:	f8d4 3910 	ldr.w	r3, [r4, #2320]	; 0x910
 8004fc2:	0cdb      	lsrs	r3, r3, #19
 8004fc4:	04db      	lsls	r3, r3, #19
 8004fc6:	f8c4 3910 	str.w	r3, [r4, #2320]	; 0x910
 8004fca:	780c      	ldrb	r4, [r1, #0]
 8004fcc:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8004fd0:	f8d4 3910 	ldr.w	r3, [r4, #2320]	; 0x910
 8004fd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fdc:	f8c4 3910 	str.w	r3, [r4, #2320]	; 0x910
 8004fe0:	780b      	ldrb	r3, [r1, #0]
 8004fe2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004fe6:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 8004fea:	688c      	ldr	r4, [r1, #8]
 8004fec:	694d      	ldr	r5, [r1, #20]
 8004fee:	4425      	add	r5, r4
 8004ff0:	3d01      	subs	r5, #1
 8004ff2:	fbb5 f4f4 	udiv	r4, r5, r4
 8004ff6:	4f69      	ldr	r7, [pc, #420]	; (800519c <USB_EPStartXfer+0x230>)
 8004ff8:	ea07 44c4 	and.w	r4, r7, r4, lsl #19
 8004ffc:	4334      	orrs	r4, r6
 8004ffe:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
 8005002:	780b      	ldrb	r3, [r1, #0]
 8005004:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005008:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 800500c:	694c      	ldr	r4, [r1, #20]
 800500e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8005012:	432c      	orrs	r4, r5
 8005014:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
 8005018:	78cb      	ldrb	r3, [r1, #3]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d111      	bne.n	8005042 <USB_EPStartXfer+0xd6>
 800501e:	780b      	ldrb	r3, [r1, #0]
 8005020:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005024:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8005028:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 800502c:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
 8005030:	780b      	ldrb	r3, [r1, #0]
 8005032:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005036:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 800503a:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800503e:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
 8005042:	2a01      	cmp	r2, #1
 8005044:	d106      	bne.n	8005054 <USB_EPStartXfer+0xe8>
 8005046:	780c      	ldrb	r4, [r1, #0]
 8005048:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800504c:	690b      	ldr	r3, [r1, #16]
 800504e:	f8c4 3914 	str.w	r3, [r4, #2324]	; 0x914
 8005052:	e00d      	b.n	8005070 <USB_EPStartXfer+0x104>
 8005054:	78cb      	ldrb	r3, [r1, #3]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d00d      	beq.n	8005076 <USB_EPStartXfer+0x10a>
 800505a:	694b      	ldr	r3, [r1, #20]
 800505c:	b1db      	cbz	r3, 8005096 <USB_EPStartXfer+0x12a>
 800505e:	f8d0 5834 	ldr.w	r5, [r0, #2100]	; 0x834
 8005062:	780c      	ldrb	r4, [r1, #0]
 8005064:	2601      	movs	r6, #1
 8005066:	fa06 f404 	lsl.w	r4, r6, r4
 800506a:	432c      	orrs	r4, r5
 800506c:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 8005070:	78cb      	ldrb	r3, [r1, #3]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d10f      	bne.n	8005096 <USB_EPStartXfer+0x12a>
 8005076:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800507a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800507e:	780b      	ldrb	r3, [r1, #0]
 8005080:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8005084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005088:	58c4      	ldr	r4, [r0, r3]
 800508a:	bf0c      	ite	eq
 800508c:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
 8005090:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 8005094:	50c4      	str	r4, [r0, r3]
 8005096:	780b      	ldrb	r3, [r1, #0]
 8005098:	015b      	lsls	r3, r3, #5
 800509a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509e:	58c4      	ldr	r4, [r0, r3]
 80050a0:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80050a4:	50c4      	str	r4, [r0, r3]
 80050a6:	78cb      	ldrb	r3, [r1, #3]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d174      	bne.n	8005196 <USB_EPStartXfer+0x22a>
 80050ac:	68cd      	ldr	r5, [r1, #12]
 80050ae:	780c      	ldrb	r4, [r1, #0]
 80050b0:	8a8b      	ldrh	r3, [r1, #20]
 80050b2:	9200      	str	r2, [sp, #0]
 80050b4:	4629      	mov	r1, r5
 80050b6:	4622      	mov	r2, r4
 80050b8:	f7ff ff44 	bl	8004f44 <USB_WritePacket>
 80050bc:	e06b      	b.n	8005196 <USB_EPStartXfer+0x22a>
 80050be:	780c      	ldrb	r4, [r1, #0]
 80050c0:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 80050c4:	f8d4 3b10 	ldr.w	r3, [r4, #2832]	; 0xb10
 80050c8:	0cdb      	lsrs	r3, r3, #19
 80050ca:	04db      	lsls	r3, r3, #19
 80050cc:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
 80050d0:	780c      	ldrb	r4, [r1, #0]
 80050d2:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 80050d6:	f8d4 3b10 	ldr.w	r3, [r4, #2832]	; 0xb10
 80050da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050e2:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
 80050e6:	694b      	ldr	r3, [r1, #20]
 80050e8:	b9a3      	cbnz	r3, 8005114 <USB_EPStartXfer+0x1a8>
 80050ea:	780b      	ldrb	r3, [r1, #0]
 80050ec:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80050f0:	f8d3 5b10 	ldr.w	r5, [r3, #2832]	; 0xb10
 80050f4:	688c      	ldr	r4, [r1, #8]
 80050f6:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80050fa:	432c      	orrs	r4, r5
 80050fc:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
 8005100:	780b      	ldrb	r3, [r1, #0]
 8005102:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005106:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	; 0xb10
 800510a:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800510e:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
 8005112:	e01d      	b.n	8005150 <USB_EPStartXfer+0x1e4>
 8005114:	688d      	ldr	r5, [r1, #8]
 8005116:	780c      	ldrb	r4, [r1, #0]
 8005118:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800511c:	f8d4 6b10 	ldr.w	r6, [r4, #2832]	; 0xb10
 8005120:	442b      	add	r3, r5
 8005122:	3b01      	subs	r3, #1
 8005124:	fbb3 f3f5 	udiv	r3, r3, r5
 8005128:	b29b      	uxth	r3, r3
 800512a:	4d1c      	ldr	r5, [pc, #112]	; (800519c <USB_EPStartXfer+0x230>)
 800512c:	ea05 45c3 	and.w	r5, r5, r3, lsl #19
 8005130:	4335      	orrs	r5, r6
 8005132:	f8c4 5b10 	str.w	r5, [r4, #2832]	; 0xb10
 8005136:	780c      	ldrb	r4, [r1, #0]
 8005138:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800513c:	f8d4 6b10 	ldr.w	r6, [r4, #2832]	; 0xb10
 8005140:	688d      	ldr	r5, [r1, #8]
 8005142:	fb05 f303 	mul.w	r3, r5, r3
 8005146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800514a:	4333      	orrs	r3, r6
 800514c:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
 8005150:	2a01      	cmp	r2, #1
 8005152:	d105      	bne.n	8005160 <USB_EPStartXfer+0x1f4>
 8005154:	780a      	ldrb	r2, [r1, #0]
 8005156:	eb00 1242 	add.w	r2, r0, r2, lsl #5
 800515a:	68cb      	ldr	r3, [r1, #12]
 800515c:	f8c2 3b14 	str.w	r3, [r2, #2836]	; 0xb14
 8005160:	78cb      	ldrb	r3, [r1, #3]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d10f      	bne.n	8005186 <USB_EPStartXfer+0x21a>
 8005166:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800516a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800516e:	780b      	ldrb	r3, [r1, #0]
 8005170:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8005174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005178:	58c2      	ldr	r2, [r0, r3]
 800517a:	bf0c      	ite	eq
 800517c:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
 8005180:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8005184:	50c2      	str	r2, [r0, r3]
 8005186:	780b      	ldrb	r3, [r1, #0]
 8005188:	015b      	lsls	r3, r3, #5
 800518a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518e:	58c2      	ldr	r2, [r0, r3]
 8005190:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005194:	50c2      	str	r2, [r0, r3]
 8005196:	2000      	movs	r0, #0
 8005198:	b003      	add	sp, #12
 800519a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800519c:	1ff80000 	.word	0x1ff80000

080051a0 <USB_ReadPacket>:
 80051a0:	b470      	push	{r4, r5, r6}
 80051a2:	3203      	adds	r2, #3
 80051a4:	1095      	asrs	r5, r2, #2
 80051a6:	d00b      	beq.n	80051c0 <USB_ReadPacket+0x20>
 80051a8:	460a      	mov	r2, r1
 80051aa:	2300      	movs	r3, #0
 80051ac:	f500 5680 	add.w	r6, r0, #4096	; 0x1000
 80051b0:	6834      	ldr	r4, [r6, #0]
 80051b2:	f842 4b04 	str.w	r4, [r2], #4
 80051b6:	3301      	adds	r3, #1
 80051b8:	429d      	cmp	r5, r3
 80051ba:	d1f9      	bne.n	80051b0 <USB_ReadPacket+0x10>
 80051bc:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80051c0:	4608      	mov	r0, r1
 80051c2:	bc70      	pop	{r4, r5, r6}
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop

080051c8 <USB_EPSetStall>:
 80051c8:	784b      	ldrb	r3, [r1, #1]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d113      	bne.n	80051f6 <USB_EPSetStall+0x2e>
 80051ce:	780b      	ldrb	r3, [r1, #0]
 80051d0:	015b      	lsls	r3, r3, #5
 80051d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d6:	58c2      	ldr	r2, [r0, r3]
 80051d8:	2a00      	cmp	r2, #0
 80051da:	db03      	blt.n	80051e4 <USB_EPSetStall+0x1c>
 80051dc:	58c2      	ldr	r2, [r0, r3]
 80051de:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80051e2:	50c2      	str	r2, [r0, r3]
 80051e4:	780b      	ldrb	r3, [r1, #0]
 80051e6:	015b      	lsls	r3, r3, #5
 80051e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ec:	58c2      	ldr	r2, [r0, r3]
 80051ee:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80051f2:	50c2      	str	r2, [r0, r3]
 80051f4:	e012      	b.n	800521c <USB_EPSetStall+0x54>
 80051f6:	780b      	ldrb	r3, [r1, #0]
 80051f8:	015b      	lsls	r3, r3, #5
 80051fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fe:	58c2      	ldr	r2, [r0, r3]
 8005200:	2a00      	cmp	r2, #0
 8005202:	db03      	blt.n	800520c <USB_EPSetStall+0x44>
 8005204:	58c2      	ldr	r2, [r0, r3]
 8005206:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800520a:	50c2      	str	r2, [r0, r3]
 800520c:	780b      	ldrb	r3, [r1, #0]
 800520e:	015b      	lsls	r3, r3, #5
 8005210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005214:	58c2      	ldr	r2, [r0, r3]
 8005216:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800521a:	50c2      	str	r2, [r0, r3]
 800521c:	2000      	movs	r0, #0
 800521e:	4770      	bx	lr

08005220 <USB_EPClearStall>:
 8005220:	784b      	ldrb	r3, [r1, #1]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d115      	bne.n	8005252 <USB_EPClearStall+0x32>
 8005226:	780b      	ldrb	r3, [r1, #0]
 8005228:	015b      	lsls	r3, r3, #5
 800522a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522e:	58c2      	ldr	r2, [r0, r3]
 8005230:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005234:	50c2      	str	r2, [r0, r3]
 8005236:	78cb      	ldrb	r3, [r1, #3]
 8005238:	3b02      	subs	r3, #2
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b01      	cmp	r3, #1
 800523e:	d81d      	bhi.n	800527c <USB_EPClearStall+0x5c>
 8005240:	780b      	ldrb	r3, [r1, #0]
 8005242:	015b      	lsls	r3, r3, #5
 8005244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005248:	58c2      	ldr	r2, [r0, r3]
 800524a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800524e:	50c2      	str	r2, [r0, r3]
 8005250:	e014      	b.n	800527c <USB_EPClearStall+0x5c>
 8005252:	780b      	ldrb	r3, [r1, #0]
 8005254:	015b      	lsls	r3, r3, #5
 8005256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525a:	58c2      	ldr	r2, [r0, r3]
 800525c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005260:	50c2      	str	r2, [r0, r3]
 8005262:	78cb      	ldrb	r3, [r1, #3]
 8005264:	3b02      	subs	r3, #2
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b01      	cmp	r3, #1
 800526a:	d807      	bhi.n	800527c <USB_EPClearStall+0x5c>
 800526c:	780b      	ldrb	r3, [r1, #0]
 800526e:	015b      	lsls	r3, r3, #5
 8005270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005274:	58c2      	ldr	r2, [r0, r3]
 8005276:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800527a:	50c2      	str	r2, [r0, r3]
 800527c:	2000      	movs	r0, #0
 800527e:	4770      	bx	lr

08005280 <USB_SetDevAddress>:
 8005280:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8005284:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005288:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 800528c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8005290:	0109      	lsls	r1, r1, #4
 8005292:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8005296:	430b      	orrs	r3, r1
 8005298:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 800529c:	2000      	movs	r0, #0
 800529e:	4770      	bx	lr

080052a0 <USB_DevConnect>:
 80052a0:	b508      	push	{r3, lr}
 80052a2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80052a6:	f023 0302 	bic.w	r3, r3, #2
 80052aa:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
 80052ae:	2003      	movs	r0, #3
 80052b0:	f7fd fdcc 	bl	8002e4c <HAL_Delay>
 80052b4:	2000      	movs	r0, #0
 80052b6:	bd08      	pop	{r3, pc}

080052b8 <USB_DevDisconnect>:
 80052b8:	b508      	push	{r3, lr}
 80052ba:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80052be:	f043 0302 	orr.w	r3, r3, #2
 80052c2:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
 80052c6:	2003      	movs	r0, #3
 80052c8:	f7fd fdc0 	bl	8002e4c <HAL_Delay>
 80052cc:	2000      	movs	r0, #0
 80052ce:	bd08      	pop	{r3, pc}

080052d0 <USB_ReadInterrupts>:
 80052d0:	6943      	ldr	r3, [r0, #20]
 80052d2:	6980      	ldr	r0, [r0, #24]
 80052d4:	4018      	ands	r0, r3
 80052d6:	4770      	bx	lr

080052d8 <USB_ReadDevAllOutEpInterrupt>:
 80052d8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80052dc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80052e0:	69c0      	ldr	r0, [r0, #28]
 80052e2:	4018      	ands	r0, r3
 80052e4:	0c00      	lsrs	r0, r0, #16
 80052e6:	4770      	bx	lr

080052e8 <USB_ReadDevAllInEpInterrupt>:
 80052e8:	f8d0 2818 	ldr.w	r2, [r0, #2072]	; 0x818
 80052ec:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 80052f0:	ea02 0003 	and.w	r0, r2, r3
 80052f4:	b280      	uxth	r0, r0
 80052f6:	4770      	bx	lr

080052f8 <USB_ReadDevOutEPInterrupt>:
 80052f8:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80052fc:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8005300:	688b      	ldr	r3, [r1, #8]
 8005302:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8005306:	6940      	ldr	r0, [r0, #20]
 8005308:	4018      	ands	r0, r3
 800530a:	4770      	bx	lr

0800530c <USB_ReadDevInEPInterrupt>:
 800530c:	b410      	push	{r4}
 800530e:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
 8005312:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 8005316:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800531a:	f8d0 3908 	ldr.w	r3, [r0, #2312]	; 0x908
 800531e:	fa24 f001 	lsr.w	r0, r4, r1
 8005322:	01c0      	lsls	r0, r0, #7
 8005324:	b2c0      	uxtb	r0, r0
 8005326:	4310      	orrs	r0, r2
 8005328:	4018      	ands	r0, r3
 800532a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800532e:	4770      	bx	lr

08005330 <USB_GetMode>:
 8005330:	6940      	ldr	r0, [r0, #20]
 8005332:	f000 0001 	and.w	r0, r0, #1
 8005336:	4770      	bx	lr

08005338 <USB_ActivateSetup>:
 8005338:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800533c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005340:	f023 0307 	bic.w	r3, r3, #7
 8005344:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8005348:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	f002 0206 	and.w	r2, r2, #6
 8005352:	2a04      	cmp	r2, #4
 8005354:	d105      	bne.n	8005362 <USB_ActivateSetup+0x2a>
 8005356:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800535a:	f042 0203 	orr.w	r2, r2, #3
 800535e:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005368:	605a      	str	r2, [r3, #4]
 800536a:	2000      	movs	r0, #0
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop

08005370 <USB_EP0_OutStart>:
 8005370:	b410      	push	{r4}
 8005372:	2400      	movs	r4, #0
 8005374:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
 8005378:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800537c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8005380:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
 8005384:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8005388:	f044 0418 	orr.w	r4, r4, #24
 800538c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
 8005390:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8005394:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8005398:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
 800539c:	2901      	cmp	r1, #1
 800539e:	d105      	bne.n	80053ac <USB_EP0_OutStart+0x3c>
 80053a0:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
 80053a4:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80053a8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80053ac:	2000      	movs	r0, #0
 80053ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <USBD_CDC_DataIn>:
 80053b4:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 80053b8:	b11b      	cbz	r3, 80053c2 <USBD_CDC_DataIn+0xe>
 80053ba:	2000      	movs	r0, #0
 80053bc:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 80053c0:	4770      	bx	lr
 80053c2:	2002      	movs	r0, #2
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop

080053c8 <USBD_CDC_EP0_RxReady>:
 80053c8:	b510      	push	{r4, lr}
 80053ca:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
 80053ce:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80053d2:	b15b      	cbz	r3, 80053ec <USBD_CDC_EP0_RxReady+0x24>
 80053d4:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80053d8:	28ff      	cmp	r0, #255	; 0xff
 80053da:	d007      	beq.n	80053ec <USBD_CDC_EP0_RxReady+0x24>
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	4621      	mov	r1, r4
 80053e0:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80053e4:	4798      	blx	r3
 80053e6:	23ff      	movs	r3, #255	; 0xff
 80053e8:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 80053ec:	2000      	movs	r0, #0
 80053ee:	bd10      	pop	{r4, pc}

080053f0 <USBD_CDC_GetFSCfgDesc>:
 80053f0:	2343      	movs	r3, #67	; 0x43
 80053f2:	8003      	strh	r3, [r0, #0]
 80053f4:	4800      	ldr	r0, [pc, #0]	; (80053f8 <USBD_CDC_GetFSCfgDesc+0x8>)
 80053f6:	4770      	bx	lr
 80053f8:	2000006c 	.word	0x2000006c

080053fc <USBD_CDC_GetHSCfgDesc>:
 80053fc:	2343      	movs	r3, #67	; 0x43
 80053fe:	8003      	strh	r3, [r0, #0]
 8005400:	4800      	ldr	r0, [pc, #0]	; (8005404 <USBD_CDC_GetHSCfgDesc+0x8>)
 8005402:	4770      	bx	lr
 8005404:	20000138 	.word	0x20000138

08005408 <USBD_CDC_GetOtherSpeedCfgDesc>:
 8005408:	2343      	movs	r3, #67	; 0x43
 800540a:	8003      	strh	r3, [r0, #0]
 800540c:	4800      	ldr	r0, [pc, #0]	; (8005410 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800540e:	4770      	bx	lr
 8005410:	200000f4 	.word	0x200000f4

08005414 <USBD_CDC_GetDeviceQualifierDescriptor>:
 8005414:	230a      	movs	r3, #10
 8005416:	8003      	strh	r3, [r0, #0]
 8005418:	4800      	ldr	r0, [pc, #0]	; (800541c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800541a:	4770      	bx	lr
 800541c:	200000e8 	.word	0x200000e8

08005420 <USBD_CDC_DataOut>:
 8005420:	b538      	push	{r3, r4, r5, lr}
 8005422:	4604      	mov	r4, r0
 8005424:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
 8005428:	f7fd fc54 	bl	8002cd4 <USBD_LL_GetRxDataSize>
 800542c:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
 8005430:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8005434:	b14b      	cbz	r3, 800544a <USBD_CDC_DataOut+0x2a>
 8005436:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8005440:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8005444:	4798      	blx	r3
 8005446:	2000      	movs	r0, #0
 8005448:	bd38      	pop	{r3, r4, r5, pc}
 800544a:	2002      	movs	r0, #2
 800544c:	bd38      	pop	{r3, r4, r5, pc}
 800544e:	bf00      	nop

08005450 <USBD_CDC_Setup>:
 8005450:	b570      	push	{r4, r5, r6, lr}
 8005452:	4605      	mov	r5, r0
 8005454:	460c      	mov	r4, r1
 8005456:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
 800545a:	780b      	ldrb	r3, [r1, #0]
 800545c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005460:	2a20      	cmp	r2, #32
 8005462:	d122      	bne.n	80054aa <USBD_CDC_Setup+0x5a>
 8005464:	88ca      	ldrh	r2, [r1, #6]
 8005466:	b1ca      	cbz	r2, 800549c <USBD_CDC_Setup+0x4c>
 8005468:	f013 0f80 	tst.w	r3, #128	; 0x80
 800546c:	d00b      	beq.n	8005486 <USBD_CDC_Setup+0x36>
 800546e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	7848      	ldrb	r0, [r1, #1]
 8005476:	4631      	mov	r1, r6
 8005478:	4798      	blx	r3
 800547a:	4628      	mov	r0, r5
 800547c:	4631      	mov	r1, r6
 800547e:	88e2      	ldrh	r2, [r4, #6]
 8005480:	f000 fc62 	bl	8005d48 <USBD_CtlSendData>
 8005484:	e011      	b.n	80054aa <USBD_CDC_Setup+0x5a>
 8005486:	784b      	ldrb	r3, [r1, #1]
 8005488:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
 800548c:	88cb      	ldrh	r3, [r1, #6]
 800548e:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
 8005492:	4631      	mov	r1, r6
 8005494:	88e2      	ldrh	r2, [r4, #6]
 8005496:	f000 fc6f 	bl	8005d78 <USBD_CtlPrepareRx>
 800549a:	e006      	b.n	80054aa <USBD_CDC_Setup+0x5a>
 800549c:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	7848      	ldrb	r0, [r1, #1]
 80054a4:	2100      	movs	r1, #0
 80054a6:	460a      	mov	r2, r1
 80054a8:	4798      	blx	r3
 80054aa:	2000      	movs	r0, #0
 80054ac:	bd70      	pop	{r4, r5, r6, pc}
 80054ae:	bf00      	nop

080054b0 <USBD_CDC_DeInit>:
 80054b0:	b510      	push	{r4, lr}
 80054b2:	4604      	mov	r4, r0
 80054b4:	2181      	movs	r1, #129	; 0x81
 80054b6:	f7fd fbcd 	bl	8002c54 <USBD_LL_CloseEP>
 80054ba:	4620      	mov	r0, r4
 80054bc:	2101      	movs	r1, #1
 80054be:	f7fd fbc9 	bl	8002c54 <USBD_LL_CloseEP>
 80054c2:	4620      	mov	r0, r4
 80054c4:	2182      	movs	r1, #130	; 0x82
 80054c6:	f7fd fbc5 	bl	8002c54 <USBD_LL_CloseEP>
 80054ca:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80054ce:	b153      	cbz	r3, 80054e6 <USBD_CDC_DeInit+0x36>
 80054d0:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	4798      	blx	r3
 80054d8:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80054dc:	f002 fbb4 	bl	8007c48 <free>
 80054e0:	2300      	movs	r3, #0
 80054e2:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
 80054e6:	2000      	movs	r0, #0
 80054e8:	bd10      	pop	{r4, pc}
 80054ea:	bf00      	nop

080054ec <USBD_CDC_Init>:
 80054ec:	b538      	push	{r3, r4, r5, lr}
 80054ee:	4604      	mov	r4, r0
 80054f0:	7c03      	ldrb	r3, [r0, #16]
 80054f2:	b96b      	cbnz	r3, 8005510 <USBD_CDC_Init+0x24>
 80054f4:	2181      	movs	r1, #129	; 0x81
 80054f6:	2202      	movs	r2, #2
 80054f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054fc:	f7fd fba0 	bl	8002c40 <USBD_LL_OpenEP>
 8005500:	4620      	mov	r0, r4
 8005502:	2101      	movs	r1, #1
 8005504:	2202      	movs	r2, #2
 8005506:	f44f 7300 	mov.w	r3, #512	; 0x200
 800550a:	f7fd fb99 	bl	8002c40 <USBD_LL_OpenEP>
 800550e:	e00a      	b.n	8005526 <USBD_CDC_Init+0x3a>
 8005510:	2181      	movs	r1, #129	; 0x81
 8005512:	2202      	movs	r2, #2
 8005514:	2340      	movs	r3, #64	; 0x40
 8005516:	f7fd fb93 	bl	8002c40 <USBD_LL_OpenEP>
 800551a:	4620      	mov	r0, r4
 800551c:	2101      	movs	r1, #1
 800551e:	2202      	movs	r2, #2
 8005520:	2340      	movs	r3, #64	; 0x40
 8005522:	f7fd fb8d 	bl	8002c40 <USBD_LL_OpenEP>
 8005526:	4620      	mov	r0, r4
 8005528:	2182      	movs	r1, #130	; 0x82
 800552a:	2203      	movs	r2, #3
 800552c:	2308      	movs	r3, #8
 800552e:	f7fd fb87 	bl	8002c40 <USBD_LL_OpenEP>
 8005532:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005536:	f002 fb7f 	bl	8007c38 <malloc>
 800553a:	4605      	mov	r5, r0
 800553c:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 8005540:	b1e8      	cbz	r0, 800557e <USBD_CDC_Init+0x92>
 8005542:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4798      	blx	r3
 800554a:	2300      	movs	r3, #0
 800554c:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
 8005550:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
 8005554:	7c23      	ldrb	r3, [r4, #16]
 8005556:	b94b      	cbnz	r3, 800556c <USBD_CDC_Init+0x80>
 8005558:	4620      	mov	r0, r4
 800555a:	2101      	movs	r1, #1
 800555c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8005560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005564:	f7fd fbae 	bl	8002cc4 <USBD_LL_PrepareReceive>
 8005568:	2000      	movs	r0, #0
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	4620      	mov	r0, r4
 800556e:	2101      	movs	r1, #1
 8005570:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8005574:	2340      	movs	r3, #64	; 0x40
 8005576:	f7fd fba5 	bl	8002cc4 <USBD_LL_PrepareReceive>
 800557a:	2000      	movs	r0, #0
 800557c:	bd38      	pop	{r3, r4, r5, pc}
 800557e:	2001      	movs	r0, #1
 8005580:	bd38      	pop	{r3, r4, r5, pc}
 8005582:	bf00      	nop

08005584 <USBD_CDC_RegisterInterface>:
 8005584:	b119      	cbz	r1, 800558e <USBD_CDC_RegisterInterface+0xa>
 8005586:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
 800558a:	2000      	movs	r0, #0
 800558c:	4770      	bx	lr
 800558e:	2002      	movs	r0, #2
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop

08005594 <USBD_CDC_SetTxBuffer>:
 8005594:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8005598:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
 800559c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80055a0:	2000      	movs	r0, #0
 80055a2:	4770      	bx	lr

080055a4 <USBD_CDC_SetRxBuffer>:
 80055a4:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 80055a8:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
 80055ac:	2000      	movs	r0, #0
 80055ae:	4770      	bx	lr

080055b0 <USBD_CDC_TransmitPacket>:
 80055b0:	b508      	push	{r3, lr}
 80055b2:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 80055b6:	b173      	cbz	r3, 80055d6 <USBD_CDC_TransmitPacket+0x26>
 80055b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80055bc:	b96a      	cbnz	r2, 80055da <USBD_CDC_TransmitPacket+0x2a>
 80055be:	2201      	movs	r2, #1
 80055c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80055c4:	2181      	movs	r1, #129	; 0x81
 80055c6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80055ca:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80055ce:	f7fd fb71 	bl	8002cb4 <USBD_LL_Transmit>
 80055d2:	2000      	movs	r0, #0
 80055d4:	bd08      	pop	{r3, pc}
 80055d6:	2002      	movs	r0, #2
 80055d8:	bd08      	pop	{r3, pc}
 80055da:	2001      	movs	r0, #1
 80055dc:	bd08      	pop	{r3, pc}
 80055de:	bf00      	nop

080055e0 <USBD_CDC_ReceivePacket>:
 80055e0:	b508      	push	{r3, lr}
 80055e2:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 80055e6:	b193      	cbz	r3, 800560e <USBD_CDC_ReceivePacket+0x2e>
 80055e8:	7c02      	ldrb	r2, [r0, #16]
 80055ea:	b942      	cbnz	r2, 80055fe <USBD_CDC_ReceivePacket+0x1e>
 80055ec:	2101      	movs	r1, #1
 80055ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055f6:	f7fd fb65 	bl	8002cc4 <USBD_LL_PrepareReceive>
 80055fa:	2000      	movs	r0, #0
 80055fc:	bd08      	pop	{r3, pc}
 80055fe:	2101      	movs	r1, #1
 8005600:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005604:	2340      	movs	r3, #64	; 0x40
 8005606:	f7fd fb5d 	bl	8002cc4 <USBD_LL_PrepareReceive>
 800560a:	2000      	movs	r0, #0
 800560c:	bd08      	pop	{r3, pc}
 800560e:	2002      	movs	r0, #2
 8005610:	bd08      	pop	{r3, pc}
 8005612:	bf00      	nop

08005614 <USBD_Init>:
 8005614:	b508      	push	{r3, lr}
 8005616:	4603      	mov	r3, r0
 8005618:	b188      	cbz	r0, 800563e <USBD_Init+0x2a>
 800561a:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 800561e:	b110      	cbz	r0, 8005626 <USBD_Init+0x12>
 8005620:	2000      	movs	r0, #0
 8005622:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 8005626:	b109      	cbz	r1, 800562c <USBD_Init+0x18>
 8005628:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
 800562c:	2101      	movs	r1, #1
 800562e:	f883 11fc 	strb.w	r1, [r3, #508]	; 0x1fc
 8005632:	701a      	strb	r2, [r3, #0]
 8005634:	4618      	mov	r0, r3
 8005636:	f7fd fac9 	bl	8002bcc <USBD_LL_Init>
 800563a:	2000      	movs	r0, #0
 800563c:	bd08      	pop	{r3, pc}
 800563e:	2002      	movs	r0, #2
 8005640:	bd08      	pop	{r3, pc}
 8005642:	bf00      	nop

08005644 <USBD_RegisterClass>:
 8005644:	b119      	cbz	r1, 800564e <USBD_RegisterClass+0xa>
 8005646:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
 800564a:	2000      	movs	r0, #0
 800564c:	4770      	bx	lr
 800564e:	2002      	movs	r0, #2
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop

08005654 <USBD_Start>:
 8005654:	b508      	push	{r3, lr}
 8005656:	f7fd faeb 	bl	8002c30 <USBD_LL_Start>
 800565a:	2000      	movs	r0, #0
 800565c:	bd08      	pop	{r3, pc}
 800565e:	bf00      	nop

08005660 <USBD_SetClassConfig>:
 8005660:	b508      	push	{r3, lr}
 8005662:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005666:	b133      	cbz	r3, 8005676 <USBD_SetClassConfig+0x16>
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4798      	blx	r3
 800566c:	2800      	cmp	r0, #0
 800566e:	bf0c      	ite	eq
 8005670:	2000      	moveq	r0, #0
 8005672:	2002      	movne	r0, #2
 8005674:	bd08      	pop	{r3, pc}
 8005676:	2002      	movs	r0, #2
 8005678:	bd08      	pop	{r3, pc}
 800567a:	bf00      	nop

0800567c <USBD_ClrClassConfig>:
 800567c:	b508      	push	{r3, lr}
 800567e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	4798      	blx	r3
 8005686:	2000      	movs	r0, #0
 8005688:	bd08      	pop	{r3, pc}
 800568a:	bf00      	nop

0800568c <USBD_LL_SetupStage>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	4604      	mov	r4, r0
 8005690:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8005694:	4628      	mov	r0, r5
 8005696:	f000 f8ef 	bl	8005878 <USBD_ParseSetupRequest>
 800569a:	2301      	movs	r3, #1
 800569c:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
 80056a0:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80056a4:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
 80056a8:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
 80056ac:	f001 031f 	and.w	r3, r1, #31
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d008      	beq.n	80056c6 <USBD_LL_SetupStage+0x3a>
 80056b4:	b113      	cbz	r3, 80056bc <USBD_LL_SetupStage+0x30>
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d00a      	beq.n	80056d0 <USBD_LL_SetupStage+0x44>
 80056ba:	e00e      	b.n	80056da <USBD_LL_SetupStage+0x4e>
 80056bc:	4620      	mov	r0, r4
 80056be:	4629      	mov	r1, r5
 80056c0:	f000 f8f8 	bl	80058b4 <USBD_StdDevReq>
 80056c4:	e00e      	b.n	80056e4 <USBD_LL_SetupStage+0x58>
 80056c6:	4620      	mov	r0, r4
 80056c8:	4629      	mov	r1, r5
 80056ca:	f000 fa7f 	bl	8005bcc <USBD_StdItfReq>
 80056ce:	e009      	b.n	80056e4 <USBD_LL_SetupStage+0x58>
 80056d0:	4620      	mov	r0, r4
 80056d2:	4629      	mov	r1, r5
 80056d4:	f000 fa96 	bl	8005c04 <USBD_StdEPReq>
 80056d8:	e004      	b.n	80056e4 <USBD_LL_SetupStage+0x58>
 80056da:	4620      	mov	r0, r4
 80056dc:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80056e0:	f7fd fac0 	bl	8002c64 <USBD_LL_StallEP>
 80056e4:	2000      	movs	r0, #0
 80056e6:	bd38      	pop	{r3, r4, r5, pc}

080056e8 <USBD_LL_DataOutStage>:
 80056e8:	b538      	push	{r3, r4, r5, lr}
 80056ea:	4604      	mov	r4, r0
 80056ec:	bb09      	cbnz	r1, 8005732 <USBD_LL_DataOutStage+0x4a>
 80056ee:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80056f2:	2b03      	cmp	r3, #3
 80056f4:	d126      	bne.n	8005744 <USBD_LL_DataOutStage+0x5c>
 80056f6:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 80056fa:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80056fe:	4299      	cmp	r1, r3
 8005700:	d90a      	bls.n	8005718 <USBD_LL_DataOutStage+0x30>
 8005702:	1ac9      	subs	r1, r1, r3
 8005704:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
 8005708:	4299      	cmp	r1, r3
 800570a:	bf38      	it	cc
 800570c:	460b      	movcc	r3, r1
 800570e:	4611      	mov	r1, r2
 8005710:	b29a      	uxth	r2, r3
 8005712:	f000 fb41 	bl	8005d98 <USBD_CtlContinueRx>
 8005716:	e015      	b.n	8005744 <USBD_LL_DataOutStage+0x5c>
 8005718:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	b123      	cbz	r3, 800572a <USBD_LL_DataOutStage+0x42>
 8005720:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8005724:	2a03      	cmp	r2, #3
 8005726:	d100      	bne.n	800572a <USBD_LL_DataOutStage+0x42>
 8005728:	4798      	blx	r3
 800572a:	4620      	mov	r0, r4
 800572c:	f000 fb3e 	bl	8005dac <USBD_CtlSendStatus>
 8005730:	e008      	b.n	8005744 <USBD_LL_DataOutStage+0x5c>
 8005732:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	b123      	cbz	r3, 8005744 <USBD_LL_DataOutStage+0x5c>
 800573a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800573e:	2a03      	cmp	r2, #3
 8005740:	d100      	bne.n	8005744 <USBD_LL_DataOutStage+0x5c>
 8005742:	4798      	blx	r3
 8005744:	2000      	movs	r0, #0
 8005746:	bd38      	pop	{r3, r4, r5, pc}

08005748 <USBD_LL_DataInStage>:
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	4604      	mov	r4, r0
 800574c:	2900      	cmp	r1, #0
 800574e:	d136      	bne.n	80057be <USBD_LL_DataInStage+0x76>
 8005750:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8005754:	2b02      	cmp	r3, #2
 8005756:	d12a      	bne.n	80057ae <USBD_LL_DataInStage+0x66>
 8005758:	69c1      	ldr	r1, [r0, #28]
 800575a:	6a03      	ldr	r3, [r0, #32]
 800575c:	4299      	cmp	r1, r3
 800575e:	d906      	bls.n	800576e <USBD_LL_DataInStage+0x26>
 8005760:	1acb      	subs	r3, r1, r3
 8005762:	61c3      	str	r3, [r0, #28]
 8005764:	4611      	mov	r1, r2
 8005766:	b29a      	uxth	r2, r3
 8005768:	f000 fafc 	bl	8005d64 <USBD_CtlContinueSendData>
 800576c:	e01f      	b.n	80057ae <USBD_LL_DataInStage+0x66>
 800576e:	6982      	ldr	r2, [r0, #24]
 8005770:	fbb2 f1f3 	udiv	r1, r2, r3
 8005774:	fb03 2111 	mls	r1, r3, r1, r2
 8005778:	b961      	cbnz	r1, 8005794 <USBD_LL_DataInStage+0x4c>
 800577a:	4293      	cmp	r3, r2
 800577c:	d80a      	bhi.n	8005794 <USBD_LL_DataInStage+0x4c>
 800577e:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
 8005782:	429a      	cmp	r2, r3
 8005784:	d206      	bcs.n	8005794 <USBD_LL_DataInStage+0x4c>
 8005786:	460a      	mov	r2, r1
 8005788:	f000 faec 	bl	8005d64 <USBD_CtlContinueSendData>
 800578c:	2300      	movs	r3, #0
 800578e:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
 8005792:	e00c      	b.n	80057ae <USBD_LL_DataInStage+0x66>
 8005794:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	b12b      	cbz	r3, 80057a8 <USBD_LL_DataInStage+0x60>
 800579c:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80057a0:	2a03      	cmp	r2, #3
 80057a2:	d101      	bne.n	80057a8 <USBD_LL_DataInStage+0x60>
 80057a4:	4620      	mov	r0, r4
 80057a6:	4798      	blx	r3
 80057a8:	4620      	mov	r0, r4
 80057aa:	f000 fb0b 	bl	8005dc4 <USBD_CtlReceiveStatus>
 80057ae:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d10c      	bne.n	80057d0 <USBD_LL_DataInStage+0x88>
 80057b6:	2300      	movs	r3, #0
 80057b8:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 80057bc:	e008      	b.n	80057d0 <USBD_LL_DataInStage+0x88>
 80057be:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	b123      	cbz	r3, 80057d0 <USBD_LL_DataInStage+0x88>
 80057c6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80057ca:	2a03      	cmp	r2, #3
 80057cc:	d100      	bne.n	80057d0 <USBD_LL_DataInStage+0x88>
 80057ce:	4798      	blx	r3
 80057d0:	2000      	movs	r0, #0
 80057d2:	bd38      	pop	{r3, r4, r5, pc}

080057d4 <USBD_LL_Reset>:
 80057d4:	b538      	push	{r3, r4, r5, lr}
 80057d6:	4604      	mov	r4, r0
 80057d8:	2100      	movs	r1, #0
 80057da:	460a      	mov	r2, r1
 80057dc:	2340      	movs	r3, #64	; 0x40
 80057de:	f7fd fa2f 	bl	8002c40 <USBD_LL_OpenEP>
 80057e2:	2540      	movs	r5, #64	; 0x40
 80057e4:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 80057e8:	4620      	mov	r0, r4
 80057ea:	2180      	movs	r1, #128	; 0x80
 80057ec:	2200      	movs	r2, #0
 80057ee:	462b      	mov	r3, r5
 80057f0:	f7fd fa26 	bl	8002c40 <USBD_LL_OpenEP>
 80057f4:	6225      	str	r5, [r4, #32]
 80057f6:	2301      	movs	r3, #1
 80057f8:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 80057fc:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8005800:	b12b      	cbz	r3, 800580e <USBD_LL_Reset+0x3a>
 8005802:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	4620      	mov	r0, r4
 800580a:	7921      	ldrb	r1, [r4, #4]
 800580c:	4798      	blx	r3
 800580e:	2000      	movs	r0, #0
 8005810:	bd38      	pop	{r3, r4, r5, pc}
 8005812:	bf00      	nop

08005814 <USBD_LL_SetSpeed>:
 8005814:	7401      	strb	r1, [r0, #16]
 8005816:	2000      	movs	r0, #0
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop

0800581c <USBD_LL_Suspend>:
 800581c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005820:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
 8005824:	2304      	movs	r3, #4
 8005826:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 800582a:	2000      	movs	r0, #0
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop

08005830 <USBD_LL_Resume>:
 8005830:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8005834:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 8005838:	2000      	movs	r0, #0
 800583a:	4770      	bx	lr

0800583c <USBD_LL_SOF>:
 800583c:	b508      	push	{r3, lr}
 800583e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005842:	2b03      	cmp	r3, #3
 8005844:	d104      	bne.n	8005850 <USBD_LL_SOF+0x14>
 8005846:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	b103      	cbz	r3, 8005850 <USBD_LL_SOF+0x14>
 800584e:	4798      	blx	r3
 8005850:	2000      	movs	r0, #0
 8005852:	bd08      	pop	{r3, pc}

08005854 <USBD_LL_IsoINIncomplete>:
 8005854:	2000      	movs	r0, #0
 8005856:	4770      	bx	lr

08005858 <USBD_LL_IsoOUTIncomplete>:
 8005858:	2000      	movs	r0, #0
 800585a:	4770      	bx	lr

0800585c <USBD_LL_DevConnected>:
 800585c:	2000      	movs	r0, #0
 800585e:	4770      	bx	lr

08005860 <USBD_LL_DevDisconnected>:
 8005860:	b508      	push	{r3, lr}
 8005862:	2201      	movs	r2, #1
 8005864:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
 8005868:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 800586c:	6852      	ldr	r2, [r2, #4]
 800586e:	7901      	ldrb	r1, [r0, #4]
 8005870:	4790      	blx	r2
 8005872:	2000      	movs	r0, #0
 8005874:	bd08      	pop	{r3, pc}
 8005876:	bf00      	nop

08005878 <USBD_ParseSetupRequest>:
 8005878:	780b      	ldrb	r3, [r1, #0]
 800587a:	7003      	strb	r3, [r0, #0]
 800587c:	784b      	ldrb	r3, [r1, #1]
 800587e:	7043      	strb	r3, [r0, #1]
 8005880:	78ca      	ldrb	r2, [r1, #3]
 8005882:	788b      	ldrb	r3, [r1, #2]
 8005884:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005888:	8043      	strh	r3, [r0, #2]
 800588a:	794a      	ldrb	r2, [r1, #5]
 800588c:	790b      	ldrb	r3, [r1, #4]
 800588e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005892:	8083      	strh	r3, [r0, #4]
 8005894:	79ca      	ldrb	r2, [r1, #7]
 8005896:	798b      	ldrb	r3, [r1, #6]
 8005898:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800589c:	80c3      	strh	r3, [r0, #6]
 800589e:	4770      	bx	lr

080058a0 <USBD_CtlError>:
 80058a0:	b510      	push	{r4, lr}
 80058a2:	4604      	mov	r4, r0
 80058a4:	2180      	movs	r1, #128	; 0x80
 80058a6:	f7fd f9dd 	bl	8002c64 <USBD_LL_StallEP>
 80058aa:	4620      	mov	r0, r4
 80058ac:	2100      	movs	r1, #0
 80058ae:	f7fd f9d9 	bl	8002c64 <USBD_LL_StallEP>
 80058b2:	bd10      	pop	{r4, pc}

080058b4 <USBD_StdDevReq>:
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	4605      	mov	r5, r0
 80058ba:	460c      	mov	r4, r1
 80058bc:	784b      	ldrb	r3, [r1, #1]
 80058be:	2b09      	cmp	r3, #9
 80058c0:	f200 817c 	bhi.w	8005bbc <USBD_StdDevReq+0x308>
 80058c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80058c8:	0162013d 	.word	0x0162013d
 80058cc:	0154017a 	.word	0x0154017a
 80058d0:	00ab017a 	.word	0x00ab017a
 80058d4:	017a000a 	.word	0x017a000a
 80058d8:	00d0011e 	.word	0x00d0011e
 80058dc:	8862      	ldrh	r2, [r4, #2]
 80058de:	0a13      	lsrs	r3, r2, #8
 80058e0:	3b01      	subs	r3, #1
 80058e2:	2b06      	cmp	r3, #6
 80058e4:	f200 8085 	bhi.w	80059f2 <USBD_StdDevReq+0x13e>
 80058e8:	e8df f003 	tbb	[pc, r3]
 80058ec:	83230d04 	.word	0x83230d04
 80058f0:	6583      	.short	0x6583
 80058f2:	73          	.byte	0x73
 80058f3:	00          	.byte	0x00
 80058f4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	7c00      	ldrb	r0, [r0, #16]
 80058fc:	f10d 0106 	add.w	r1, sp, #6
 8005900:	4798      	blx	r3
 8005902:	4601      	mov	r1, r0
 8005904:	e079      	b.n	80059fa <USBD_StdDevReq+0x146>
 8005906:	7c03      	ldrb	r3, [r0, #16]
 8005908:	b94b      	cbnz	r3, 800591e <USBD_StdDevReq+0x6a>
 800590a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800590e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005910:	f10d 0006 	add.w	r0, sp, #6
 8005914:	4798      	blx	r3
 8005916:	4601      	mov	r1, r0
 8005918:	2302      	movs	r3, #2
 800591a:	7043      	strb	r3, [r0, #1]
 800591c:	e06d      	b.n	80059fa <USBD_StdDevReq+0x146>
 800591e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	f10d 0006 	add.w	r0, sp, #6
 8005928:	4798      	blx	r3
 800592a:	4601      	mov	r1, r0
 800592c:	2302      	movs	r3, #2
 800592e:	7043      	strb	r3, [r0, #1]
 8005930:	e063      	b.n	80059fa <USBD_StdDevReq+0x146>
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	2a05      	cmp	r2, #5
 8005936:	d83a      	bhi.n	80059ae <USBD_StdDevReq+0xfa>
 8005938:	e8df f002 	tbb	[pc, r2]
 800593c:	1e150c03 	.word	0x1e150c03
 8005940:	3027      	.short	0x3027
 8005942:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	7c00      	ldrb	r0, [r0, #16]
 800594a:	f10d 0106 	add.w	r1, sp, #6
 800594e:	4798      	blx	r3
 8005950:	4601      	mov	r1, r0
 8005952:	e052      	b.n	80059fa <USBD_StdDevReq+0x146>
 8005954:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	7c00      	ldrb	r0, [r0, #16]
 800595c:	f10d 0106 	add.w	r1, sp, #6
 8005960:	4798      	blx	r3
 8005962:	4601      	mov	r1, r0
 8005964:	e049      	b.n	80059fa <USBD_StdDevReq+0x146>
 8005966:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	7c00      	ldrb	r0, [r0, #16]
 800596e:	f10d 0106 	add.w	r1, sp, #6
 8005972:	4798      	blx	r3
 8005974:	4601      	mov	r1, r0
 8005976:	e040      	b.n	80059fa <USBD_StdDevReq+0x146>
 8005978:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	7c00      	ldrb	r0, [r0, #16]
 8005980:	f10d 0106 	add.w	r1, sp, #6
 8005984:	4798      	blx	r3
 8005986:	4601      	mov	r1, r0
 8005988:	e037      	b.n	80059fa <USBD_StdDevReq+0x146>
 800598a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	7c00      	ldrb	r0, [r0, #16]
 8005992:	f10d 0106 	add.w	r1, sp, #6
 8005996:	4798      	blx	r3
 8005998:	4601      	mov	r1, r0
 800599a:	e02e      	b.n	80059fa <USBD_StdDevReq+0x146>
 800599c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	7c00      	ldrb	r0, [r0, #16]
 80059a4:	f10d 0106 	add.w	r1, sp, #6
 80059a8:	4798      	blx	r3
 80059aa:	4601      	mov	r1, r0
 80059ac:	e025      	b.n	80059fa <USBD_StdDevReq+0x146>
 80059ae:	4621      	mov	r1, r4
 80059b0:	f7ff ff76 	bl	80058a0 <USBD_CtlError>
 80059b4:	e105      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 80059b6:	7c03      	ldrb	r3, [r0, #16]
 80059b8:	b93b      	cbnz	r3, 80059ca <USBD_StdDevReq+0x116>
 80059ba:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80059be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c0:	f10d 0006 	add.w	r0, sp, #6
 80059c4:	4798      	blx	r3
 80059c6:	4601      	mov	r1, r0
 80059c8:	e017      	b.n	80059fa <USBD_StdDevReq+0x146>
 80059ca:	4621      	mov	r1, r4
 80059cc:	f7ff ff68 	bl	80058a0 <USBD_CtlError>
 80059d0:	e0f7      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 80059d2:	7c03      	ldrb	r3, [r0, #16]
 80059d4:	b94b      	cbnz	r3, 80059ea <USBD_StdDevReq+0x136>
 80059d6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80059da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059dc:	f10d 0006 	add.w	r0, sp, #6
 80059e0:	4798      	blx	r3
 80059e2:	4601      	mov	r1, r0
 80059e4:	2307      	movs	r3, #7
 80059e6:	7043      	strb	r3, [r0, #1]
 80059e8:	e007      	b.n	80059fa <USBD_StdDevReq+0x146>
 80059ea:	4621      	mov	r1, r4
 80059ec:	f7ff ff58 	bl	80058a0 <USBD_CtlError>
 80059f0:	e0e7      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 80059f2:	4621      	mov	r1, r4
 80059f4:	f7ff ff54 	bl	80058a0 <USBD_CtlError>
 80059f8:	e0e3      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 80059fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 80df 	beq.w	8005bc2 <USBD_StdDevReq+0x30e>
 8005a04:	88e2      	ldrh	r2, [r4, #6]
 8005a06:	2a00      	cmp	r2, #0
 8005a08:	f000 80db 	beq.w	8005bc2 <USBD_StdDevReq+0x30e>
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	bf28      	it	cs
 8005a10:	461a      	movcs	r2, r3
 8005a12:	f8ad 2006 	strh.w	r2, [sp, #6]
 8005a16:	4628      	mov	r0, r5
 8005a18:	f000 f996 	bl	8005d48 <USBD_CtlSendData>
 8005a1c:	e0d1      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005a1e:	88a3      	ldrh	r3, [r4, #4]
 8005a20:	b9eb      	cbnz	r3, 8005a5e <USBD_StdDevReq+0x1aa>
 8005a22:	88e3      	ldrh	r3, [r4, #6]
 8005a24:	b9db      	cbnz	r3, 8005a5e <USBD_StdDevReq+0x1aa>
 8005a26:	78a6      	ldrb	r6, [r4, #2]
 8005a28:	f006 067f 	and.w	r6, r6, #127	; 0x7f
 8005a2c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	d103      	bne.n	8005a3c <USBD_StdDevReq+0x188>
 8005a34:	4621      	mov	r1, r4
 8005a36:	f7ff ff33 	bl	80058a0 <USBD_CtlError>
 8005a3a:	e0c2      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005a3c:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
 8005a40:	4631      	mov	r1, r6
 8005a42:	f7fd f92f 	bl	8002ca4 <USBD_LL_SetUSBAddress>
 8005a46:	4628      	mov	r0, r5
 8005a48:	f000 f9b0 	bl	8005dac <USBD_CtlSendStatus>
 8005a4c:	b11e      	cbz	r6, 8005a56 <USBD_StdDevReq+0x1a2>
 8005a4e:	2302      	movs	r3, #2
 8005a50:	f885 31fc 	strb.w	r3, [r5, #508]	; 0x1fc
 8005a54:	e0b5      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005a56:	2301      	movs	r3, #1
 8005a58:	f885 31fc 	strb.w	r3, [r5, #508]	; 0x1fc
 8005a5c:	e0b1      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005a5e:	4628      	mov	r0, r5
 8005a60:	4621      	mov	r1, r4
 8005a62:	f7ff ff1d 	bl	80058a0 <USBD_CtlError>
 8005a66:	e0ac      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005a68:	78a1      	ldrb	r1, [r4, #2]
 8005a6a:	4b57      	ldr	r3, [pc, #348]	; (8005bc8 <USBD_StdDevReq+0x314>)
 8005a6c:	7019      	strb	r1, [r3, #0]
 8005a6e:	2901      	cmp	r1, #1
 8005a70:	d903      	bls.n	8005a7a <USBD_StdDevReq+0x1c6>
 8005a72:	4621      	mov	r1, r4
 8005a74:	f7ff ff14 	bl	80058a0 <USBD_CtlError>
 8005a78:	e0a3      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005a7a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d002      	beq.n	8005a88 <USBD_StdDevReq+0x1d4>
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d015      	beq.n	8005ab2 <USBD_StdDevReq+0x1fe>
 8005a86:	e039      	b.n	8005afc <USBD_StdDevReq+0x248>
 8005a88:	b181      	cbz	r1, 8005aac <USBD_StdDevReq+0x1f8>
 8005a8a:	6041      	str	r1, [r0, #4]
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 8005a92:	f7ff fde5 	bl	8005660 <USBD_SetClassConfig>
 8005a96:	2802      	cmp	r0, #2
 8005a98:	d104      	bne.n	8005aa4 <USBD_StdDevReq+0x1f0>
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	4621      	mov	r1, r4
 8005a9e:	f7ff feff 	bl	80058a0 <USBD_CtlError>
 8005aa2:	e08e      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	f000 f981 	bl	8005dac <USBD_CtlSendStatus>
 8005aaa:	e08a      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005aac:	f000 f97e 	bl	8005dac <USBD_CtlSendStatus>
 8005ab0:	e087      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005ab2:	b949      	cbnz	r1, 8005ac8 <USBD_StdDevReq+0x214>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 8005aba:	6041      	str	r1, [r0, #4]
 8005abc:	f7ff fdde 	bl	800567c <USBD_ClrClassConfig>
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	f000 f973 	bl	8005dac <USBD_CtlSendStatus>
 8005ac6:	e07c      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005ac8:	6843      	ldr	r3, [r0, #4]
 8005aca:	4299      	cmp	r1, r3
 8005acc:	d013      	beq.n	8005af6 <USBD_StdDevReq+0x242>
 8005ace:	b2d9      	uxtb	r1, r3
 8005ad0:	f7ff fdd4 	bl	800567c <USBD_ClrClassConfig>
 8005ad4:	4b3c      	ldr	r3, [pc, #240]	; (8005bc8 <USBD_StdDevReq+0x314>)
 8005ad6:	7819      	ldrb	r1, [r3, #0]
 8005ad8:	6069      	str	r1, [r5, #4]
 8005ada:	4628      	mov	r0, r5
 8005adc:	f7ff fdc0 	bl	8005660 <USBD_SetClassConfig>
 8005ae0:	2802      	cmp	r0, #2
 8005ae2:	d104      	bne.n	8005aee <USBD_StdDevReq+0x23a>
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	f7ff feda 	bl	80058a0 <USBD_CtlError>
 8005aec:	e069      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005aee:	4628      	mov	r0, r5
 8005af0:	f000 f95c 	bl	8005dac <USBD_CtlSendStatus>
 8005af4:	e065      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005af6:	f000 f959 	bl	8005dac <USBD_CtlSendStatus>
 8005afa:	e062      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005afc:	4621      	mov	r1, r4
 8005afe:	f7ff fecf 	bl	80058a0 <USBD_CtlError>
 8005b02:	e05e      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005b04:	88e3      	ldrh	r3, [r4, #6]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d003      	beq.n	8005b12 <USBD_StdDevReq+0x25e>
 8005b0a:	4621      	mov	r1, r4
 8005b0c:	f7ff fec8 	bl	80058a0 <USBD_CtlError>
 8005b10:	e057      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005b12:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d002      	beq.n	8005b20 <USBD_StdDevReq+0x26c>
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d008      	beq.n	8005b30 <USBD_StdDevReq+0x27c>
 8005b1e:	e00c      	b.n	8005b3a <USBD_StdDevReq+0x286>
 8005b20:	4601      	mov	r1, r0
 8005b22:	2300      	movs	r3, #0
 8005b24:	f841 3f08 	str.w	r3, [r1, #8]!
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f000 f90d 	bl	8005d48 <USBD_CtlSendData>
 8005b2e:	e048      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005b30:	1d29      	adds	r1, r5, #4
 8005b32:	2201      	movs	r2, #1
 8005b34:	f000 f908 	bl	8005d48 <USBD_CtlSendData>
 8005b38:	e043      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	f7ff feb0 	bl	80058a0 <USBD_CtlError>
 8005b40:	e03f      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005b42:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005b46:	3b02      	subs	r3, #2
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d80d      	bhi.n	8005b68 <USBD_StdDevReq+0x2b4>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	60c3      	str	r3, [r0, #12]
 8005b50:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8005b54:	b10b      	cbz	r3, 8005b5a <USBD_StdDevReq+0x2a6>
 8005b56:	2303      	movs	r3, #3
 8005b58:	60c3      	str	r3, [r0, #12]
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	f105 010c 	add.w	r1, r5, #12
 8005b60:	2202      	movs	r2, #2
 8005b62:	f000 f8f1 	bl	8005d48 <USBD_CtlSendData>
 8005b66:	e02c      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005b68:	4621      	mov	r1, r4
 8005b6a:	f7ff fe99 	bl	80058a0 <USBD_CtlError>
 8005b6e:	e028      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005b70:	8863      	ldrh	r3, [r4, #2]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d125      	bne.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005b76:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
 8005b7a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	4621      	mov	r1, r4
 8005b82:	4798      	blx	r3
 8005b84:	4628      	mov	r0, r5
 8005b86:	f000 f911 	bl	8005dac <USBD_CtlSendStatus>
 8005b8a:	e01a      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005b8c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005b90:	3b02      	subs	r3, #2
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d80e      	bhi.n	8005bb4 <USBD_StdDevReq+0x300>
 8005b96:	8863      	ldrh	r3, [r4, #2]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d112      	bne.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
 8005ba2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	4621      	mov	r1, r4
 8005baa:	4798      	blx	r3
 8005bac:	4628      	mov	r0, r5
 8005bae:	f000 f8fd 	bl	8005dac <USBD_CtlSendStatus>
 8005bb2:	e006      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	f7ff fe73 	bl	80058a0 <USBD_CtlError>
 8005bba:	e002      	b.n	8005bc2 <USBD_StdDevReq+0x30e>
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	f7ff fe6f 	bl	80058a0 <USBD_CtlError>
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	b002      	add	sp, #8
 8005bc6:	bd70      	pop	{r4, r5, r6, pc}
 8005bc8:	20000bd8 	.word	0x20000bd8

08005bcc <USBD_StdItfReq>:
 8005bcc:	b538      	push	{r3, r4, r5, lr}
 8005bce:	4604      	mov	r4, r0
 8005bd0:	460d      	mov	r5, r1
 8005bd2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d10f      	bne.n	8005bfa <USBD_StdItfReq+0x2e>
 8005bda:	790b      	ldrb	r3, [r1, #4]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d809      	bhi.n	8005bf4 <USBD_StdItfReq+0x28>
 8005be0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	4798      	blx	r3
 8005be8:	88eb      	ldrh	r3, [r5, #6]
 8005bea:	b943      	cbnz	r3, 8005bfe <USBD_StdItfReq+0x32>
 8005bec:	4620      	mov	r0, r4
 8005bee:	f000 f8dd 	bl	8005dac <USBD_CtlSendStatus>
 8005bf2:	e004      	b.n	8005bfe <USBD_StdItfReq+0x32>
 8005bf4:	f7ff fe54 	bl	80058a0 <USBD_CtlError>
 8005bf8:	e001      	b.n	8005bfe <USBD_StdItfReq+0x32>
 8005bfa:	f7ff fe51 	bl	80058a0 <USBD_CtlError>
 8005bfe:	2000      	movs	r0, #0
 8005c00:	bd38      	pop	{r3, r4, r5, pc}
 8005c02:	bf00      	nop

08005c04 <USBD_StdEPReq>:
 8005c04:	b538      	push	{r3, r4, r5, lr}
 8005c06:	4605      	mov	r5, r0
 8005c08:	460c      	mov	r4, r1
 8005c0a:	888a      	ldrh	r2, [r1, #4]
 8005c0c:	b2d1      	uxtb	r1, r2
 8005c0e:	7863      	ldrb	r3, [r4, #1]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d025      	beq.n	8005c60 <USBD_StdEPReq+0x5c>
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d046      	beq.n	8005ca6 <USBD_StdEPReq+0xa2>
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d16c      	bne.n	8005cf6 <USBD_StdEPReq+0xf2>
 8005c1c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d002      	beq.n	8005c2a <USBD_StdEPReq+0x26>
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d006      	beq.n	8005c36 <USBD_StdEPReq+0x32>
 8005c28:	e016      	b.n	8005c58 <USBD_StdEPReq+0x54>
 8005c2a:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8005c2e:	d062      	beq.n	8005cf6 <USBD_StdEPReq+0xf2>
 8005c30:	f7fd f818 	bl	8002c64 <USBD_LL_StallEP>
 8005c34:	e05f      	b.n	8005cf6 <USBD_StdEPReq+0xf2>
 8005c36:	8863      	ldrh	r3, [r4, #2]
 8005c38:	b923      	cbnz	r3, 8005c44 <USBD_StdEPReq+0x40>
 8005c3a:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8005c3e:	d001      	beq.n	8005c44 <USBD_StdEPReq+0x40>
 8005c40:	f7fd f810 	bl	8002c64 <USBD_LL_StallEP>
 8005c44:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	4798      	blx	r3
 8005c50:	4628      	mov	r0, r5
 8005c52:	f000 f8ab 	bl	8005dac <USBD_CtlSendStatus>
 8005c56:	e04e      	b.n	8005cf6 <USBD_StdEPReq+0xf2>
 8005c58:	4621      	mov	r1, r4
 8005c5a:	f7ff fe21 	bl	80058a0 <USBD_CtlError>
 8005c5e:	e04a      	b.n	8005cf6 <USBD_StdEPReq+0xf2>
 8005c60:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d002      	beq.n	8005c6e <USBD_StdEPReq+0x6a>
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	d006      	beq.n	8005c7a <USBD_StdEPReq+0x76>
 8005c6c:	e017      	b.n	8005c9e <USBD_StdEPReq+0x9a>
 8005c6e:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8005c72:	d040      	beq.n	8005cf6 <USBD_StdEPReq+0xf2>
 8005c74:	f7fc fff6 	bl	8002c64 <USBD_LL_StallEP>
 8005c78:	e03d      	b.n	8005cf6 <USBD_StdEPReq+0xf2>
 8005c7a:	8863      	ldrh	r3, [r4, #2]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d13a      	bne.n	8005cf6 <USBD_StdEPReq+0xf2>
 8005c80:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8005c84:	d007      	beq.n	8005c96 <USBD_StdEPReq+0x92>
 8005c86:	f7fc fff5 	bl	8002c74 <USBD_LL_ClearStallEP>
 8005c8a:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	4628      	mov	r0, r5
 8005c92:	4621      	mov	r1, r4
 8005c94:	4798      	blx	r3
 8005c96:	4628      	mov	r0, r5
 8005c98:	f000 f888 	bl	8005dac <USBD_CtlSendStatus>
 8005c9c:	e02b      	b.n	8005cf6 <USBD_StdEPReq+0xf2>
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	f7ff fdfe 	bl	80058a0 <USBD_CtlError>
 8005ca4:	e027      	b.n	8005cf6 <USBD_StdEPReq+0xf2>
 8005ca6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d002      	beq.n	8005cb4 <USBD_StdEPReq+0xb0>
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d006      	beq.n	8005cc0 <USBD_StdEPReq+0xbc>
 8005cb2:	e01d      	b.n	8005cf0 <USBD_StdEPReq+0xec>
 8005cb4:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8005cb8:	d01d      	beq.n	8005cf6 <USBD_StdEPReq+0xf2>
 8005cba:	f7fc ffd3 	bl	8002c64 <USBD_LL_StallEP>
 8005cbe:	e01a      	b.n	8005cf6 <USBD_StdEPReq+0xf2>
 8005cc0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005cc4:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8005cc8:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8005ccc:	bf14      	ite	ne
 8005cce:	3414      	addne	r4, #20
 8005cd0:	f504 7482 	addeq.w	r4, r4, #260	; 0x104
 8005cd4:	f7fc ffd6 	bl	8002c84 <USBD_LL_IsStallEP>
 8005cd8:	b110      	cbz	r0, 8005ce0 <USBD_StdEPReq+0xdc>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	e001      	b.n	8005ce4 <USBD_StdEPReq+0xe0>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	6023      	str	r3, [r4, #0]
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	2202      	movs	r2, #2
 8005cea:	f000 f82d 	bl	8005d48 <USBD_CtlSendData>
 8005cee:	e002      	b.n	8005cf6 <USBD_StdEPReq+0xf2>
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	f7ff fdd5 	bl	80058a0 <USBD_CtlError>
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	bd38      	pop	{r3, r4, r5, pc}
 8005cfa:	bf00      	nop

08005cfc <USBD_GetString>:
 8005cfc:	b470      	push	{r4, r5, r6}
 8005cfe:	4606      	mov	r6, r0
 8005d00:	b300      	cbz	r0, 8005d44 <USBD_GetString+0x48>
 8005d02:	7803      	ldrb	r3, [r0, #0]
 8005d04:	b143      	cbz	r3, 8005d18 <USBD_GetString+0x1c>
 8005d06:	4604      	mov	r4, r0
 8005d08:	2300      	movs	r3, #0
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8005d12:	2d00      	cmp	r5, #0
 8005d14:	d1f9      	bne.n	8005d0a <USBD_GetString+0xe>
 8005d16:	e000      	b.n	8005d1a <USBD_GetString+0x1e>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	3302      	adds	r3, #2
 8005d1e:	8013      	strh	r3, [r2, #0]
 8005d20:	700b      	strb	r3, [r1, #0]
 8005d22:	2303      	movs	r3, #3
 8005d24:	704b      	strb	r3, [r1, #1]
 8005d26:	7832      	ldrb	r2, [r6, #0]
 8005d28:	b162      	cbz	r2, 8005d44 <USBD_GetString+0x48>
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	2500      	movs	r5, #0
 8005d30:	1c5c      	adds	r4, r3, #1
 8005d32:	b2e4      	uxtb	r4, r4
 8005d34:	54ca      	strb	r2, [r1, r3]
 8005d36:	3302      	adds	r3, #2
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	550d      	strb	r5, [r1, r4]
 8005d3c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005d40:	2a00      	cmp	r2, #0
 8005d42:	d1f5      	bne.n	8005d30 <USBD_GetString+0x34>
 8005d44:	bc70      	pop	{r4, r5, r6}
 8005d46:	4770      	bx	lr

08005d48 <USBD_CtlSendData>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	460d      	mov	r5, r1
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
 8005d54:	6183      	str	r3, [r0, #24]
 8005d56:	61c3      	str	r3, [r0, #28]
 8005d58:	2100      	movs	r1, #0
 8005d5a:	462a      	mov	r2, r5
 8005d5c:	f7fc ffaa 	bl	8002cb4 <USBD_LL_Transmit>
 8005d60:	2000      	movs	r0, #0
 8005d62:	bd38      	pop	{r3, r4, r5, pc}

08005d64 <USBD_CtlContinueSendData>:
 8005d64:	b510      	push	{r4, lr}
 8005d66:	460c      	mov	r4, r1
 8005d68:	4613      	mov	r3, r2
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	4622      	mov	r2, r4
 8005d6e:	f7fc ffa1 	bl	8002cb4 <USBD_LL_Transmit>
 8005d72:	2000      	movs	r0, #0
 8005d74:	bd10      	pop	{r4, pc}
 8005d76:	bf00      	nop

08005d78 <USBD_CtlPrepareRx>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	460d      	mov	r5, r1
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	2203      	movs	r2, #3
 8005d80:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
 8005d84:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8005d88:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	462a      	mov	r2, r5
 8005d90:	f7fc ff98 	bl	8002cc4 <USBD_LL_PrepareReceive>
 8005d94:	2000      	movs	r0, #0
 8005d96:	bd38      	pop	{r3, r4, r5, pc}

08005d98 <USBD_CtlContinueRx>:
 8005d98:	b510      	push	{r4, lr}
 8005d9a:	460c      	mov	r4, r1
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	2100      	movs	r1, #0
 8005da0:	4622      	mov	r2, r4
 8005da2:	f7fc ff8f 	bl	8002cc4 <USBD_LL_PrepareReceive>
 8005da6:	2000      	movs	r0, #0
 8005da8:	bd10      	pop	{r4, pc}
 8005daa:	bf00      	nop

08005dac <USBD_CtlSendStatus>:
 8005dac:	b508      	push	{r3, lr}
 8005dae:	2304      	movs	r3, #4
 8005db0:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
 8005db4:	2100      	movs	r1, #0
 8005db6:	460a      	mov	r2, r1
 8005db8:	460b      	mov	r3, r1
 8005dba:	f7fc ff7b 	bl	8002cb4 <USBD_LL_Transmit>
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	bd08      	pop	{r3, pc}
 8005dc2:	bf00      	nop

08005dc4 <USBD_CtlReceiveStatus>:
 8005dc4:	b508      	push	{r3, lr}
 8005dc6:	2305      	movs	r3, #5
 8005dc8:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
 8005dcc:	2100      	movs	r1, #0
 8005dce:	460a      	mov	r2, r1
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	f7fc ff77 	bl	8002cc4 <USBD_LL_PrepareReceive>
 8005dd6:	2000      	movs	r0, #0
 8005dd8:	bd08      	pop	{r3, pc}
 8005dda:	bf00      	nop

08005ddc <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber (0..) */
)
{
 8005ddc:	b508      	push	{r3, lr}
	DSTATUS status = STA_NOINIT;
	switch (pdrv) {
 8005dde:	b910      	cbnz	r0, 8005de6 <disk_initialize+0xa>
		case ATA:	/* SD CARD */
			#if FATFS_USE_SDIO == 1
				status = TM_FATFS_SD_SDIO_disk_initialize();	/* SDIO communication */
			#elif FATFS_USE_SDIO == 0
				status = TM_FATFS_SD_disk_initialize();			/* SPI communication */
 8005de0:	f000 f926 	bl	8006030 <TM_FATFS_SD_disk_initialize>
			#endif
			break;
 8005de4:	bd08      	pop	{r3, pc}

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber (0..) */
)
{
	DSTATUS status = STA_NOINIT;
 8005de6:	2001      	movs	r0, #1
		default:
			status = STA_NOINIT;
	}
	
	return status;
}
 8005de8:	bd08      	pop	{r3, pc}
 8005dea:	bf00      	nop

08005dec <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0..) */
)
{
 8005dec:	b508      	push	{r3, lr}

	DSTATUS status = STA_NOINIT;
	
	switch (pdrv) {
 8005dee:	b910      	cbnz	r0, 8005df6 <disk_status+0xa>
		case ATA:	/* SD CARD */
			#if FATFS_USE_SDIO == 1
				status = TM_FATFS_SD_SDIO_disk_status();	/* SDIO communication */
			#elif FATFS_USE_SDIO == 0
				status = TM_FATFS_SD_disk_status();		/* SPI communication */
 8005df0:	f000 f9d8 	bl	80061a4 <TM_FATFS_SD_disk_status>
			#endif
			break;
 8005df4:	bd08      	pop	{r3, pc}
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0..) */
)
{

	DSTATUS status = STA_NOINIT;
 8005df6:	2001      	movs	r0, #1
		default:
			status = STA_NOINIT;
	}
	
	return status;
}
 8005df8:	bd08      	pop	{r3, pc}
 8005dfa:	bf00      	nop

08005dfc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005dfc:	b508      	push	{r3, lr}
	DRESULT status = RES_PARERR;
	switch (pdrv) {
 8005dfe:	b928      	cbnz	r0, 8005e0c <disk_read+0x10>
		case ATA:	/* SD CARD */
			#if FATFS_USE_SDIO == 1
				status = TM_FATFS_SD_SDIO_disk_read(buff, sector, count);	/* SDIO communication */
			#elif FATFS_USE_SDIO == 0
				status = TM_FATFS_SD_disk_read(buff, sector, count);		/* SPI communication */
 8005e00:	4608      	mov	r0, r1
 8005e02:	4611      	mov	r1, r2
 8005e04:	461a      	mov	r2, r3
 8005e06:	f000 f9d7 	bl	80061b8 <TM_FATFS_SD_disk_read>
			#endif
			break;
 8005e0a:	bd08      	pop	{r3, pc}
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
	DRESULT status = RES_PARERR;
 8005e0c:	2004      	movs	r0, #4
		default:
			status = RES_PARERR;
	}
	
	return status;
}
 8005e0e:	bd08      	pop	{r3, pc}

08005e10 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0..) */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005e10:	b510      	push	{r4, lr}
	DRESULT status = RES_PARERR;
	if (!count) {
 8005e12:	b133      	cbz	r3, 8005e22 <disk_write+0x12>
		return RES_PARERR;		/* Check parameter */
	}
	
	switch (pdrv) {
 8005e14:	b938      	cbnz	r0, 8005e26 <disk_write+0x16>
		case ATA:	/* SD CARD */
			#if FATFS_USE_SDIO == 1
				status = TM_FATFS_SD_SDIO_disk_write((BYTE *)buff, sector, count);	/* SDIO communication */
			#elif FATFS_USE_SDIO == 0
				status = TM_FATFS_SD_disk_write(buff, sector, count);				/* SPI communication */
 8005e16:	4608      	mov	r0, r1
 8005e18:	4611      	mov	r1, r2
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f000 fa0a 	bl	8006234 <TM_FATFS_SD_disk_write>
			#endif
			break;
 8005e20:	bd10      	pop	{r4, pc}
	UINT count			/* Number of sectors to write (1..128) */
)
{
	DRESULT status = RES_PARERR;
	if (!count) {
		return RES_PARERR;		/* Check parameter */
 8005e22:	2004      	movs	r0, #4
 8005e24:	bd10      	pop	{r4, pc}
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
	DRESULT status = RES_PARERR;
 8005e26:	2004      	movs	r0, #4
		default:
			status = RES_PARERR;
	}
	
	return status;
}
 8005e28:	bd10      	pop	{r4, pc}
 8005e2a:	bf00      	nop

08005e2c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005e2c:	b508      	push	{r3, lr}
	DRESULT status = RES_PARERR;
	switch (pdrv) {
 8005e2e:	b920      	cbnz	r0, 8005e3a <disk_ioctl+0xe>
		case ATA:	/* SD CARD */
			#if FATFS_USE_SDIO == 1
				status = TM_FATFS_SD_SDIO_disk_ioctl(cmd, buff);					/* SDIO communication */
			#elif FATFS_USE_SDIO == 0
				status = TM_FATFS_SD_disk_ioctl(cmd, buff);							/* SPI communication */
 8005e30:	4608      	mov	r0, r1
 8005e32:	4611      	mov	r1, r2
 8005e34:	f000 fa4e 	bl	80062d4 <TM_FATFS_SD_disk_ioctl>
			#endif
			break;
 8005e38:	bd08      	pop	{r3, pc}
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	DRESULT status = RES_PARERR;
 8005e3a:	2004      	movs	r0, #4
			break;
		default:
			status = RES_PARERR;
	}
	return status;
}
 8005e3c:	bd08      	pop	{r3, pc}
 8005e3e:	bf00      	nop

08005e40 <get_fattime>:
			| ((DWORD)7 << 21)				/* Month 7 */
			| ((DWORD)28 << 16)				/* Mday 28 */
			| ((DWORD)0 << 11)				/* Hour 0 */
			| ((DWORD)0 << 5)				/* Min 0 */
			| ((DWORD)0 >> 1);				/* Sec 0 */
}
 8005e40:	4800      	ldr	r0, [pc, #0]	; (8005e44 <get_fattime+0x4>)
 8005e42:	4770      	bx	lr
 8005e44:	42fc0000 	.word	0x42fc0000

08005e48 <xchg_spi>:

/* Exchange a byte */
static BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005e48:	b508      	push	{r3, lr}
	//FATFS_DEBUG_SEND_USART("xchg_spi: inside");
	return TM_SPI_Send(dat);
 8005e4a:	f7fc fce5 	bl	8002818 <TM_SPI_Send>
}
 8005e4e:	bd08      	pop	{r3, pc}

08005e50 <wait_ready>:
/*-----------------------------------------------------------------------*/

static int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005e50:	b570      	push	{r4, r5, r6, lr}
	BYTE d;

	uint32_t stop = SCHEDULER_time + wt _ms;
 8005e52:	4b0d      	ldr	r3, [pc, #52]	; (8005e88 <wait_ready+0x38>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8005e5a:	fb06 f000 	mul.w	r0, r6, r0
 8005e5e:	4a0b      	ldr	r2, [pc, #44]	; (8005e8c <wait_ready+0x3c>)
 8005e60:	fba2 1600 	umull	r1, r6, r2, r0
 8005e64:	eb03 1656 	add.w	r6, r3, r6, lsr #5


	//TM_DELAY_SetTime2(wt * 1000);
	do {
		d = xchg_spi(0xFF);
 8005e68:	24ff      	movs	r4, #255	; 0xff
	} while (d != 0xFF && stop > SCHEDULER_time);	/* Wait for card goes ready or timeout */
 8005e6a:	4d07      	ldr	r5, [pc, #28]	; (8005e88 <wait_ready+0x38>)
	uint32_t stop = SCHEDULER_time + wt _ms;


	//TM_DELAY_SetTime2(wt * 1000);
	do {
		d = xchg_spi(0xFF);
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f7ff ffeb 	bl	8005e48 <xchg_spi>
	} while (d != 0xFF && stop > SCHEDULER_time);	/* Wait for card goes ready or timeout */
 8005e72:	28ff      	cmp	r0, #255	; 0xff
 8005e74:	d002      	beq.n	8005e7c <wait_ready+0x2c>
 8005e76:	682b      	ldr	r3, [r5, #0]
 8005e78:	429e      	cmp	r6, r3
 8005e7a:	d8f7      	bhi.n	8005e6c <wait_ready+0x1c>
		FATFS_DEBUG_SEND_USART("wait_ready: OK");
	} else {
		FATFS_DEBUG_SEND_USART("wait_ready: timeout");
	}
	return (d == 0xFF) ? 1 : 0;
}
 8005e7c:	28ff      	cmp	r0, #255	; 0xff
 8005e7e:	bf14      	ite	ne
 8005e80:	2000      	movne	r0, #0
 8005e82:	2001      	moveq	r0, #1
 8005e84:	bd70      	pop	{r4, r5, r6, pc}
 8005e86:	bf00      	nop
 8005e88:	20000bd0 	.word	0x20000bd0
 8005e8c:	51eb851f 	.word	0x51eb851f

08005e90 <deselect>:
/*-----------------------------------------------------------------------*/
/* Deselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static void deselect (void)
{
 8005e90:	b508      	push	{r3, lr}
	FATFS_CS_HIGH;			/* CS = H */
 8005e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e96:	4b03      	ldr	r3, [pc, #12]	; (8005ea4 <deselect+0x14>)
 8005e98:	831a      	strh	r2, [r3, #24]
	xchg_spi(0xFF);			/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005e9a:	20ff      	movs	r0, #255	; 0xff
 8005e9c:	f7ff ffd4 	bl	8005e48 <xchg_spi>
 8005ea0:	bd08      	pop	{r3, pc}
 8005ea2:	bf00      	nop
 8005ea4:	40020c00 	.word	0x40020c00

08005ea8 <select>:
/*-----------------------------------------------------------------------*/
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static int select (void)	/* 1:OK, 0:Timeout */
{
 8005ea8:	b510      	push	{r4, lr}
	FATFS_CS_LOW;
 8005eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eae:	4b08      	ldr	r3, [pc, #32]	; (8005ed0 <select+0x28>)
 8005eb0:	835a      	strh	r2, [r3, #26]
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8005eb2:	20ff      	movs	r0, #255	; 0xff
 8005eb4:	f7ff ffc8 	bl	8005e48 <xchg_spi>

	if (wait_ready(500)) {
 8005eb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ebc:	f7ff ffc8 	bl	8005e50 <wait_ready>
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	b910      	cbnz	r0, 8005eca <select+0x22>
		FATFS_DEBUG_SEND_USART("select: OK");
		return 1;	/* OK */
	}
	FATFS_DEBUG_SEND_USART("select: no");
	deselect();
 8005ec4:	f7ff ffe4 	bl	8005e90 <deselect>
	return 0;	/* Timeout */
 8005ec8:	e000      	b.n	8005ecc <select+0x24>
	FATFS_CS_LOW;
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready(500)) {
		FATFS_DEBUG_SEND_USART("select: OK");
		return 1;	/* OK */
 8005eca:	2401      	movs	r4, #1
	}
	FATFS_DEBUG_SEND_USART("select: no");
	deselect();
	return 0;	/* Timeout */
}
 8005ecc:	4620      	mov	r0, r4
 8005ece:	bd10      	pop	{r4, pc}
 8005ed0:	40020c00 	.word	0x40020c00

08005ed4 <send_cmd>:

static BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	460d      	mov	r5, r1
	BYTE n, res;

	FATFS_DEBUG_SEND_USART("send_cmd: inside");
	
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8005eda:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005ede:	d007      	beq.n	8005ef0 <send_cmd+0x1c>
		FATFS_DEBUG_SEND_USART("send_cmd: 0x80 bit set");
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
 8005ee0:	2037      	movs	r0, #55	; 0x37
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	f7ff fff6 	bl	8005ed4 <send_cmd>
		if (res > 1) return res;
 8005ee8:	2801      	cmp	r0, #1
 8005eea:	d84e      	bhi.n	8005f8a <send_cmd+0xb6>

	FATFS_DEBUG_SEND_USART("send_cmd: inside");
	
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
		FATFS_DEBUG_SEND_USART("send_cmd: 0x80 bit set");
		cmd &= 0x7F;
 8005eec:	f004 047f 	and.w	r4, r4, #127	; 0x7f
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005ef0:	2c0c      	cmp	r4, #12
 8005ef2:	d030      	beq.n	8005f56 <send_cmd+0x82>
		FATFS_DEBUG_SEND_USART("send_cmd: cmd != CMD12");
		deselect();
 8005ef4:	f7ff ffcc 	bl	8005e90 <deselect>
		if (!select()) return 0xFF;
 8005ef8:	f7ff ffd6 	bl	8005ea8 <select>
 8005efc:	b348      	cbz	r0, 8005f52 <send_cmd+0x7e>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005efe:	f044 0040 	orr.w	r0, r4, #64	; 0x40
 8005f02:	f7ff ffa1 	bl	8005e48 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005f06:	0e28      	lsrs	r0, r5, #24
 8005f08:	f7ff ff9e 	bl	8005e48 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005f0c:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8005f10:	f7ff ff9a 	bl	8005e48 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8005f14:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8005f18:	f7ff ff96 	bl	8005e48 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8005f1c:	b2e8      	uxtb	r0, r5
 8005f1e:	f7ff ff93 	bl	8005e48 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005f22:	b374      	cbz	r4, 8005f82 <send_cmd+0xae>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8005f24:	2c08      	cmp	r4, #8
 8005f26:	d028      	beq.n	8005f7a <send_cmd+0xa6>
	xchg_spi(n);
 8005f28:	2001      	movs	r0, #1
 8005f2a:	f7ff ff8d 	bl	8005e48 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) {
 8005f2e:	2c0c      	cmp	r4, #12
 8005f30:	d102      	bne.n	8005f38 <send_cmd+0x64>
		FATFS_DEBUG_SEND_USART("send_cmd: CMD12, receive command resp");
		xchg_spi(0xFF);					/* Diacard following one byte when CMD12 */
 8005f32:	20ff      	movs	r0, #255	; 0xff
 8005f34:	f7ff ff88 	bl	8005e48 <xchg_spi>

static BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005f38:	240a      	movs	r4, #10
		FATFS_DEBUG_SEND_USART("send_cmd: CMD12, receive command resp");
		xchg_spi(0xFF);					/* Diacard following one byte when CMD12 */
	}
	n = 10;								/* Wait for response (10 bytes max) */
	do
		res = xchg_spi(0xFF);
 8005f3a:	25ff      	movs	r5, #255	; 0xff
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	f7ff ff83 	bl	8005e48 <xchg_spi>
	while ((res & 0x80) && --n);
 8005f42:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005f46:	d020      	beq.n	8005f8a <send_cmd+0xb6>
 8005f48:	1e63      	subs	r3, r4, #1
 8005f4a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8005f4e:	d1f5      	bne.n	8005f3c <send_cmd+0x68>
 8005f50:	bd38      	pop	{r3, r4, r5, pc}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		FATFS_DEBUG_SEND_USART("send_cmd: cmd != CMD12");
		deselect();
		if (!select()) return 0xFF;
 8005f52:	20ff      	movs	r0, #255	; 0xff
 8005f54:	bd38      	pop	{r3, r4, r5, pc}
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005f56:	204c      	movs	r0, #76	; 0x4c
 8005f58:	f7ff ff76 	bl	8005e48 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005f5c:	0e28      	lsrs	r0, r5, #24
 8005f5e:	f7ff ff73 	bl	8005e48 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005f62:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8005f66:	f7ff ff6f 	bl	8005e48 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8005f6a:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8005f6e:	f7ff ff6b 	bl	8005e48 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8005f72:	b2e8      	uxtb	r0, r5
 8005f74:	f7ff ff68 	bl	8005e48 <xchg_spi>
 8005f78:	e7d6      	b.n	8005f28 <send_cmd+0x54>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	xchg_spi(n);
 8005f7a:	2087      	movs	r0, #135	; 0x87
 8005f7c:	f7ff ff64 	bl	8005e48 <xchg_spi>
 8005f80:	e7da      	b.n	8005f38 <send_cmd+0x64>
 8005f82:	2095      	movs	r0, #149	; 0x95
 8005f84:	f7ff ff60 	bl	8005e48 <xchg_spi>
 8005f88:	e7d6      	b.n	8005f38 <send_cmd+0x64>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;							/* Return received response */
}
 8005f8a:	bd38      	pop	{r3, r4, r5, pc}

08005f8c <rcvr_datablock>:

static int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f90:	4680      	mov	r8, r0
 8005f92:	460f      	mov	r7, r1
	FATFS_DEBUG_SEND_USART("rcvr_datablock: inside");
	
	//Timer1 = 200;
	
	//TM_DELAY_SetTime2(200000);
	uint32_t timeout = SCHEDULER_time + 200 _ms;
 8005f94:	4b12      	ldr	r3, [pc, #72]	; (8005fe0 <rcvr_datablock+0x54>)
 8005f96:	681e      	ldr	r6, [r3, #0]
 8005f98:	f506 66fa 	add.w	r6, r6, #2000	; 0x7d0

	do {							// Wait for DataStart token in timeout of 200ms 
		token = xchg_spi(0xFF);
 8005f9c:	24ff      	movs	r4, #255	; 0xff
		// This loop will take a time. Insert rot_rdq() here for multitask envilonment. 
	} while ((token == 0xFF) && timeout > SCHEDULER_time);
 8005f9e:	461d      	mov	r5, r3
	
	//TM_DELAY_SetTime2(200000);
	uint32_t timeout = SCHEDULER_time + 200 _ms;

	do {							// Wait for DataStart token in timeout of 200ms 
		token = xchg_spi(0xFF);
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f7ff ff51 	bl	8005e48 <xchg_spi>
		// This loop will take a time. Insert rot_rdq() here for multitask envilonment. 
	} while ((token == 0xFF) && timeout > SCHEDULER_time);
 8005fa6:	28ff      	cmp	r0, #255	; 0xff
 8005fa8:	d103      	bne.n	8005fb2 <rcvr_datablock+0x26>
 8005faa:	682b      	ldr	r3, [r5, #0]
 8005fac:	429e      	cmp	r6, r3
 8005fae:	d8f7      	bhi.n	8005fa0 <rcvr_datablock+0x14>
 8005fb0:	e00f      	b.n	8005fd2 <rcvr_datablock+0x46>
	if (token != 0xFE) {
 8005fb2:	28fe      	cmp	r0, #254	; 0xfe
 8005fb4:	d110      	bne.n	8005fd8 <rcvr_datablock+0x4c>
	UINT btr		/* Number of bytes to receive (even number) */
)
{
	FATFS_DEBUG_SEND_USART("rcvr_spi_multi: inside");
	
	TM_SPI_ReadMulti(buff, 0xFF, btr);
 8005fb6:	4640      	mov	r0, r8
 8005fb8:	21ff      	movs	r1, #255	; 0xff
 8005fba:	b2ba      	uxth	r2, r7
 8005fbc:	f7fc fc50 	bl	8002860 <TM_SPI_ReadMulti>
		FATFS_DEBUG_SEND_USART("rcvr_datablock: token != 0xFE");
		return 0;		// Function fails if invalid DataStart token or timeout 
	}

	rcvr_spi_multi(buff, btr);		// Store trailing data to the buffer 
	xchg_spi(0xFF); xchg_spi(0xFF);			// Discard CRC 
 8005fc0:	20ff      	movs	r0, #255	; 0xff
 8005fc2:	f7ff ff41 	bl	8005e48 <xchg_spi>
 8005fc6:	20ff      	movs	r0, #255	; 0xff
 8005fc8:	f7ff ff3e 	bl	8005e48 <xchg_spi>
	FATFS_DEBUG_SEND_USART("rcvr_datablock: return = 1");
	return 1;						// Function succeeded 
 8005fcc:	2001      	movs	r0, #1
 8005fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		token = xchg_spi(0xFF);
		// This loop will take a time. Insert rot_rdq() here for multitask envilonment. 
	} while ((token == 0xFF) && timeout > SCHEDULER_time);
	if (token != 0xFE) {
		FATFS_DEBUG_SEND_USART("rcvr_datablock: token != 0xFE");
		return 0;		// Function fails if invalid DataStart token or timeout 
 8005fd2:	2000      	movs	r0, #0
 8005fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fd8:	2000      	movs	r0, #0

	rcvr_spi_multi(buff, btr);		// Store trailing data to the buffer 
	xchg_spi(0xFF); xchg_spi(0xFF);			// Discard CRC 
	FATFS_DEBUG_SEND_USART("rcvr_datablock: return = 1");
	return 1;						// Function succeeded 
}
 8005fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000bd0 	.word	0x20000bd0

08005fe4 <xmit_datablock>:
#if _USE_WRITE
static int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8005fe4:	b538      	push	{r3, r4, r5, lr}
 8005fe6:	4605      	mov	r5, r0
 8005fe8:	460c      	mov	r4, r1
	BYTE resp;
	
	FATFS_DEBUG_SEND_USART("xmit_datablock: inside");

	if (!wait_ready(500)) {
 8005fea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005fee:	f7ff ff2f 	bl	8005e50 <wait_ready>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	b1d0      	cbz	r0, 800602c <xmit_datablock+0x48>
		FATFS_DEBUG_SEND_USART("xmit_datablock: not ready");
		return 0;		/* Wait for card ready */
	}
	FATFS_DEBUG_SEND_USART("xmit_datablock: ready");

	xchg_spi(token);					/* Send token */
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f7ff ff26 	bl	8005e48 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005ffc:	2cfd      	cmp	r4, #253	; 0xfd
 8005ffe:	d014      	beq.n	800602a <xmit_datablock+0x46>
	UINT btx			/* Number of bytes to send (even number) */
)
{
	FATFS_DEBUG_SEND_USART("xmit_spi_multi: inside");
	
	TM_SPI_WriteMulti((uint8_t *)buff, btx);
 8006000:	4628      	mov	r0, r5
 8006002:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006006:	f7fc fc1d 	bl	8002844 <TM_SPI_WriteMulti>
	FATFS_DEBUG_SEND_USART("xmit_datablock: ready");

	xchg_spi(token);					/* Send token */
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
		xmit_spi_multi(buff, 512);		/* Data */
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800600a:	20ff      	movs	r0, #255	; 0xff
 800600c:	f7ff ff1c 	bl	8005e48 <xchg_spi>
 8006010:	20ff      	movs	r0, #255	; 0xff
 8006012:	f7ff ff19 	bl	8005e48 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006016:	20ff      	movs	r0, #255	; 0xff
 8006018:	f7ff ff16 	bl	8005e48 <xchg_spi>
		if ((resp & 0x1F) != 0x05)		/* Function fails if the data packet was not accepted */
 800601c:	f000 001f 	and.w	r0, r0, #31
 8006020:	2805      	cmp	r0, #5
 8006022:	bf14      	ite	ne
 8006024:	2300      	movne	r3, #0
 8006026:	2301      	moveq	r3, #1
 8006028:	e000      	b.n	800602c <xmit_datablock+0x48>
			return 0;
	}
	return 1;
 800602a:	2301      	movs	r3, #1
}
 800602c:	4618      	mov	r0, r3
 800602e:	bd38      	pop	{r3, r4, r5, pc}

08006030 <TM_FATFS_SD_disk_initialize>:
	return 1;
#endif	
}


DSTATUS TM_FATFS_SD_disk_initialize (void) {
 8006030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006034:	b082      	sub	sp, #8
static BYTE TM_FATFS_SD_CardType;			/* Card type flags */

/* Initialize MMC interface */
static void init_spi (void)
{
	__init_spi();
 8006036:	f7fc fb8f 	bl	8002758 <__init_spi>
	__init_sd_cmds();
 800603a:	f7fc fbd5 	bl	80027e8 <__init_sd_cmds>
	FATFS_CS_HIGH;
 800603e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006042:	4b54      	ldr	r3, [pc, #336]	; (8006194 <TM_FATFS_SD_disk_initialize+0x164>)
 8006044:	831a      	strh	r2, [r3, #24]
	
	//Delayms(10);
	delay_ms(10);
 8006046:	200a      	movs	r0, #10
 8006048:	f7fc fab6 	bl	80025b8 <delay_ms>
 800604c:	240a      	movs	r4, #10
	
	if (!TM_FATFS_Detect()) {
		return STA_NODISK;
	}
	for (n = 10; n; n--) {
		xchg_spi(0xFF);
 800604e:	25ff      	movs	r5, #255	; 0xff
 8006050:	4628      	mov	r0, r5
 8006052:	f7ff fef9 	bl	8005e48 <xchg_spi>
 8006056:	1e63      	subs	r3, r4, #1
	init_spi();
	
	if (!TM_FATFS_Detect()) {
		return STA_NODISK;
	}
	for (n = 10; n; n--) {
 8006058:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800605c:	d1f8      	bne.n	8006050 <TM_FATFS_SD_disk_initialize+0x20>
		xchg_spi(0xFF);
	}
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {				/* Put the card SPI/Idle state */
 800605e:	2000      	movs	r0, #0
 8006060:	4601      	mov	r1, r0
 8006062:	f7ff ff37 	bl	8005ed4 <send_cmd>
 8006066:	2801      	cmp	r0, #1
 8006068:	f040 808b 	bne.w	8006182 <TM_FATFS_SD_disk_initialize+0x152>
		FATFS_DEBUG_SEND_USART("disk_initialize: CMD0 = 1");
		//Timer1 = 1000;						/* Initialization timeout = 1 sec */
		//TM_DELAY_SetTime2(1000000);
		uint32_t timeout = SCHEDULER_time + 1 _s;
 800606c:	4b4a      	ldr	r3, [pc, #296]	; (8006198 <TM_FATFS_SD_disk_initialize+0x168>)
 800606e:	681c      	ldr	r4, [r3, #0]
 8006070:	f504 541c 	add.w	r4, r4, #9984	; 0x2700
 8006074:	3410      	adds	r4, #16
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006076:	2008      	movs	r0, #8
 8006078:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800607c:	f7ff ff2a 	bl	8005ed4 <send_cmd>
 8006080:	2801      	cmp	r0, #1
 8006082:	d144      	bne.n	800610e <TM_FATFS_SD_disk_initialize+0xde>
 8006084:	f10d 0607 	add.w	r6, sp, #7
 8006088:	f10d 0503 	add.w	r5, sp, #3
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800608c:	27ff      	movs	r7, #255	; 0xff
 800608e:	4638      	mov	r0, r7
 8006090:	f7ff feda 	bl	8005e48 <xchg_spi>
 8006094:	f805 0f01 	strb.w	r0, [r5, #1]!
 8006098:	42b5      	cmp	r5, r6
 800609a:	d1f8      	bne.n	800608e <TM_FATFS_SD_disk_initialize+0x5e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800609c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d16e      	bne.n	8006182 <TM_FATFS_SD_disk_initialize+0x152>
 80060a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80060a8:	2baa      	cmp	r3, #170	; 0xaa
 80060aa:	d16a      	bne.n	8006182 <TM_FATFS_SD_disk_initialize+0x152>
				while (timeout > SCHEDULER_time && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80060ac:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8006198 <TM_FATFS_SD_disk_initialize+0x168>
 80060b0:	27a9      	movs	r7, #169	; 0xa9
 80060b2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80060b6:	f8d8 3000 	ldr.w	r3, [r8]
 80060ba:	429c      	cmp	r4, r3
 80060bc:	d905      	bls.n	80060ca <TM_FATFS_SD_disk_initialize+0x9a>
 80060be:	4638      	mov	r0, r7
 80060c0:	4629      	mov	r1, r5
 80060c2:	f7ff ff07 	bl	8005ed4 <send_cmd>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d1f5      	bne.n	80060b6 <TM_FATFS_SD_disk_initialize+0x86>
				if (timeout > SCHEDULER_time && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80060ca:	4b33      	ldr	r3, [pc, #204]	; (8006198 <TM_FATFS_SD_disk_initialize+0x168>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	429c      	cmp	r4, r3
 80060d0:	d957      	bls.n	8006182 <TM_FATFS_SD_disk_initialize+0x152>
 80060d2:	203a      	movs	r0, #58	; 0x3a
 80060d4:	2100      	movs	r1, #0
 80060d6:	f7ff fefd 	bl	8005ed4 <send_cmd>
 80060da:	2800      	cmp	r0, #0
 80060dc:	d151      	bne.n	8006182 <TM_FATFS_SD_disk_initialize+0x152>
 80060de:	f10d 0403 	add.w	r4, sp, #3
					for (n = 0; n < 4; n++) {
						ocr[n] = xchg_spi(0xFF);
 80060e2:	25ff      	movs	r5, #255	; 0xff
 80060e4:	4628      	mov	r0, r5
 80060e6:	f7ff feaf 	bl	8005e48 <xchg_spi>
 80060ea:	f804 0f01 	strb.w	r0, [r4, #1]!
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
				while (timeout > SCHEDULER_time && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
				if (timeout > SCHEDULER_time && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) {
 80060ee:	42b4      	cmp	r4, r6
 80060f0:	d1f8      	bne.n	80060e4 <TM_FATFS_SD_disk_initialize+0xb4>
						ocr[n] = xchg_spi(0xFF);
					}
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80060f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80060f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	bf14      	ite	ne
 8006100:	220c      	movne	r2, #12
 8006102:	2204      	moveq	r2, #4
			if (timeout > SCHEDULER_time || send_cmd(CMD16, 512) != 0) {	/* Set block length: 512 */
				ty = 0;
			}
		}
	}
	TM_FATFS_SD_CardType = ty;	/* Card type */
 8006104:	4b25      	ldr	r3, [pc, #148]	; (800619c <TM_FATFS_SD_disk_initialize+0x16c>)
 8006106:	701a      	strb	r2, [r3, #0]
	FATFS_DEBUG_SEND_USART("disk_initialize: deselecting");
	deselect();
 8006108:	f7ff fec2 	bl	8005e90 <deselect>
 800610c:	e028      	b.n	8006160 <TM_FATFS_SD_disk_initialize+0x130>
					}
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800610e:	20a9      	movs	r0, #169	; 0xa9
 8006110:	2100      	movs	r1, #0
 8006112:	f7ff fedf 	bl	8005ed4 <send_cmd>
 8006116:	2801      	cmp	r0, #1
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006118:	bf99      	ittee	ls
 800611a:	f04f 0802 	movls.w	r8, #2
 800611e:	27a9      	movls	r7, #169	; 0xa9
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006120:	f04f 0801 	movhi.w	r8, #1
 8006124:	4647      	movhi	r7, r8
			}
			while (timeout > SCHEDULER_time && send_cmd(cmd, 0));			/* Wait for end of initialization */
 8006126:	4d1c      	ldr	r5, [pc, #112]	; (8006198 <TM_FATFS_SD_disk_initialize+0x168>)
 8006128:	2600      	movs	r6, #0
 800612a:	682b      	ldr	r3, [r5, #0]
 800612c:	429c      	cmp	r4, r3
 800612e:	d905      	bls.n	800613c <TM_FATFS_SD_disk_initialize+0x10c>
 8006130:	4638      	mov	r0, r7
 8006132:	4631      	mov	r1, r6
 8006134:	f7ff fece 	bl	8005ed4 <send_cmd>
 8006138:	2800      	cmp	r0, #0
 800613a:	d1f6      	bne.n	800612a <TM_FATFS_SD_disk_initialize+0xfa>
			if (timeout > SCHEDULER_time || send_cmd(CMD16, 512) != 0) {	/* Set block length: 512 */
 800613c:	4b16      	ldr	r3, [pc, #88]	; (8006198 <TM_FATFS_SD_disk_initialize+0x168>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	429c      	cmp	r4, r3
 8006142:	d81e      	bhi.n	8006182 <TM_FATFS_SD_disk_initialize+0x152>
 8006144:	2010      	movs	r0, #16
 8006146:	f44f 7100 	mov.w	r1, #512	; 0x200
 800614a:	f7ff fec3 	bl	8005ed4 <send_cmd>
 800614e:	b9c0      	cbnz	r0, 8006182 <TM_FATFS_SD_disk_initialize+0x152>
				ty = 0;
			}
		}
	}
	TM_FATFS_SD_CardType = ty;	/* Card type */
 8006150:	4b12      	ldr	r3, [pc, #72]	; (800619c <TM_FATFS_SD_disk_initialize+0x16c>)
 8006152:	f883 8000 	strb.w	r8, [r3]
	FATFS_DEBUG_SEND_USART("disk_initialize: deselecting");
	deselect();
 8006156:	f7ff fe9b 	bl	8005e90 <deselect>

	if (ty) {			/* OK */
 800615a:	f1b8 0f00 	cmp.w	r8, #0
 800615e:	d005      	beq.n	800616c <TM_FATFS_SD_disk_initialize+0x13c>
		TM_FATFS_SD_Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006160:	4b0f      	ldr	r3, [pc, #60]	; (80061a0 <TM_FATFS_SD_disk_initialize+0x170>)
 8006162:	781a      	ldrb	r2, [r3, #0]
 8006164:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006168:	701a      	strb	r2, [r3, #0]
 800616a:	e002      	b.n	8006172 <TM_FATFS_SD_disk_initialize+0x142>
	} else {			/* Failed */
		TM_FATFS_SD_Stat = STA_NOINIT;
 800616c:	2201      	movs	r2, #1
 800616e:	4b0c      	ldr	r3, [pc, #48]	; (80061a0 <TM_FATFS_SD_disk_initialize+0x170>)
 8006170:	701a      	strb	r2, [r3, #0]
	}

	if (!TM_FATFS_WriteEnabled()) {
		TM_FATFS_SD_Stat |= STA_PROTECT;
	} else {
		TM_FATFS_SD_Stat &= ~STA_PROTECT;
 8006172:	4b0b      	ldr	r3, [pc, #44]	; (80061a0 <TM_FATFS_SD_disk_initialize+0x170>)
 8006174:	781a      	ldrb	r2, [r3, #0]
 8006176:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800617a:	701a      	strb	r2, [r3, #0]
	}
	
	return TM_FATFS_SD_Stat;
 800617c:	7818      	ldrb	r0, [r3, #0]
 800617e:	b2c0      	uxtb	r0, r0
 8006180:	e005      	b.n	800618e <TM_FATFS_SD_disk_initialize+0x15e>
			if (timeout > SCHEDULER_time || send_cmd(CMD16, 512) != 0) {	/* Set block length: 512 */
				ty = 0;
			}
		}
	}
	TM_FATFS_SD_CardType = ty;	/* Card type */
 8006182:	2200      	movs	r2, #0
 8006184:	4b05      	ldr	r3, [pc, #20]	; (800619c <TM_FATFS_SD_disk_initialize+0x16c>)
 8006186:	701a      	strb	r2, [r3, #0]
	FATFS_DEBUG_SEND_USART("disk_initialize: deselecting");
	deselect();
 8006188:	f7ff fe82 	bl	8005e90 <deselect>
 800618c:	e7ee      	b.n	800616c <TM_FATFS_SD_disk_initialize+0x13c>
	} else {
		TM_FATFS_SD_Stat &= ~STA_PROTECT;
	}
	
	return TM_FATFS_SD_Stat;
}
 800618e:	b002      	add	sp, #8
 8006190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006194:	40020c00 	.word	0x40020c00
 8006198:	20000bd0 	.word	0x20000bd0
 800619c:	20000bd9 	.word	0x20000bd9
 80061a0:	2000017c 	.word	0x2000017c

080061a4 <TM_FATFS_SD_disk_status>:
	}
	
	if (!TM_FATFS_WriteEnabled()) {
		TM_FATFS_SD_Stat |= STA_PROTECT;
	} else {
		TM_FATFS_SD_Stat &= ~STA_PROTECT;
 80061a4:	4b03      	ldr	r3, [pc, #12]	; (80061b4 <TM_FATFS_SD_disk_status+0x10>)
 80061a6:	781a      	ldrb	r2, [r3, #0]
 80061a8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 80061ac:	701a      	strb	r2, [r3, #0]
	}
	
	return TM_FATFS_SD_Stat;	/* Return disk status */
 80061ae:	7818      	ldrb	r0, [r3, #0]
}
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	2000017c 	.word	0x2000017c

080061b8 <TM_FATFS_SD_disk_read>:
DRESULT TM_FATFS_SD_disk_read (
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	4605      	mov	r5, r0
 80061bc:	4614      	mov	r4, r2
	FATFS_DEBUG_SEND_USART("disk_read: inside");
	if (!TM_FATFS_Detect() || (TM_FATFS_SD_Stat & STA_NOINIT)) {
 80061be:	4b1b      	ldr	r3, [pc, #108]	; (800622c <TM_FATFS_SD_disk_read+0x74>)
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	f013 0f01 	tst.w	r3, #1
 80061c6:	d12e      	bne.n	8006226 <TM_FATFS_SD_disk_read+0x6e>
		return RES_NOTRDY;
	}

	if (!(TM_FATFS_SD_CardType & CT_BLOCK)) {
 80061c8:	4b19      	ldr	r3, [pc, #100]	; (8006230 <TM_FATFS_SD_disk_read+0x78>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	f013 0f08 	tst.w	r3, #8
		sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80061d0:	bf08      	it	eq
 80061d2:	0249      	lsleq	r1, r1, #9
	}

	if (count == 1) {	/* Single sector read */
 80061d4:	2a01      	cmp	r2, #1
 80061d6:	d10d      	bne.n	80061f4 <TM_FATFS_SD_disk_read+0x3c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80061d8:	2011      	movs	r0, #17
 80061da:	f7ff fe7b 	bl	8005ed4 <send_cmd>
 80061de:	b9e0      	cbnz	r0, 800621a <TM_FATFS_SD_disk_read+0x62>
			&& rcvr_datablock(buff, 512))
 80061e0:	4628      	mov	r0, r5
 80061e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061e6:	f7ff fed1 	bl	8005f8c <rcvr_datablock>
 80061ea:	f1d0 0401 	rsbs	r4, r0, #1
 80061ee:	bf38      	it	cc
 80061f0:	2400      	movcc	r4, #0
 80061f2:	e012      	b.n	800621a <TM_FATFS_SD_disk_read+0x62>
			count = 0;
	} else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80061f4:	2012      	movs	r0, #18
 80061f6:	f7ff fe6d 	bl	8005ed4 <send_cmd>
 80061fa:	b970      	cbnz	r0, 800621a <TM_FATFS_SD_disk_read+0x62>
			do {
				if (!rcvr_datablock(buff, 512)) {
 80061fc:	f44f 7600 	mov.w	r6, #512	; 0x200
 8006200:	4628      	mov	r0, r5
 8006202:	4631      	mov	r1, r6
 8006204:	f7ff fec2 	bl	8005f8c <rcvr_datablock>
 8006208:	b118      	cbz	r0, 8006212 <TM_FATFS_SD_disk_read+0x5a>
					break;
				}
				buff += 512;
 800620a:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 800620e:	3c01      	subs	r4, #1
 8006210:	d1f6      	bne.n	8006200 <TM_FATFS_SD_disk_read+0x48>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006212:	200c      	movs	r0, #12
 8006214:	2100      	movs	r1, #0
 8006216:	f7ff fe5d 	bl	8005ed4 <send_cmd>
		}
	}
	deselect();
 800621a:	f7ff fe39 	bl	8005e90 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800621e:	1c20      	adds	r0, r4, #0
 8006220:	bf18      	it	ne
 8006222:	2001      	movne	r0, #1
 8006224:	bd70      	pop	{r4, r5, r6, pc}
	UINT count		/* Number of sectors to read (1..128) */
)
{
	FATFS_DEBUG_SEND_USART("disk_read: inside");
	if (!TM_FATFS_Detect() || (TM_FATFS_SD_Stat & STA_NOINIT)) {
		return RES_NOTRDY;
 8006226:	2003      	movs	r0, #3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;	/* Return result */
}
 8006228:	bd70      	pop	{r4, r5, r6, pc}
 800622a:	bf00      	nop
 800622c:	2000017c 	.word	0x2000017c
 8006230:	20000bd9 	.word	0x20000bd9

08006234 <TM_FATFS_SD_disk_write>:
DRESULT TM_FATFS_SD_disk_write (
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006234:	b570      	push	{r4, r5, r6, lr}
 8006236:	4605      	mov	r5, r0
 8006238:	460e      	mov	r6, r1
 800623a:	4614      	mov	r4, r2
	}
	if (!TM_FATFS_WriteEnabled()) {
		FATFS_DEBUG_SEND_USART("disk_write: Write protected!!! \n---------------------------------------------");
		return RES_WRPRT;
	}
	if (TM_FATFS_SD_Stat & STA_NOINIT) {
 800623c:	4b23      	ldr	r3, [pc, #140]	; (80062cc <TM_FATFS_SD_disk_write+0x98>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	f013 0f01 	tst.w	r3, #1
 8006244:	d13d      	bne.n	80062c2 <TM_FATFS_SD_disk_write+0x8e>
		return RES_NOTRDY;	/* Check drive status */
	}
	if (TM_FATFS_SD_Stat & STA_PROTECT) {
 8006246:	4b21      	ldr	r3, [pc, #132]	; (80062cc <TM_FATFS_SD_disk_write+0x98>)
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	f013 0f04 	tst.w	r3, #4
 800624e:	d13a      	bne.n	80062c6 <TM_FATFS_SD_disk_write+0x92>
		return RES_WRPRT;	/* Check write protect */
	}

	if (!(TM_FATFS_SD_CardType & CT_BLOCK)) {
 8006250:	4b1f      	ldr	r3, [pc, #124]	; (80062d0 <TM_FATFS_SD_disk_write+0x9c>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	f013 0f08 	tst.w	r3, #8
		sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006258:	bf08      	it	eq
 800625a:	024e      	lsleq	r6, r1, #9
	}

	if (count == 1) {	/* Single sector write */
 800625c:	2a01      	cmp	r2, #1
 800625e:	d10d      	bne.n	800627c <TM_FATFS_SD_disk_write+0x48>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006260:	2018      	movs	r0, #24
 8006262:	4631      	mov	r1, r6
 8006264:	f7ff fe36 	bl	8005ed4 <send_cmd>
 8006268:	bb28      	cbnz	r0, 80062b6 <TM_FATFS_SD_disk_write+0x82>
			&& xmit_datablock(buff, 0xFE))
 800626a:	4628      	mov	r0, r5
 800626c:	21fe      	movs	r1, #254	; 0xfe
 800626e:	f7ff feb9 	bl	8005fe4 <xmit_datablock>
 8006272:	f1d0 0401 	rsbs	r4, r0, #1
 8006276:	bf38      	it	cc
 8006278:	2400      	movcc	r4, #0
 800627a:	e01c      	b.n	80062b6 <TM_FATFS_SD_disk_write+0x82>
			count = 0;
	} else {				/* Multiple sector write */
		if (TM_FATFS_SD_CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800627c:	f013 0f06 	tst.w	r3, #6
 8006280:	d003      	beq.n	800628a <TM_FATFS_SD_disk_write+0x56>
 8006282:	2097      	movs	r0, #151	; 0x97
 8006284:	4611      	mov	r1, r2
 8006286:	f7ff fe25 	bl	8005ed4 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800628a:	2019      	movs	r0, #25
 800628c:	4631      	mov	r1, r6
 800628e:	f7ff fe21 	bl	8005ed4 <send_cmd>
 8006292:	b980      	cbnz	r0, 80062b6 <TM_FATFS_SD_disk_write+0x82>
			do {
				if (!xmit_datablock(buff, 0xFC)) {
 8006294:	26fc      	movs	r6, #252	; 0xfc
 8006296:	4628      	mov	r0, r5
 8006298:	4631      	mov	r1, r6
 800629a:	f7ff fea3 	bl	8005fe4 <xmit_datablock>
 800629e:	b118      	cbz	r0, 80062a8 <TM_FATFS_SD_disk_write+0x74>
					break;
				}
				buff += 512;
 80062a0:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 80062a4:	3c01      	subs	r4, #1
 80062a6:	d1f6      	bne.n	8006296 <TM_FATFS_SD_disk_write+0x62>
			if (!xmit_datablock(0, 0xFD)) {	/* STOP_TRAN token */
 80062a8:	2000      	movs	r0, #0
 80062aa:	21fd      	movs	r1, #253	; 0xfd
 80062ac:	f7ff fe9a 	bl	8005fe4 <xmit_datablock>
 80062b0:	2800      	cmp	r0, #0
				count = 1;
 80062b2:	bf08      	it	eq
 80062b4:	2401      	moveq	r4, #1
			}
		}
	}
	deselect();
 80062b6:	f7ff fdeb 	bl	8005e90 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80062ba:	1c20      	adds	r0, r4, #0
 80062bc:	bf18      	it	ne
 80062be:	2001      	movne	r0, #1
 80062c0:	bd70      	pop	{r4, r5, r6, pc}
	if (!TM_FATFS_WriteEnabled()) {
		FATFS_DEBUG_SEND_USART("disk_write: Write protected!!! \n---------------------------------------------");
		return RES_WRPRT;
	}
	if (TM_FATFS_SD_Stat & STA_NOINIT) {
		return RES_NOTRDY;	/* Check drive status */
 80062c2:	2003      	movs	r0, #3
 80062c4:	bd70      	pop	{r4, r5, r6, pc}
	}
	if (TM_FATFS_SD_Stat & STA_PROTECT) {
		return RES_WRPRT;	/* Check write protect */
 80062c6:	2002      	movs	r0, #2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;	/* Return result */
}
 80062c8:	bd70      	pop	{r4, r5, r6, pc}
 80062ca:	bf00      	nop
 80062cc:	2000017c 	.word	0x2000017c
 80062d0:	20000bd9 	.word	0x20000bd9

080062d4 <TM_FATFS_SD_disk_ioctl>:
#if _USE_IOCTL
DRESULT TM_FATFS_SD_disk_ioctl (
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80062d4:	b570      	push	{r4, r5, r6, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	460c      	mov	r4, r1
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;

	if (TM_FATFS_SD_Stat & STA_NOINIT) {
 80062da:	4b87      	ldr	r3, [pc, #540]	; (80064f8 <TM_FATFS_SD_disk_ioctl+0x224>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	f013 0f01 	tst.w	r3, #1
 80062e2:	f040 8105 	bne.w	80064f0 <TM_FATFS_SD_disk_ioctl+0x21c>
		return RES_NOTRDY;
	}

	res = RES_ERROR;

	switch (cmd) {
 80062e6:	2804      	cmp	r0, #4
 80062e8:	f200 80e5 	bhi.w	80064b6 <TM_FATFS_SD_disk_ioctl+0x1e2>
 80062ec:	e8df f010 	tbh	[pc, r0, lsl #1]
 80062f0:	000c0005 	.word	0x000c0005
 80062f4:	005200e3 	.word	0x005200e3
 80062f8:	00af      	.short	0x00af
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (select()) res = RES_OK;
 80062fa:	f7ff fdd5 	bl	8005ea8 <select>
 80062fe:	f1d0 0401 	rsbs	r4, r0, #1
 8006302:	bf38      	it	cc
 8006304:	2400      	movcc	r4, #0
 8006306:	e0ef      	b.n	80064e8 <TM_FATFS_SD_disk_ioctl+0x214>
		break;

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006308:	2009      	movs	r0, #9
 800630a:	2100      	movs	r1, #0
 800630c:	f7ff fde2 	bl	8005ed4 <send_cmd>
 8006310:	2800      	cmp	r0, #0
 8006312:	f040 80d2 	bne.w	80064ba <TM_FATFS_SD_disk_ioctl+0x1e6>
 8006316:	4668      	mov	r0, sp
 8006318:	2110      	movs	r1, #16
 800631a:	f7ff fe37 	bl	8005f8c <rcvr_datablock>
 800631e:	2800      	cmp	r0, #0
 8006320:	f000 80cd 	beq.w	80064be <TM_FATFS_SD_disk_ioctl+0x1ea>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006324:	f89d 3000 	ldrb.w	r3, [sp]
 8006328:	099b      	lsrs	r3, r3, #6
 800632a:	2b01      	cmp	r3, #1
 800632c:	d110      	bne.n	8006350 <TM_FATFS_SD_disk_ioctl+0x7c>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800632e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006332:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006336:	0412      	lsls	r2, r2, #16
 8006338:	3201      	adds	r2, #1
 800633a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800633e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8006342:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8006346:	4413      	add	r3, r2
				*(DWORD*)buff = csize << 10;
 8006348:	029b      	lsls	r3, r3, #10
 800634a:	6023      	str	r3, [r4, #0]
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
 800634c:	2400      	movs	r4, #0
 800634e:	e0cb      	b.n	80064e8 <TM_FATFS_SD_disk_ioctl+0x214>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006350:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8006354:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	eb03 1392 	add.w	r3, r3, r2, lsr #6
 800635e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8006362:	f002 0203 	and.w	r2, r2, #3
 8006366:	eb03 2282 	add.w	r2, r3, r2, lsl #10
 800636a:	3201      	adds	r2, #1
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800636c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006370:	f003 030f 	and.w	r3, r3, #15
 8006374:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8006378:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 800637c:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8006380:	f001 0103 	and.w	r1, r1, #3
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
 8006384:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8006388:	3b07      	subs	r3, #7
 800638a:	fa02 f303 	lsl.w	r3, r2, r3
 800638e:	6023      	str	r3, [r4, #0]
			}
			res = RES_OK;
 8006390:	2400      	movs	r4, #0
 8006392:	e0a9      	b.n	80064e8 <TM_FATFS_SD_disk_ioctl+0x214>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (TM_FATFS_SD_CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006394:	4b59      	ldr	r3, [pc, #356]	; (80064fc <TM_FATFS_SD_disk_ioctl+0x228>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	f013 0f04 	tst.w	r3, #4
 800639c:	d022      	beq.n	80063e4 <TM_FATFS_SD_disk_ioctl+0x110>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800639e:	208d      	movs	r0, #141	; 0x8d
 80063a0:	2100      	movs	r1, #0
 80063a2:	f7ff fd97 	bl	8005ed4 <send_cmd>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	f040 808b 	bne.w	80064c2 <TM_FATFS_SD_disk_ioctl+0x1ee>
				xchg_spi(0xFF);
 80063ac:	20ff      	movs	r0, #255	; 0xff
 80063ae:	f7ff fd4b 	bl	8005e48 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80063b2:	4668      	mov	r0, sp
 80063b4:	2110      	movs	r1, #16
 80063b6:	f7ff fde9 	bl	8005f8c <rcvr_datablock>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	f000 8083 	beq.w	80064c6 <TM_FATFS_SD_disk_ioctl+0x1f2>
 80063c0:	2530      	movs	r5, #48	; 0x30
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80063c2:	26ff      	movs	r6, #255	; 0xff
 80063c4:	4630      	mov	r0, r6
 80063c6:	f7ff fd3f 	bl	8005e48 <xchg_spi>
 80063ca:	1e6b      	subs	r3, r5, #1
 80063cc:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 80063d0:	d1f8      	bne.n	80063c4 <TM_FATFS_SD_disk_ioctl+0xf0>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80063d2:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80063d6:	091b      	lsrs	r3, r3, #4
 80063d8:	2210      	movs	r2, #16
 80063da:	fa02 f303 	lsl.w	r3, r2, r3
 80063de:	6023      	str	r3, [r4, #0]
					res = RES_OK;
 80063e0:	2400      	movs	r4, #0
 80063e2:	e081      	b.n	80064e8 <TM_FATFS_SD_disk_ioctl+0x214>
				}
			}
		} else {					/* SDC ver 1.XX or MMC */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80063e4:	2009      	movs	r0, #9
 80063e6:	2100      	movs	r1, #0
 80063e8:	f7ff fd74 	bl	8005ed4 <send_cmd>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d16c      	bne.n	80064ca <TM_FATFS_SD_disk_ioctl+0x1f6>
 80063f0:	4668      	mov	r0, sp
 80063f2:	2110      	movs	r1, #16
 80063f4:	f7ff fdca 	bl	8005f8c <rcvr_datablock>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	d068      	beq.n	80064ce <TM_FATFS_SD_disk_ioctl+0x1fa>
				if (TM_FATFS_SD_CardType & CT_SD1) {	/* SDC ver 1.XX */
 80063fc:	4b3f      	ldr	r3, [pc, #252]	; (80064fc <TM_FATFS_SD_disk_ioctl+0x228>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	f013 0f02 	tst.w	r3, #2
 8006404:	d012      	beq.n	800642c <TM_FATFS_SD_disk_ioctl+0x158>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006406:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800640a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800640e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8006412:	09db      	lsrs	r3, r3, #7
 8006414:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8006418:	3201      	adds	r2, #1
 800641a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800641e:	099b      	lsrs	r3, r3, #6
 8006420:	3b01      	subs	r3, #1
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	6023      	str	r3, [r4, #0]
				} else {					/* MMC */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
 8006428:	2400      	movs	r4, #0
 800642a:	e05d      	b.n	80064e8 <TM_FATFS_SD_disk_ioctl+0x214>
		} else {					/* SDC ver 1.XX or MMC */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (TM_FATFS_SD_CardType & CT_SD1) {	/* SDC ver 1.XX */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMC */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800642c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8006430:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8006434:	f3c2 0284 	ubfx	r2, r2, #2, #5
 8006438:	f003 0103 	and.w	r1, r3, #3
 800643c:	095b      	lsrs	r3, r3, #5
 800643e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006442:	3301      	adds	r3, #1
 8006444:	fb02 3303 	mla	r3, r2, r3, r3
 8006448:	6023      	str	r3, [r4, #0]
				}
				res = RES_OK;
 800644a:	2400      	movs	r4, #0
 800644c:	e04c      	b.n	80064e8 <TM_FATFS_SD_disk_ioctl+0x214>
			}
		}
		break;

	case CTRL_ERASE_SECTOR :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(TM_FATFS_SD_CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800644e:	4b2b      	ldr	r3, [pc, #172]	; (80064fc <TM_FATFS_SD_disk_ioctl+0x228>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	f013 0f06 	tst.w	r3, #6
 8006456:	d03c      	beq.n	80064d2 <TM_FATFS_SD_disk_ioctl+0x1fe>
		if (TM_FATFS_SD_disk_ioctl(MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006458:	200b      	movs	r0, #11
 800645a:	4669      	mov	r1, sp
 800645c:	f7ff ff3a 	bl	80062d4 <TM_FATFS_SD_disk_ioctl>
 8006460:	2800      	cmp	r0, #0
 8006462:	d138      	bne.n	80064d6 <TM_FATFS_SD_disk_ioctl+0x202>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006464:	f89d 3000 	ldrb.w	r3, [sp]
 8006468:	099b      	lsrs	r3, r3, #6
 800646a:	d104      	bne.n	8006476 <TM_FATFS_SD_disk_ioctl+0x1a2>
 800646c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8006470:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006474:	d031      	beq.n	80064da <TM_FATFS_SD_disk_ioctl+0x206>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006476:	6821      	ldr	r1, [r4, #0]
 8006478:	6864      	ldr	r4, [r4, #4]
		if (!(TM_FATFS_SD_CardType & CT_BLOCK)) {
 800647a:	4b20      	ldr	r3, [pc, #128]	; (80064fc <TM_FATFS_SD_disk_ioctl+0x228>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	f013 0f08 	tst.w	r3, #8
			st *= 512; ed *= 512;
 8006482:	bf04      	itt	eq
 8006484:	0249      	lsleq	r1, r1, #9
 8006486:	0264      	lsleq	r4, r4, #9
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000))	/* Erase sector block */
 8006488:	2020      	movs	r0, #32
 800648a:	f7ff fd23 	bl	8005ed4 <send_cmd>
 800648e:	bb30      	cbnz	r0, 80064de <TM_FATFS_SD_disk_ioctl+0x20a>
 8006490:	2021      	movs	r0, #33	; 0x21
 8006492:	4621      	mov	r1, r4
 8006494:	f7ff fd1e 	bl	8005ed4 <send_cmd>
 8006498:	bb18      	cbnz	r0, 80064e2 <TM_FATFS_SD_disk_ioctl+0x20e>
 800649a:	2026      	movs	r0, #38	; 0x26
 800649c:	2100      	movs	r1, #0
 800649e:	f7ff fd19 	bl	8005ed4 <send_cmd>
 80064a2:	bb00      	cbnz	r0, 80064e6 <TM_FATFS_SD_disk_ioctl+0x212>
 80064a4:	f247 5030 	movw	r0, #30000	; 0x7530
 80064a8:	f7ff fcd2 	bl	8005e50 <wait_ready>

	res = RES_ERROR;

	switch (cmd) {
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (select()) res = RES_OK;
 80064ac:	f1d0 0401 	rsbs	r4, r0, #1
 80064b0:	bf38      	it	cc
 80064b2:	2400      	movcc	r4, #0
 80064b4:	e018      	b.n	80064e8 <TM_FATFS_SD_disk_ioctl+0x214>
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000))	/* Erase sector block */
			res = RES_OK;	/* FatFs does not check result of this command */
		break;

	default:
		res = RES_PARERR;
 80064b6:	2404      	movs	r4, #4
 80064b8:	e016      	b.n	80064e8 <TM_FATFS_SD_disk_ioctl+0x214>
	}
	if (!TM_FATFS_Detect()) {
		return RES_NOTRDY;
	}

	res = RES_ERROR;
 80064ba:	2401      	movs	r4, #1
 80064bc:	e014      	b.n	80064e8 <TM_FATFS_SD_disk_ioctl+0x214>
 80064be:	2401      	movs	r4, #1
 80064c0:	e012      	b.n	80064e8 <TM_FATFS_SD_disk_ioctl+0x214>
 80064c2:	2401      	movs	r4, #1
 80064c4:	e010      	b.n	80064e8 <TM_FATFS_SD_disk_ioctl+0x214>
 80064c6:	2401      	movs	r4, #1
 80064c8:	e00e      	b.n	80064e8 <TM_FATFS_SD_disk_ioctl+0x214>
 80064ca:	2401      	movs	r4, #1
 80064cc:	e00c      	b.n	80064e8 <TM_FATFS_SD_disk_ioctl+0x214>
 80064ce:	2401      	movs	r4, #1
 80064d0:	e00a      	b.n	80064e8 <TM_FATFS_SD_disk_ioctl+0x214>
 80064d2:	2401      	movs	r4, #1
 80064d4:	e008      	b.n	80064e8 <TM_FATFS_SD_disk_ioctl+0x214>
 80064d6:	2401      	movs	r4, #1
 80064d8:	e006      	b.n	80064e8 <TM_FATFS_SD_disk_ioctl+0x214>
 80064da:	2401      	movs	r4, #1
 80064dc:	e004      	b.n	80064e8 <TM_FATFS_SD_disk_ioctl+0x214>
 80064de:	2401      	movs	r4, #1
 80064e0:	e002      	b.n	80064e8 <TM_FATFS_SD_disk_ioctl+0x214>
 80064e2:	2401      	movs	r4, #1
 80064e4:	e000      	b.n	80064e8 <TM_FATFS_SD_disk_ioctl+0x214>
 80064e6:	2401      	movs	r4, #1

	default:
		res = RES_PARERR;
	}

	deselect();
 80064e8:	f7ff fcd2 	bl	8005e90 <deselect>

	return res;
 80064ec:	4620      	mov	r0, r4
 80064ee:	e000      	b.n	80064f2 <TM_FATFS_SD_disk_ioctl+0x21e>
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;

	if (TM_FATFS_SD_Stat & STA_NOINIT) {
		return RES_NOTRDY;	/* Check if drive is ready */
 80064f0:	2003      	movs	r0, #3
	}

	deselect();

	return res;
}
 80064f2:	b004      	add	sp, #16
 80064f4:	bd70      	pop	{r4, r5, r6, pc}
 80064f6:	bf00      	nop
 80064f8:	2000017c 	.word	0x2000017c
 80064fc:	20000bd9 	.word	0x20000bd9

08006500 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8006500:	b132      	cbz	r2, 8006510 <mem_cpy+0x10>
 8006502:	1882      	adds	r2, r0, r2
		*d++ = *s++;
 8006504:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006508:	f800 3b01 	strb.w	r3, [r0], #1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800650c:	4290      	cmp	r0, r2
 800650e:	d1f9      	bne.n	8006504 <mem_cpy+0x4>
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop

08006514 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8006514:	b122      	cbz	r2, 8006520 <mem_set+0xc>
 8006516:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
 8006518:	f800 1b01 	strb.w	r1, [r0], #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 800651c:	4290      	cmp	r0, r2
 800651e:	d1fb      	bne.n	8006518 <mem_set+0x4>
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop

08006524 <ld_clust>:
	BYTE* dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
 8006524:	7eca      	ldrb	r2, [r1, #27]
 8006526:	7e8b      	ldrb	r3, [r1, #26]
 8006528:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (fs->fs_type == FS_FAT32)
 800652c:	7802      	ldrb	r2, [r0, #0]
 800652e:	2a03      	cmp	r2, #3
 8006530:	d105      	bne.n	800653e <ld_clust+0x1a>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
 8006532:	7d48      	ldrb	r0, [r1, #21]
 8006534:	7d0a      	ldrb	r2, [r1, #20]
 8006536:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800653a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

	return cl;
}
 800653e:	4618      	mov	r0, r3
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop

08006544 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006544:	b430      	push	{r4, r5}
	UINT i;
	TCHAR *p, c;


	p = fno->fname;
 8006546:	f101 0409 	add.w	r4, r1, #9
	if (dp->sect) {		/* Get SFN */
 800654a:	6903      	ldr	r3, [r0, #16]
 800654c:	b353      	cbz	r3, 80065a4 <get_fileinfo+0x60>
		BYTE *dir = dp->dir;
 800654e:	6940      	ldr	r0, [r0, #20]

		i = 0;
 8006550:	2200      	movs	r2, #0
		while (i < 11) {		/* Copy name body and extension */
			c = (TCHAR)dir[i++];
			if (c == ' ') continue;			/* Skip padding spaces */
			if (c == NDDE) c = (TCHAR)DDE;	/* Restore replaced DDE character */
			if (i == 9) *p++ = '.';			/* Insert a . if extension is exist */
 8006552:	252e      	movs	r5, #46	; 0x2e
	if (dp->sect) {		/* Get SFN */
		BYTE *dir = dp->dir;

		i = 0;
		while (i < 11) {		/* Copy name body and extension */
			c = (TCHAR)dir[i++];
 8006554:	3201      	adds	r2, #1
 8006556:	1883      	adds	r3, r0, r2
 8006558:	f813 3c01 	ldrb.w	r3, [r3, #-1]
			if (c == ' ') continue;			/* Skip padding spaces */
 800655c:	2b20      	cmp	r3, #32
 800655e:	d008      	beq.n	8006572 <get_fileinfo+0x2e>
			if (c == NDDE) c = (TCHAR)DDE;	/* Restore replaced DDE character */
 8006560:	2b05      	cmp	r3, #5
 8006562:	bf08      	it	eq
 8006564:	23e5      	moveq	r3, #229	; 0xe5
			if (i == 9) *p++ = '.';			/* Insert a . if extension is exist */
 8006566:	2a09      	cmp	r2, #9
 8006568:	bf04      	itt	eq
 800656a:	7025      	strbeq	r5, [r4, #0]
 800656c:	3401      	addeq	r4, #1
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 800656e:	7023      	strb	r3, [r4, #0]
 8006570:	3401      	adds	r4, #1
	p = fno->fname;
	if (dp->sect) {		/* Get SFN */
		BYTE *dir = dp->dir;

		i = 0;
		while (i < 11) {		/* Copy name body and extension */
 8006572:	2a0b      	cmp	r2, #11
 8006574:	d1ee      	bne.n	8006554 <get_fileinfo+0x10>
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8006576:	7ac3      	ldrb	r3, [r0, #11]
 8006578:	720b      	strb	r3, [r1, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
 800657a:	7fc2      	ldrb	r2, [r0, #31]
 800657c:	7f83      	ldrb	r3, [r0, #30]
 800657e:	041b      	lsls	r3, r3, #16
 8006580:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006584:	7f02      	ldrb	r2, [r0, #28]
 8006586:	4313      	orrs	r3, r2
 8006588:	7f42      	ldrb	r2, [r0, #29]
 800658a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800658e:	600b      	str	r3, [r1, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
 8006590:	7e42      	ldrb	r2, [r0, #25]
 8006592:	7e03      	ldrb	r3, [r0, #24]
 8006594:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006598:	808b      	strh	r3, [r1, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
 800659a:	7dc2      	ldrb	r2, [r0, #23]
 800659c:	7d83      	ldrb	r3, [r0, #22]
 800659e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80065a2:	80cb      	strh	r3, [r1, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 80065a4:	2300      	movs	r3, #0
 80065a6:	7023      	strb	r3, [r4, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 80065a8:	bc30      	pop	{r4, r5}
 80065aa:	4770      	bx	lr

080065ac <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80065ac:	b470      	push	{r4, r5, r6}
 80065ae:	4606      	mov	r6, r0
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;


	if (*path) {	/* If the pointer is not a null */
 80065b0:	6804      	ldr	r4, [r0, #0]
 80065b2:	b1ec      	cbz	r4, 80065f0 <get_ldnumber+0x44>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80065b4:	7825      	ldrb	r5, [r4, #0]
 80065b6:	2d20      	cmp	r5, #32
 80065b8:	d90a      	bls.n	80065d0 <get_ldnumber+0x24>
 80065ba:	2d3a      	cmp	r5, #58	; 0x3a
 80065bc:	d021      	beq.n	8006602 <get_ldnumber+0x56>
 80065be:	1c63      	adds	r3, r4, #1
 80065c0:	4619      	mov	r1, r3
 80065c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065c6:	2a20      	cmp	r2, #32
 80065c8:	d904      	bls.n	80065d4 <get_ldnumber+0x28>
 80065ca:	2a3a      	cmp	r2, #58	; 0x3a
 80065cc:	d1f8      	bne.n	80065c0 <get_ldnumber+0x14>
 80065ce:	e005      	b.n	80065dc <get_ldnumber+0x30>
 80065d0:	462a      	mov	r2, r5
 80065d2:	4621      	mov	r1, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80065d4:	2a3a      	cmp	r2, #58	; 0x3a
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80065d6:	bf18      	it	ne
 80065d8:	2000      	movne	r0, #0
	int vol = -1;


	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80065da:	d114      	bne.n	8006606 <get_ldnumber+0x5a>
			tp = *path;
			i = *tp++ - '0'; 
 80065dc:	1c63      	adds	r3, r4, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80065de:	4299      	cmp	r1, r3
 80065e0:	d109      	bne.n	80065f6 <get_ldnumber+0x4a>

	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 80065e2:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80065e6:	2801      	cmp	r0, #1
 80065e8:	d808      	bhi.n	80065fc <get_ldnumber+0x50>
					vol = (int)i;
					*path = ++tt;
 80065ea:	3402      	adds	r4, #2
 80065ec:	6034      	str	r4, [r6, #0]
 80065ee:	e00a      	b.n	8006606 <get_ldnumber+0x5a>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80065f0:	f04f 30ff 	mov.w	r0, #4294967295
 80065f4:	e007      	b.n	8006606 <get_ldnumber+0x5a>
 80065f6:	f04f 30ff 	mov.w	r0, #4294967295
 80065fa:	e004      	b.n	8006606 <get_ldnumber+0x5a>
 80065fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006600:	e001      	b.n	8006606 <get_ldnumber+0x5a>


	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006602:	4621      	mov	r1, r4
 8006604:	e7ea      	b.n	80065dc <get_ldnumber+0x30>
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8006606:	bc70      	pop	{r4, r5, r6}
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop

0800660c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800660c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006610:	4604      	mov	r4, r0
	DWORD wsect;
	UINT nf;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006612:	7903      	ldrb	r3, [r0, #4]
 8006614:	b30b      	cbz	r3, 800665a <sync_window+0x4e>
		wsect = fs->winsect;	/* Current sector number */
 8006616:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1))
 8006618:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800661c:	7840      	ldrb	r0, [r0, #1]
 800661e:	4639      	mov	r1, r7
 8006620:	462a      	mov	r2, r5
 8006622:	2301      	movs	r3, #1
 8006624:	f7ff fbf4 	bl	8005e10 <disk_write>
 8006628:	b9d0      	cbnz	r0, 8006660 <sync_window+0x54>
			return FR_DISK_ERR;
		fs->wflag = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	7123      	strb	r3, [r4, #4]
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800662e:	6a23      	ldr	r3, [r4, #32]
 8006630:	1aea      	subs	r2, r5, r3
 8006632:	69a3      	ldr	r3, [r4, #24]
 8006634:	429a      	cmp	r2, r3
 8006636:	d216      	bcs.n	8006666 <sync_window+0x5a>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006638:	78e6      	ldrb	r6, [r4, #3]
 800663a:	2e01      	cmp	r6, #1
 800663c:	d916      	bls.n	800666c <sync_window+0x60>
				wsect += fs->fsize;
				disk_write(fs->drv, fs->win, wsect, 1);
 800663e:	f04f 0801 	mov.w	r8, #1
		if (disk_write(fs->drv, fs->win, wsect, 1))
			return FR_DISK_ERR;
		fs->wflag = 0;
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
				wsect += fs->fsize;
 8006642:	69a2      	ldr	r2, [r4, #24]
 8006644:	4415      	add	r5, r2
				disk_write(fs->drv, fs->win, wsect, 1);
 8006646:	7860      	ldrb	r0, [r4, #1]
 8006648:	4639      	mov	r1, r7
 800664a:	462a      	mov	r2, r5
 800664c:	4643      	mov	r3, r8
 800664e:	f7ff fbdf 	bl	8005e10 <disk_write>
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win, wsect, 1))
			return FR_DISK_ERR;
		fs->wflag = 0;
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006652:	3e01      	subs	r6, #1
 8006654:	2e01      	cmp	r6, #1
 8006656:	d1f4      	bne.n	8006642 <sync_window+0x36>
 8006658:	e00b      	b.n	8006672 <sync_window+0x66>
				wsect += fs->fsize;
				disk_write(fs->drv, fs->win, wsect, 1);
			}
		}
	}
	return FR_OK;
 800665a:	2000      	movs	r0, #0
 800665c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win, wsect, 1))
			return FR_DISK_ERR;
 8006660:	2001      	movs	r0, #1
 8006662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				wsect += fs->fsize;
				disk_write(fs->drv, fs->win, wsect, 1);
			}
		}
	}
	return FR_OK;
 8006666:	2000      	movs	r0, #0
 8006668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800666c:	2000      	movs	r0, #0
 800666e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006672:	2000      	movs	r0, #0
}
 8006674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006678 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
 8006678:	b570      	push	{r4, r5, r6, lr}
 800667a:	4604      	mov	r4, r0
 800667c:	460e      	mov	r6, r1
	if (sector != fs->winsect) {	/* Changed current window */
 800667e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006680:	428b      	cmp	r3, r1
 8006682:	d00d      	beq.n	80066a0 <move_window+0x28>
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
 8006684:	f7ff ffc2 	bl	800660c <sync_window>
 8006688:	4605      	mov	r5, r0
 800668a:	b958      	cbnz	r0, 80066a4 <move_window+0x2c>
			return FR_DISK_ERR;
#endif
		if (disk_read(fs->drv, fs->win, sector, 1))
 800668c:	7860      	ldrb	r0, [r4, #1]
 800668e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8006692:	4632      	mov	r2, r6
 8006694:	2301      	movs	r3, #1
 8006696:	f7ff fbb1 	bl	8005dfc <disk_read>
 800669a:	b928      	cbnz	r0, 80066a8 <move_window+0x30>
			return FR_DISK_ERR;
		fs->winsect = sector;
 800669c:	62e6      	str	r6, [r4, #44]	; 0x2c
 800669e:	e004      	b.n	80066aa <move_window+0x32>
	}

	return FR_OK;
 80066a0:	2500      	movs	r5, #0
 80066a2:	e002      	b.n	80066aa <move_window+0x32>
)
{
	if (sector != fs->winsect) {	/* Changed current window */
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
			return FR_DISK_ERR;
 80066a4:	2501      	movs	r5, #1
 80066a6:	e000      	b.n	80066aa <move_window+0x32>
#endif
		if (disk_read(fs->drv, fs->win, sector, 1))
			return FR_DISK_ERR;
 80066a8:	2501      	movs	r5, #1
		fs->winsect = sector;
	}

	return FR_OK;
}
 80066aa:	4628      	mov	r0, r5
 80066ac:	bd70      	pop	{r4, r5, r6, pc}
 80066ae:	bf00      	nop

080066b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80066b0:	b510      	push	{r4, lr}
 80066b2:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80066b4:	2300      	movs	r3, #0
 80066b6:	7103      	strb	r3, [r0, #4]
 80066b8:	f04f 33ff 	mov.w	r3, #4294967295
 80066bc:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80066be:	f7ff ffdb 	bl	8006678 <move_window>
 80066c2:	bb88      	cbnz	r0, 8006728 <check_fs+0x78>
		return 3;

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80066c4:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 80066c8:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 80066cc:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80066d0:	b212      	sxth	r2, r2
 80066d2:	4b18      	ldr	r3, [pc, #96]	; (8006734 <check_fs+0x84>)
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d129      	bne.n	800672c <check_fs+0x7c>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80066d8:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 80066dc:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 80066e0:	041b      	lsls	r3, r3, #16
 80066e2:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 80066e6:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80066ea:	4313      	orrs	r3, r2
 80066ec:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
 80066f0:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80066f4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80066f8:	4b0f      	ldr	r3, [pc, #60]	; (8006738 <check_fs+0x88>)
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d018      	beq.n	8006730 <check_fs+0x80>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80066fe:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
 8006702:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 8006706:	041b      	lsls	r3, r3, #16
 8006708:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 800670c:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
 8006710:	4303      	orrs	r3, r0
 8006712:	f894 0083 	ldrb.w	r0, [r4, #131]	; 0x83
 8006716:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800671a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
		return 3;
 800671e:	4b06      	ldr	r3, [pc, #24]	; (8006738 <check_fs+0x88>)
 8006720:	1ac0      	subs	r0, r0, r3
 8006722:	bf18      	it	ne
 8006724:	2001      	movne	r0, #1
 8006726:	bd10      	pop	{r4, pc}
 8006728:	2003      	movs	r0, #3
 800672a:	bd10      	pop	{r4, pc}

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
 800672c:	2002      	movs	r0, #2
 800672e:	bd10      	pop	{r4, pc}

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
		return 0;
 8006730:	2000      	movs	r0, #0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;

	return 1;
}
 8006732:	bd10      	pop	{r4, pc}
 8006734:	ffffaa55 	.word	0xffffaa55
 8006738:	00544146 	.word	0x00544146

0800673c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800673c:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 800673e:	b188      	cbz	r0, 8006764 <validate+0x28>
 8006740:	6803      	ldr	r3, [r0, #0]
 8006742:	b18b      	cbz	r3, 8006768 <validate+0x2c>
 8006744:	7819      	ldrb	r1, [r3, #0]
 8006746:	b189      	cbz	r1, 800676c <validate+0x30>
 8006748:	88d9      	ldrh	r1, [r3, #6]
 800674a:	8882      	ldrh	r2, [r0, #4]
 800674c:	4291      	cmp	r1, r2
 800674e:	d10f      	bne.n	8006770 <validate+0x34>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
 8006750:	7858      	ldrb	r0, [r3, #1]
 8006752:	f7ff fb4b 	bl	8005dec <disk_status>
 8006756:	f000 0001 	and.w	r0, r0, #1
		return FR_NOT_READY;
 800675a:	2800      	cmp	r0, #0
 800675c:	bf0c      	ite	eq
 800675e:	2000      	moveq	r0, #0
 8006760:	2003      	movne	r0, #3
 8006762:	bd08      	pop	{r3, pc}
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;
 8006764:	2009      	movs	r0, #9
 8006766:	bd08      	pop	{r3, pc}
 8006768:	2009      	movs	r0, #9
 800676a:	bd08      	pop	{r3, pc}
 800676c:	2009      	movs	r0, #9
 800676e:	bd08      	pop	{r3, pc}
 8006770:	2009      	movs	r0, #9

	if (disk_status(fil->fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
 8006772:	bd08      	pop	{r3, pc}

08006774 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006778:	b084      	sub	sp, #16
 800677a:	4605      	mov	r5, r0
 800677c:	4617      	mov	r7, r2
	WORD nrsv;
	FATFS *fs;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800677e:	2300      	movs	r3, #0
 8006780:	6003      	str	r3, [r0, #0]
	vol = get_ldnumber(path);
 8006782:	4608      	mov	r0, r1
 8006784:	f7ff ff12 	bl	80065ac <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006788:	1e06      	subs	r6, r0, #0
 800678a:	f2c0 8174 	blt.w	8006a76 <find_volume+0x302>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800678e:	4bc7      	ldr	r3, [pc, #796]	; (8006aac <find_volume+0x338>)
 8006790:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006794:	2c00      	cmp	r4, #0
 8006796:	f000 8170 	beq.w	8006a7a <find_volume+0x306>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800679a:	602c      	str	r4, [r5, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800679c:	7823      	ldrb	r3, [r4, #0]
 800679e:	b183      	cbz	r3, 80067c2 <find_volume+0x4e>
		stat = disk_status(fs->drv);
 80067a0:	7860      	ldrb	r0, [r4, #1]
 80067a2:	f7ff fb23 	bl	8005dec <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80067a6:	f010 0f01 	tst.w	r0, #1
 80067aa:	d10a      	bne.n	80067c2 <find_volume+0x4e>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80067ac:	2f00      	cmp	r7, #0
 80067ae:	f000 8166 	beq.w	8006a7e <find_volume+0x30a>
 80067b2:	f000 0004 	and.w	r0, r0, #4
 80067b6:	b2c0      	uxtb	r0, r0
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
 80067b8:	2800      	cmp	r0, #0
 80067ba:	bf14      	ite	ne
 80067bc:	200a      	movne	r0, #10
 80067be:	2000      	moveq	r0, #0
 80067c0:	e192      	b.n	8006ae8 <find_volume+0x374>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80067c2:	2300      	movs	r3, #0
 80067c4:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80067c6:	b2f0      	uxtb	r0, r6
 80067c8:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80067ca:	f7ff fb07 	bl	8005ddc <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80067ce:	f010 0f01 	tst.w	r0, #1
 80067d2:	f040 8156 	bne.w	8006a82 <find_volume+0x30e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80067d6:	b11f      	cbz	r7, 80067e0 <find_volume+0x6c>
 80067d8:	f010 0f04 	tst.w	r0, #4
 80067dc:	f040 8153 	bne.w	8006a86 <find_volume+0x312>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80067e0:	4620      	mov	r0, r4
 80067e2:	2100      	movs	r1, #0
 80067e4:	f7ff ff64 	bl	80066b0 <check_fs>
 80067e8:	4603      	mov	r3, r0
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80067ea:	2801      	cmp	r0, #1
 80067ec:	d12a      	bne.n	8006844 <find_volume+0xd0>
 80067ee:	f504 73f9 	add.w	r3, r4, #498	; 0x1f2
 80067f2:	af03      	add	r7, sp, #12
 80067f4:	f1ad 0204 	sub.w	r2, sp, #4
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
			BYTE *pt = fs->win+MBR_Table + i * SZ_PTE;
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80067f8:	2500      	movs	r5, #0
 80067fa:	7819      	ldrb	r1, [r3, #0]
 80067fc:	b151      	cbz	r1, 8006814 <find_volume+0xa0>
 80067fe:	79d8      	ldrb	r0, [r3, #7]
 8006800:	7999      	ldrb	r1, [r3, #6]
 8006802:	0409      	lsls	r1, r1, #16
 8006804:	ea41 6000 	orr.w	r0, r1, r0, lsl #24
 8006808:	7919      	ldrb	r1, [r3, #4]
 800680a:	4301      	orrs	r1, r0
 800680c:	7958      	ldrb	r0, [r3, #5]
 800680e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8006812:	e000      	b.n	8006816 <find_volume+0xa2>
 8006814:	4629      	mov	r1, r5
 8006816:	f842 1f04 	str.w	r1, [r2, #4]!
 800681a:	3310      	adds	r3, #16
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800681c:	42ba      	cmp	r2, r7
 800681e:	d1ec      	bne.n	80067fa <find_volume+0x86>
 8006820:	f1ad 0504 	sub.w	r5, sp, #4
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006824:	f04f 0802 	mov.w	r8, #2
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006828:	f855 6f04 	ldr.w	r6, [r5, #4]!
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800682c:	b136      	cbz	r6, 800683c <find_volume+0xc8>
 800682e:	4620      	mov	r0, r4
 8006830:	4631      	mov	r1, r6
 8006832:	f7ff ff3d 	bl	80066b0 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006836:	4603      	mov	r3, r0
 8006838:	b908      	cbnz	r0, 800683e <find_volume+0xca>
 800683a:	e004      	b.n	8006846 <find_volume+0xd2>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800683c:	4643      	mov	r3, r8
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800683e:	42bd      	cmp	r5, r7
 8006840:	d1f2      	bne.n	8006828 <find_volume+0xb4>
 8006842:	e000      	b.n	8006846 <find_volume+0xd2>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006844:	2600      	movs	r6, #0
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006846:	2b03      	cmp	r3, #3
 8006848:	f000 811f 	beq.w	8006a8a <find_volume+0x316>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800684c:	2b00      	cmp	r3, #0
 800684e:	f040 811e 	bne.w	8006a8e <find_volume+0x31a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006852:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8006856:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 800685a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800685e:	b21b      	sxth	r3, r3
 8006860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006864:	f040 8115 	bne.w	8006a92 <find_volume+0x31e>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 8006868:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 800686c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 8006870:	ea53 2202 	orrs.w	r2, r3, r2, lsl #8
 8006874:	d10d      	bne.n	8006892 <find_volume+0x11e>
 8006876:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
 800687a:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 800687e:	041b      	lsls	r3, r3, #16
 8006880:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 8006884:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8006888:	4313      	orrs	r3, r2
 800688a:	f894 2055 	ldrb.w	r2, [r4, #85]	; 0x55
 800688e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	fs->fsize = fasize;
 8006892:	61a2      	str	r2, [r4, #24]

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8006894:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006898:	70e3      	strb	r3, [r4, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800689a:	1e59      	subs	r1, r3, #1
 800689c:	b2c9      	uxtb	r1, r1
 800689e:	2901      	cmp	r1, #1
 80068a0:	f200 80f9 	bhi.w	8006a96 <find_volume+0x322>
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 80068a4:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80068a8:	70a0      	strb	r0, [r4, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80068aa:	2800      	cmp	r0, #0
 80068ac:	f000 80f5 	beq.w	8006a9a <find_volume+0x326>
 80068b0:	1e41      	subs	r1, r0, #1
 80068b2:	4201      	tst	r1, r0
 80068b4:	f040 80f3 	bne.w	8006a9e <find_volume+0x32a>
		return FR_NO_FILESYSTEM;

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 80068b8:	f894 5042 	ldrb.w	r5, [r4, #66]	; 0x42
 80068bc:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 80068c0:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80068c4:	8121      	strh	r1, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
 80068c6:	f011 0f0f 	tst.w	r1, #15
 80068ca:	f040 80ea 	bne.w	8006aa2 <find_volume+0x32e>
		return FR_NO_FILESYSTEM;

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 80068ce:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
 80068d2:	f894 5043 	ldrb.w	r5, [r4, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 80068d6:	ea55 2507 	orrs.w	r5, r5, r7, lsl #8
 80068da:	d10d      	bne.n	80068f8 <find_volume+0x184>
 80068dc:	f894 7053 	ldrb.w	r7, [r4, #83]	; 0x53
 80068e0:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 80068e4:	042d      	lsls	r5, r5, #16
 80068e6:	ea45 6707 	orr.w	r7, r5, r7, lsl #24
 80068ea:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
 80068ee:	433d      	orrs	r5, r7
 80068f0:	f894 7051 	ldrb.w	r7, [r4, #81]	; 0x51
 80068f4:	ea45 2507 	orr.w	r5, r5, r7, lsl #8

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 80068f8:	f894 c03f 	ldrb.w	ip, [r4, #63]	; 0x3f
 80068fc:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006900:	ea57 2c0c 	orrs.w	ip, r7, ip, lsl #8
 8006904:	f000 80cf 	beq.w	8006aa6 <find_volume+0x332>
	fs->fsize = fasize;

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006908:	fb03 f802 	mul.w	r8, r3, r2

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 800690c:	eb0c 1711 	add.w	r7, ip, r1, lsr #4
 8006910:	4447      	add	r7, r8
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006912:	42bd      	cmp	r5, r7
 8006914:	f0c0 80d4 	bcc.w	8006ac0 <find_volume+0x34c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006918:	1beb      	subs	r3, r5, r7
 800691a:	fbb3 f3f0 	udiv	r3, r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 80d0 	beq.w	8006ac4 <find_volume+0x350>
	fmt = FS_FAT12;
 8006924:	f640 75f5 	movw	r5, #4085	; 0xff5
 8006928:	42ab      	cmp	r3, r5
 800692a:	bf8c      	ite	hi
 800692c:	2502      	movhi	r5, #2
 800692e:	2501      	movls	r5, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006930:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8006934:	4283      	cmp	r3, r0
 8006936:	f200 80cd 	bhi.w	8006ad4 <find_volume+0x360>

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800693a:	3302      	adds	r3, #2
 800693c:	6163      	str	r3, [r4, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800693e:	61e6      	str	r6, [r4, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006940:	eb06 000c 	add.w	r0, r6, ip
 8006944:	6220      	str	r0, [r4, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8006946:	4437      	add	r7, r6
 8006948:	62a7      	str	r7, [r4, #40]	; 0x28
	if (fmt == FS_FAT32) {
 800694a:	2d03      	cmp	r5, #3
 800694c:	d113      	bne.n	8006976 <find_volume+0x202>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800694e:	2900      	cmp	r1, #0
 8006950:	f040 80ba 	bne.w	8006ac8 <find_volume+0x354>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 8006954:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
 8006958:	f894 105e 	ldrb.w	r1, [r4, #94]	; 0x5e
 800695c:	0409      	lsls	r1, r1, #16
 800695e:	ea41 6000 	orr.w	r0, r1, r0, lsl #24
 8006962:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
 8006966:	4301      	orrs	r1, r0
 8006968:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800696c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8006970:	6261      	str	r1, [r4, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	e00d      	b.n	8006992 <find_volume+0x21e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006976:	2900      	cmp	r1, #0
 8006978:	f000 80a8 	beq.w	8006acc <find_volume+0x358>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800697c:	4440      	add	r0, r8
 800697e:	6260      	str	r0, [r4, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006980:	2d02      	cmp	r5, #2
 8006982:	bf0f      	iteee	eq
 8006984:	005b      	lsleq	r3, r3, #1
 8006986:	eb03 0143 	addne.w	r1, r3, r3, lsl #1
 800698a:	f003 0301 	andne.w	r3, r3, #1
 800698e:	eb03 0351 	addne.w	r3, r3, r1, lsr #1
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
 8006992:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006996:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 800699a:	f0c0 8099 	bcc.w	8006ad0 <find_volume+0x35c>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800699e:	f04f 33ff 	mov.w	r3, #4294967295
 80069a2:	6123      	str	r3, [r4, #16]
 80069a4:	60e3      	str	r3, [r4, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80069a6:	2380      	movs	r3, #128	; 0x80
 80069a8:	7163      	strb	r3, [r4, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80069aa:	2d03      	cmp	r5, #3
 80069ac:	d15a      	bne.n	8006a64 <find_volume+0x2f0>
		&& LD_WORD(fs->win+BPB_FSInfo) == 1
 80069ae:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 80069b2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80069b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80069ba:	b21b      	sxth	r3, r3
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d151      	bne.n	8006a64 <find_volume+0x2f0>
		&& move_window(fs, bsect + 1) == FR_OK)
 80069c0:	4620      	mov	r0, r4
 80069c2:	1c71      	adds	r1, r6, #1
 80069c4:	f7ff fe58 	bl	8006678 <move_window>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d14b      	bne.n	8006a64 <find_volume+0x2f0>
	{
		fs->fsi_flag = 0;
 80069cc:	2300      	movs	r3, #0
 80069ce:	7163      	strb	r3, [r4, #5]
		if (LD_WORD(fs->win+BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80069d0:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 80069d4:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 80069d8:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80069dc:	b212      	sxth	r2, r2
 80069de:	4b34      	ldr	r3, [pc, #208]	; (8006ab0 <find_volume+0x33c>)
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d13f      	bne.n	8006a64 <find_volume+0x2f0>
			&& LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252
 80069e4:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 80069e8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80069ec:	041b      	lsls	r3, r3, #16
 80069ee:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 80069f2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80069f6:	4313      	orrs	r3, r2
 80069f8:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80069fc:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8006a00:	4b2c      	ldr	r3, [pc, #176]	; (8006ab4 <find_volume+0x340>)
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d12e      	bne.n	8006a64 <find_volume+0x2f0>
			&& LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272)
 8006a06:	f894 2217 	ldrb.w	r2, [r4, #535]	; 0x217
 8006a0a:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
 8006a0e:	041b      	lsls	r3, r3, #16
 8006a10:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 8006a14:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	f894 2215 	ldrb.w	r2, [r4, #533]	; 0x215
 8006a1e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8006a22:	4b25      	ldr	r3, [pc, #148]	; (8006ab8 <find_volume+0x344>)
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d11d      	bne.n	8006a64 <find_volume+0x2f0>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 8006a28:	f894 221b 	ldrb.w	r2, [r4, #539]	; 0x21b
 8006a2c:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
 8006a30:	041b      	lsls	r3, r3, #16
 8006a32:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 8006a36:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
 8006a40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006a44:	6123      	str	r3, [r4, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8006a46:	f894 221f 	ldrb.w	r2, [r4, #543]	; 0x21f
 8006a4a:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
 8006a4e:	041b      	lsls	r3, r3, #16
 8006a50:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 8006a54:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
 8006a5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006a62:	60e3      	str	r3, [r4, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8006a64:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8006a66:	4a15      	ldr	r2, [pc, #84]	; (8006abc <find_volume+0x348>)
 8006a68:	8813      	ldrh	r3, [r2, #0]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	8013      	strh	r3, [r2, #0]
 8006a70:	80e3      	strh	r3, [r4, #6]
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 8006a72:	2000      	movs	r0, #0
 8006a74:	e038      	b.n	8006ae8 <find_volume+0x374>


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 8006a76:	200b      	movs	r0, #11
 8006a78:	e036      	b.n	8006ae8 <find_volume+0x374>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006a7a:	200c      	movs	r0, #12
 8006a7c:	e034      	b.n	8006ae8 <find_volume+0x374>
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
 8006a7e:	2000      	movs	r0, #0
 8006a80:	e032      	b.n	8006ae8 <find_volume+0x374>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006a82:	2003      	movs	r0, #3
 8006a84:	e030      	b.n	8006ae8 <find_volume+0x374>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
 8006a86:	200a      	movs	r0, #10
 8006a88:	e02e      	b.n	8006ae8 <find_volume+0x374>
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006a8a:	2001      	movs	r0, #1
 8006a8c:	e02c      	b.n	8006ae8 <find_volume+0x374>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006a8e:	200d      	movs	r0, #13
 8006a90:	e02a      	b.n	8006ae8 <find_volume+0x374>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;
 8006a92:	200d      	movs	r0, #13
 8006a94:	e028      	b.n	8006ae8 <find_volume+0x374>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
 8006a96:	200d      	movs	r0, #13
 8006a98:	e026      	b.n	8006ae8 <find_volume+0x374>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
		return FR_NO_FILESYSTEM;
 8006a9a:	200d      	movs	r0, #13
 8006a9c:	e024      	b.n	8006ae8 <find_volume+0x374>
 8006a9e:	200d      	movs	r0, #13
 8006aa0:	e022      	b.n	8006ae8 <find_volume+0x374>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
		return FR_NO_FILESYSTEM;
 8006aa2:	200d      	movs	r0, #13
 8006aa4:	e020      	b.n	8006ae8 <find_volume+0x374>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006aa6:	200d      	movs	r0, #13
 8006aa8:	e01e      	b.n	8006ae8 <find_volume+0x374>
 8006aaa:	bf00      	nop
 8006aac:	20000bdc 	.word	0x20000bdc
 8006ab0:	ffffaa55 	.word	0xffffaa55
 8006ab4:	41615252 	.word	0x41615252
 8006ab8:	61417272 	.word	0x61417272
 8006abc:	20000bda 	.word	0x20000bda

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006ac0:	200d      	movs	r0, #13
 8006ac2:	e011      	b.n	8006ae8 <find_volume+0x374>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006ac4:	200d      	movs	r0, #13
 8006ac6:	e00f      	b.n	8006ae8 <find_volume+0x374>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->volbase = bsect;								/* Volume start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	fs->database = bsect + sysect;						/* Data start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006ac8:	200d      	movs	r0, #13
 8006aca:	e00d      	b.n	8006ae8 <find_volume+0x374>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006acc:	200d      	movs	r0, #13
 8006ace:	e00b      	b.n	8006ae8 <find_volume+0x374>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
		return FR_NO_FILESYSTEM;
 8006ad0:	200d      	movs	r0, #13
 8006ad2:	e009      	b.n	8006ae8 <find_volume+0x374>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006ad4:	3302      	adds	r3, #2
 8006ad6:	6163      	str	r3, [r4, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8006ad8:	61e6      	str	r6, [r4, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006ada:	eb06 000c 	add.w	r0, r6, ip
 8006ade:	6220      	str	r0, [r4, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8006ae0:	4437      	add	r7, r6
 8006ae2:	62a7      	str	r7, [r4, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006ae4:	2503      	movs	r5, #3
 8006ae6:	e732      	b.n	800694e <find_volume+0x1da>
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
 8006ae8:	b004      	add	sp, #16
 8006aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aee:	bf00      	nop

08006af0 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8006af0:	b538      	push	{r3, r4, r5, lr}
 8006af2:	4604      	mov	r4, r0
	FRESULT res;


	res = sync_window(fs);
 8006af4:	f7ff fd8a 	bl	800660c <sync_window>
	if (res == FR_OK) {
 8006af8:	4603      	mov	r3, r0
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d153      	bne.n	8006ba6 <sync_fs+0xb6>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006afe:	7823      	ldrb	r3, [r4, #0]
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	d148      	bne.n	8006b96 <sync_fs+0xa6>
 8006b04:	7963      	ldrb	r3, [r4, #5]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d145      	bne.n	8006b96 <sync_fs+0xa6>
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
 8006b0a:	f104 0530 	add.w	r5, r4, #48	; 0x30
 8006b0e:	4628      	mov	r0, r5
 8006b10:	2100      	movs	r1, #0
 8006b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b16:	f7ff fcfd 	bl	8006514 <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 8006b1a:	2355      	movs	r3, #85	; 0x55
 8006b1c:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
 8006b20:	23aa      	movs	r3, #170	; 0xaa
 8006b22:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 8006b26:	2352      	movs	r3, #82	; 0x52
 8006b28:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8006b2c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 8006b30:	2361      	movs	r3, #97	; 0x61
 8006b32:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 8006b36:	2241      	movs	r2, #65	; 0x41
 8006b38:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 8006b3c:	2172      	movs	r1, #114	; 0x72
 8006b3e:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
 8006b42:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
 8006b46:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
 8006b4a:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 8006b4e:	6923      	ldr	r3, [r4, #16]
 8006b50:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
 8006b54:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006b58:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
 8006b5c:	0c1a      	lsrs	r2, r3, #16
 8006b5e:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
 8006b62:	0e1b      	lsrs	r3, r3, #24
 8006b64:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 8006b68:	68e3      	ldr	r3, [r4, #12]
 8006b6a:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
 8006b6e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006b72:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
 8006b76:	0c1a      	lsrs	r2, r3, #16
 8006b78:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
 8006b7c:	0e1b      	lsrs	r3, r3, #24
 8006b7e:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8006b82:	69e2      	ldr	r2, [r4, #28]
 8006b84:	3201      	adds	r2, #1
 8006b86:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006b88:	7860      	ldrb	r0, [r4, #1]
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	f7ff f93f 	bl	8005e10 <disk_write>
			fs->fsi_flag = 0;
 8006b92:	2300      	movs	r3, #0
 8006b94:	7163      	strb	r3, [r4, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8006b96:	7860      	ldrb	r0, [r4, #1]
 8006b98:	2100      	movs	r1, #0
 8006b9a:	460a      	mov	r2, r1
 8006b9c:	f7ff f946 	bl	8005e2c <disk_ioctl>
)
{
	FRESULT res;


	res = sync_window(fs);
 8006ba0:	1c03      	adds	r3, r0, #0
 8006ba2:	bf18      	it	ne
 8006ba4:	2301      	movne	r3, #1
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
			res = FR_DISK_ERR;
	}

	return res;
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	bd38      	pop	{r3, r4, r5, pc}
 8006baa:	bf00      	nop

08006bac <clust2sect>:
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8006bac:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8006bae:	6943      	ldr	r3, [r0, #20]
 8006bb0:	3b02      	subs	r3, #2
 8006bb2:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 8006bb4:	bf3d      	ittte	cc
 8006bb6:	7882      	ldrbcc	r2, [r0, #2]
 8006bb8:	6a83      	ldrcc	r3, [r0, #40]	; 0x28
 8006bba:	fb02 3001 	mlacc	r0, r2, r1, r3
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8006bbe:	2000      	movcs	r0, #0
	return clst * fs->csize + fs->database;
}
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop

08006bc4 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 8006bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc6:	4605      	mov	r5, r0
 8006bc8:	460c      	mov	r4, r1
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 8006bca:	2901      	cmp	r1, #1
 8006bcc:	d95b      	bls.n	8006c86 <get_fat+0xc2>
 8006bce:	6943      	ldr	r3, [r0, #20]
 8006bd0:	4299      	cmp	r1, r3
 8006bd2:	d25a      	bcs.n	8006c8a <get_fat+0xc6>
		return 1;

	switch (fs->fs_type) {
 8006bd4:	7803      	ldrb	r3, [r0, #0]
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d028      	beq.n	8006c2c <get_fat+0x68>
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d038      	beq.n	8006c50 <get_fat+0x8c>
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d155      	bne.n	8006c8e <get_fat+0xca>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
 8006be2:	eb01 0651 	add.w	r6, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8006be6:	6a01      	ldr	r1, [r0, #32]
 8006be8:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8006bec:	f7ff fd44 	bl	8006678 <move_window>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d14e      	bne.n	8006c92 <get_fat+0xce>
		wc = fs->win[bc % SS(fs)]; bc++;
 8006bf4:	f3c6 0308 	ubfx	r3, r6, #0, #9
 8006bf8:	442b      	add	r3, r5
 8006bfa:	f893 7030 	ldrb.w	r7, [r3, #48]	; 0x30
 8006bfe:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8006c00:	6a29      	ldr	r1, [r5, #32]
 8006c02:	4628      	mov	r0, r5
 8006c04:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8006c08:	f7ff fd36 	bl	8006678 <move_window>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d143      	bne.n	8006c98 <get_fat+0xd4>
		wc |= fs->win[bc % SS(fs)] << 8;
 8006c10:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8006c14:	4435      	add	r5, r6
 8006c16:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8006c1a:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
		return clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006c1e:	f014 0f01 	tst.w	r4, #1
 8006c22:	bf14      	ite	ne
 8006c24:	0900      	lsrne	r0, r0, #4
 8006c26:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
 8006c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8006c2c:	6a01      	ldr	r1, [r0, #32]
 8006c2e:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8006c32:	f7ff fd21 	bl	8006678 <move_window>
 8006c36:	bb90      	cbnz	r0, 8006c9e <get_fat+0xda>
		p = &fs->win[clst * 2 % SS(fs)];
 8006c38:	0064      	lsls	r4, r4, #1
 8006c3a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
		return LD_WORD(p);
 8006c3e:	192b      	adds	r3, r5, r4
 8006c40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c44:	442c      	add	r4, r5
 8006c46:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
 8006c4a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8006c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8006c50:	6a01      	ldr	r1, [r0, #32]
 8006c52:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8006c56:	f7ff fd0f 	bl	8006678 <move_window>
 8006c5a:	bb18      	cbnz	r0, 8006ca4 <get_fat+0xe0>
		p = &fs->win[clst * 4 % SS(fs)];
 8006c5c:	00a4      	lsls	r4, r4, #2
 8006c5e:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8006c62:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8006c66:	442b      	add	r3, r5
		return LD_DWORD(p) & 0x0FFFFFFF;
 8006c68:	7898      	ldrb	r0, [r3, #2]
 8006c6a:	78da      	ldrb	r2, [r3, #3]
 8006c6c:	0612      	lsls	r2, r2, #24
 8006c6e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006c72:	7858      	ldrb	r0, [r3, #1]
 8006c74:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8006c78:	442c      	add	r4, r5
 8006c7a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8006c7e:	4318      	orrs	r0, r3
 8006c80:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8006c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
		return 1;
 8006c86:	2001      	movs	r0, #1
 8006c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c8a:	2001      	movs	r0, #1
 8006c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;

	default:
		return 1;
 8006c8e:	2001      	movs	r0, #1
 8006c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 8006c92:	f04f 30ff 	mov.w	r0, #4294967295
 8006c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c98:	f04f 30ff 	mov.w	r0, #4294967295
 8006c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ca4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006caa:	bf00      	nop

08006cac <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cae:	4605      	mov	r5, r0
 8006cb0:	460e      	mov	r6, r1
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006cb2:	80e9      	strh	r1, [r5, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006cb4:	6884      	ldr	r4, [r0, #8]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8006cb6:	2c01      	cmp	r4, #1
 8006cb8:	d039      	beq.n	8006d2e <dir_sdi+0x82>
 8006cba:	6803      	ldr	r3, [r0, #0]
 8006cbc:	695a      	ldr	r2, [r3, #20]
 8006cbe:	4294      	cmp	r4, r2
 8006cc0:	d237      	bcs.n	8006d32 <dir_sdi+0x86>
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006cc2:	b954      	cbnz	r4, 8006cda <dir_sdi+0x2e>
 8006cc4:	781a      	ldrb	r2, [r3, #0]
 8006cc6:	2a03      	cmp	r2, #3
 8006cc8:	d101      	bne.n	8006cce <dir_sdi+0x22>
		clst = dp->fs->dirbase;
 8006cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006ccc:	b922      	cbnz	r2, 8006cd8 <dir_sdi+0x2c>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006cce:	891a      	ldrh	r2, [r3, #8]
 8006cd0:	4296      	cmp	r6, r2
 8006cd2:	d230      	bcs.n	8006d36 <dir_sdi+0x8a>
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
 8006cd4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006cd6:	e01c      	b.n	8006d12 <dir_sdi+0x66>
	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dp->fs->dirbase;
 8006cd8:	4614      	mov	r4, r2
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
 8006cda:	789f      	ldrb	r7, [r3, #2]
 8006cdc:	013f      	lsls	r7, r7, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8006cde:	42be      	cmp	r6, r7
 8006ce0:	d313      	bcc.n	8006d0a <dir_sdi+0x5e>
 8006ce2:	1bf6      	subs	r6, r6, r7
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006ce4:	6828      	ldr	r0, [r5, #0]
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	f7ff ff6c 	bl	8006bc4 <get_fat>
 8006cec:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006cee:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006cf2:	d022      	beq.n	8006d3a <dir_sdi+0x8e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006cf4:	2801      	cmp	r0, #1
 8006cf6:	d922      	bls.n	8006d3e <dir_sdi+0x92>
 8006cf8:	682b      	ldr	r3, [r5, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	4298      	cmp	r0, r3
 8006cfe:	d220      	bcs.n	8006d42 <dir_sdi+0x96>
 8006d00:	1bf3      	subs	r3, r6, r7
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
 8006d02:	42b7      	cmp	r7, r6
 8006d04:	d801      	bhi.n	8006d0a <dir_sdi+0x5e>
 8006d06:	461e      	mov	r6, r3
 8006d08:	e7ec      	b.n	8006ce4 <dir_sdi+0x38>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
				return FR_INT_ERR;
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
 8006d0a:	6828      	ldr	r0, [r5, #0]
 8006d0c:	4621      	mov	r1, r4
 8006d0e:	f7ff ff4d 	bl	8006bac <clust2sect>
	}
	dp->clust = clst;	/* Current cluster# */
 8006d12:	60ec      	str	r4, [r5, #12]
	if (!sect) return FR_INT_ERR;
 8006d14:	b1b8      	cbz	r0, 8006d46 <dir_sdi+0x9a>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
 8006d16:	eb00 1016 	add.w	r0, r0, r6, lsr #4
 8006d1a:	6128      	str	r0, [r5, #16]
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
 8006d1c:	f006 020f 	and.w	r2, r6, #15
 8006d20:	0152      	lsls	r2, r2, #5
 8006d22:	3230      	adds	r2, #48	; 0x30
 8006d24:	682b      	ldr	r3, [r5, #0]
 8006d26:	4413      	add	r3, r2
 8006d28:	616b      	str	r3, [r5, #20]

	return FR_OK;
 8006d2a:	2000      	movs	r0, #0
 8006d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}


	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
 8006d2e:	2002      	movs	r0, #2
 8006d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d32:	2002      	movs	r0, #2
 8006d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dp->fs->dirbase;

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
			return FR_INT_ERR;
 8006d36:	2002      	movs	r0, #2
 8006d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006d3a:	2001      	movs	r0, #1
 8006d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
				return FR_INT_ERR;
 8006d3e:	2002      	movs	r0, #2
 8006d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d42:	2002      	movs	r0, #2
 8006d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
	}
	dp->clust = clst;	/* Current cluster# */
	if (!sect) return FR_INT_ERR;
 8006d46:	2002      	movs	r0, #2
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;
}
 8006d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d4a:	bf00      	nop

08006d4c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 8006d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4e:	4605      	mov	r5, r0
 8006d50:	460c      	mov	r4, r1
 8006d52:	4616      	mov	r6, r2
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006d54:	2901      	cmp	r1, #1
 8006d56:	d977      	bls.n	8006e48 <put_fat+0xfc>
 8006d58:	6943      	ldr	r3, [r0, #20]
 8006d5a:	4299      	cmp	r1, r3
 8006d5c:	d276      	bcs.n	8006e4c <put_fat+0x100>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
 8006d5e:	7803      	ldrb	r3, [r0, #0]
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d03e      	beq.n	8006de2 <put_fat+0x96>
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	d04e      	beq.n	8006e06 <put_fat+0xba>
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d169      	bne.n	8006e40 <put_fat+0xf4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006d6c:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d70:	6a01      	ldr	r1, [r0, #32]
 8006d72:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8006d76:	f7ff fc7f 	bl	8006678 <move_window>
			if (res != FR_OK) break;
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d160      	bne.n	8006e42 <put_fat+0xf6>
			p = &fs->win[bc % SS(fs)];
 8006d80:	f3c7 0308 	ubfx	r3, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006d84:	f014 0401 	ands.w	r4, r4, #1
 8006d88:	d009      	beq.n	8006d9e <put_fat+0x52>
 8006d8a:	18ea      	adds	r2, r5, r3
 8006d8c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8006d90:	f002 020f 	and.w	r2, r2, #15
 8006d94:	b2f1      	uxtb	r1, r6
 8006d96:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	e000      	b.n	8006da0 <put_fat+0x54>
 8006d9e:	b2f2      	uxtb	r2, r6
 8006da0:	442b      	add	r3, r5
 8006da2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
 8006da6:	3701      	adds	r7, #1
			fs->wflag = 1;
 8006da8:	2301      	movs	r3, #1
 8006daa:	712b      	strb	r3, [r5, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006dac:	6a29      	ldr	r1, [r5, #32]
 8006dae:	4628      	mov	r0, r5
 8006db0:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8006db4:	f7ff fc60 	bl	8006678 <move_window>
			if (res != FR_OK) break;
 8006db8:	4603      	mov	r3, r0
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d141      	bne.n	8006e42 <put_fat+0xf6>
			p = &fs->win[bc % SS(fs)];
 8006dbe:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006dc2:	b114      	cbz	r4, 8006dca <put_fat+0x7e>
 8006dc4:	f3c6 1607 	ubfx	r6, r6, #4, #8
 8006dc8:	e007      	b.n	8006dda <put_fat+0x8e>
 8006dca:	19ea      	adds	r2, r5, r7
 8006dcc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8006dd0:	f022 020f 	bic.w	r2, r2, #15
 8006dd4:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8006dd8:	4316      	orrs	r6, r2
 8006dda:	442f      	add	r7, r5
 8006ddc:	f887 6030 	strb.w	r6, [r7, #48]	; 0x30
			break;
 8006de0:	e02f      	b.n	8006e42 <put_fat+0xf6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006de2:	6a01      	ldr	r1, [r0, #32]
 8006de4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8006de8:	f7ff fc46 	bl	8006678 <move_window>
			if (res != FR_OK) break;
 8006dec:	4603      	mov	r3, r0
 8006dee:	bb40      	cbnz	r0, 8006e42 <put_fat+0xf6>
			p = &fs->win[clst * 2 % SS(fs)];
 8006df0:	0064      	lsls	r4, r4, #1
 8006df2:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 8006df6:	192a      	adds	r2, r5, r4
 8006df8:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
 8006dfc:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8006e00:	f882 6031 	strb.w	r6, [r2, #49]	; 0x31
			break;
 8006e04:	e01d      	b.n	8006e42 <put_fat+0xf6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006e06:	6a01      	ldr	r1, [r0, #32]
 8006e08:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8006e0c:	f7ff fc34 	bl	8006678 <move_window>
			if (res != FR_OK) break;
 8006e10:	4603      	mov	r3, r0
 8006e12:	b9b0      	cbnz	r0, 8006e42 <put_fat+0xf6>
			p = &fs->win[clst * 4 % SS(fs)];
 8006e14:	00a4      	lsls	r4, r4, #2
 8006e16:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8006e1a:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8006e1e:	442a      	add	r2, r5
			val |= LD_DWORD(p) & 0xF0000000;
 8006e20:	78d1      	ldrb	r1, [r2, #3]
 8006e22:	0609      	lsls	r1, r1, #24
 8006e24:	442c      	add	r4, r5
 8006e26:	f001 4170 	and.w	r1, r1, #4026531840	; 0xf0000000
 8006e2a:	430e      	orrs	r6, r1
			ST_DWORD(p, val);
 8006e2c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 8006e30:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8006e34:	7051      	strb	r1, [r2, #1]
 8006e36:	0c31      	lsrs	r1, r6, #16
 8006e38:	7091      	strb	r1, [r2, #2]
 8006e3a:	0e36      	lsrs	r6, r6, #24
 8006e3c:	70d6      	strb	r6, [r2, #3]
			break;
 8006e3e:	e000      	b.n	8006e42 <put_fat+0xf6>

		default :
			res = FR_INT_ERR;
 8006e40:	2302      	movs	r3, #2
		}
		fs->wflag = 1;
 8006e42:	2201      	movs	r2, #1
 8006e44:	712a      	strb	r2, [r5, #4]
 8006e46:	e002      	b.n	8006e4e <put_fat+0x102>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
 8006e48:	2302      	movs	r3, #2
 8006e4a:	e000      	b.n	8006e4e <put_fat+0x102>
 8006e4c:	2302      	movs	r3, #2
		}
		fs->wflag = 1;
	}

	return res;
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e52:	bf00      	nop

08006e54 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8006e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e58:	4605      	mov	r5, r0
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006e5a:	4688      	mov	r8, r1
 8006e5c:	b931      	cbnz	r1, 8006e6c <create_chain+0x18>
		scl = fs->last_clust;			/* Get suggested start point */
 8006e5e:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006e60:	b186      	cbz	r6, 8006e84 <create_chain+0x30>
 8006e62:	6943      	ldr	r3, [r0, #20]
 8006e64:	429e      	cmp	r6, r3
 8006e66:	bf28      	it	cs
 8006e68:	2601      	movcs	r6, #1
 8006e6a:	e00c      	b.n	8006e86 <create_chain+0x32>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8006e6c:	f7ff feaa 	bl	8006bc4 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 8006e70:	2801      	cmp	r0, #1
 8006e72:	d946      	bls.n	8006f02 <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006e74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006e78:	d051      	beq.n	8006f1e <create_chain+0xca>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006e7a:	696b      	ldr	r3, [r5, #20]
 8006e7c:	4298      	cmp	r0, r3
 8006e7e:	d34e      	bcc.n	8006f1e <create_chain+0xca>
		scl = clst;
 8006e80:	4646      	mov	r6, r8
 8006e82:	e000      	b.n	8006e86 <create_chain+0x32>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006e84:	2601      	movs	r6, #1
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
 8006e86:	4634      	mov	r4, r6
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
 8006e88:	2702      	movs	r7, #2
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
 8006e8a:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006e8c:	696b      	ldr	r3, [r5, #20]
 8006e8e:	429c      	cmp	r4, r3
 8006e90:	d302      	bcc.n	8006e98 <create_chain+0x44>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
 8006e92:	2e01      	cmp	r6, #1
 8006e94:	d938      	bls.n	8006f08 <create_chain+0xb4>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
 8006e96:	463c      	mov	r4, r7
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006e98:	4628      	mov	r0, r5
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	f7ff fe92 	bl	8006bc4 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8006ea0:	b138      	cbz	r0, 8006eb2 <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006ea2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006ea6:	d032      	beq.n	8006f0e <create_chain+0xba>
 8006ea8:	2801      	cmp	r0, #1
 8006eaa:	d032      	beq.n	8006f12 <create_chain+0xbe>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
 8006eac:	42b4      	cmp	r4, r6
 8006eae:	d1ec      	bne.n	8006e8a <create_chain+0x36>
 8006eb0:	e031      	b.n	8006f16 <create_chain+0xc2>
 8006eb2:	4626      	mov	r6, r4
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006ebc:	f7ff ff46 	bl	8006d4c <put_fat>
	if (res == FR_OK && clst != 0) {
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	b9b8      	cbnz	r0, 8006ef4 <create_chain+0xa0>
 8006ec4:	f1b8 0f00 	cmp.w	r8, #0
 8006ec8:	d006      	beq.n	8006ed8 <create_chain+0x84>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006eca:	4628      	mov	r0, r5
 8006ecc:	4641      	mov	r1, r8
 8006ece:	4622      	mov	r2, r4
 8006ed0:	f7ff ff3c 	bl	8006d4c <put_fat>
	}
	if (res == FR_OK) {
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	b968      	cbnz	r0, 8006ef4 <create_chain+0xa0>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006ed8:	60ee      	str	r6, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8006eda:	692b      	ldr	r3, [r5, #16]
 8006edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee0:	d01c      	beq.n	8006f1c <create_chain+0xc8>
			fs->free_clust--;
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8006ee6:	796b      	ldrb	r3, [r5, #5]
 8006ee8:	f043 0301 	orr.w	r3, r3, #1
 8006eec:	716b      	strb	r3, [r5, #5]
 8006eee:	4620      	mov	r0, r4
 8006ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	bf14      	ite	ne
 8006ef8:	2001      	movne	r0, #1
 8006efa:	f04f 30ff 	moveq.w	r0, #4294967295
 8006efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* Invalid value */
 8006f02:	2001      	movs	r0, #1
 8006f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
 8006f08:	2000      	movs	r0, #0
 8006f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
 8006f16:	2000      	movs	r0, #0
 8006f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f1c:	4620      	mov	r0, r4
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
	}

	return ncl;		/* Return new cluster number or error code */
}
 8006f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f22:	bf00      	nop

08006f24 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f28:	4604      	mov	r4, r0
 8006f2a:	460e      	mov	r6, r1
	DWORD clst;
	UINT i;


	i = dp->index + 1;
 8006f2c:	88c5      	ldrh	r5, [r0, #6]
 8006f2e:	3501      	adds	r5, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8006f30:	b2ab      	uxth	r3, r5
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d066      	beq.n	8007004 <dir_next+0xe0>
 8006f36:	6903      	ldr	r3, [r0, #16]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d066      	beq.n	800700a <dir_next+0xe6>
		return FR_NO_FILE;

	if (!(i % (SS(dp->fs) / SZ_DIR))) {	/* Sector changed? */
 8006f3c:	f015 070f 	ands.w	r7, r5, #15
 8006f40:	d157      	bne.n	8006ff2 <dir_next+0xce>
		dp->sect++;					/* Next sector */
 8006f42:	3301      	adds	r3, #1
 8006f44:	6103      	str	r3, [r0, #16]

		if (!dp->clust) {		/* Static table */
 8006f46:	68c1      	ldr	r1, [r0, #12]
 8006f48:	b921      	cbnz	r1, 8006f54 <dir_next+0x30>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8006f4a:	6803      	ldr	r3, [r0, #0]
 8006f4c:	891b      	ldrh	r3, [r3, #8]
 8006f4e:	429d      	cmp	r5, r3
 8006f50:	d25e      	bcs.n	8007010 <dir_next+0xec>
 8006f52:	e04e      	b.n	8006ff2 <dir_next+0xce>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIR)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8006f54:	6800      	ldr	r0, [r0, #0]
 8006f56:	7883      	ldrb	r3, [r0, #2]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	ea13 1315 	ands.w	r3, r3, r5, lsr #4
 8006f5e:	d148      	bne.n	8006ff2 <dir_next+0xce>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8006f60:	f7ff fe30 	bl	8006bc4 <get_fat>
 8006f64:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
 8006f66:	2801      	cmp	r0, #1
 8006f68:	d955      	bls.n	8007016 <dir_next+0xf2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006f6a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006f6e:	d055      	beq.n	800701c <dir_next+0xf8>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8006f70:	6820      	ldr	r0, [r4, #0]
 8006f72:	6943      	ldr	r3, [r0, #20]
 8006f74:	4598      	cmp	r8, r3
 8006f76:	d335      	bcc.n	8006fe4 <dir_next+0xc0>
#if !_FS_READONLY
					UINT c;
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8006f78:	2e00      	cmp	r6, #0
 8006f7a:	d052      	beq.n	8007022 <dir_next+0xfe>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006f7c:	68e1      	ldr	r1, [r4, #12]
 8006f7e:	f7ff ff69 	bl	8006e54 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006f82:	4680      	mov	r8, r0
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d04f      	beq.n	8007028 <dir_next+0x104>
					if (clst == 1) return FR_INT_ERR;
 8006f88:	2801      	cmp	r0, #1
 8006f8a:	d050      	beq.n	800702e <dir_next+0x10a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006f8c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006f90:	d050      	beq.n	8007034 <dir_next+0x110>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006f92:	6820      	ldr	r0, [r4, #0]
 8006f94:	f7ff fb3a 	bl	800660c <sync_window>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d14e      	bne.n	800703a <dir_next+0x116>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
 8006f9c:	6820      	ldr	r0, [r4, #0]
 8006f9e:	3030      	adds	r0, #48	; 0x30
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fa6:	f7ff fab5 	bl	8006514 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8006faa:	6826      	ldr	r6, [r4, #0]
 8006fac:	4630      	mov	r0, r6
 8006fae:	4641      	mov	r1, r8
 8006fb0:	f7ff fdfc 	bl	8006bac <clust2sect>
 8006fb4:	62f0      	str	r0, [r6, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006fb6:	2600      	movs	r6, #0
						dp->fs->wflag = 1;
 8006fb8:	f04f 0901 	mov.w	r9, #1
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006fbc:	e00b      	b.n	8006fd6 <dir_next+0xb2>
						dp->fs->wflag = 1;
 8006fbe:	f883 9004 	strb.w	r9, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8006fc2:	6820      	ldr	r0, [r4, #0]
 8006fc4:	f7ff fb22 	bl	800660c <sync_window>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	d139      	bne.n	8007040 <dir_next+0x11c>
						dp->fs->winsect++;
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd0:	3201      	adds	r2, #1
 8006fd2:	62da      	str	r2, [r3, #44]	; 0x2c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006fd4:	3601      	adds	r6, #1
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	789a      	ldrb	r2, [r3, #2]
 8006fda:	4296      	cmp	r6, r2
 8006fdc:	d3ef      	bcc.n	8006fbe <dir_next+0x9a>
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
						dp->fs->winsect++;
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8006fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe0:	1b92      	subs	r2, r2, r6
 8006fe2:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8006fe4:	f8c4 800c 	str.w	r8, [r4, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8006fe8:	6820      	ldr	r0, [r4, #0]
 8006fea:	4641      	mov	r1, r8
 8006fec:	f7ff fdde 	bl	8006bac <clust2sect>
 8006ff0:	6120      	str	r0, [r4, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006ff2:	80e5      	strh	r5, [r4, #6]
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */
 8006ff4:	017f      	lsls	r7, r7, #5
 8006ff6:	3730      	adds	r7, #48	; 0x30
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	443b      	add	r3, r7
 8006ffc:	6163      	str	r3, [r4, #20]

	return FR_OK;
 8006ffe:	2000      	movs	r0, #0
 8007000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	UINT i;


	i = dp->index + 1;
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
 8007004:	2004      	movs	r0, #4
 8007006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800700a:	2004      	movs	r0, #4
 800700c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i % (SS(dp->fs) / SZ_DIR))) {	/* Sector changed? */
		dp->sect++;					/* Next sector */

		if (!dp->clust) {		/* Static table */
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
				return FR_NO_FILE;
 8007010:	2004      	movs	r0, #4
 8007012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIR)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
 8007016:	2002      	movs	r0, #2
 8007018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800701c:	2001      	movs	r0, #1
 800701e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
#if !_FS_READONLY
					UINT c;
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007022:	2004      	movs	r0, #4
 8007024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007028:	2007      	movs	r0, #7
 800702a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if (clst == 1) return FR_INT_ERR;
 800702e:	2002      	movs	r0, #2
 8007030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007034:	2001      	movs	r0, #1
 8007036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800703a:	2001      	movs	r0, #1
 800703c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8007040:	2001      	movs	r0, #1

	dp->index = (WORD)i;	/* Current index */
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */

	return FR_OK;
}
 8007042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007046:	bf00      	nop

08007048 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	4604      	mov	r4, r0
 800704e:	460d      	mov	r5, r1
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007050:	780b      	ldrb	r3, [r1, #0]
 8007052:	2b2f      	cmp	r3, #47	; 0x2f
 8007054:	d001      	beq.n	800705a <follow_path+0x12>
 8007056:	2b5c      	cmp	r3, #92	; 0x5c
 8007058:	d100      	bne.n	800705c <follow_path+0x14>
		path++;
 800705a:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 800705c:	2300      	movs	r3, #0
 800705e:	60a3      	str	r3, [r4, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007060:	782b      	ldrb	r3, [r5, #0]
 8007062:	2b1f      	cmp	r3, #31
 8007064:	d807      	bhi.n	8007076 <follow_path+0x2e>
		res = dir_sdi(dp, 0);
 8007066:	4620      	mov	r0, r4
 8007068:	2100      	movs	r1, #0
 800706a:	f7ff fe1f 	bl	8006cac <dir_sdi>
 800706e:	4681      	mov	r9, r0
		dp->dir = 0;
 8007070:	2300      	movs	r3, #0
 8007072:	6163      	str	r3, [r4, #20]
 8007074:	e0e9      	b.n	800724a <follow_path+0x202>
 8007076:	462b      	mov	r3, r5
 8007078:	461d      	mov	r5, r3
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800707a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800707e:	2a2f      	cmp	r2, #47	; 0x2f
 8007080:	d0fa      	beq.n	8007078 <follow_path+0x30>
 8007082:	2a5c      	cmp	r2, #92	; 0x5c
 8007084:	d0f8      	beq.n	8007078 <follow_path+0x30>
	sfn = dp->fn;
 8007086:	f8d4 8018 	ldr.w	r8, [r4, #24]
	mem_set(sfn, ' ', 11);
 800708a:	4640      	mov	r0, r8
 800708c:	2120      	movs	r1, #32
 800708e:	220b      	movs	r2, #11
 8007090:	f7ff fa40 	bl	8006514 <mem_set>
	si = i = b = 0; ni = 8;
 8007094:	2000      	movs	r0, #0
 8007096:	4603      	mov	r3, r0
 8007098:	f04f 0908 	mov.w	r9, #8
 800709c:	4684      	mov	ip, r0
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
 800709e:	46cb      	mov	fp, r9
 80070a0:	f04f 0a0b 	mov.w	sl, #11
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80070a4:	3301      	adds	r3, #1
 80070a6:	18ea      	adds	r2, r5, r3
 80070a8:	f812 6c01 	ldrb.w	r6, [r2, #-1]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80070ac:	2e20      	cmp	r6, #32
 80070ae:	f240 80bb 	bls.w	8007228 <follow_path+0x1e0>
 80070b2:	2e2f      	cmp	r6, #47	; 0x2f
 80070b4:	f000 80b4 	beq.w	8007220 <follow_path+0x1d8>
 80070b8:	2e5c      	cmp	r6, #92	; 0x5c
 80070ba:	f000 80b1 	beq.w	8007220 <follow_path+0x1d8>
		if (c == '.' || i >= ni) {
 80070be:	2e2e      	cmp	r6, #46	; 0x2e
 80070c0:	f000 809d 	beq.w	80071fe <follow_path+0x1b6>
 80070c4:	4548      	cmp	r0, r9
 80070c6:	f080 808b 	bcs.w	80071e0 <follow_path+0x198>
 80070ca:	e006      	b.n	80070da <follow_path+0x92>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
			b <<= 2; continue;
 80070cc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80070d0:	fa5f fc8c 	uxtb.w	ip, ip
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
 80070d4:	4658      	mov	r0, fp
 80070d6:	46d1      	mov	r9, sl
 80070d8:	e7e4      	b.n	80070a4 <follow_path+0x5c>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended character? */
 80070da:	f016 0f80 	tst.w	r6, #128	; 0x80
 80070de:	f000 8093 	beq.w	8007208 <follow_path+0x1c0>
			b |= 3;						/* Eliminate NT flag */
 80070e2:	f04c 0c03 	orr.w	ip, ip, #3
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80070e6:	3e80      	subs	r6, #128	; 0x80
 80070e8:	4a59      	ldr	r2, [pc, #356]	; (8007250 <follow_path+0x208>)
 80070ea:	5d96      	ldrb	r6, [r2, r6]
 80070ec:	e08c      	b.n	8007208 <follow_path+0x1c0>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
 80070ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80070f2:	2a00      	cmp	r2, #0
 80070f4:	f000 808d 	beq.w	8007212 <follow_path+0x1ca>
 80070f8:	4297      	cmp	r7, r2
 80070fa:	d1f8      	bne.n	80070ee <follow_path+0xa6>
 80070fc:	f04f 0906 	mov.w	r9, #6
 8007100:	e0a3      	b.n	800724a <follow_path+0x202>
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
				b |= 2;
 8007102:	f04c 0c02 	orr.w	ip, ip, #2
 8007106:	e008      	b.n	800711a <follow_path+0xd2>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8007108:	f1a6 0261 	sub.w	r2, r6, #97	; 0x61
 800710c:	b2d2      	uxtb	r2, r2
 800710e:	2a19      	cmp	r2, #25
 8007110:	d803      	bhi.n	800711a <follow_path+0xd2>
					b |= 1; c -= 0x20;
 8007112:	f04c 0c01 	orr.w	ip, ip, #1
 8007116:	3e20      	subs	r6, #32
 8007118:	b2f6      	uxtb	r6, r6
				}
			}
			sfn[i++] = c;
 800711a:	f808 6000 	strb.w	r6, [r8, r0]
 800711e:	3001      	adds	r0, #1
 8007120:	e7c0      	b.n	80070a4 <follow_path+0x5c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8007122:	2800      	cmp	r0, #0
 8007124:	d05f      	beq.n	80071e6 <follow_path+0x19e>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first character collides with DDE, replace it with 0x05 */
 8007126:	f898 1000 	ldrb.w	r1, [r8]
 800712a:	29e5      	cmp	r1, #229	; 0xe5
 800712c:	bf04      	itt	eq
 800712e:	2105      	moveq	r1, #5
 8007130:	f888 1000 	strbeq.w	r1, [r8]

	if (ni == 8) b <<= 2;
 8007134:	f1b9 0f08 	cmp.w	r9, #8
 8007138:	bf04      	itt	eq
 800713a:	0092      	lsleq	r2, r2, #2
 800713c:	fa5f fc82 	uxtbeq.w	ip, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8007140:	f00c 0203 	and.w	r2, ip, #3
 8007144:	2a01      	cmp	r2, #1
 8007146:	bf08      	it	eq
 8007148:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800714c:	f00c 0c0c 	and.w	ip, ip, #12
 8007150:	f1bc 0f04 	cmp.w	ip, #4
 8007154:	bf08      	it	eq
 8007156:	f043 0308 	orreq.w	r3, r3, #8

	sfn[NS] = c;		/* Store NT flag, File name is created */
 800715a:	f888 300b 	strb.w	r3, [r8, #11]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800715e:	4620      	mov	r0, r4
 8007160:	2100      	movs	r1, #0
 8007162:	f7ff fda3 	bl	8006cac <dir_sdi>
	if (res != FR_OK) return res;
 8007166:	4681      	mov	r9, r0
 8007168:	2800      	cmp	r0, #0
 800716a:	d161      	bne.n	8007230 <follow_path+0x1e8>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800716c:	f04f 0800 	mov.w	r8, #0

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8007170:	6820      	ldr	r0, [r4, #0]
 8007172:	6921      	ldr	r1, [r4, #16]
 8007174:	f7ff fa80 	bl	8006678 <move_window>
		if (res != FR_OK) break;
 8007178:	4681      	mov	r9, r0
 800717a:	2800      	cmp	r0, #0
 800717c:	d158      	bne.n	8007230 <follow_path+0x1e8>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800717e:	6961      	ldr	r1, [r4, #20]
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007180:	780b      	ldrb	r3, [r1, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d05a      	beq.n	800723c <follow_path+0x1f4>
				if (!(dp->fn[NS] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8007186:	7acb      	ldrb	r3, [r1, #11]
 8007188:	f013 0f08 	tst.w	r3, #8
 800718c:	d10d      	bne.n	80071aa <follow_path+0x162>
 800718e:	69a0      	ldr	r0, [r4, #24]
 8007190:	f101 0c0b 	add.w	ip, r1, #11
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007194:	4602      	mov	r2, r0
 8007196:	460b      	mov	r3, r1
 8007198:	e001      	b.n	800719e <follow_path+0x156>
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800719a:	4563      	cmp	r3, ip
 800719c:	d051      	beq.n	8007242 <follow_path+0x1fa>
 800719e:	f813 7b01 	ldrb.w	r7, [r3], #1
 80071a2:	f812 6b01 	ldrb.w	r6, [r2], #1
 80071a6:	42b7      	cmp	r7, r6
 80071a8:	d0f7      	beq.n	800719a <follow_path+0x152>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80071aa:	4620      	mov	r0, r4
 80071ac:	4641      	mov	r1, r8
 80071ae:	f7ff feb9 	bl	8006f24 <dir_next>
	} while (res == FR_OK);
 80071b2:	4681      	mov	r9, r0
 80071b4:	2800      	cmp	r0, #0
 80071b6:	d0db      	beq.n	8007170 <follow_path+0x128>
 80071b8:	e03a      	b.n	8007230 <follow_path+0x1e8>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80071ba:	f003 0304 	and.w	r3, r3, #4
 80071be:	b2db      	uxtb	r3, r3
		dp->dir = 0;
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bf0c      	ite	eq
 80071c4:	f04f 0905 	moveq.w	r9, #5
 80071c8:	f04f 0904 	movne.w	r9, #4
 80071cc:	e03d      	b.n	800724a <follow_path+0x202>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80071ce:	7acb      	ldrb	r3, [r1, #11]
 80071d0:	f013 0f10 	tst.w	r3, #16
 80071d4:	d00a      	beq.n	80071ec <follow_path+0x1a4>
				res = FR_NO_PATH; break;
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80071d6:	6820      	ldr	r0, [r4, #0]
 80071d8:	f7ff f9a4 	bl	8006524 <ld_clust>
 80071dc:	60a0      	str	r0, [r4, #8]
		}
 80071de:	e74a      	b.n	8007076 <follow_path+0x2e>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
 80071e0:	f04f 0906 	mov.w	r9, #6
 80071e4:	e031      	b.n	800724a <follow_path+0x202>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80071e6:	f04f 0906 	mov.w	r9, #6
 80071ea:	e02e      	b.n	800724a <follow_path+0x202>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
 80071ec:	f04f 0905 	mov.w	r9, #5
 80071f0:	e02b      	b.n	800724a <follow_path+0x202>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80071f2:	f04f 0906 	mov.w	r9, #6
 80071f6:	e028      	b.n	800724a <follow_path+0x202>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
 80071f8:	f04f 0906 	mov.w	r9, #6
 80071fc:	e025      	b.n	800724a <follow_path+0x202>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80071fe:	f1b9 0f08 	cmp.w	r9, #8
 8007202:	f43f af63 	beq.w	80070cc <follow_path+0x84>
 8007206:	e7f4      	b.n	80071f2 <follow_path+0x1aa>
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8007208:	4637      	mov	r7, r6
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
 800720a:	2e22      	cmp	r6, #34	; 0x22
 800720c:	d0f4      	beq.n	80071f8 <follow_path+0x1b0>
 800720e:	4911      	ldr	r1, [pc, #68]	; (8007254 <follow_path+0x20c>)
 8007210:	e76d      	b.n	80070ee <follow_path+0xa6>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
 8007212:	f1a6 0241 	sub.w	r2, r6, #65	; 0x41
 8007216:	b2d2      	uxtb	r2, r2
 8007218:	2a19      	cmp	r2, #25
 800721a:	f67f af72 	bls.w	8007102 <follow_path+0xba>
 800721e:	e773      	b.n	8007108 <follow_path+0xc0>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007220:	441d      	add	r5, r3
 8007222:	4662      	mov	r2, ip
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8007224:	2300      	movs	r3, #0
 8007226:	e77c      	b.n	8007122 <follow_path+0xda>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007228:	441d      	add	r5, r3
 800722a:	4662      	mov	r2, ip
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800722c:	2304      	movs	r3, #4
 800722e:	e778      	b.n	8007122 <follow_path+0xda>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NS];
 8007230:	69a3      	ldr	r3, [r4, #24]
 8007232:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007234:	f1b9 0f04 	cmp.w	r9, #4
 8007238:	d107      	bne.n	800724a <follow_path+0x202>
 800723a:	e7be      	b.n	80071ba <follow_path+0x172>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NS];
 800723c:	69a3      	ldr	r3, [r4, #24]
 800723e:	7adb      	ldrb	r3, [r3, #11]
 8007240:	e7bb      	b.n	80071ba <follow_path+0x172>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007242:	7ac3      	ldrb	r3, [r0, #11]
 8007244:	f013 0f04 	tst.w	r3, #4
 8007248:	d0c1      	beq.n	80071ce <follow_path+0x186>
			dp->sclust = ld_clust(dp->fs, dir);
		}
	}

	return res;
}
 800724a:	4648      	mov	r0, r9
 800724c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007250:	0800eec4 	.word	0x0800eec4
 8007254:	0800eea4 	.word	0x0800eea4

08007258 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8007258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800725c:	4604      	mov	r4, r0
 800725e:	460f      	mov	r7, r1
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8007260:	2100      	movs	r1, #0
 8007262:	f7ff fd23 	bl	8006cac <dir_sdi>
	if (res == FR_OK) {
 8007266:	4603      	mov	r3, r0
 8007268:	b9c8      	cbnz	r0, 800729e <dir_alloc+0x46>
 800726a:	2500      	movs	r5, #0
			res = move_window(dp->fs, dp->sect);
			if (res != FR_OK) break;
			if (dp->dir[0] == DDE || dp->dir[0] == 0) {	/* Is it a blank entry? */
				if (++n == nent) break;	/* A block of contiguous entries is found */
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800726c:	46a8      	mov	r8, r5
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800726e:	2601      	movs	r6, #1

	res = dir_sdi(dp, 0);
	if (res == FR_OK) {
		n = 0;
		do {
			res = move_window(dp->fs, dp->sect);
 8007270:	6820      	ldr	r0, [r4, #0]
 8007272:	6921      	ldr	r1, [r4, #16]
 8007274:	f7ff fa00 	bl	8006678 <move_window>
			if (res != FR_OK) break;
 8007278:	4603      	mov	r3, r0
 800727a:	b980      	cbnz	r0, 800729e <dir_alloc+0x46>
			if (dp->dir[0] == DDE || dp->dir[0] == 0) {	/* Is it a blank entry? */
 800727c:	6962      	ldr	r2, [r4, #20]
 800727e:	7812      	ldrb	r2, [r2, #0]
 8007280:	2ae5      	cmp	r2, #229	; 0xe5
 8007282:	d000      	beq.n	8007286 <dir_alloc+0x2e>
 8007284:	b91a      	cbnz	r2, 800728e <dir_alloc+0x36>
				if (++n == nent) break;	/* A block of contiguous entries is found */
 8007286:	3501      	adds	r5, #1
 8007288:	42bd      	cmp	r5, r7
 800728a:	d101      	bne.n	8007290 <dir_alloc+0x38>
 800728c:	e00a      	b.n	80072a4 <dir_alloc+0x4c>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800728e:	4645      	mov	r5, r8
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8007290:	4620      	mov	r0, r4
 8007292:	4631      	mov	r1, r6
 8007294:	f7ff fe46 	bl	8006f24 <dir_next>
		} while (res == FR_OK);
 8007298:	4603      	mov	r3, r0
 800729a:	2800      	cmp	r0, #0
 800729c:	d0e8      	beq.n	8007270 <dir_alloc+0x18>
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800729e:	2b04      	cmp	r3, #4
 80072a0:	bf08      	it	eq
 80072a2:	2307      	moveq	r3, #7
	return res;
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072aa:	bf00      	nop

080072ac <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	4605      	mov	r5, r0
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80072b0:	2101      	movs	r1, #1
 80072b2:	f7ff ffd1 	bl	8007258 <dir_alloc>
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80072b6:	4604      	mov	r4, r0
 80072b8:	b990      	cbnz	r0, 80072e0 <dir_register+0x34>
		res = move_window(dp->fs, dp->sect);
 80072ba:	6828      	ldr	r0, [r5, #0]
 80072bc:	6929      	ldr	r1, [r5, #16]
 80072be:	f7ff f9db 	bl	8006678 <move_window>
		if (res == FR_OK) {
 80072c2:	4604      	mov	r4, r0
 80072c4:	b960      	cbnz	r0, 80072e0 <dir_register+0x34>
			mem_set(dp->dir, 0, SZ_DIR);	/* Clean the entry */
 80072c6:	6968      	ldr	r0, [r5, #20]
 80072c8:	2100      	movs	r1, #0
 80072ca:	2220      	movs	r2, #32
 80072cc:	f7ff f922 	bl	8006514 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80072d0:	6968      	ldr	r0, [r5, #20]
 80072d2:	69a9      	ldr	r1, [r5, #24]
 80072d4:	220b      	movs	r2, #11
 80072d6:	f7ff f913 	bl	8006500 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NS] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80072da:	682b      	ldr	r3, [r5, #0]
 80072dc:	2201      	movs	r2, #1
 80072de:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
}
 80072e0:	4620      	mov	r0, r4
 80072e2:	bd38      	pop	{r3, r4, r5, pc}

080072e4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e6:	4604      	mov	r4, r0
 80072e8:	460f      	mov	r7, r1
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 80072ea:	2504      	movs	r5, #4
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)(a == AM_VOL) == vol)	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 80072ec:	2600      	movs	r6, #0
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dp->sect) {
 80072ee:	e01c      	b.n	800732a <dir_read+0x46>
		res = move_window(dp->fs, dp->sect);
 80072f0:	6820      	ldr	r0, [r4, #0]
 80072f2:	f7ff f9c1 	bl	8006678 <move_window>
		if (res != FR_OK) break;
 80072f6:	4605      	mov	r5, r0
 80072f8:	b9d8      	cbnz	r0, 8007332 <dir_read+0x4e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80072fa:	6962      	ldr	r2, [r4, #20]
		c = dir[DIR_Name];
 80072fc:	7813      	ldrb	r3, [r2, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80072fe:	b1db      	cbz	r3, 8007338 <dir_read+0x54>
		a = dir[DIR_Attr] & AM_MASK;
 8007300:	7ad2      	ldrb	r2, [r2, #11]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)(a == AM_VOL) == vol)	/* Is it a valid entry? */
 8007302:	2be5      	cmp	r3, #229	; 0xe5
 8007304:	d00b      	beq.n	800731e <dir_read+0x3a>
 8007306:	2b2e      	cmp	r3, #46	; 0x2e
 8007308:	d009      	beq.n	800731e <dir_read+0x3a>
		res = move_window(dp->fs, dp->sect);
		if (res != FR_OK) break;
		dir = dp->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		a = dir[DIR_Attr] & AM_MASK;
 800730a:	f002 033f 	and.w	r3, r2, #63	; 0x3f
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)(a == AM_VOL) == vol)	/* Is it a valid entry? */
 800730e:	2b0f      	cmp	r3, #15
 8007310:	d005      	beq.n	800731e <dir_read+0x3a>
 8007312:	2b08      	cmp	r3, #8
 8007314:	bf14      	ite	ne
 8007316:	2300      	movne	r3, #0
 8007318:	2301      	moveq	r3, #1
 800731a:	42bb      	cmp	r3, r7
 800731c:	d00e      	beq.n	800733c <dir_read+0x58>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 800731e:	4620      	mov	r0, r4
 8007320:	4631      	mov	r1, r6
 8007322:	f7ff fdff 	bl	8006f24 <dir_next>
		if (res != FR_OK) break;
 8007326:	4605      	mov	r5, r0
 8007328:	b918      	cbnz	r0, 8007332 <dir_read+0x4e>
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dp->sect) {
 800732a:	6921      	ldr	r1, [r4, #16]
 800732c:	2900      	cmp	r1, #0
 800732e:	d1df      	bne.n	80072f0 <dir_read+0xc>
#endif
		res = dir_next(dp, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dp->sect = 0;
 8007330:	b125      	cbz	r5, 800733c <dir_read+0x58>
 8007332:	2300      	movs	r3, #0
 8007334:	6123      	str	r3, [r4, #16]
 8007336:	e001      	b.n	800733c <dir_read+0x58>
	while (dp->sect) {
		res = move_window(dp->fs, dp->sect);
		if (res != FR_OK) break;
		dir = dp->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007338:	2504      	movs	r5, #4
 800733a:	e7fa      	b.n	8007332 <dir_read+0x4e>
	}

	if (res != FR_OK) dp->sect = 0;

	return res;
}
 800733c:	4628      	mov	r0, r5
 800733e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007340 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	4604      	mov	r4, r0
 8007344:	460e      	mov	r6, r1
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007346:	2901      	cmp	r1, #1
 8007348:	d924      	bls.n	8007394 <remove_chain+0x54>
 800734a:	6943      	ldr	r3, [r0, #20]
 800734c:	4299      	cmp	r1, r3
 800734e:	d223      	bcs.n	8007398 <remove_chain+0x58>
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8007350:	2700      	movs	r7, #0
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8007352:	4620      	mov	r0, r4
 8007354:	4631      	mov	r1, r6
 8007356:	f7ff fc35 	bl	8006bc4 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 800735a:	4605      	mov	r5, r0
 800735c:	b1f0      	cbz	r0, 800739c <remove_chain+0x5c>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800735e:	2801      	cmp	r0, #1
 8007360:	d01e      	beq.n	80073a0 <remove_chain+0x60>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8007362:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007366:	d01d      	beq.n	80073a4 <remove_chain+0x64>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8007368:	4620      	mov	r0, r4
 800736a:	4631      	mov	r1, r6
 800736c:	463a      	mov	r2, r7
 800736e:	f7ff fced 	bl	8006d4c <put_fat>
			if (res != FR_OK) break;
 8007372:	4601      	mov	r1, r0
 8007374:	b9b8      	cbnz	r0, 80073a6 <remove_chain+0x66>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8007376:	6923      	ldr	r3, [r4, #16]
 8007378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737c:	d005      	beq.n	800738a <remove_chain+0x4a>
				fs->free_clust++;
 800737e:	3301      	adds	r3, #1
 8007380:	6123      	str	r3, [r4, #16]
				fs->fsi_flag |= 1;
 8007382:	7963      	ldrb	r3, [r4, #5]
 8007384:	f043 0301 	orr.w	r3, r3, #1
 8007388:	7163      	strb	r3, [r4, #5]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800738a:	6963      	ldr	r3, [r4, #20]
 800738c:	42ab      	cmp	r3, r5
 800738e:	d90a      	bls.n	80073a6 <remove_chain+0x66>
 8007390:	462e      	mov	r6, r5
 8007392:	e7de      	b.n	8007352 <remove_chain+0x12>
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
 8007394:	2102      	movs	r1, #2
 8007396:	e006      	b.n	80073a6 <remove_chain+0x66>
 8007398:	2102      	movs	r1, #2
 800739a:	e004      	b.n	80073a6 <remove_chain+0x66>
 800739c:	2100      	movs	r1, #0
 800739e:	e002      	b.n	80073a6 <remove_chain+0x66>
	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80073a0:	2102      	movs	r1, #2
 80073a2:	e000      	b.n	80073a6 <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80073a4:	2101      	movs	r1, #1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
 80073a6:	4608      	mov	r0, r1
 80073a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073aa:	bf00      	nop

080073ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80073ac:	b510      	push	{r4, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	9001      	str	r0, [sp, #4]
 80073b2:	9100      	str	r1, [sp, #0]
 80073b4:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80073b6:	a804      	add	r0, sp, #16
 80073b8:	f840 1d04 	str.w	r1, [r0, #-4]!


	vol = get_ldnumber(&rp);
 80073bc:	f7ff f8f6 	bl	80065ac <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80073c0:	2800      	cmp	r0, #0
 80073c2:	db16      	blt.n	80073f2 <f_mount+0x46>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80073c4:	4b11      	ldr	r3, [pc, #68]	; (800740c <f_mount+0x60>)
 80073c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
 80073ca:	b10b      	cbz	r3, 80073d0 <f_mount+0x24>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80073cc:	2200      	movs	r2, #0
 80073ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80073d0:	9b01      	ldr	r3, [sp, #4]
 80073d2:	b1a3      	cbz	r3, 80073fe <f_mount+0x52>
		fs->fs_type = 0;				/* Clear new fs object */
 80073d4:	2200      	movs	r2, #0
 80073d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80073d8:	9b01      	ldr	r3, [sp, #4]
 80073da:	4a0c      	ldr	r2, [pc, #48]	; (800740c <f_mount+0x60>)
 80073dc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80073e0:	b14b      	cbz	r3, 80073f6 <f_mount+0x4a>
 80073e2:	2c01      	cmp	r4, #1
 80073e4:	d109      	bne.n	80073fa <f_mount+0x4e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80073e6:	a801      	add	r0, sp, #4
 80073e8:	4669      	mov	r1, sp
 80073ea:	2200      	movs	r2, #0
 80073ec:	f7ff f9c2 	bl	8006774 <find_volume>
	LEAVE_FF(fs, res);
 80073f0:	e00a      	b.n	8007408 <f_mount+0x5c>
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 80073f2:	200b      	movs	r0, #11
 80073f4:	e008      	b.n	8007408 <f_mount+0x5c>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80073f6:	2000      	movs	r0, #0
 80073f8:	e006      	b.n	8007408 <f_mount+0x5c>
 80073fa:	2000      	movs	r0, #0
 80073fc:	e004      	b.n	8007408 <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80073fe:	2300      	movs	r3, #0
 8007400:	4a02      	ldr	r2, [pc, #8]	; (800740c <f_mount+0x60>)
 8007402:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007406:	4618      	mov	r0, r3

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8007408:	b004      	add	sp, #16
 800740a:	bd10      	pop	{r4, pc}
 800740c:	20000bdc 	.word	0x20000bdc

08007410 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007414:	b08d      	sub	sp, #52	; 0x34
 8007416:	9101      	str	r1, [sp, #4]
 8007418:	4615      	mov	r5, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
 800741a:	4604      	mov	r4, r0
 800741c:	2800      	cmp	r0, #0
 800741e:	f000 8096 	beq.w	800754e <f_open+0x13e>
	fp->fs = 0;			/* Clear file object */
 8007422:	2300      	movs	r3, #0
 8007424:	6003      	str	r3, [r0, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007426:	a805      	add	r0, sp, #20
 8007428:	a901      	add	r1, sp, #4
 800742a:	f002 021e 	and.w	r2, r2, #30
 800742e:	f7ff f9a1 	bl	8006774 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007432:	2800      	cmp	r0, #0
 8007434:	f040 808d 	bne.w	8007552 <f_open+0x142>
	if (!fp) return FR_INVALID_OBJECT;
	fp->fs = 0;			/* Clear file object */

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007438:	f005 071f 	and.w	r7, r5, #31
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
 800743c:	ab02      	add	r3, sp, #8
 800743e:	930b      	str	r3, [sp, #44]	; 0x2c
		res = follow_path(&dj, path);	/* Follow the file path */
 8007440:	a805      	add	r0, sp, #20
 8007442:	9901      	ldr	r1, [sp, #4]
 8007444:	f7ff fe00 	bl	8007048 <follow_path>
		dir = dj.dir;
 8007448:	9e0a      	ldr	r6, [sp, #40]	; 0x28
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800744a:	4603      	mov	r3, r0
 800744c:	2800      	cmp	r0, #0
 800744e:	f040 8086 	bne.w	800755e <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 8007452:	2e00      	cmp	r6, #0
 8007454:	d17e      	bne.n	8007554 <f_open+0x144>
 8007456:	e081      	b.n	800755c <f_open+0x14c>
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
 8007458:	b15b      	cbz	r3, 8007472 <f_open+0x62>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800745a:	2b04      	cmp	r3, #4
 800745c:	f040 808b 	bne.w	8007576 <f_open+0x166>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8007460:	a805      	add	r0, sp, #20
 8007462:	f7ff ff23 	bl	80072ac <dir_register>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007466:	f047 0708 	orr.w	r7, r7, #8
				dir = dj.dir;					/* New entry */
 800746a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800746c:	4603      	mov	r3, r0
 800746e:	b138      	cbz	r0, 8007480 <f_open+0x70>
 8007470:	e081      	b.n	8007576 <f_open+0x166>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007472:	7af3      	ldrb	r3, [r6, #11]
 8007474:	f013 0f11 	tst.w	r3, #17
 8007478:	d176      	bne.n	8007568 <f_open+0x158>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800747a:	f015 0f04 	tst.w	r5, #4
 800747e:	d175      	bne.n	800756c <f_open+0x15c>
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007480:	f017 0f08 	tst.w	r7, #8
 8007484:	d03c      	beq.n	8007500 <f_open+0xf0>
				dw = get_fattime();				/* Created time */
 8007486:	f7fe fcdb 	bl	8005e40 <get_fattime>
				ST_DWORD(dir+DIR_CrtTime, dw);
 800748a:	73b0      	strb	r0, [r6, #14]
 800748c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8007490:	73f3      	strb	r3, [r6, #15]
 8007492:	0c03      	lsrs	r3, r0, #16
 8007494:	7433      	strb	r3, [r6, #16]
 8007496:	0e00      	lsrs	r0, r0, #24
 8007498:	7470      	strb	r0, [r6, #17]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800749a:	2500      	movs	r5, #0
 800749c:	72f5      	strb	r5, [r6, #11]
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
 800749e:	7735      	strb	r5, [r6, #28]
 80074a0:	7775      	strb	r5, [r6, #29]
 80074a2:	77b5      	strb	r5, [r6, #30]
 80074a4:	77f5      	strb	r5, [r6, #31]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80074a6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80074aa:	4640      	mov	r0, r8
 80074ac:	4631      	mov	r1, r6
 80074ae:	f7ff f839 	bl	8006524 <ld_clust>
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
 80074b2:	76b5      	strb	r5, [r6, #26]
 80074b4:	76f5      	strb	r5, [r6, #27]
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 80074b6:	7535      	strb	r5, [r6, #20]
 80074b8:	7575      	strb	r5, [r6, #21]
				ST_DWORD(dir+DIR_CrtTime, dw);
				dir[DIR_Attr] = 0;				/* Reset attribute */
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 80074ba:	2301      	movs	r3, #1
 80074bc:	f888 3004 	strb.w	r3, [r8, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 80074c0:	4605      	mov	r5, r0
 80074c2:	b1e8      	cbz	r0, 8007500 <f_open+0xf0>
					dw = dj.fs->winsect;
 80074c4:	f8d8 902c 	ldr.w	r9, [r8, #44]	; 0x2c
					res = remove_chain(dj.fs, cl);
 80074c8:	4640      	mov	r0, r8
 80074ca:	4629      	mov	r1, r5
 80074cc:	f7ff ff38 	bl	8007340 <remove_chain>
					if (res == FR_OK) {
 80074d0:	4603      	mov	r3, r0
 80074d2:	2800      	cmp	r0, #0
 80074d4:	d14f      	bne.n	8007576 <f_open+0x166>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80074d6:	9805      	ldr	r0, [sp, #20]
 80074d8:	3d01      	subs	r5, #1
 80074da:	60c5      	str	r5, [r0, #12]
						res = move_window(dj.fs, dw);
 80074dc:	4649      	mov	r1, r9
 80074de:	f7ff f8cb 	bl	8006678 <move_window>
 80074e2:	4603      	mov	r3, r0
 80074e4:	e00a      	b.n	80074fc <f_open+0xec>
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80074e6:	7af3      	ldrb	r3, [r6, #11]
 80074e8:	f013 0f10 	tst.w	r3, #16
 80074ec:	d140      	bne.n	8007570 <f_open+0x160>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80074ee:	f015 0f02 	tst.w	r5, #2
 80074f2:	d005      	beq.n	8007500 <f_open+0xf0>
 80074f4:	f013 0f01 	tst.w	r3, #1
 80074f8:	d13c      	bne.n	8007574 <f_open+0x164>
 80074fa:	e001      	b.n	8007500 <f_open+0xf0>
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d13a      	bne.n	8007576 <f_open+0x166>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007500:	f017 0f08 	tst.w	r7, #8
				mode |= FA__WRITTEN;
 8007504:	bf18      	it	ne
 8007506:	f047 0720 	orrne.w	r7, r7, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800750a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800750e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8007512:	61e3      	str	r3, [r4, #28]
			fp->dir_ptr = dir;
 8007514:	6226      	str	r6, [r4, #32]
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
 8007516:	71a7      	strb	r7, [r4, #6]
			fp->err = 0;						/* Clear error flag */
 8007518:	2500      	movs	r5, #0
 800751a:	71e5      	strb	r5, [r4, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800751c:	4640      	mov	r0, r8
 800751e:	4631      	mov	r1, r6
 8007520:	f7ff f800 	bl	8006524 <ld_clust>
 8007524:	6120      	str	r0, [r4, #16]
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 8007526:	7ff2      	ldrb	r2, [r6, #31]
 8007528:	7fb3      	ldrb	r3, [r6, #30]
 800752a:	041b      	lsls	r3, r3, #16
 800752c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007530:	7f32      	ldrb	r2, [r6, #28]
 8007532:	4313      	orrs	r3, r2
 8007534:	7f72      	ldrb	r2, [r6, #29]
 8007536:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800753a:	60e3      	str	r3, [r4, #12]
			fp->fptr = 0;						/* File pointer */
 800753c:	60a5      	str	r5, [r4, #8]
			fp->dsect = 0;
 800753e:	61a5      	str	r5, [r4, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007540:	f8c4 8000 	str.w	r8, [r4]
			fp->id = fp->fs->id;
 8007544:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8007548:	80a3      	strh	r3, [r4, #4]
 800754a:	4628      	mov	r0, r5
 800754c:	e014      	b.n	8007578 <f_open+0x168>
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
 800754e:	2009      	movs	r0, #9
 8007550:	e012      	b.n	8007578 <f_open+0x168>
 8007552:	e011      	b.n	8007578 <f_open+0x168>
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007554:	f015 0f1c 	tst.w	r5, #28
 8007558:	d18b      	bne.n	8007472 <f_open+0x62>
 800755a:	e7c4      	b.n	80074e6 <f_open+0xd6>
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (!dir)	/* Default directory itself */
				res = FR_INVALID_NAME;
 800755c:	2306      	movs	r3, #6
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800755e:	f015 0f1c 	tst.w	r5, #28
 8007562:	f47f af79 	bne.w	8007458 <f_open+0x48>
 8007566:	e7c9      	b.n	80074fc <f_open+0xec>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
 8007568:	2307      	movs	r3, #7
 800756a:	e004      	b.n	8007576 <f_open+0x166>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
 800756c:	2308      	movs	r3, #8
 800756e:	e002      	b.n	8007576 <f_open+0x166>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
					res = FR_NO_FILE;
 8007570:	2304      	movs	r3, #4
 8007572:	e000      	b.n	8007576 <f_open+0x166>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
 8007574:	2307      	movs	r3, #7
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
 8007576:	4618      	mov	r0, r3
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8007578:	b00d      	add	sp, #52	; 0x34
 800757a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800757e:	bf00      	nop

08007580 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007584:	b083      	sub	sp, #12
 8007586:	4604      	mov	r4, r0
 8007588:	460f      	mov	r7, r1
 800758a:	4615      	mov	r5, r2
 800758c:	461e      	mov	r6, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800758e:	2300      	movs	r3, #0
 8007590:	6033      	str	r3, [r6, #0]

	res = validate(fp);						/* Check validity */
 8007592:	f7ff f8d3 	bl	800673c <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007596:	2800      	cmp	r0, #0
 8007598:	f040 80c5 	bne.w	8007726 <f_write+0x1a6>
	if (fp->err)							/* Check error */
 800759c:	79e0      	ldrb	r0, [r4, #7]
 800759e:	2800      	cmp	r0, #0
 80075a0:	f040 80c3 	bne.w	800772a <f_write+0x1aa>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80075a4:	79a3      	ldrb	r3, [r4, #6]
 80075a6:	f013 0f02 	tst.w	r3, #2
 80075aa:	f000 80bd 	beq.w	8007728 <f_write+0x1a8>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80075ae:	68a3      	ldr	r3, [r4, #8]
 80075b0:	42dd      	cmn	r5, r3
 80075b2:	f080 80ad 	bcs.w	8007710 <f_write+0x190>

	for ( ;  btw;							/* Repeat until all data written */
 80075b6:	2d00      	cmp	r5, #0
 80075b8:	f000 80aa 	beq.w	8007710 <f_write+0x190>
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1))
 80075bc:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80075c0:	9301      	str	r3, [sp, #4]
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80075c2:	68a3      	ldr	r3, [r4, #8]
 80075c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075c8:	2a00      	cmp	r2, #0
 80075ca:	f040 8084 	bne.w	80076d6 <f_write+0x156>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80075ce:	6820      	ldr	r0, [r4, #0]
 80075d0:	f890 b002 	ldrb.w	fp, [r0, #2]
 80075d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075d8:	ea0b 2b53 	and.w	fp, fp, r3, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 80075dc:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
 80075e0:	d11d      	bne.n	800761e <f_write+0x9e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80075e2:	b933      	cbnz	r3, 80075f2 <f_write+0x72>
					clst = fp->sclust;		/* Follow from the origin */
 80075e4:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
 80075e6:	b95b      	cbnz	r3, 8007600 <f_write+0x80>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80075e8:	2100      	movs	r1, #0
 80075ea:	f7ff fc33 	bl	8006e54 <create_chain>
 80075ee:	4603      	mov	r3, r0
 80075f0:	e003      	b.n	80075fa <f_write+0x7a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80075f2:	6961      	ldr	r1, [r4, #20]
 80075f4:	f7ff fc2e 	bl	8006e54 <create_chain>
 80075f8:	4603      	mov	r3, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f000 8088 	beq.w	8007710 <f_write+0x190>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007600:	2b01      	cmp	r3, #1
 8007602:	d102      	bne.n	800760a <f_write+0x8a>
 8007604:	2002      	movs	r0, #2
 8007606:	71e0      	strb	r0, [r4, #7]
 8007608:	e08f      	b.n	800772a <f_write+0x1aa>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800760a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760e:	d102      	bne.n	8007616 <f_write+0x96>
 8007610:	2001      	movs	r0, #1
 8007612:	71e0      	strb	r0, [r4, #7]
 8007614:	e089      	b.n	800772a <f_write+0x1aa>
				fp->clust = clst;			/* Update current cluster */
 8007616:	6163      	str	r3, [r4, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8007618:	6922      	ldr	r2, [r4, #16]
 800761a:	b902      	cbnz	r2, 800761e <f_write+0x9e>
 800761c:	6123      	str	r3, [r4, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800761e:	79a3      	ldrb	r3, [r4, #6]
 8007620:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007624:	d00e      	beq.n	8007644 <f_write+0xc4>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	7858      	ldrb	r0, [r3, #1]
 800762a:	9901      	ldr	r1, [sp, #4]
 800762c:	69a2      	ldr	r2, [r4, #24]
 800762e:	2301      	movs	r3, #1
 8007630:	f7fe fbee 	bl	8005e10 <disk_write>
 8007634:	b110      	cbz	r0, 800763c <f_write+0xbc>
					ABORT(fp->fs, FR_DISK_ERR);
 8007636:	2001      	movs	r0, #1
 8007638:	71e0      	strb	r0, [r4, #7]
 800763a:	e076      	b.n	800772a <f_write+0x1aa>
				fp->flag &= ~FA__DIRTY;
 800763c:	79a3      	ldrb	r3, [r4, #6]
 800763e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007642:	71a3      	strb	r3, [r4, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007644:	f8d4 8000 	ldr.w	r8, [r4]
 8007648:	4640      	mov	r0, r8
 800764a:	6961      	ldr	r1, [r4, #20]
 800764c:	f7ff faae 	bl	8006bac <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007650:	4681      	mov	r9, r0
 8007652:	b910      	cbnz	r0, 800765a <f_write+0xda>
 8007654:	2002      	movs	r0, #2
 8007656:	71e0      	strb	r0, [r4, #7]
 8007658:	e067      	b.n	800772a <f_write+0x1aa>
			sect += csect;
 800765a:	44d9      	add	r9, fp
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
 800765c:	ea5f 2a55 	movs.w	sl, r5, lsr #9
 8007660:	d025      	beq.n	80076ae <f_write+0x12e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007662:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007666:	eb0a 020b 	add.w	r2, sl, fp
 800766a:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 800766c:	bf88      	it	hi
 800766e:	ebcb 0a03 	rsbhi	sl, fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, cc))
 8007672:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007676:	4639      	mov	r1, r7
 8007678:	464a      	mov	r2, r9
 800767a:	4653      	mov	r3, sl
 800767c:	f7fe fbc8 	bl	8005e10 <disk_write>
 8007680:	b110      	cbz	r0, 8007688 <f_write+0x108>
					ABORT(fp->fs, FR_DISK_ERR);
 8007682:	2001      	movs	r0, #1
 8007684:	71e0      	strb	r0, [r4, #7]
 8007686:	e050      	b.n	800772a <f_write+0x1aa>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007688:	69a3      	ldr	r3, [r4, #24]
 800768a:	ebc9 0103 	rsb	r1, r9, r3
 800768e:	458a      	cmp	sl, r1
 8007690:	d90a      	bls.n	80076a8 <f_write+0x128>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007692:	9801      	ldr	r0, [sp, #4]
 8007694:	eb07 2141 	add.w	r1, r7, r1, lsl #9
 8007698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800769c:	f7fe ff30 	bl	8006500 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80076a0:	79a3      	ldrb	r3, [r4, #6]
 80076a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076a6:	71a3      	strb	r3, [r4, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80076a8:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
				continue;
 80076ac:	e025      	b.n	80076fa <f_write+0x17a>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80076ae:	69a3      	ldr	r3, [r4, #24]
 80076b0:	454b      	cmp	r3, r9
 80076b2:	d00e      	beq.n	80076d2 <f_write+0x152>
				if (fp->fptr < fp->fsize &&
 80076b4:	68a2      	ldr	r2, [r4, #8]
 80076b6:	68e3      	ldr	r3, [r4, #12]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d20a      	bcs.n	80076d2 <f_write+0x152>
					disk_read(fp->fs->drv, fp->buf, sect, 1))
 80076bc:	f898 0001 	ldrb.w	r0, [r8, #1]
 80076c0:	9901      	ldr	r1, [sp, #4]
 80076c2:	464a      	mov	r2, r9
 80076c4:	2301      	movs	r3, #1
 80076c6:	f7fe fb99 	bl	8005dfc <disk_read>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
 80076ca:	b110      	cbz	r0, 80076d2 <f_write+0x152>
					disk_read(fp->fs->drv, fp->buf, sect, 1))
						ABORT(fp->fs, FR_DISK_ERR);
 80076cc:	2001      	movs	r0, #1
 80076ce:	71e0      	strb	r0, [r4, #7]
 80076d0:	e02b      	b.n	800772a <f_write+0x1aa>
			}
#endif
			fp->dsect = sect;
 80076d2:	f8c4 9018 	str.w	r9, [r4, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80076d6:	68a0      	ldr	r0, [r4, #8]
 80076d8:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80076dc:	f5c0 7a00 	rsb	sl, r0, #512	; 0x200
 80076e0:	4555      	cmp	r5, sl
 80076e2:	bf38      	it	cc
 80076e4:	46aa      	movcc	sl, r5
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80076e6:	4420      	add	r0, r4
 80076e8:	3024      	adds	r0, #36	; 0x24
 80076ea:	4639      	mov	r1, r7
 80076ec:	4652      	mov	r2, sl
 80076ee:	f7fe ff07 	bl	8006500 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80076f2:	79a3      	ldrb	r3, [r4, #6]
 80076f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076f8:	71a3      	strb	r3, [r4, #6]
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80076fa:	4457      	add	r7, sl
 80076fc:	68a3      	ldr	r3, [r4, #8]
 80076fe:	4453      	add	r3, sl
 8007700:	60a3      	str	r3, [r4, #8]
 8007702:	6833      	ldr	r3, [r6, #0]
 8007704:	4453      	add	r3, sl
 8007706:	6033      	str	r3, [r6, #0]
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
 8007708:	ebb5 050a 	subs.w	r5, r5, sl
 800770c:	f47f af59 	bne.w	80075c2 <f_write+0x42>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8007710:	68a3      	ldr	r3, [r4, #8]
 8007712:	68e2      	ldr	r2, [r4, #12]
 8007714:	4293      	cmp	r3, r2
 8007716:	bf88      	it	hi
 8007718:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800771a:	79a3      	ldrb	r3, [r4, #6]
 800771c:	f043 0320 	orr.w	r3, r3, #32
 8007720:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8007722:	2000      	movs	r0, #0
 8007724:	e001      	b.n	800772a <f_write+0x1aa>
 8007726:	e000      	b.n	800772a <f_write+0x1aa>
	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)							/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
 8007728:	2007      	movs	r0, #7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
 800772a:	b003      	add	sp, #12
 800772c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007730 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8007730:	b570      	push	{r4, r5, r6, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	4604      	mov	r4, r0
 8007736:	460e      	mov	r6, r1
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8007738:	290a      	cmp	r1, #10
 800773a:	d102      	bne.n	8007742 <putc_bfd+0x12>
		putc_bfd(pb, '\r');
 800773c:	210d      	movs	r1, #13
 800773e:	f7ff fff7 	bl	8007730 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8007742:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 8007744:	2b00      	cmp	r3, #0
 8007746:	db14      	blt.n	8007772 <putc_bfd+0x42>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007748:	1c5d      	adds	r5, r3, #1
 800774a:	4423      	add	r3, r4
 800774c:	731e      	strb	r6, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800774e:	2d3c      	cmp	r5, #60	; 0x3c
 8007750:	dd0b      	ble.n	800776a <putc_bfd+0x3a>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007752:	4621      	mov	r1, r4
 8007754:	f851 0b0c 	ldr.w	r0, [r1], #12
 8007758:	462a      	mov	r2, r5
 800775a:	ab01      	add	r3, sp, #4
 800775c:	f7ff ff10 	bl	8007580 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007760:	9b01      	ldr	r3, [sp, #4]
 8007762:	1aed      	subs	r5, r5, r3
 8007764:	bf18      	it	ne
 8007766:	f06f 0500 	mvnne.w	r5, #0
	}
	pb->idx = i;
 800776a:	6065      	str	r5, [r4, #4]
	pb->nchr++;
 800776c:	68a3      	ldr	r3, [r4, #8]
 800776e:	3301      	adds	r3, #1
 8007770:	60a3      	str	r3, [r4, #8]
}
 8007772:	b002      	add	sp, #8
 8007774:	bd70      	pop	{r4, r5, r6, pc}
 8007776:	bf00      	nop

08007778 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007778:	b538      	push	{r3, r4, r5, lr}
 800777a:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800777c:	f7fe ffde 	bl	800673c <validate>
	if (res == FR_OK) {
 8007780:	2800      	cmp	r0, #0
 8007782:	d149      	bne.n	8007818 <f_sync+0xa0>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007784:	79a3      	ldrb	r3, [r4, #6]
 8007786:	f013 0f20 	tst.w	r3, #32
 800778a:	d046      	beq.n	800781a <f_sync+0xa2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800778c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007790:	d00d      	beq.n	80077ae <f_sync+0x36>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
 8007792:	4621      	mov	r1, r4
 8007794:	f851 3b24 	ldr.w	r3, [r1], #36
 8007798:	7858      	ldrb	r0, [r3, #1]
 800779a:	69a2      	ldr	r2, [r4, #24]
 800779c:	2301      	movs	r3, #1
 800779e:	f7fe fb37 	bl	8005e10 <disk_write>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	d13b      	bne.n	800781e <f_sync+0xa6>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 80077a6:	79a3      	ldrb	r3, [r4, #6]
 80077a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077ac:	71a3      	strb	r3, [r4, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80077ae:	6820      	ldr	r0, [r4, #0]
 80077b0:	69e1      	ldr	r1, [r4, #28]
 80077b2:	f7fe ff61 	bl	8006678 <move_window>
			if (res == FR_OK) {
 80077b6:	2800      	cmp	r0, #0
 80077b8:	d133      	bne.n	8007822 <f_sync+0xaa>
				dir = fp->dir_ptr;
 80077ba:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80077bc:	7aeb      	ldrb	r3, [r5, #11]
 80077be:	f043 0320 	orr.w	r3, r3, #32
 80077c2:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 80077c4:	68e3      	ldr	r3, [r4, #12]
 80077c6:	772b      	strb	r3, [r5, #28]
 80077c8:	89a3      	ldrh	r3, [r4, #12]
 80077ca:	0a1b      	lsrs	r3, r3, #8
 80077cc:	776b      	strb	r3, [r5, #29]
 80077ce:	89e3      	ldrh	r3, [r4, #14]
 80077d0:	77ab      	strb	r3, [r5, #30]
 80077d2:	7be3      	ldrb	r3, [r4, #15]
 80077d4:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80077d6:	6923      	ldr	r3, [r4, #16]
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
 80077d8:	76ab      	strb	r3, [r5, #26]
 80077da:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80077de:	76ea      	strb	r2, [r5, #27]
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 80077e0:	0c1b      	lsrs	r3, r3, #16
 80077e2:	752b      	strb	r3, [r5, #20]
 80077e4:	0a1b      	lsrs	r3, r3, #8
 80077e6:	756b      	strb	r3, [r5, #21]
			if (res == FR_OK) {
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = get_fattime();							/* Update updated time */
 80077e8:	f7fe fb2a 	bl	8005e40 <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tm);
 80077ec:	75a8      	strb	r0, [r5, #22]
 80077ee:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80077f2:	75eb      	strb	r3, [r5, #23]
 80077f4:	0c03      	lsrs	r3, r0, #16
 80077f6:	762b      	strb	r3, [r5, #24]
 80077f8:	0e00      	lsrs	r0, r0, #24
 80077fa:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir+DIR_LstAccDate, 0);
 80077fc:	2300      	movs	r3, #0
 80077fe:	74ab      	strb	r3, [r5, #18]
 8007800:	74eb      	strb	r3, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 8007802:	79a3      	ldrb	r3, [r4, #6]
 8007804:	f023 0320 	bic.w	r3, r3, #32
 8007808:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	2201      	movs	r2, #1
 800780e:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8007810:	6820      	ldr	r0, [r4, #0]
 8007812:	f7ff f96d 	bl	8006af0 <sync_fs>
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800781a:	2000      	movs	r0, #0
 800781c:	bd38      	pop	{r3, r4, r5, pc}
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800781e:	2001      	movs	r0, #1
 8007820:	bd38      	pop	{r3, r4, r5, pc}
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 8007822:	bd38      	pop	{r3, r4, r5, pc}

08007824 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007824:	b510      	push	{r4, lr}
 8007826:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007828:	f7ff ffa6 	bl	8007778 <f_sync>
	if (res == FR_OK)
 800782c:	4603      	mov	r3, r0
 800782e:	b930      	cbnz	r0, 800783e <f_close+0x1a>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007830:	4620      	mov	r0, r4
 8007832:	f7fe ff83 	bl	800673c <validate>
		if (res == FR_OK) {
 8007836:	4603      	mov	r3, r0
 8007838:	b908      	cbnz	r0, 800783e <f_close+0x1a>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
 800783a:	2200      	movs	r2, #0
 800783c:	6022      	str	r2, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800783e:	4618      	mov	r0, r3
 8007840:	bd10      	pop	{r4, pc}
 8007842:	bf00      	nop

08007844 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8007844:	b510      	push	{r4, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	9101      	str	r1, [sp, #4]
	FRESULT res;
	FATFS* fs;
	DEF_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 800784a:	4604      	mov	r4, r0
 800784c:	b318      	cbz	r0, 8007896 <f_opendir+0x52>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800784e:	a805      	add	r0, sp, #20
 8007850:	a901      	add	r1, sp, #4
 8007852:	2200      	movs	r2, #0
 8007854:	f7fe ff8e 	bl	8006774 <find_volume>
	if (res == FR_OK) {
 8007858:	4603      	mov	r3, r0
 800785a:	b9c0      	cbnz	r0, 800788e <f_opendir+0x4a>
		dp->fs = fs;
 800785c:	9b05      	ldr	r3, [sp, #20]
 800785e:	6023      	str	r3, [r4, #0]
		INIT_BUF(*dp);
 8007860:	ab02      	add	r3, sp, #8
 8007862:	61a3      	str	r3, [r4, #24]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8007864:	4620      	mov	r0, r4
 8007866:	9901      	ldr	r1, [sp, #4]
 8007868:	f7ff fbee 	bl	8007048 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 800786c:	4603      	mov	r3, r0
 800786e:	bb00      	cbnz	r0, 80078b2 <f_opendir+0x6e>
			if (dp->dir) {						/* It is not the origin directory itself */
 8007870:	6961      	ldr	r1, [r4, #20]
 8007872:	b191      	cbz	r1, 800789a <f_opendir+0x56>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8007874:	7acb      	ldrb	r3, [r1, #11]
 8007876:	f013 0f10 	tst.w	r3, #16
 800787a:	d007      	beq.n	800788c <f_opendir+0x48>
					dp->sclust = ld_clust(fs, dp->dir);
 800787c:	9805      	ldr	r0, [sp, #20]
 800787e:	f7fe fe51 	bl	8006524 <ld_clust>
 8007882:	60a0      	str	r0, [r4, #8]
 8007884:	e009      	b.n	800789a <f_opendir+0x56>
				else							/* The object is a file */
					res = FR_NO_PATH;
			}
			if (res == FR_OK) {
				dp->id = fs->id;
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007886:	4618      	mov	r0, r3
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8007888:	b1bb      	cbz	r3, 80078ba <f_opendir+0x76>
 800788a:	e000      	b.n	800788e <f_opendir+0x4a>
		if (res == FR_OK) {						/* Follow completed */
			if (dp->dir) {						/* It is not the origin directory itself */
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
					dp->sclust = ld_clust(fs, dp->dir);
				else							/* The object is a file */
					res = FR_NO_PATH;
 800788c:	2305      	movs	r3, #5
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 800788e:	2200      	movs	r2, #0
 8007890:	6022      	str	r2, [r4, #0]
 8007892:	4618      	mov	r0, r3
 8007894:	e011      	b.n	80078ba <f_opendir+0x76>
	FRESULT res;
	FATFS* fs;
	DEF_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8007896:	2009      	movs	r0, #9
 8007898:	e00f      	b.n	80078ba <f_opendir+0x76>
					dp->sclust = ld_clust(fs, dp->dir);
				else							/* The object is a file */
					res = FR_NO_PATH;
			}
			if (res == FR_OK) {
				dp->id = fs->id;
 800789a:	9b05      	ldr	r3, [sp, #20]
 800789c:	88db      	ldrh	r3, [r3, #6]
 800789e:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80078a0:	4620      	mov	r0, r4
 80078a2:	2100      	movs	r1, #0
 80078a4:	f7ff fa02 	bl	8006cac <dir_sdi>
 80078a8:	4603      	mov	r3, r0
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80078aa:	2804      	cmp	r0, #4
 80078ac:	d1eb      	bne.n	8007886 <f_opendir+0x42>
 80078ae:	2305      	movs	r3, #5
 80078b0:	e7ed      	b.n	800788e <f_opendir+0x4a>
 80078b2:	2804      	cmp	r0, #4
 80078b4:	bf08      	it	eq
 80078b6:	2305      	moveq	r3, #5
 80078b8:	e7e9      	b.n	800788e <f_opendir+0x4a>
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */

	LEAVE_FF(fs, res);
}
 80078ba:	b006      	add	sp, #24
 80078bc:	bd10      	pop	{r4, pc}
 80078be:	bf00      	nop

080078c0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80078c0:	b510      	push	{r4, lr}
 80078c2:	4604      	mov	r4, r0
	FRESULT res;


	res = validate(dp);
 80078c4:	f7fe ff3a 	bl	800673c <validate>
	if (res == FR_OK) {
 80078c8:	4603      	mov	r3, r0
 80078ca:	b908      	cbnz	r0, 80078d0 <f_closedir+0x10>
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
			res = dec_lock(dp->lockid);
		if (res == FR_OK)
#endif
			dp->fs = 0;				/* Invalidate directory object */
 80078cc:	2200      	movs	r2, #0
 80078ce:	6022      	str	r2, [r4, #0]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	bd10      	pop	{r4, pc}

080078d4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	4604      	mov	r4, r0
 80078da:	460e      	mov	r6, r1
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 80078dc:	f7fe ff2e 	bl	800673c <validate>
	if (res == FR_OK) {
 80078e0:	4605      	mov	r5, r0
 80078e2:	bb10      	cbnz	r0, 800792a <f_readdir+0x56>
		if (!fno) {
 80078e4:	b92e      	cbnz	r6, 80078f2 <f_readdir+0x1e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80078e6:	4620      	mov	r0, r4
 80078e8:	2100      	movs	r1, #0
 80078ea:	f7ff f9df 	bl	8006cac <dir_sdi>
 80078ee:	4605      	mov	r5, r0
 80078f0:	e01b      	b.n	800792a <f_readdir+0x56>
		} else {
			INIT_BUF(*dp);
 80078f2:	ab01      	add	r3, sp, #4
 80078f4:	61a3      	str	r3, [r4, #24]
			res = dir_read(dp, 0);			/* Read an item */
 80078f6:	4620      	mov	r0, r4
 80078f8:	2100      	movs	r1, #0
 80078fa:	f7ff fcf3 	bl	80072e4 <dir_read>
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 80078fe:	2804      	cmp	r0, #4
 8007900:	d102      	bne.n	8007908 <f_readdir+0x34>
				dp->sect = 0;
 8007902:	2300      	movs	r3, #0
 8007904:	6123      	str	r3, [r4, #16]
 8007906:	e000      	b.n	800790a <f_readdir+0x36>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8007908:	b960      	cbnz	r0, 8007924 <f_readdir+0x50>
				get_fileinfo(dp, fno);		/* Get the object information */
 800790a:	4620      	mov	r0, r4
 800790c:	4631      	mov	r1, r6
 800790e:	f7fe fe19 	bl	8006544 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007912:	4620      	mov	r0, r4
 8007914:	2100      	movs	r1, #0
 8007916:	f7ff fb05 	bl	8006f24 <dir_next>
				if (res == FR_NO_FILE) {
 800791a:	2804      	cmp	r0, #4
 800791c:	d104      	bne.n	8007928 <f_readdir+0x54>
					dp->sect = 0;
 800791e:	2300      	movs	r3, #0
 8007920:	6123      	str	r3, [r4, #16]
 8007922:	e002      	b.n	800792a <f_readdir+0x56>
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dp);
			res = dir_read(dp, 0);			/* Read an item */
 8007924:	4605      	mov	r5, r0
 8007926:	e000      	b.n	800792a <f_readdir+0x56>
				dp->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
				res = dir_next(dp, 0);		/* Increment index for next */
 8007928:	4605      	mov	r5, r0
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
}
 800792a:	4628      	mov	r0, r5
 800792c:	b004      	add	sp, #16
 800792e:	bd70      	pop	{r4, r5, r6, pc}

08007930 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007934:	b083      	sub	sp, #12
 8007936:	ab02      	add	r3, sp, #8
 8007938:	f843 0d04 	str.w	r0, [r3, #-4]!
 800793c:	468a      	mov	sl, r1
 800793e:	4614      	mov	r4, r2
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8007940:	4610      	mov	r0, r2
 8007942:	4619      	mov	r1, r3
 8007944:	2200      	movs	r2, #0
 8007946:	f7fe ff15 	bl	8006774 <find_volume>
	fs = *fatfs;
 800794a:	6825      	ldr	r5, [r4, #0]
	if (res == FR_OK) {
 800794c:	4681      	mov	r9, r0
 800794e:	2800      	cmp	r0, #0
 8007950:	d15e      	bne.n	8007a10 <f_getfree+0xe0>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8007952:	692b      	ldr	r3, [r5, #16]
 8007954:	696c      	ldr	r4, [r5, #20]
 8007956:	1ea2      	subs	r2, r4, #2
 8007958:	4293      	cmp	r3, r2
 800795a:	d802      	bhi.n	8007962 <f_getfree+0x32>
			*nclst = fs->free_clust;
 800795c:	f8ca 3000 	str.w	r3, [sl]
 8007960:	e056      	b.n	8007a10 <f_getfree+0xe0>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8007962:	782f      	ldrb	r7, [r5, #0]
			n = 0;
			if (fat == FS_FAT12) {
 8007964:	2f01      	cmp	r7, #1
 8007966:	d111      	bne.n	800798c <f_getfree+0x5c>
 8007968:	2402      	movs	r4, #2
 800796a:	2600      	movs	r6, #0
				clst = 2;
				do {
					stat = get_fat(fs, clst);
 800796c:	4628      	mov	r0, r5
 800796e:	4621      	mov	r1, r4
 8007970:	f7ff f928 	bl	8006bc4 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007974:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007978:	d03c      	beq.n	80079f4 <f_getfree+0xc4>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800797a:	2801      	cmp	r0, #1
 800797c:	d03d      	beq.n	80079fa <f_getfree+0xca>
					if (stat == 0) n++;
 800797e:	b900      	cbnz	r0, 8007982 <f_getfree+0x52>
 8007980:	3601      	adds	r6, #1
				} while (++clst < fs->n_fatent);
 8007982:	3401      	adds	r4, #1
 8007984:	696b      	ldr	r3, [r5, #20]
 8007986:	429c      	cmp	r4, r3
 8007988:	d3f0      	bcc.n	800796c <f_getfree+0x3c>
 800798a:	e03a      	b.n	8007a02 <f_getfree+0xd2>
			} else {
				clst = fs->n_fatent;
				sect = fs->fatbase;
 800798c:	6a29      	ldr	r1, [r5, #32]
				i = 0; p = 0;
 800798e:	2300      	movs	r3, #0
 8007990:	461a      	mov	r2, r3
		if (fs->free_clust <= fs->n_fatent - 2) {
			*nclst = fs->free_clust;
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
			n = 0;
 8007992:	461e      	mov	r6, r3
				do {
					if (!i) {
						res = move_window(fs, sect++);
						if (res != FR_OK) break;
						p = fs->win;
						i = SS(fs);
 8007994:	f44f 7b00 	mov.w	fp, #512	; 0x200
			} else {
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
 8007998:	b94a      	cbnz	r2, 80079ae <f_getfree+0x7e>
						res = move_window(fs, sect++);
 800799a:	f101 0801 	add.w	r8, r1, #1
 800799e:	4628      	mov	r0, r5
 80079a0:	f7fe fe6a 	bl	8006678 <move_window>
						if (res != FR_OK) break;
 80079a4:	bb60      	cbnz	r0, 8007a00 <f_getfree+0xd0>
						p = fs->win;
 80079a6:	f105 0330 	add.w	r3, r5, #48	; 0x30
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(fs, sect++);
 80079aa:	4641      	mov	r1, r8
						if (res != FR_OK) break;
						p = fs->win;
						i = SS(fs);
 80079ac:	465a      	mov	r2, fp
					}
					if (fat == FS_FAT16) {
 80079ae:	2f02      	cmp	r7, #2
 80079b0:	d109      	bne.n	80079c6 <f_getfree+0x96>
						if (LD_WORD(p) == 0) n++;
 80079b2:	f893 c001 	ldrb.w	ip, [r3, #1]
 80079b6:	7818      	ldrb	r0, [r3, #0]
 80079b8:	ea50 200c 	orrs.w	r0, r0, ip, lsl #8
 80079bc:	bf08      	it	eq
 80079be:	3601      	addeq	r6, #1
						p += 2; i -= 2;
 80079c0:	3302      	adds	r3, #2
 80079c2:	3a02      	subs	r2, #2
 80079c4:	e013      	b.n	80079ee <f_getfree+0xbe>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80079c6:	f893 c003 	ldrb.w	ip, [r3, #3]
 80079ca:	7898      	ldrb	r0, [r3, #2]
 80079cc:	0400      	lsls	r0, r0, #16
 80079ce:	ea40 600c 	orr.w	r0, r0, ip, lsl #24
 80079d2:	f893 c000 	ldrb.w	ip, [r3]
 80079d6:	ea40 000c 	orr.w	r0, r0, ip
 80079da:	f893 c001 	ldrb.w	ip, [r3, #1]
 80079de:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 80079e2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 80079e6:	b900      	cbnz	r0, 80079ea <f_getfree+0xba>
 80079e8:	3601      	adds	r6, #1
						p += 4; i -= 4;
 80079ea:	3304      	adds	r3, #4
 80079ec:	3a04      	subs	r2, #4
					}
				} while (--clst);
 80079ee:	3c01      	subs	r4, #1
 80079f0:	d1d2      	bne.n	8007998 <f_getfree+0x68>
 80079f2:	e006      	b.n	8007a02 <f_getfree+0xd2>
			n = 0;
			if (fat == FS_FAT12) {
				clst = 2;
				do {
					stat = get_fat(fs, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80079f4:	f04f 0901 	mov.w	r9, #1
 80079f8:	e003      	b.n	8007a02 <f_getfree+0xd2>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80079fa:	f04f 0902 	mov.w	r9, #2
 80079fe:	e000      	b.n	8007a02 <f_getfree+0xd2>
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(fs, sect++);
 8007a00:	4681      	mov	r9, r0
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			fs->free_clust = n;
 8007a02:	612e      	str	r6, [r5, #16]
			fs->fsi_flag |= 1;
 8007a04:	796b      	ldrb	r3, [r5, #5]
 8007a06:	f043 0301 	orr.w	r3, r3, #1
 8007a0a:	716b      	strb	r3, [r5, #5]
			*nclst = n;
 8007a0c:	f8ca 6000 	str.w	r6, [sl]
		}
	}
	LEAVE_FF(fs, res);
}
 8007a10:	4648      	mov	r0, r9
 8007a12:	b003      	add	sp, #12
 8007a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a18 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8007a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1c:	b095      	sub	sp, #84	; 0x54
 8007a1e:	9009      	str	r0, [sp, #36]	; 0x24
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tm = get_fattime();
 8007a20:	f7fe fa0e 	bl	8005e40 <get_fattime>
 8007a24:	4680      	mov	r8, r0
	DEF_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 8007a26:	a80d      	add	r0, sp, #52	; 0x34
 8007a28:	a909      	add	r1, sp, #36	; 0x24
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f7fe fea2 	bl	8006774 <find_volume>
	if (res == FR_OK) {
 8007a30:	4604      	mov	r4, r0
 8007a32:	2800      	cmp	r0, #0
 8007a34:	f040 80d1 	bne.w	8007bda <f_mkdir+0x1c2>
		INIT_BUF(dj);
 8007a38:	ab0a      	add	r3, sp, #40	; 0x28
 8007a3a:	9313      	str	r3, [sp, #76]	; 0x4c
		res = follow_path(&dj, path);			/* Follow the file path */
 8007a3c:	a80d      	add	r0, sp, #52	; 0x34
 8007a3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a40:	f7ff fb02 	bl	8007048 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8007a44:	2800      	cmp	r0, #0
 8007a46:	f000 80bb 	beq.w	8007bc0 <f_mkdir+0x1a8>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8007a4a:	2804      	cmp	r0, #4
 8007a4c:	f040 80ba 	bne.w	8007bc4 <f_mkdir+0x1ac>
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
 8007a50:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007a52:	2100      	movs	r1, #0
 8007a54:	f7ff f9fe 	bl	8006e54 <create_chain>
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8007a58:	4683      	mov	fp, r0
 8007a5a:	b148      	cbz	r0, 8007a70 <f_mkdir+0x58>
			if (dcl == 1) res = FR_INT_ERR;
 8007a5c:	2801      	cmp	r0, #1
 8007a5e:	f000 80b3 	beq.w	8007bc8 <f_mkdir+0x1b0>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007a62:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007a66:	bf08      	it	eq
 8007a68:	2401      	moveq	r4, #1
 8007a6a:	f000 808a 	beq.w	8007b82 <f_mkdir+0x16a>
 8007a6e:	e000      	b.n	8007a72 <f_mkdir+0x5a>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8007a70:	2407      	movs	r4, #7
			if (dcl == 1) res = FR_INT_ERR;
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (res == FR_OK)					/* Flush FAT */
 8007a72:	2c00      	cmp	r4, #0
 8007a74:	f040 8085 	bne.w	8007b82 <f_mkdir+0x16a>
				res = sync_window(dj.fs);
 8007a78:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007a7a:	f7fe fdc7 	bl	800660c <sync_window>
			if (res == FR_OK) {					/* Initialize the new directory table */
 8007a7e:	4604      	mov	r4, r0
 8007a80:	2800      	cmp	r0, #0
 8007a82:	d17e      	bne.n	8007b82 <f_mkdir+0x16a>
				dsc = clust2sect(dj.fs, dcl);
 8007a84:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007a86:	4628      	mov	r0, r5
 8007a88:	4659      	mov	r1, fp
 8007a8a:	f7ff f88f 	bl	8006bac <clust2sect>
 8007a8e:	4604      	mov	r4, r0
				dir = dj.fs->win;
 8007a90:	f105 0630 	add.w	r6, r5, #48	; 0x30
				mem_set(dir, 0, SS(dj.fs));
 8007a94:	4630      	mov	r0, r6
 8007a96:	2100      	movs	r1, #0
 8007a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a9c:	f7fe fd3a 	bl	8006514 <mem_set>
				mem_set(dir+DIR_Name, ' ', 11);	/* Create "." entry */
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	2120      	movs	r1, #32
 8007aa4:	220b      	movs	r2, #11
 8007aa6:	f7fe fd35 	bl	8006514 <mem_set>
				dir[DIR_Name] = '.';
 8007aaa:	272e      	movs	r7, #46	; 0x2e
 8007aac:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
				dir[DIR_Attr] = AM_DIR;
 8007ab0:	2310      	movs	r3, #16
 8007ab2:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
				ST_DWORD(dir+DIR_WrtTime, tm);
 8007ab6:	fa5f f288 	uxtb.w	r2, r8
 8007aba:	9201      	str	r2, [sp, #4]
 8007abc:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
 8007ac0:	f3c8 2307 	ubfx	r3, r8, #8, #8
 8007ac4:	9302      	str	r3, [sp, #8]
 8007ac6:	f885 3047 	strb.w	r3, [r5, #71]	; 0x47
 8007aca:	f3c8 4207 	ubfx	r2, r8, #16, #8
 8007ace:	9203      	str	r2, [sp, #12]
 8007ad0:	f885 2048 	strb.w	r2, [r5, #72]	; 0x48
 8007ad4:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8007ad8:	f8cd 8010 	str.w	r8, [sp, #16]
 8007adc:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
 8007ae0:	fa5f f38b 	uxtb.w	r3, fp
 8007ae4:	9305      	str	r3, [sp, #20]
 8007ae6:	f885 304a 	strb.w	r3, [r5, #74]	; 0x4a
 8007aea:	f3cb 2207 	ubfx	r2, fp, #8, #8
 8007aee:	9206      	str	r2, [sp, #24]
 8007af0:	f885 204b 	strb.w	r2, [r5, #75]	; 0x4b
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 8007af4:	ea4f 431b 	mov.w	r3, fp, lsr #16
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	9207      	str	r2, [sp, #28]
 8007afc:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
 8007b00:	0a1b      	lsrs	r3, r3, #8
 8007b02:	9308      	str	r3, [sp, #32]
 8007b04:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
				mem_set(dir+DIR_Name, ' ', 11);	/* Create "." entry */
				dir[DIR_Name] = '.';
				dir[DIR_Attr] = AM_DIR;
				ST_DWORD(dir+DIR_WrtTime, tm);
				st_clust(dir, dcl);
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
 8007b08:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8007b0c:	4631      	mov	r1, r6
 8007b0e:	2220      	movs	r2, #32
 8007b10:	f7fe fcf6 	bl	8006500 <mem_cpy>
				dir[SZ_DIR+1] = '.'; pcl = dj.sclust;
 8007b14:	f885 7051 	strb.w	r7, [r5, #81]	; 0x51
 8007b18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 8007b1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b1c:	7811      	ldrb	r1, [r2, #0]
 8007b1e:	2903      	cmp	r1, #3
 8007b20:	d103      	bne.n	8007b2a <f_mkdir+0x112>
 8007b22:	6a51      	ldr	r1, [r2, #36]	; 0x24
					pcl = 0;
 8007b24:	4299      	cmp	r1, r3
 8007b26:	bf08      	it	eq
 8007b28:	2300      	moveq	r3, #0
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
 8007b2a:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
 8007b2e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8007b32:	f885 106b 	strb.w	r1, [r5, #107]	; 0x6b
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 8007b36:	0c1b      	lsrs	r3, r3, #16
 8007b38:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
 8007b3c:	0a1b      	lsrs	r3, r3, #8
 8007b3e:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[SZ_DIR+1] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8007b42:	7893      	ldrb	r3, [r2, #2]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d041      	beq.n	8007bcc <f_mkdir+0x1b4>
 8007b48:	f103 3aff 	add.w	sl, r3, #4294967295
 8007b4c:	fa5f fa8a 	uxtb.w	sl, sl
 8007b50:	f10a 0a01 	add.w	sl, sl, #1
 8007b54:	44a2      	add	sl, r4
					dj.fs->winsect = dsc++;
					dj.fs->wflag = 1;
 8007b56:	2701      	movs	r7, #1
					res = sync_window(dj.fs);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
 8007b58:	f04f 0900 	mov.w	r9, #0
 8007b5c:	f44f 7800 	mov.w	r8, #512	; 0x200
				dir[SZ_DIR+1] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
 8007b60:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007b62:	1c65      	adds	r5, r4, #1
 8007b64:	62c4      	str	r4, [r0, #44]	; 0x2c
					dj.fs->wflag = 1;
 8007b66:	7107      	strb	r7, [r0, #4]
					res = sync_window(dj.fs);
 8007b68:	f7fe fd50 	bl	800660c <sync_window>
					if (res != FR_OK) break;
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	b940      	cbnz	r0, 8007b82 <f_mkdir+0x16a>
					mem_set(dir, 0, SS(dj.fs));
 8007b70:	4630      	mov	r0, r6
 8007b72:	4649      	mov	r1, r9
 8007b74:	4642      	mov	r2, r8
 8007b76:	f7fe fccd 	bl	8006514 <mem_set>
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[SZ_DIR+1] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8007b7a:	4555      	cmp	r5, sl
 8007b7c:	d026      	beq.n	8007bcc <f_mkdir+0x1b4>
					dj.fs->winsect = dsc++;
 8007b7e:	462c      	mov	r4, r5
 8007b80:	e7ee      	b.n	8007b60 <f_mkdir+0x148>
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
			if (res != FR_OK) {
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
 8007b82:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007b84:	4659      	mov	r1, fp
 8007b86:	f7ff fbdb 	bl	8007340 <remove_chain>
 8007b8a:	e026      	b.n	8007bda <f_mkdir+0x1c2>
			} else {
				dir = dj.dir;
 8007b8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8007b8e:	2210      	movs	r2, #16
 8007b90:	72da      	strb	r2, [r3, #11]
				ST_DWORD(dir+DIR_WrtTime, tm);		/* Created time */
 8007b92:	9a01      	ldr	r2, [sp, #4]
 8007b94:	759a      	strb	r2, [r3, #22]
 8007b96:	9a02      	ldr	r2, [sp, #8]
 8007b98:	75da      	strb	r2, [r3, #23]
 8007b9a:	9a03      	ldr	r2, [sp, #12]
 8007b9c:	761a      	strb	r2, [r3, #24]
 8007b9e:	9a04      	ldr	r2, [sp, #16]
 8007ba0:	765a      	strb	r2, [r3, #25]
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
 8007ba2:	9a05      	ldr	r2, [sp, #20]
 8007ba4:	769a      	strb	r2, [r3, #26]
 8007ba6:	9a06      	ldr	r2, [sp, #24]
 8007ba8:	76da      	strb	r2, [r3, #27]
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 8007baa:	9a07      	ldr	r2, [sp, #28]
 8007bac:	751a      	strb	r2, [r3, #20]
 8007bae:	9a08      	ldr	r2, [sp, #32]
 8007bb0:	755a      	strb	r2, [r3, #21]
			} else {
				dir = dj.dir;
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
				ST_DWORD(dir+DIR_WrtTime, tm);		/* Created time */
				st_clust(dir, dcl);					/* Table start cluster */
				dj.fs->wflag = 1;
 8007bb2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	7103      	strb	r3, [r0, #4]
				res = sync_fs(dj.fs);
 8007bb8:	f7fe ff9a 	bl	8006af0 <sync_fs>
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	e00c      	b.n	8007bda <f_mkdir+0x1c2>
	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8007bc0:	2408      	movs	r4, #8
 8007bc2:	e00a      	b.n	8007bda <f_mkdir+0x1c2>

	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);			/* Follow the file path */
 8007bc4:	4604      	mov	r4, r0
 8007bc6:	e008      	b.n	8007bda <f_mkdir+0x1c2>
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
 8007bc8:	2402      	movs	r4, #2
 8007bca:	e7da      	b.n	8007b82 <f_mkdir+0x16a>
					res = sync_window(dj.fs);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
 8007bcc:	a80d      	add	r0, sp, #52	; 0x34
 8007bce:	f7ff fb6d 	bl	80072ac <dir_register>
			if (res != FR_OK) {
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d0d9      	beq.n	8007b8c <f_mkdir+0x174>
 8007bd8:	e7d3      	b.n	8007b82 <f_mkdir+0x16a>
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
 8007bda:	4620      	mov	r0, r4
 8007bdc:	b015      	add	sp, #84	; 0x54
 8007bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be2:	bf00      	nop

08007be4 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007be4:	b510      	push	{r4, lr}
 8007be6:	b094      	sub	sp, #80	; 0x50
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8007be8:	9101      	str	r1, [sp, #4]
	pb.nchr = pb.idx = 0;
 8007bea:	2300      	movs	r3, #0
 8007bec:	9302      	str	r3, [sp, #8]
 8007bee:	9303      	str	r3, [sp, #12]

	while (*str)			/* Put the string */
 8007bf0:	7801      	ldrb	r1, [r0, #0]
 8007bf2:	b139      	cbz	r1, 8007c04 <f_puts+0x20>
 8007bf4:	4604      	mov	r4, r0
		putc_bfd(&pb, *str++);
 8007bf6:	a801      	add	r0, sp, #4
 8007bf8:	f7ff fd9a 	bl	8007730 <putc_bfd>


	pb.fp = fp;				/* Initialize output buffer */
	pb.nchr = pb.idx = 0;

	while (*str)			/* Put the string */
 8007bfc:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8007c00:	2900      	cmp	r1, #0
 8007c02:	d1f8      	bne.n	8007bf6 <f_puts+0x12>
		putc_bfd(&pb, *str++);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8007c04:	9a02      	ldr	r2, [sp, #8]
 8007c06:	2a00      	cmp	r2, #0
 8007c08:	db0b      	blt.n	8007c22 <f_puts+0x3e>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8007c0a:	9801      	ldr	r0, [sp, #4]
 8007c0c:	a904      	add	r1, sp, #16
 8007c0e:	466b      	mov	r3, sp
 8007c10:	f7ff fcb6 	bl	8007580 <f_write>
 8007c14:	b940      	cbnz	r0, 8007c28 <f_puts+0x44>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8007c16:	9b00      	ldr	r3, [sp, #0]
 8007c18:	9a02      	ldr	r2, [sp, #8]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d107      	bne.n	8007c2e <f_puts+0x4a>
 8007c1e:	9803      	ldr	r0, [sp, #12]
 8007c20:	e007      	b.n	8007c32 <f_puts+0x4e>
	return EOF;
 8007c22:	f04f 30ff 	mov.w	r0, #4294967295
 8007c26:	e004      	b.n	8007c32 <f_puts+0x4e>
 8007c28:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2c:	e001      	b.n	8007c32 <f_puts+0x4e>
 8007c2e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007c32:	b014      	add	sp, #80	; 0x50
 8007c34:	bd10      	pop	{r4, pc}
 8007c36:	bf00      	nop

08007c38 <malloc>:
 8007c38:	4b02      	ldr	r3, [pc, #8]	; (8007c44 <malloc+0xc>)
 8007c3a:	4601      	mov	r1, r0
 8007c3c:	6818      	ldr	r0, [r3, #0]
 8007c3e:	f000 b80b 	b.w	8007c58 <_malloc_r>
 8007c42:	bf00      	nop
 8007c44:	200009c0 	.word	0x200009c0

08007c48 <free>:
 8007c48:	4b02      	ldr	r3, [pc, #8]	; (8007c54 <free+0xc>)
 8007c4a:	4601      	mov	r1, r0
 8007c4c:	6818      	ldr	r0, [r3, #0]
 8007c4e:	f003 bdf9 	b.w	800b844 <_free_r>
 8007c52:	bf00      	nop
 8007c54:	200009c0 	.word	0x200009c0

08007c58 <_malloc_r>:
 8007c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5c:	f101 050b 	add.w	r5, r1, #11
 8007c60:	2d16      	cmp	r5, #22
 8007c62:	b083      	sub	sp, #12
 8007c64:	4606      	mov	r6, r0
 8007c66:	d927      	bls.n	8007cb8 <_malloc_r+0x60>
 8007c68:	f035 0507 	bics.w	r5, r5, #7
 8007c6c:	d427      	bmi.n	8007cbe <_malloc_r+0x66>
 8007c6e:	42a9      	cmp	r1, r5
 8007c70:	d825      	bhi.n	8007cbe <_malloc_r+0x66>
 8007c72:	4630      	mov	r0, r6
 8007c74:	f000 fad6 	bl	8008224 <__malloc_lock>
 8007c78:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8007c7c:	d226      	bcs.n	8007ccc <_malloc_r+0x74>
 8007c7e:	4fc1      	ldr	r7, [pc, #772]	; (8007f84 <_malloc_r+0x32c>)
 8007c80:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 8007c84:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
 8007c88:	68dc      	ldr	r4, [r3, #12]
 8007c8a:	429c      	cmp	r4, r3
 8007c8c:	f000 81d2 	beq.w	8008034 <_malloc_r+0x3dc>
 8007c90:	6863      	ldr	r3, [r4, #4]
 8007c92:	68e2      	ldr	r2, [r4, #12]
 8007c94:	68a1      	ldr	r1, [r4, #8]
 8007c96:	f023 0303 	bic.w	r3, r3, #3
 8007c9a:	4423      	add	r3, r4
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	685d      	ldr	r5, [r3, #4]
 8007ca0:	60ca      	str	r2, [r1, #12]
 8007ca2:	f045 0501 	orr.w	r5, r5, #1
 8007ca6:	6091      	str	r1, [r2, #8]
 8007ca8:	605d      	str	r5, [r3, #4]
 8007caa:	f000 fabd 	bl	8008228 <__malloc_unlock>
 8007cae:	3408      	adds	r4, #8
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	b003      	add	sp, #12
 8007cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb8:	2510      	movs	r5, #16
 8007cba:	42a9      	cmp	r1, r5
 8007cbc:	d9d9      	bls.n	8007c72 <_malloc_r+0x1a>
 8007cbe:	2400      	movs	r4, #0
 8007cc0:	230c      	movs	r3, #12
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	6033      	str	r3, [r6, #0]
 8007cc6:	b003      	add	sp, #12
 8007cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ccc:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 8007cd0:	f000 808a 	beq.w	8007de8 <_malloc_r+0x190>
 8007cd4:	f1bc 0f04 	cmp.w	ip, #4
 8007cd8:	f200 8160 	bhi.w	8007f9c <_malloc_r+0x344>
 8007cdc:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 8007ce0:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8007ce4:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8007ce8:	4fa6      	ldr	r7, [pc, #664]	; (8007f84 <_malloc_r+0x32c>)
 8007cea:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8007cee:	68cc      	ldr	r4, [r1, #12]
 8007cf0:	42a1      	cmp	r1, r4
 8007cf2:	d105      	bne.n	8007d00 <_malloc_r+0xa8>
 8007cf4:	e00c      	b.n	8007d10 <_malloc_r+0xb8>
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	da7a      	bge.n	8007df0 <_malloc_r+0x198>
 8007cfa:	68e4      	ldr	r4, [r4, #12]
 8007cfc:	42a1      	cmp	r1, r4
 8007cfe:	d007      	beq.n	8007d10 <_malloc_r+0xb8>
 8007d00:	6862      	ldr	r2, [r4, #4]
 8007d02:	f022 0203 	bic.w	r2, r2, #3
 8007d06:	1b53      	subs	r3, r2, r5
 8007d08:	2b0f      	cmp	r3, #15
 8007d0a:	ddf4      	ble.n	8007cf6 <_malloc_r+0x9e>
 8007d0c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007d10:	f10c 0c01 	add.w	ip, ip, #1
 8007d14:	4b9b      	ldr	r3, [pc, #620]	; (8007f84 <_malloc_r+0x32c>)
 8007d16:	693c      	ldr	r4, [r7, #16]
 8007d18:	f103 0e08 	add.w	lr, r3, #8
 8007d1c:	4574      	cmp	r4, lr
 8007d1e:	f000 817e 	beq.w	800801e <_malloc_r+0x3c6>
 8007d22:	6861      	ldr	r1, [r4, #4]
 8007d24:	f021 0103 	bic.w	r1, r1, #3
 8007d28:	1b4a      	subs	r2, r1, r5
 8007d2a:	2a0f      	cmp	r2, #15
 8007d2c:	f300 8164 	bgt.w	8007ff8 <_malloc_r+0x3a0>
 8007d30:	2a00      	cmp	r2, #0
 8007d32:	f8c3 e014 	str.w	lr, [r3, #20]
 8007d36:	f8c3 e010 	str.w	lr, [r3, #16]
 8007d3a:	da6a      	bge.n	8007e12 <_malloc_r+0x1ba>
 8007d3c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007d40:	f080 813a 	bcs.w	8007fb8 <_malloc_r+0x360>
 8007d44:	08c9      	lsrs	r1, r1, #3
 8007d46:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
 8007d4a:	ea4f 08a1 	mov.w	r8, r1, asr #2
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	6881      	ldr	r1, [r0, #8]
 8007d52:	60a1      	str	r1, [r4, #8]
 8007d54:	f04f 0901 	mov.w	r9, #1
 8007d58:	fa09 f808 	lsl.w	r8, r9, r8
 8007d5c:	ea48 0202 	orr.w	r2, r8, r2
 8007d60:	60e0      	str	r0, [r4, #12]
 8007d62:	605a      	str	r2, [r3, #4]
 8007d64:	6084      	str	r4, [r0, #8]
 8007d66:	60cc      	str	r4, [r1, #12]
 8007d68:	ea4f 03ac 	mov.w	r3, ip, asr #2
 8007d6c:	2001      	movs	r0, #1
 8007d6e:	4098      	lsls	r0, r3
 8007d70:	4290      	cmp	r0, r2
 8007d72:	d85b      	bhi.n	8007e2c <_malloc_r+0x1d4>
 8007d74:	4202      	tst	r2, r0
 8007d76:	d106      	bne.n	8007d86 <_malloc_r+0x12e>
 8007d78:	f02c 0c03 	bic.w	ip, ip, #3
 8007d7c:	0040      	lsls	r0, r0, #1
 8007d7e:	4202      	tst	r2, r0
 8007d80:	f10c 0c04 	add.w	ip, ip, #4
 8007d84:	d0fa      	beq.n	8007d7c <_malloc_r+0x124>
 8007d86:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
 8007d8a:	4644      	mov	r4, r8
 8007d8c:	46e1      	mov	r9, ip
 8007d8e:	68e3      	ldr	r3, [r4, #12]
 8007d90:	429c      	cmp	r4, r3
 8007d92:	d107      	bne.n	8007da4 <_malloc_r+0x14c>
 8007d94:	e145      	b.n	8008022 <_malloc_r+0x3ca>
 8007d96:	2a00      	cmp	r2, #0
 8007d98:	f280 8156 	bge.w	8008048 <_malloc_r+0x3f0>
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	429c      	cmp	r4, r3
 8007da0:	f000 813f 	beq.w	8008022 <_malloc_r+0x3ca>
 8007da4:	6859      	ldr	r1, [r3, #4]
 8007da6:	f021 0103 	bic.w	r1, r1, #3
 8007daa:	1b4a      	subs	r2, r1, r5
 8007dac:	2a0f      	cmp	r2, #15
 8007dae:	ddf2      	ble.n	8007d96 <_malloc_r+0x13e>
 8007db0:	461c      	mov	r4, r3
 8007db2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8007db6:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8007dba:	1959      	adds	r1, r3, r5
 8007dbc:	f045 0901 	orr.w	r9, r5, #1
 8007dc0:	f042 0501 	orr.w	r5, r2, #1
 8007dc4:	f8c3 9004 	str.w	r9, [r3, #4]
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f8c8 c00c 	str.w	ip, [r8, #12]
 8007dce:	f8cc 8008 	str.w	r8, [ip, #8]
 8007dd2:	6179      	str	r1, [r7, #20]
 8007dd4:	6139      	str	r1, [r7, #16]
 8007dd6:	f8c1 e00c 	str.w	lr, [r1, #12]
 8007dda:	f8c1 e008 	str.w	lr, [r1, #8]
 8007dde:	604d      	str	r5, [r1, #4]
 8007de0:	508a      	str	r2, [r1, r2]
 8007de2:	f000 fa21 	bl	8008228 <__malloc_unlock>
 8007de6:	e763      	b.n	8007cb0 <_malloc_r+0x58>
 8007de8:	217e      	movs	r1, #126	; 0x7e
 8007dea:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8007dee:	e77b      	b.n	8007ce8 <_malloc_r+0x90>
 8007df0:	4422      	add	r2, r4
 8007df2:	68e3      	ldr	r3, [r4, #12]
 8007df4:	6850      	ldr	r0, [r2, #4]
 8007df6:	68a1      	ldr	r1, [r4, #8]
 8007df8:	f040 0501 	orr.w	r5, r0, #1
 8007dfc:	60cb      	str	r3, [r1, #12]
 8007dfe:	4630      	mov	r0, r6
 8007e00:	6099      	str	r1, [r3, #8]
 8007e02:	6055      	str	r5, [r2, #4]
 8007e04:	f000 fa10 	bl	8008228 <__malloc_unlock>
 8007e08:	3408      	adds	r4, #8
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	b003      	add	sp, #12
 8007e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e12:	4421      	add	r1, r4
 8007e14:	4630      	mov	r0, r6
 8007e16:	684b      	ldr	r3, [r1, #4]
 8007e18:	f043 0301 	orr.w	r3, r3, #1
 8007e1c:	604b      	str	r3, [r1, #4]
 8007e1e:	f000 fa03 	bl	8008228 <__malloc_unlock>
 8007e22:	3408      	adds	r4, #8
 8007e24:	4620      	mov	r0, r4
 8007e26:	b003      	add	sp, #12
 8007e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2c:	68bc      	ldr	r4, [r7, #8]
 8007e2e:	6863      	ldr	r3, [r4, #4]
 8007e30:	f023 0903 	bic.w	r9, r3, #3
 8007e34:	45a9      	cmp	r9, r5
 8007e36:	d304      	bcc.n	8007e42 <_malloc_r+0x1ea>
 8007e38:	ebc5 0309 	rsb	r3, r5, r9
 8007e3c:	2b0f      	cmp	r3, #15
 8007e3e:	f300 8091 	bgt.w	8007f64 <_malloc_r+0x30c>
 8007e42:	4b51      	ldr	r3, [pc, #324]	; (8007f88 <_malloc_r+0x330>)
 8007e44:	4a51      	ldr	r2, [pc, #324]	; (8007f8c <_malloc_r+0x334>)
 8007e46:	6819      	ldr	r1, [r3, #0]
 8007e48:	6813      	ldr	r3, [r2, #0]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	eb05 0a01 	add.w	sl, r5, r1
 8007e50:	eb04 0b09 	add.w	fp, r4, r9
 8007e54:	f000 8161 	beq.w	800811a <_malloc_r+0x4c2>
 8007e58:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
 8007e5c:	f10a 0a0f 	add.w	sl, sl, #15
 8007e60:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
 8007e64:	f02a 0a0f 	bic.w	sl, sl, #15
 8007e68:	4630      	mov	r0, r6
 8007e6a:	4651      	mov	r1, sl
 8007e6c:	9201      	str	r2, [sp, #4]
 8007e6e:	f000 f9dd 	bl	800822c <_sbrk_r>
 8007e72:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007e76:	4680      	mov	r8, r0
 8007e78:	9a01      	ldr	r2, [sp, #4]
 8007e7a:	f000 8100 	beq.w	800807e <_malloc_r+0x426>
 8007e7e:	4583      	cmp	fp, r0
 8007e80:	f200 80fa 	bhi.w	8008078 <_malloc_r+0x420>
 8007e84:	f8df c110 	ldr.w	ip, [pc, #272]	; 8007f98 <_malloc_r+0x340>
 8007e88:	f8dc 3000 	ldr.w	r3, [ip]
 8007e8c:	45c3      	cmp	fp, r8
 8007e8e:	4453      	add	r3, sl
 8007e90:	f8cc 3000 	str.w	r3, [ip]
 8007e94:	f000 814a 	beq.w	800812c <_malloc_r+0x4d4>
 8007e98:	6812      	ldr	r2, [r2, #0]
 8007e9a:	493c      	ldr	r1, [pc, #240]	; (8007f8c <_malloc_r+0x334>)
 8007e9c:	3201      	adds	r2, #1
 8007e9e:	bf1b      	ittet	ne
 8007ea0:	ebcb 0b08 	rsbne	fp, fp, r8
 8007ea4:	445b      	addne	r3, fp
 8007ea6:	f8c1 8000 	streq.w	r8, [r1]
 8007eaa:	f8cc 3000 	strne.w	r3, [ip]
 8007eae:	f018 0307 	ands.w	r3, r8, #7
 8007eb2:	f000 8113 	beq.w	80080dc <_malloc_r+0x484>
 8007eb6:	f1c3 0208 	rsb	r2, r3, #8
 8007eba:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8007ebe:	4490      	add	r8, r2
 8007ec0:	3308      	adds	r3, #8
 8007ec2:	44c2      	add	sl, r8
 8007ec4:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
 8007ec8:	ebca 0a03 	rsb	sl, sl, r3
 8007ecc:	4651      	mov	r1, sl
 8007ece:	4630      	mov	r0, r6
 8007ed0:	f8cd c004 	str.w	ip, [sp, #4]
 8007ed4:	f000 f9aa 	bl	800822c <_sbrk_r>
 8007ed8:	1c43      	adds	r3, r0, #1
 8007eda:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007ede:	f000 8135 	beq.w	800814c <_malloc_r+0x4f4>
 8007ee2:	ebc8 0200 	rsb	r2, r8, r0
 8007ee6:	4452      	add	r2, sl
 8007ee8:	f042 0201 	orr.w	r2, r2, #1
 8007eec:	f8dc 3000 	ldr.w	r3, [ip]
 8007ef0:	f8c7 8008 	str.w	r8, [r7, #8]
 8007ef4:	4453      	add	r3, sl
 8007ef6:	42bc      	cmp	r4, r7
 8007ef8:	f8c8 2004 	str.w	r2, [r8, #4]
 8007efc:	f8cc 3000 	str.w	r3, [ip]
 8007f00:	f8df a094 	ldr.w	sl, [pc, #148]	; 8007f98 <_malloc_r+0x340>
 8007f04:	d015      	beq.n	8007f32 <_malloc_r+0x2da>
 8007f06:	f1b9 0f0f 	cmp.w	r9, #15
 8007f0a:	f240 80ea 	bls.w	80080e2 <_malloc_r+0x48a>
 8007f0e:	6861      	ldr	r1, [r4, #4]
 8007f10:	f1a9 020c 	sub.w	r2, r9, #12
 8007f14:	f022 0207 	bic.w	r2, r2, #7
 8007f18:	f001 0e01 	and.w	lr, r1, #1
 8007f1c:	18a1      	adds	r1, r4, r2
 8007f1e:	2005      	movs	r0, #5
 8007f20:	ea42 0e0e 	orr.w	lr, r2, lr
 8007f24:	2a0f      	cmp	r2, #15
 8007f26:	f8c4 e004 	str.w	lr, [r4, #4]
 8007f2a:	6048      	str	r0, [r1, #4]
 8007f2c:	6088      	str	r0, [r1, #8]
 8007f2e:	f200 8111 	bhi.w	8008154 <_malloc_r+0x4fc>
 8007f32:	4a17      	ldr	r2, [pc, #92]	; (8007f90 <_malloc_r+0x338>)
 8007f34:	68bc      	ldr	r4, [r7, #8]
 8007f36:	6811      	ldr	r1, [r2, #0]
 8007f38:	428b      	cmp	r3, r1
 8007f3a:	bf88      	it	hi
 8007f3c:	6013      	strhi	r3, [r2, #0]
 8007f3e:	4a15      	ldr	r2, [pc, #84]	; (8007f94 <_malloc_r+0x33c>)
 8007f40:	6811      	ldr	r1, [r2, #0]
 8007f42:	428b      	cmp	r3, r1
 8007f44:	bf88      	it	hi
 8007f46:	6013      	strhi	r3, [r2, #0]
 8007f48:	6862      	ldr	r2, [r4, #4]
 8007f4a:	f022 0203 	bic.w	r2, r2, #3
 8007f4e:	4295      	cmp	r5, r2
 8007f50:	ebc5 0302 	rsb	r3, r5, r2
 8007f54:	d801      	bhi.n	8007f5a <_malloc_r+0x302>
 8007f56:	2b0f      	cmp	r3, #15
 8007f58:	dc04      	bgt.n	8007f64 <_malloc_r+0x30c>
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f000 f964 	bl	8008228 <__malloc_unlock>
 8007f60:	2400      	movs	r4, #0
 8007f62:	e6a5      	b.n	8007cb0 <_malloc_r+0x58>
 8007f64:	1962      	adds	r2, r4, r5
 8007f66:	f043 0301 	orr.w	r3, r3, #1
 8007f6a:	f045 0501 	orr.w	r5, r5, #1
 8007f6e:	6065      	str	r5, [r4, #4]
 8007f70:	4630      	mov	r0, r6
 8007f72:	60ba      	str	r2, [r7, #8]
 8007f74:	6053      	str	r3, [r2, #4]
 8007f76:	f000 f957 	bl	8008228 <__malloc_unlock>
 8007f7a:	3408      	adds	r4, #8
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	b003      	add	sp, #12
 8007f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f84:	20000180 	.word	0x20000180
 8007f88:	20000bec 	.word	0x20000bec
 8007f8c:	2000058c 	.word	0x2000058c
 8007f90:	20000be8 	.word	0x20000be8
 8007f94:	20000be4 	.word	0x20000be4
 8007f98:	20000bf0 	.word	0x20000bf0
 8007f9c:	f1bc 0f14 	cmp.w	ip, #20
 8007fa0:	d961      	bls.n	8008066 <_malloc_r+0x40e>
 8007fa2:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 8007fa6:	f200 808f 	bhi.w	80080c8 <_malloc_r+0x470>
 8007faa:	ea4f 3c15 	mov.w	ip, r5, lsr #12
 8007fae:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 8007fb2:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8007fb6:	e697      	b.n	8007ce8 <_malloc_r+0x90>
 8007fb8:	0a4b      	lsrs	r3, r1, #9
 8007fba:	2b04      	cmp	r3, #4
 8007fbc:	d958      	bls.n	8008070 <_malloc_r+0x418>
 8007fbe:	2b14      	cmp	r3, #20
 8007fc0:	f200 80ae 	bhi.w	8008120 <_malloc_r+0x4c8>
 8007fc4:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8007fc8:	0050      	lsls	r0, r2, #1
 8007fca:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8007fce:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800818c <_malloc_r+0x534>
 8007fd2:	6883      	ldr	r3, [r0, #8]
 8007fd4:	4283      	cmp	r3, r0
 8007fd6:	f000 808a 	beq.w	80080ee <_malloc_r+0x496>
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	f022 0203 	bic.w	r2, r2, #3
 8007fe0:	4291      	cmp	r1, r2
 8007fe2:	d202      	bcs.n	8007fea <_malloc_r+0x392>
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	4298      	cmp	r0, r3
 8007fe8:	d1f7      	bne.n	8007fda <_malloc_r+0x382>
 8007fea:	68d9      	ldr	r1, [r3, #12]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	60e1      	str	r1, [r4, #12]
 8007ff0:	60a3      	str	r3, [r4, #8]
 8007ff2:	608c      	str	r4, [r1, #8]
 8007ff4:	60dc      	str	r4, [r3, #12]
 8007ff6:	e6b7      	b.n	8007d68 <_malloc_r+0x110>
 8007ff8:	1961      	adds	r1, r4, r5
 8007ffa:	f042 0701 	orr.w	r7, r2, #1
 8007ffe:	f045 0501 	orr.w	r5, r5, #1
 8008002:	6065      	str	r5, [r4, #4]
 8008004:	4630      	mov	r0, r6
 8008006:	6159      	str	r1, [r3, #20]
 8008008:	6119      	str	r1, [r3, #16]
 800800a:	f8c1 e00c 	str.w	lr, [r1, #12]
 800800e:	f8c1 e008 	str.w	lr, [r1, #8]
 8008012:	604f      	str	r7, [r1, #4]
 8008014:	508a      	str	r2, [r1, r2]
 8008016:	3408      	adds	r4, #8
 8008018:	f000 f906 	bl	8008228 <__malloc_unlock>
 800801c:	e648      	b.n	8007cb0 <_malloc_r+0x58>
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	e6a2      	b.n	8007d68 <_malloc_r+0x110>
 8008022:	f109 0901 	add.w	r9, r9, #1
 8008026:	f019 0f03 	tst.w	r9, #3
 800802a:	f104 0408 	add.w	r4, r4, #8
 800802e:	f47f aeae 	bne.w	8007d8e <_malloc_r+0x136>
 8008032:	e02d      	b.n	8008090 <_malloc_r+0x438>
 8008034:	f104 0308 	add.w	r3, r4, #8
 8008038:	6964      	ldr	r4, [r4, #20]
 800803a:	42a3      	cmp	r3, r4
 800803c:	bf08      	it	eq
 800803e:	f10c 0c02 	addeq.w	ip, ip, #2
 8008042:	f43f ae67 	beq.w	8007d14 <_malloc_r+0xbc>
 8008046:	e623      	b.n	8007c90 <_malloc_r+0x38>
 8008048:	4419      	add	r1, r3
 800804a:	461c      	mov	r4, r3
 800804c:	6848      	ldr	r0, [r1, #4]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8008054:	f040 0501 	orr.w	r5, r0, #1
 8008058:	604d      	str	r5, [r1, #4]
 800805a:	4630      	mov	r0, r6
 800805c:	60d3      	str	r3, [r2, #12]
 800805e:	609a      	str	r2, [r3, #8]
 8008060:	f000 f8e2 	bl	8008228 <__malloc_unlock>
 8008064:	e624      	b.n	8007cb0 <_malloc_r+0x58>
 8008066:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
 800806a:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800806e:	e63b      	b.n	8007ce8 <_malloc_r+0x90>
 8008070:	098a      	lsrs	r2, r1, #6
 8008072:	3238      	adds	r2, #56	; 0x38
 8008074:	0050      	lsls	r0, r2, #1
 8008076:	e7a8      	b.n	8007fca <_malloc_r+0x372>
 8008078:	42bc      	cmp	r4, r7
 800807a:	f43f af03 	beq.w	8007e84 <_malloc_r+0x22c>
 800807e:	68bc      	ldr	r4, [r7, #8]
 8008080:	6862      	ldr	r2, [r4, #4]
 8008082:	f022 0203 	bic.w	r2, r2, #3
 8008086:	e762      	b.n	8007f4e <_malloc_r+0x2f6>
 8008088:	f8d8 8000 	ldr.w	r8, [r8]
 800808c:	4598      	cmp	r8, r3
 800808e:	d17b      	bne.n	8008188 <_malloc_r+0x530>
 8008090:	f01c 0f03 	tst.w	ip, #3
 8008094:	f1a8 0308 	sub.w	r3, r8, #8
 8008098:	f10c 3cff 	add.w	ip, ip, #4294967295
 800809c:	d1f4      	bne.n	8008088 <_malloc_r+0x430>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	ea23 0300 	bic.w	r3, r3, r0
 80080a4:	607b      	str	r3, [r7, #4]
 80080a6:	0040      	lsls	r0, r0, #1
 80080a8:	4298      	cmp	r0, r3
 80080aa:	f63f aebf 	bhi.w	8007e2c <_malloc_r+0x1d4>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	f43f aebc 	beq.w	8007e2c <_malloc_r+0x1d4>
 80080b4:	4203      	tst	r3, r0
 80080b6:	46cc      	mov	ip, r9
 80080b8:	f47f ae65 	bne.w	8007d86 <_malloc_r+0x12e>
 80080bc:	0040      	lsls	r0, r0, #1
 80080be:	4203      	tst	r3, r0
 80080c0:	f10c 0c04 	add.w	ip, ip, #4
 80080c4:	d0fa      	beq.n	80080bc <_malloc_r+0x464>
 80080c6:	e65e      	b.n	8007d86 <_malloc_r+0x12e>
 80080c8:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 80080cc:	d81a      	bhi.n	8008104 <_malloc_r+0x4ac>
 80080ce:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
 80080d2:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 80080d6:	ea4f 014c 	mov.w	r1, ip, lsl #1
 80080da:	e605      	b.n	8007ce8 <_malloc_r+0x90>
 80080dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080e0:	e6ef      	b.n	8007ec2 <_malloc_r+0x26a>
 80080e2:	2301      	movs	r3, #1
 80080e4:	f8c8 3004 	str.w	r3, [r8, #4]
 80080e8:	4644      	mov	r4, r8
 80080ea:	2200      	movs	r2, #0
 80080ec:	e72f      	b.n	8007f4e <_malloc_r+0x2f6>
 80080ee:	1091      	asrs	r1, r2, #2
 80080f0:	2001      	movs	r0, #1
 80080f2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80080f6:	fa00 f101 	lsl.w	r1, r0, r1
 80080fa:	430a      	orrs	r2, r1
 80080fc:	f8c8 2004 	str.w	r2, [r8, #4]
 8008100:	4619      	mov	r1, r3
 8008102:	e774      	b.n	8007fee <_malloc_r+0x396>
 8008104:	f240 5354 	movw	r3, #1364	; 0x554
 8008108:	459c      	cmp	ip, r3
 800810a:	d81b      	bhi.n	8008144 <_malloc_r+0x4ec>
 800810c:	ea4f 4c95 	mov.w	ip, r5, lsr #18
 8008110:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
 8008114:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8008118:	e5e6      	b.n	8007ce8 <_malloc_r+0x90>
 800811a:	f10a 0a10 	add.w	sl, sl, #16
 800811e:	e6a3      	b.n	8007e68 <_malloc_r+0x210>
 8008120:	2b54      	cmp	r3, #84	; 0x54
 8008122:	d81f      	bhi.n	8008164 <_malloc_r+0x50c>
 8008124:	0b0a      	lsrs	r2, r1, #12
 8008126:	326e      	adds	r2, #110	; 0x6e
 8008128:	0050      	lsls	r0, r2, #1
 800812a:	e74e      	b.n	8007fca <_malloc_r+0x372>
 800812c:	f3cb 010b 	ubfx	r1, fp, #0, #12
 8008130:	2900      	cmp	r1, #0
 8008132:	f47f aeb1 	bne.w	8007e98 <_malloc_r+0x240>
 8008136:	eb0a 0109 	add.w	r1, sl, r9
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	f041 0101 	orr.w	r1, r1, #1
 8008140:	6051      	str	r1, [r2, #4]
 8008142:	e6f6      	b.n	8007f32 <_malloc_r+0x2da>
 8008144:	21fc      	movs	r1, #252	; 0xfc
 8008146:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 800814a:	e5cd      	b.n	8007ce8 <_malloc_r+0x90>
 800814c:	2201      	movs	r2, #1
 800814e:	f04f 0a00 	mov.w	sl, #0
 8008152:	e6cb      	b.n	8007eec <_malloc_r+0x294>
 8008154:	f104 0108 	add.w	r1, r4, #8
 8008158:	4630      	mov	r0, r6
 800815a:	f003 fb73 	bl	800b844 <_free_r>
 800815e:	f8da 3000 	ldr.w	r3, [sl]
 8008162:	e6e6      	b.n	8007f32 <_malloc_r+0x2da>
 8008164:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008168:	d803      	bhi.n	8008172 <_malloc_r+0x51a>
 800816a:	0bca      	lsrs	r2, r1, #15
 800816c:	3277      	adds	r2, #119	; 0x77
 800816e:	0050      	lsls	r0, r2, #1
 8008170:	e72b      	b.n	8007fca <_malloc_r+0x372>
 8008172:	f240 5254 	movw	r2, #1364	; 0x554
 8008176:	4293      	cmp	r3, r2
 8008178:	d803      	bhi.n	8008182 <_malloc_r+0x52a>
 800817a:	0c8a      	lsrs	r2, r1, #18
 800817c:	327c      	adds	r2, #124	; 0x7c
 800817e:	0050      	lsls	r0, r2, #1
 8008180:	e723      	b.n	8007fca <_malloc_r+0x372>
 8008182:	20fc      	movs	r0, #252	; 0xfc
 8008184:	227e      	movs	r2, #126	; 0x7e
 8008186:	e720      	b.n	8007fca <_malloc_r+0x372>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	e78c      	b.n	80080a6 <_malloc_r+0x44e>
 800818c:	20000180 	.word	0x20000180

08008190 <memset>:
 8008190:	b4f0      	push	{r4, r5, r6, r7}
 8008192:	0784      	lsls	r4, r0, #30
 8008194:	d043      	beq.n	800821e <memset+0x8e>
 8008196:	1e54      	subs	r4, r2, #1
 8008198:	2a00      	cmp	r2, #0
 800819a:	d03e      	beq.n	800821a <memset+0x8a>
 800819c:	b2cd      	uxtb	r5, r1
 800819e:	4603      	mov	r3, r0
 80081a0:	e003      	b.n	80081aa <memset+0x1a>
 80081a2:	1e62      	subs	r2, r4, #1
 80081a4:	2c00      	cmp	r4, #0
 80081a6:	d038      	beq.n	800821a <memset+0x8a>
 80081a8:	4614      	mov	r4, r2
 80081aa:	f803 5b01 	strb.w	r5, [r3], #1
 80081ae:	079a      	lsls	r2, r3, #30
 80081b0:	d1f7      	bne.n	80081a2 <memset+0x12>
 80081b2:	2c03      	cmp	r4, #3
 80081b4:	d92a      	bls.n	800820c <memset+0x7c>
 80081b6:	b2cd      	uxtb	r5, r1
 80081b8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80081bc:	2c0f      	cmp	r4, #15
 80081be:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80081c2:	d915      	bls.n	80081f0 <memset+0x60>
 80081c4:	f1a4 0710 	sub.w	r7, r4, #16
 80081c8:	093f      	lsrs	r7, r7, #4
 80081ca:	f103 0610 	add.w	r6, r3, #16
 80081ce:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 80081d2:	461a      	mov	r2, r3
 80081d4:	6015      	str	r5, [r2, #0]
 80081d6:	6055      	str	r5, [r2, #4]
 80081d8:	6095      	str	r5, [r2, #8]
 80081da:	60d5      	str	r5, [r2, #12]
 80081dc:	3210      	adds	r2, #16
 80081de:	42b2      	cmp	r2, r6
 80081e0:	d1f8      	bne.n	80081d4 <memset+0x44>
 80081e2:	f004 040f 	and.w	r4, r4, #15
 80081e6:	3701      	adds	r7, #1
 80081e8:	2c03      	cmp	r4, #3
 80081ea:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80081ee:	d90d      	bls.n	800820c <memset+0x7c>
 80081f0:	461e      	mov	r6, r3
 80081f2:	4622      	mov	r2, r4
 80081f4:	3a04      	subs	r2, #4
 80081f6:	2a03      	cmp	r2, #3
 80081f8:	f846 5b04 	str.w	r5, [r6], #4
 80081fc:	d8fa      	bhi.n	80081f4 <memset+0x64>
 80081fe:	1f22      	subs	r2, r4, #4
 8008200:	f022 0203 	bic.w	r2, r2, #3
 8008204:	3204      	adds	r2, #4
 8008206:	4413      	add	r3, r2
 8008208:	f004 0403 	and.w	r4, r4, #3
 800820c:	b12c      	cbz	r4, 800821a <memset+0x8a>
 800820e:	b2c9      	uxtb	r1, r1
 8008210:	441c      	add	r4, r3
 8008212:	f803 1b01 	strb.w	r1, [r3], #1
 8008216:	42a3      	cmp	r3, r4
 8008218:	d1fb      	bne.n	8008212 <memset+0x82>
 800821a:	bcf0      	pop	{r4, r5, r6, r7}
 800821c:	4770      	bx	lr
 800821e:	4614      	mov	r4, r2
 8008220:	4603      	mov	r3, r0
 8008222:	e7c6      	b.n	80081b2 <memset+0x22>

08008224 <__malloc_lock>:
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop

08008228 <__malloc_unlock>:
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop

0800822c <_sbrk_r>:
 800822c:	b538      	push	{r3, r4, r5, lr}
 800822e:	4c07      	ldr	r4, [pc, #28]	; (800824c <_sbrk_r+0x20>)
 8008230:	2300      	movs	r3, #0
 8008232:	4605      	mov	r5, r0
 8008234:	4608      	mov	r0, r1
 8008236:	6023      	str	r3, [r4, #0]
 8008238:	f7f9 fa9a 	bl	8001770 <_sbrk>
 800823c:	1c43      	adds	r3, r0, #1
 800823e:	d000      	beq.n	8008242 <_sbrk_r+0x16>
 8008240:	bd38      	pop	{r3, r4, r5, pc}
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d0fb      	beq.n	8008240 <_sbrk_r+0x14>
 8008248:	602b      	str	r3, [r5, #0]
 800824a:	bd38      	pop	{r3, r4, r5, pc}
 800824c:	20001c50 	.word	0x20001c50

08008250 <sprintf>:
 8008250:	b40e      	push	{r1, r2, r3}
 8008252:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008254:	b09c      	sub	sp, #112	; 0x70
 8008256:	ab21      	add	r3, sp, #132	; 0x84
 8008258:	490f      	ldr	r1, [pc, #60]	; (8008298 <sprintf+0x48>)
 800825a:	f853 2b04 	ldr.w	r2, [r3], #4
 800825e:	9301      	str	r3, [sp, #4]
 8008260:	4605      	mov	r5, r0
 8008262:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8008266:	6808      	ldr	r0, [r1, #0]
 8008268:	9502      	str	r5, [sp, #8]
 800826a:	f44f 7702 	mov.w	r7, #520	; 0x208
 800826e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8008272:	a902      	add	r1, sp, #8
 8008274:	9506      	str	r5, [sp, #24]
 8008276:	f8ad 7014 	strh.w	r7, [sp, #20]
 800827a:	9404      	str	r4, [sp, #16]
 800827c:	9407      	str	r4, [sp, #28]
 800827e:	f8ad 6016 	strh.w	r6, [sp, #22]
 8008282:	f000 f921 	bl	80084c8 <_svfprintf_r>
 8008286:	9b02      	ldr	r3, [sp, #8]
 8008288:	2200      	movs	r2, #0
 800828a:	701a      	strb	r2, [r3, #0]
 800828c:	b01c      	add	sp, #112	; 0x70
 800828e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008292:	b003      	add	sp, #12
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	200009c0 	.word	0x200009c0

0800829c <sscanf>:
 800829c:	b40e      	push	{r1, r2, r3}
 800829e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082a0:	b09c      	sub	sp, #112	; 0x70
 80082a2:	ac21      	add	r4, sp, #132	; 0x84
 80082a4:	f44f 7201 	mov.w	r2, #516	; 0x204
 80082a8:	f854 6b04 	ldr.w	r6, [r4], #4
 80082ac:	f8ad 2014 	strh.w	r2, [sp, #20]
 80082b0:	9002      	str	r0, [sp, #8]
 80082b2:	9006      	str	r0, [sp, #24]
 80082b4:	f000 f87e 	bl	80083b4 <strlen>
 80082b8:	4b0c      	ldr	r3, [pc, #48]	; (80082ec <sscanf+0x50>)
 80082ba:	9401      	str	r4, [sp, #4]
 80082bc:	4605      	mov	r5, r0
 80082be:	4632      	mov	r2, r6
 80082c0:	4f0b      	ldr	r7, [pc, #44]	; (80082f0 <sscanf+0x54>)
 80082c2:	6818      	ldr	r0, [r3, #0]
 80082c4:	9503      	str	r5, [sp, #12]
 80082c6:	4623      	mov	r3, r4
 80082c8:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80082cc:	2400      	movs	r4, #0
 80082ce:	a902      	add	r1, sp, #8
 80082d0:	9507      	str	r5, [sp, #28]
 80082d2:	970a      	str	r7, [sp, #40]	; 0x28
 80082d4:	940e      	str	r4, [sp, #56]	; 0x38
 80082d6:	9413      	str	r4, [sp, #76]	; 0x4c
 80082d8:	f8ad 6016 	strh.w	r6, [sp, #22]
 80082dc:	f001 fb70 	bl	80099c0 <__ssvfscanf_r>
 80082e0:	b01c      	add	sp, #112	; 0x70
 80082e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80082e6:	b003      	add	sp, #12
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	200009c0 	.word	0x200009c0
 80082f0:	080082f5 	.word	0x080082f5

080082f4 <__seofread>:
 80082f4:	2000      	movs	r0, #0
 80082f6:	4770      	bx	lr

080082f8 <strcpy>:
 80082f8:	ea80 0201 	eor.w	r2, r0, r1
 80082fc:	4684      	mov	ip, r0
 80082fe:	f012 0f03 	tst.w	r2, #3
 8008302:	d14f      	bne.n	80083a4 <strcpy+0xac>
 8008304:	f011 0f03 	tst.w	r1, #3
 8008308:	d132      	bne.n	8008370 <strcpy+0x78>
 800830a:	f84d 4d04 	str.w	r4, [sp, #-4]!
 800830e:	f011 0f04 	tst.w	r1, #4
 8008312:	f851 3b04 	ldr.w	r3, [r1], #4
 8008316:	d00b      	beq.n	8008330 <strcpy+0x38>
 8008318:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 800831c:	439a      	bics	r2, r3
 800831e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8008322:	bf04      	itt	eq
 8008324:	f84c 3b04 	streq.w	r3, [ip], #4
 8008328:	f851 3b04 	ldreq.w	r3, [r1], #4
 800832c:	d116      	bne.n	800835c <strcpy+0x64>
 800832e:	bf00      	nop
 8008330:	f851 4b04 	ldr.w	r4, [r1], #4
 8008334:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8008338:	439a      	bics	r2, r3
 800833a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800833e:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8008342:	d10b      	bne.n	800835c <strcpy+0x64>
 8008344:	f84c 3b04 	str.w	r3, [ip], #4
 8008348:	43a2      	bics	r2, r4
 800834a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800834e:	bf04      	itt	eq
 8008350:	f851 3b04 	ldreq.w	r3, [r1], #4
 8008354:	f84c 4b04 	streq.w	r4, [ip], #4
 8008358:	d0ea      	beq.n	8008330 <strcpy+0x38>
 800835a:	4623      	mov	r3, r4
 800835c:	f80c 3b01 	strb.w	r3, [ip], #1
 8008360:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008364:	ea4f 2333 	mov.w	r3, r3, ror #8
 8008368:	d1f8      	bne.n	800835c <strcpy+0x64>
 800836a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	f011 0f01 	tst.w	r1, #1
 8008374:	d006      	beq.n	8008384 <strcpy+0x8c>
 8008376:	f811 2b01 	ldrb.w	r2, [r1], #1
 800837a:	f80c 2b01 	strb.w	r2, [ip], #1
 800837e:	2a00      	cmp	r2, #0
 8008380:	bf08      	it	eq
 8008382:	4770      	bxeq	lr
 8008384:	f011 0f02 	tst.w	r1, #2
 8008388:	d0bf      	beq.n	800830a <strcpy+0x12>
 800838a:	f831 2b02 	ldrh.w	r2, [r1], #2
 800838e:	f012 0fff 	tst.w	r2, #255	; 0xff
 8008392:	bf16      	itet	ne
 8008394:	f82c 2b02 	strhne.w	r2, [ip], #2
 8008398:	f88c 2000 	strbeq.w	r2, [ip]
 800839c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 80083a0:	d1b3      	bne.n	800830a <strcpy+0x12>
 80083a2:	4770      	bx	lr
 80083a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083a8:	f80c 2b01 	strb.w	r2, [ip], #1
 80083ac:	2a00      	cmp	r2, #0
 80083ae:	d1f9      	bne.n	80083a4 <strcpy+0xac>
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop

080083b4 <strlen>:
 80083b4:	f020 0103 	bic.w	r1, r0, #3
 80083b8:	f010 0003 	ands.w	r0, r0, #3
 80083bc:	f1c0 0000 	rsb	r0, r0, #0
 80083c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80083c4:	f100 0c04 	add.w	ip, r0, #4
 80083c8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80083cc:	f06f 0200 	mvn.w	r2, #0
 80083d0:	bf1c      	itt	ne
 80083d2:	fa22 f20c 	lsrne.w	r2, r2, ip
 80083d6:	4313      	orrne	r3, r2
 80083d8:	f04f 0c01 	mov.w	ip, #1
 80083dc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80083e0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80083e4:	eba3 020c 	sub.w	r2, r3, ip
 80083e8:	ea22 0203 	bic.w	r2, r2, r3
 80083ec:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80083f0:	bf04      	itt	eq
 80083f2:	f851 3b04 	ldreq.w	r3, [r1], #4
 80083f6:	3004      	addeq	r0, #4
 80083f8:	d0f4      	beq.n	80083e4 <strlen+0x30>
 80083fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80083fe:	bf1f      	itttt	ne
 8008400:	3001      	addne	r0, #1
 8008402:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8008406:	3001      	addne	r0, #1
 8008408:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 800840c:	bf18      	it	ne
 800840e:	3001      	addne	r0, #1
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop

08008414 <strncmp>:
 8008414:	b430      	push	{r4, r5}
 8008416:	2a00      	cmp	r2, #0
 8008418:	d04a      	beq.n	80084b0 <strncmp+0x9c>
 800841a:	ea40 0301 	orr.w	r3, r0, r1
 800841e:	f013 0303 	ands.w	r3, r3, #3
 8008422:	d12d      	bne.n	8008480 <strncmp+0x6c>
 8008424:	2a03      	cmp	r2, #3
 8008426:	d92b      	bls.n	8008480 <strncmp+0x6c>
 8008428:	6804      	ldr	r4, [r0, #0]
 800842a:	680d      	ldr	r5, [r1, #0]
 800842c:	42ac      	cmp	r4, r5
 800842e:	d127      	bne.n	8008480 <strncmp+0x6c>
 8008430:	3a04      	subs	r2, #4
 8008432:	d03d      	beq.n	80084b0 <strncmp+0x9c>
 8008434:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8008438:	ea25 0404 	bic.w	r4, r5, r4
 800843c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8008440:	d13c      	bne.n	80084bc <strncmp+0xa8>
 8008442:	460c      	mov	r4, r1
 8008444:	4603      	mov	r3, r0
 8008446:	e00e      	b.n	8008466 <strncmp+0x52>
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	6864      	ldr	r4, [r4, #4]
 800844c:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8008450:	42a3      	cmp	r3, r4
 8008452:	ea25 0503 	bic.w	r5, r5, r3
 8008456:	d113      	bne.n	8008480 <strncmp+0x6c>
 8008458:	3a04      	subs	r2, #4
 800845a:	d029      	beq.n	80084b0 <strncmp+0x9c>
 800845c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8008460:	d129      	bne.n	80084b6 <strncmp+0xa2>
 8008462:	4603      	mov	r3, r0
 8008464:	460c      	mov	r4, r1
 8008466:	2a03      	cmp	r2, #3
 8008468:	f100 0004 	add.w	r0, r0, #4
 800846c:	f101 0104 	add.w	r1, r1, #4
 8008470:	d8ea      	bhi.n	8008448 <strncmp+0x34>
 8008472:	1e55      	subs	r5, r2, #1
 8008474:	b92a      	cbnz	r2, 8008482 <strncmp+0x6e>
 8008476:	7918      	ldrb	r0, [r3, #4]
 8008478:	7922      	ldrb	r2, [r4, #4]
 800847a:	1a80      	subs	r0, r0, r2
 800847c:	bc30      	pop	{r4, r5}
 800847e:	4770      	bx	lr
 8008480:	1e55      	subs	r5, r2, #1
 8008482:	7803      	ldrb	r3, [r0, #0]
 8008484:	780a      	ldrb	r2, [r1, #0]
 8008486:	4293      	cmp	r3, r2
 8008488:	d11a      	bne.n	80084c0 <strncmp+0xac>
 800848a:	b1dd      	cbz	r5, 80084c4 <strncmp+0xb0>
 800848c:	b1b3      	cbz	r3, 80084bc <strncmp+0xa8>
 800848e:	1c6c      	adds	r4, r5, #1
 8008490:	440c      	add	r4, r1
 8008492:	1c8b      	adds	r3, r1, #2
 8008494:	4601      	mov	r1, r0
 8008496:	e004      	b.n	80084a2 <strncmp+0x8e>
 8008498:	42a3      	cmp	r3, r4
 800849a:	d00c      	beq.n	80084b6 <strncmp+0xa2>
 800849c:	3301      	adds	r3, #1
 800849e:	2800      	cmp	r0, #0
 80084a0:	d0ec      	beq.n	800847c <strncmp+0x68>
 80084a2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80084a6:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80084aa:	4290      	cmp	r0, r2
 80084ac:	d0f4      	beq.n	8008498 <strncmp+0x84>
 80084ae:	e7e4      	b.n	800847a <strncmp+0x66>
 80084b0:	4610      	mov	r0, r2
 80084b2:	bc30      	pop	{r4, r5}
 80084b4:	4770      	bx	lr
 80084b6:	2000      	movs	r0, #0
 80084b8:	bc30      	pop	{r4, r5}
 80084ba:	4770      	bx	lr
 80084bc:	4618      	mov	r0, r3
 80084be:	e7dd      	b.n	800847c <strncmp+0x68>
 80084c0:	4618      	mov	r0, r3
 80084c2:	e7da      	b.n	800847a <strncmp+0x66>
 80084c4:	4628      	mov	r0, r5
 80084c6:	e7d9      	b.n	800847c <strncmp+0x68>

080084c8 <_svfprintf_r>:
 80084c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084cc:	b0c9      	sub	sp, #292	; 0x124
 80084ce:	4691      	mov	r9, r2
 80084d0:	9310      	str	r3, [sp, #64]	; 0x40
 80084d2:	910c      	str	r1, [sp, #48]	; 0x30
 80084d4:	900d      	str	r0, [sp, #52]	; 0x34
 80084d6:	f003 fa9b 	bl	800ba10 <_localeconv_r>
 80084da:	6800      	ldr	r0, [r0, #0]
 80084dc:	9015      	str	r0, [sp, #84]	; 0x54
 80084de:	f7ff ff69 	bl	80083b4 <strlen>
 80084e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80084e4:	9018      	str	r0, [sp, #96]	; 0x60
 80084e6:	89a3      	ldrh	r3, [r4, #12]
 80084e8:	061a      	lsls	r2, r3, #24
 80084ea:	d503      	bpl.n	80084f4 <_svfprintf_r+0x2c>
 80084ec:	6923      	ldr	r3, [r4, #16]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f001 808d 	beq.w	800960e <_svfprintf_r+0x1146>
 80084f4:	ac38      	add	r4, sp, #224	; 0xe0
 80084f6:	46a4      	mov	ip, r4
 80084f8:	9408      	str	r4, [sp, #32]
 80084fa:	942b      	str	r4, [sp, #172]	; 0xac
 80084fc:	2500      	movs	r5, #0
 80084fe:	2400      	movs	r4, #0
 8008500:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
 8008504:	2300      	movs	r3, #0
 8008506:	9311      	str	r3, [sp, #68]	; 0x44
 8008508:	932d      	str	r3, [sp, #180]	; 0xb4
 800850a:	932c      	str	r3, [sp, #176]	; 0xb0
 800850c:	931a      	str	r3, [sp, #104]	; 0x68
 800850e:	9319      	str	r3, [sp, #100]	; 0x64
 8008510:	930e      	str	r3, [sp, #56]	; 0x38
 8008512:	4666      	mov	r6, ip
 8008514:	f899 3000 	ldrb.w	r3, [r9]
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 80f8 	beq.w	800870e <_svfprintf_r+0x246>
 800851e:	2b25      	cmp	r3, #37	; 0x25
 8008520:	f000 80f5 	beq.w	800870e <_svfprintf_r+0x246>
 8008524:	f109 0201 	add.w	r2, r9, #1
 8008528:	e001      	b.n	800852e <_svfprintf_r+0x66>
 800852a:	2b25      	cmp	r3, #37	; 0x25
 800852c:	d004      	beq.n	8008538 <_svfprintf_r+0x70>
 800852e:	4614      	mov	r4, r2
 8008530:	3201      	adds	r2, #1
 8008532:	7823      	ldrb	r3, [r4, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1f8      	bne.n	800852a <_svfprintf_r+0x62>
 8008538:	ebc9 0504 	rsb	r5, r9, r4
 800853c:	b17d      	cbz	r5, 800855e <_svfprintf_r+0x96>
 800853e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008540:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008542:	f8c6 9000 	str.w	r9, [r6]
 8008546:	3301      	adds	r3, #1
 8008548:	442a      	add	r2, r5
 800854a:	2b07      	cmp	r3, #7
 800854c:	6075      	str	r5, [r6, #4]
 800854e:	922d      	str	r2, [sp, #180]	; 0xb4
 8008550:	932c      	str	r3, [sp, #176]	; 0xb0
 8008552:	f300 80c2 	bgt.w	80086da <_svfprintf_r+0x212>
 8008556:	3608      	adds	r6, #8
 8008558:	980e      	ldr	r0, [sp, #56]	; 0x38
 800855a:	4428      	add	r0, r5
 800855c:	900e      	str	r0, [sp, #56]	; 0x38
 800855e:	7823      	ldrb	r3, [r4, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 80c2 	beq.w	80086ea <_svfprintf_r+0x222>
 8008566:	2300      	movs	r3, #0
 8008568:	f894 8001 	ldrb.w	r8, [r4, #1]
 800856c:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8008570:	461a      	mov	r2, r3
 8008572:	930f      	str	r3, [sp, #60]	; 0x3c
 8008574:	9309      	str	r3, [sp, #36]	; 0x24
 8008576:	f104 0901 	add.w	r9, r4, #1
 800857a:	f04f 34ff 	mov.w	r4, #4294967295
 800857e:	940a      	str	r4, [sp, #40]	; 0x28
 8008580:	f109 0901 	add.w	r9, r9, #1
 8008584:	f1a8 0320 	sub.w	r3, r8, #32
 8008588:	2b58      	cmp	r3, #88	; 0x58
 800858a:	f200 83c7 	bhi.w	8008d1c <_svfprintf_r+0x854>
 800858e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008592:	026a      	.short	0x026a
 8008594:	03c503c5 	.word	0x03c503c5
 8008598:	03c50271 	.word	0x03c50271
 800859c:	03c503c5 	.word	0x03c503c5
 80085a0:	03c503c5 	.word	0x03c503c5
 80085a4:	031403c5 	.word	0x031403c5
 80085a8:	03c50364 	.word	0x03c50364
 80085ac:	00c0009d 	.word	0x00c0009d
 80085b0:	027803c5 	.word	0x027803c5
 80085b4:	027f027f 	.word	0x027f027f
 80085b8:	027f027f 	.word	0x027f027f
 80085bc:	027f027f 	.word	0x027f027f
 80085c0:	027f027f 	.word	0x027f027f
 80085c4:	03c5027f 	.word	0x03c5027f
 80085c8:	03c503c5 	.word	0x03c503c5
 80085cc:	03c503c5 	.word	0x03c503c5
 80085d0:	03c503c5 	.word	0x03c503c5
 80085d4:	03c503c5 	.word	0x03c503c5
 80085d8:	029003c5 	.word	0x029003c5
 80085dc:	03c5036f 	.word	0x03c5036f
 80085e0:	03c5036f 	.word	0x03c5036f
 80085e4:	03c503c5 	.word	0x03c503c5
 80085e8:	036803c5 	.word	0x036803c5
 80085ec:	03c503c5 	.word	0x03c503c5
 80085f0:	03c50078 	.word	0x03c50078
 80085f4:	03c503c5 	.word	0x03c503c5
 80085f8:	03c503c5 	.word	0x03c503c5
 80085fc:	03c50059 	.word	0x03c50059
 8008600:	02af03c5 	.word	0x02af03c5
 8008604:	03c503c5 	.word	0x03c503c5
 8008608:	03c503c5 	.word	0x03c503c5
 800860c:	03c503c5 	.word	0x03c503c5
 8008610:	03c503c5 	.word	0x03c503c5
 8008614:	03c503c5 	.word	0x03c503c5
 8008618:	03480337 	.word	0x03480337
 800861c:	036f036f 	.word	0x036f036f
 8008620:	02ff036f 	.word	0x02ff036f
 8008624:	03c50348 	.word	0x03c50348
 8008628:	030803c5 	.word	0x030803c5
 800862c:	02c503c5 	.word	0x02c503c5
 8008630:	0321007c 	.word	0x0321007c
 8008634:	03c503a5 	.word	0x03c503a5
 8008638:	03c502d9 	.word	0x03c502d9
 800863c:	03c5005f 	.word	0x03c5005f
 8008640:	00de03c5 	.word	0x00de03c5
 8008644:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8008648:	f04c 0c10 	orr.w	ip, ip, #16
 800864c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8008650:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008652:	06a2      	lsls	r2, r4, #26
 8008654:	f100 8356 	bmi.w	8008d04 <_svfprintf_r+0x83c>
 8008658:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800865a:	06e3      	lsls	r3, r4, #27
 800865c:	f100 85e0 	bmi.w	8009220 <_svfprintf_r+0xd58>
 8008660:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8008664:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8008668:	f000 85da 	beq.w	8009220 <_svfprintf_r+0xd58>
 800866c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8008670:	f8bc 4000 	ldrh.w	r4, [ip]
 8008674:	f10c 0c04 	add.w	ip, ip, #4
 8008678:	2500      	movs	r5, #0
 800867a:	2301      	movs	r3, #1
 800867c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8008680:	e08c      	b.n	800879c <_svfprintf_r+0x2d4>
 8008682:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008684:	f045 0510 	orr.w	r5, r5, #16
 8008688:	9509      	str	r5, [sp, #36]	; 0x24
 800868a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800868e:	f01c 0320 	ands.w	r3, ip, #32
 8008692:	f040 832c 	bne.w	8008cee <_svfprintf_r+0x826>
 8008696:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800869a:	f01c 0210 	ands.w	r2, ip, #16
 800869e:	f040 85b8 	bne.w	8009212 <_svfprintf_r+0xd4a>
 80086a2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80086a6:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
 80086aa:	f000 85b2 	beq.w	8009212 <_svfprintf_r+0xd4a>
 80086ae:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 80086b2:	f8bc 4000 	ldrh.w	r4, [ip]
 80086b6:	f10c 0c04 	add.w	ip, ip, #4
 80086ba:	4613      	mov	r3, r2
 80086bc:	2500      	movs	r5, #0
 80086be:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 80086c2:	e06b      	b.n	800879c <_svfprintf_r+0x2d4>
 80086c4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80086c6:	9310      	str	r3, [sp, #64]	; 0x40
 80086c8:	4264      	negs	r4, r4
 80086ca:	940f      	str	r4, [sp, #60]	; 0x3c
 80086cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80086ce:	f045 0504 	orr.w	r5, r5, #4
 80086d2:	9509      	str	r5, [sp, #36]	; 0x24
 80086d4:	f899 8000 	ldrb.w	r8, [r9]
 80086d8:	e752      	b.n	8008580 <_svfprintf_r+0xb8>
 80086da:	980d      	ldr	r0, [sp, #52]	; 0x34
 80086dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80086de:	aa2b      	add	r2, sp, #172	; 0xac
 80086e0:	f005 f93e 	bl	800d960 <__ssprint_r>
 80086e4:	b940      	cbnz	r0, 80086f8 <_svfprintf_r+0x230>
 80086e6:	ae38      	add	r6, sp, #224	; 0xe0
 80086e8:	e736      	b.n	8008558 <_svfprintf_r+0x90>
 80086ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80086ec:	b123      	cbz	r3, 80086f8 <_svfprintf_r+0x230>
 80086ee:	980d      	ldr	r0, [sp, #52]	; 0x34
 80086f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80086f2:	aa2b      	add	r2, sp, #172	; 0xac
 80086f4:	f005 f934 	bl	800d960 <__ssprint_r>
 80086f8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80086fa:	980e      	ldr	r0, [sp, #56]	; 0x38
 80086fc:	89a3      	ldrh	r3, [r4, #12]
 80086fe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008702:	bf18      	it	ne
 8008704:	f04f 30ff 	movne.w	r0, #4294967295
 8008708:	b049      	add	sp, #292	; 0x124
 800870a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800870e:	464c      	mov	r4, r9
 8008710:	e725      	b.n	800855e <_svfprintf_r+0x96>
 8008712:	f899 8000 	ldrb.w	r8, [r9]
 8008716:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 800871a:	f109 0001 	add.w	r0, r9, #1
 800871e:	f001 8118 	beq.w	8009952 <_svfprintf_r+0x148a>
 8008722:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8008726:	2b09      	cmp	r3, #9
 8008728:	bf98      	it	ls
 800872a:	2100      	movls	r1, #0
 800872c:	f201 8077 	bhi.w	800981e <_svfprintf_r+0x1356>
 8008730:	f810 8b01 	ldrb.w	r8, [r0], #1
 8008734:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008738:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800873c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8008740:	2b09      	cmp	r3, #9
 8008742:	d9f5      	bls.n	8008730 <_svfprintf_r+0x268>
 8008744:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
 8008748:	910a      	str	r1, [sp, #40]	; 0x28
 800874a:	4681      	mov	r9, r0
 800874c:	e71a      	b.n	8008584 <_svfprintf_r+0xbc>
 800874e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008750:	4ca1      	ldr	r4, [pc, #644]	; (80089d8 <_svfprintf_r+0x510>)
 8008752:	941a      	str	r4, [sp, #104]	; 0x68
 8008754:	06af      	lsls	r7, r5, #26
 8008756:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 800875a:	f140 81d1 	bpl.w	8008b00 <_svfprintf_r+0x638>
 800875e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8008762:	f10c 0307 	add.w	r3, ip, #7
 8008766:	f023 0307 	bic.w	r3, r3, #7
 800876a:	f103 0408 	add.w	r4, r3, #8
 800876e:	9410      	str	r4, [sp, #64]	; 0x40
 8008770:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008774:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8008778:	f01c 0f01 	tst.w	ip, #1
 800877c:	f000 8464 	beq.w	8009048 <_svfprintf_r+0xb80>
 8008780:	ea54 0005 	orrs.w	r0, r4, r5
 8008784:	f000 8460 	beq.w	8009048 <_svfprintf_r+0xb80>
 8008788:	2330      	movs	r3, #48	; 0x30
 800878a:	f04c 0c02 	orr.w	ip, ip, #2
 800878e:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8008792:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
 8008796:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800879a:	2302      	movs	r3, #2
 800879c:	f04f 0a00 	mov.w	sl, #0
 80087a0:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 80087a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80087a6:	2900      	cmp	r1, #0
 80087a8:	db05      	blt.n	80087b6 <_svfprintf_r+0x2ee>
 80087aa:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80087ae:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
 80087b2:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80087b6:	ea54 0005 	orrs.w	r0, r4, r5
 80087ba:	f040 82c7 	bne.w	8008d4c <_svfprintf_r+0x884>
 80087be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80087c0:	2900      	cmp	r1, #0
 80087c2:	f040 82c3 	bne.w	8008d4c <_svfprintf_r+0x884>
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f040 843a 	bne.w	8009040 <_svfprintf_r+0xb78>
 80087cc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80087d0:	f01c 0f01 	tst.w	ip, #1
 80087d4:	f000 8434 	beq.w	8009040 <_svfprintf_r+0xb78>
 80087d8:	af48      	add	r7, sp, #288	; 0x120
 80087da:	2330      	movs	r3, #48	; 0x30
 80087dc:	f807 3d41 	strb.w	r3, [r7, #-65]!
 80087e0:	9d08      	ldr	r5, [sp, #32]
 80087e2:	1bec      	subs	r4, r5, r7
 80087e4:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80087e8:	2500      	movs	r5, #0
 80087ea:	4564      	cmp	r4, ip
 80087ec:	bfa8      	it	ge
 80087ee:	46a4      	movge	ip, r4
 80087f0:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80087f4:	9514      	str	r5, [sp, #80]	; 0x50
 80087f6:	f1ba 0f00 	cmp.w	sl, #0
 80087fa:	d002      	beq.n	8008802 <_svfprintf_r+0x33a>
 80087fc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80087fe:	3501      	adds	r5, #1
 8008800:	950b      	str	r5, [sp, #44]	; 0x2c
 8008802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008804:	f013 0302 	ands.w	r3, r3, #2
 8008808:	9312      	str	r3, [sp, #72]	; 0x48
 800880a:	d002      	beq.n	8008812 <_svfprintf_r+0x34a>
 800880c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800880e:	3502      	adds	r5, #2
 8008810:	950b      	str	r5, [sp, #44]	; 0x2c
 8008812:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8008816:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
 800881a:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 800881e:	f040 8292 	bne.w	8008d46 <_svfprintf_r+0x87e>
 8008822:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008824:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8008828:	ebcc 0b05 	rsb	fp, ip, r5
 800882c:	f1bb 0f00 	cmp.w	fp, #0
 8008830:	f340 8289 	ble.w	8008d46 <_svfprintf_r+0x87e>
 8008834:	f1bb 0f10 	cmp.w	fp, #16
 8008838:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800883a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800883c:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 80089e0 <_svfprintf_r+0x518>
 8008840:	dd2c      	ble.n	800889c <_svfprintf_r+0x3d4>
 8008842:	971b      	str	r7, [sp, #108]	; 0x6c
 8008844:	4630      	mov	r0, r6
 8008846:	4657      	mov	r7, sl
 8008848:	2510      	movs	r5, #16
 800884a:	46ca      	mov	sl, r9
 800884c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800884e:	46a1      	mov	r9, r4
 8008850:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008852:	e006      	b.n	8008862 <_svfprintf_r+0x39a>
 8008854:	f1ab 0b10 	sub.w	fp, fp, #16
 8008858:	f1bb 0f10 	cmp.w	fp, #16
 800885c:	f100 0008 	add.w	r0, r0, #8
 8008860:	dd17      	ble.n	8008892 <_svfprintf_r+0x3ca>
 8008862:	3201      	adds	r2, #1
 8008864:	3110      	adds	r1, #16
 8008866:	2a07      	cmp	r2, #7
 8008868:	912d      	str	r1, [sp, #180]	; 0xb4
 800886a:	922c      	str	r2, [sp, #176]	; 0xb0
 800886c:	6007      	str	r7, [r0, #0]
 800886e:	6045      	str	r5, [r0, #4]
 8008870:	ddf0      	ble.n	8008854 <_svfprintf_r+0x38c>
 8008872:	4620      	mov	r0, r4
 8008874:	4631      	mov	r1, r6
 8008876:	aa2b      	add	r2, sp, #172	; 0xac
 8008878:	f005 f872 	bl	800d960 <__ssprint_r>
 800887c:	2800      	cmp	r0, #0
 800887e:	f47f af3b 	bne.w	80086f8 <_svfprintf_r+0x230>
 8008882:	f1ab 0b10 	sub.w	fp, fp, #16
 8008886:	f1bb 0f10 	cmp.w	fp, #16
 800888a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800888c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800888e:	a838      	add	r0, sp, #224	; 0xe0
 8008890:	dce7      	bgt.n	8008862 <_svfprintf_r+0x39a>
 8008892:	464c      	mov	r4, r9
 8008894:	46d1      	mov	r9, sl
 8008896:	46ba      	mov	sl, r7
 8008898:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800889a:	4606      	mov	r6, r0
 800889c:	3201      	adds	r2, #1
 800889e:	eb0b 0c01 	add.w	ip, fp, r1
 80088a2:	2a07      	cmp	r2, #7
 80088a4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 80088a8:	922c      	str	r2, [sp, #176]	; 0xb0
 80088aa:	e886 0c00 	stmia.w	r6, {sl, fp}
 80088ae:	f300 841c 	bgt.w	80090ea <_svfprintf_r+0xc22>
 80088b2:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 80088b6:	3608      	adds	r6, #8
 80088b8:	f1ba 0f00 	cmp.w	sl, #0
 80088bc:	d00f      	beq.n	80088de <_svfprintf_r+0x416>
 80088be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80088c0:	3301      	adds	r3, #1
 80088c2:	f10c 0c01 	add.w	ip, ip, #1
 80088c6:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
 80088ca:	2201      	movs	r2, #1
 80088cc:	2b07      	cmp	r3, #7
 80088ce:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 80088d2:	932c      	str	r3, [sp, #176]	; 0xb0
 80088d4:	e886 0006 	stmia.w	r6, {r1, r2}
 80088d8:	f300 839a 	bgt.w	8009010 <_svfprintf_r+0xb48>
 80088dc:	3608      	adds	r6, #8
 80088de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088e0:	b173      	cbz	r3, 8008900 <_svfprintf_r+0x438>
 80088e2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80088e4:	3301      	adds	r3, #1
 80088e6:	f10c 0c02 	add.w	ip, ip, #2
 80088ea:	a924      	add	r1, sp, #144	; 0x90
 80088ec:	2202      	movs	r2, #2
 80088ee:	2b07      	cmp	r3, #7
 80088f0:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 80088f4:	932c      	str	r3, [sp, #176]	; 0xb0
 80088f6:	e886 0006 	stmia.w	r6, {r1, r2}
 80088fa:	f300 8395 	bgt.w	8009028 <_svfprintf_r+0xb60>
 80088fe:	3608      	adds	r6, #8
 8008900:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8008902:	2d80      	cmp	r5, #128	; 0x80
 8008904:	f000 82cc 	beq.w	8008ea0 <_svfprintf_r+0x9d8>
 8008908:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800890a:	ebc4 0a05 	rsb	sl, r4, r5
 800890e:	f1ba 0f00 	cmp.w	sl, #0
 8008912:	dd3b      	ble.n	800898c <_svfprintf_r+0x4c4>
 8008914:	f1ba 0f10 	cmp.w	sl, #16
 8008918:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800891a:	4d30      	ldr	r5, [pc, #192]	; (80089dc <_svfprintf_r+0x514>)
 800891c:	dd2b      	ble.n	8008976 <_svfprintf_r+0x4ae>
 800891e:	940a      	str	r4, [sp, #40]	; 0x28
 8008920:	4632      	mov	r2, r6
 8008922:	f04f 0b10 	mov.w	fp, #16
 8008926:	462e      	mov	r6, r5
 8008928:	4661      	mov	r1, ip
 800892a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800892c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800892e:	e006      	b.n	800893e <_svfprintf_r+0x476>
 8008930:	f1aa 0a10 	sub.w	sl, sl, #16
 8008934:	f1ba 0f10 	cmp.w	sl, #16
 8008938:	f102 0208 	add.w	r2, r2, #8
 800893c:	dd17      	ble.n	800896e <_svfprintf_r+0x4a6>
 800893e:	3301      	adds	r3, #1
 8008940:	3110      	adds	r1, #16
 8008942:	2b07      	cmp	r3, #7
 8008944:	912d      	str	r1, [sp, #180]	; 0xb4
 8008946:	932c      	str	r3, [sp, #176]	; 0xb0
 8008948:	e882 0840 	stmia.w	r2, {r6, fp}
 800894c:	ddf0      	ble.n	8008930 <_svfprintf_r+0x468>
 800894e:	4620      	mov	r0, r4
 8008950:	4629      	mov	r1, r5
 8008952:	aa2b      	add	r2, sp, #172	; 0xac
 8008954:	f005 f804 	bl	800d960 <__ssprint_r>
 8008958:	2800      	cmp	r0, #0
 800895a:	f47f aecd 	bne.w	80086f8 <_svfprintf_r+0x230>
 800895e:	f1aa 0a10 	sub.w	sl, sl, #16
 8008962:	f1ba 0f10 	cmp.w	sl, #16
 8008966:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8008968:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800896a:	aa38      	add	r2, sp, #224	; 0xe0
 800896c:	dce7      	bgt.n	800893e <_svfprintf_r+0x476>
 800896e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008970:	4635      	mov	r5, r6
 8008972:	468c      	mov	ip, r1
 8008974:	4616      	mov	r6, r2
 8008976:	3301      	adds	r3, #1
 8008978:	44d4      	add	ip, sl
 800897a:	2b07      	cmp	r3, #7
 800897c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8008980:	932c      	str	r3, [sp, #176]	; 0xb0
 8008982:	e886 0420 	stmia.w	r6, {r5, sl}
 8008986:	f300 8337 	bgt.w	8008ff8 <_svfprintf_r+0xb30>
 800898a:	3608      	adds	r6, #8
 800898c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800898e:	05ed      	lsls	r5, r5, #23
 8008990:	f100 8226 	bmi.w	8008de0 <_svfprintf_r+0x918>
 8008994:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008996:	6037      	str	r7, [r6, #0]
 8008998:	3301      	adds	r3, #1
 800899a:	44a4      	add	ip, r4
 800899c:	2b07      	cmp	r3, #7
 800899e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 80089a2:	6074      	str	r4, [r6, #4]
 80089a4:	932c      	str	r3, [sp, #176]	; 0xb0
 80089a6:	f300 8311 	bgt.w	8008fcc <_svfprintf_r+0xb04>
 80089aa:	3608      	adds	r6, #8
 80089ac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80089ae:	0763      	lsls	r3, r4, #29
 80089b0:	d549      	bpl.n	8008a46 <_svfprintf_r+0x57e>
 80089b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80089b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80089b6:	1a2c      	subs	r4, r5, r0
 80089b8:	2c00      	cmp	r4, #0
 80089ba:	dd44      	ble.n	8008a46 <_svfprintf_r+0x57e>
 80089bc:	2c10      	cmp	r4, #16
 80089be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80089c0:	f8df a01c 	ldr.w	sl, [pc, #28]	; 80089e0 <_svfprintf_r+0x518>
 80089c4:	dd2b      	ble.n	8008a1e <_svfprintf_r+0x556>
 80089c6:	4657      	mov	r7, sl
 80089c8:	2510      	movs	r5, #16
 80089ca:	4662      	mov	r2, ip
 80089cc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80089d0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80089d4:	e00b      	b.n	80089ee <_svfprintf_r+0x526>
 80089d6:	bf00      	nop
 80089d8:	0800ef78 	.word	0x0800ef78
 80089dc:	0800ef44 	.word	0x0800ef44
 80089e0:	0800ef98 	.word	0x0800ef98
 80089e4:	3c10      	subs	r4, #16
 80089e6:	2c10      	cmp	r4, #16
 80089e8:	f106 0608 	add.w	r6, r6, #8
 80089ec:	dd15      	ble.n	8008a1a <_svfprintf_r+0x552>
 80089ee:	3301      	adds	r3, #1
 80089f0:	3210      	adds	r2, #16
 80089f2:	2b07      	cmp	r3, #7
 80089f4:	922d      	str	r2, [sp, #180]	; 0xb4
 80089f6:	932c      	str	r3, [sp, #176]	; 0xb0
 80089f8:	6037      	str	r7, [r6, #0]
 80089fa:	6075      	str	r5, [r6, #4]
 80089fc:	ddf2      	ble.n	80089e4 <_svfprintf_r+0x51c>
 80089fe:	4650      	mov	r0, sl
 8008a00:	4641      	mov	r1, r8
 8008a02:	aa2b      	add	r2, sp, #172	; 0xac
 8008a04:	f004 ffac 	bl	800d960 <__ssprint_r>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	f47f ae75 	bne.w	80086f8 <_svfprintf_r+0x230>
 8008a0e:	3c10      	subs	r4, #16
 8008a10:	2c10      	cmp	r4, #16
 8008a12:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008a14:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008a16:	ae38      	add	r6, sp, #224	; 0xe0
 8008a18:	dce9      	bgt.n	80089ee <_svfprintf_r+0x526>
 8008a1a:	4694      	mov	ip, r2
 8008a1c:	46ba      	mov	sl, r7
 8008a1e:	3301      	adds	r3, #1
 8008a20:	44a4      	add	ip, r4
 8008a22:	2b07      	cmp	r3, #7
 8008a24:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8008a28:	932c      	str	r3, [sp, #176]	; 0xb0
 8008a2a:	f8c6 a000 	str.w	sl, [r6]
 8008a2e:	6074      	str	r4, [r6, #4]
 8008a30:	dd09      	ble.n	8008a46 <_svfprintf_r+0x57e>
 8008a32:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008a34:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008a36:	aa2b      	add	r2, sp, #172	; 0xac
 8008a38:	f004 ff92 	bl	800d960 <__ssprint_r>
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	f47f ae5b 	bne.w	80086f8 <_svfprintf_r+0x230>
 8008a42:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8008a46:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008a48:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008a4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008a4c:	42a8      	cmp	r0, r5
 8008a4e:	bfac      	ite	ge
 8008a50:	1824      	addge	r4, r4, r0
 8008a52:	1964      	addlt	r4, r4, r5
 8008a54:	940e      	str	r4, [sp, #56]	; 0x38
 8008a56:	f1bc 0f00 	cmp.w	ip, #0
 8008a5a:	f040 82c3 	bne.w	8008fe4 <_svfprintf_r+0xb1c>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	932c      	str	r3, [sp, #176]	; 0xb0
 8008a62:	ae38      	add	r6, sp, #224	; 0xe0
 8008a64:	e556      	b.n	8008514 <_svfprintf_r+0x4c>
 8008a66:	f899 8000 	ldrb.w	r8, [r9]
 8008a6a:	2a00      	cmp	r2, #0
 8008a6c:	f47f ad88 	bne.w	8008580 <_svfprintf_r+0xb8>
 8008a70:	2220      	movs	r2, #32
 8008a72:	e585      	b.n	8008580 <_svfprintf_r+0xb8>
 8008a74:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008a76:	f045 0501 	orr.w	r5, r5, #1
 8008a7a:	9509      	str	r5, [sp, #36]	; 0x24
 8008a7c:	f899 8000 	ldrb.w	r8, [r9]
 8008a80:	e57e      	b.n	8008580 <_svfprintf_r+0xb8>
 8008a82:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008a84:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8008a88:	9509      	str	r5, [sp, #36]	; 0x24
 8008a8a:	f899 8000 	ldrb.w	r8, [r9]
 8008a8e:	e577      	b.n	8008580 <_svfprintf_r+0xb8>
 8008a90:	2400      	movs	r4, #0
 8008a92:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8008a96:	940f      	str	r4, [sp, #60]	; 0x3c
 8008a98:	4621      	mov	r1, r4
 8008a9a:	f819 8b01 	ldrb.w	r8, [r9], #1
 8008a9e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008aa2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8008aa6:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8008aaa:	2b09      	cmp	r3, #9
 8008aac:	d9f5      	bls.n	8008a9a <_svfprintf_r+0x5d2>
 8008aae:	910f      	str	r1, [sp, #60]	; 0x3c
 8008ab0:	e568      	b.n	8008584 <_svfprintf_r+0xbc>
 8008ab2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8008ab6:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 8008aba:	f04c 0c10 	orr.w	ip, ip, #16
 8008abe:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8008ac2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008ac4:	06a3      	lsls	r3, r4, #26
 8008ac6:	f140 80b2 	bpl.w	8008c2e <_svfprintf_r+0x766>
 8008aca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008acc:	1de9      	adds	r1, r5, #7
 8008ace:	f021 0107 	bic.w	r1, r1, #7
 8008ad2:	e9d1 2300 	ldrd	r2, r3, [r1]
 8008ad6:	3108      	adds	r1, #8
 8008ad8:	9110      	str	r1, [sp, #64]	; 0x40
 8008ada:	4614      	mov	r4, r2
 8008adc:	461d      	mov	r5, r3
 8008ade:	2a00      	cmp	r2, #0
 8008ae0:	f173 0000 	sbcs.w	r0, r3, #0
 8008ae4:	f2c0 838b 	blt.w	80091fe <_svfprintf_r+0xd36>
 8008ae8:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8008aec:	2301      	movs	r3, #1
 8008aee:	e659      	b.n	80087a4 <_svfprintf_r+0x2dc>
 8008af0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008af2:	4cb7      	ldr	r4, [pc, #732]	; (8008dd0 <_svfprintf_r+0x908>)
 8008af4:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 8008af8:	06af      	lsls	r7, r5, #26
 8008afa:	941a      	str	r4, [sp, #104]	; 0x68
 8008afc:	f53f ae2f 	bmi.w	800875e <_svfprintf_r+0x296>
 8008b00:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008b02:	06ed      	lsls	r5, r5, #27
 8008b04:	f140 845d 	bpl.w	80093c2 <_svfprintf_r+0xefa>
 8008b08:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8008b0c:	f8dc 4000 	ldr.w	r4, [ip]
 8008b10:	f10c 0c04 	add.w	ip, ip, #4
 8008b14:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8008b18:	2500      	movs	r5, #0
 8008b1a:	e62b      	b.n	8008774 <_svfprintf_r+0x2ac>
 8008b1c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8008b20:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 8008b24:	f01c 0f20 	tst.w	ip, #32
 8008b28:	f000 843d 	beq.w	80093a6 <_svfprintf_r+0xede>
 8008b2c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008b2e:	6821      	ldr	r1, [r4, #0]
 8008b30:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008b32:	17e5      	asrs	r5, r4, #31
 8008b34:	462b      	mov	r3, r5
 8008b36:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008b38:	4622      	mov	r2, r4
 8008b3a:	3504      	adds	r5, #4
 8008b3c:	9510      	str	r5, [sp, #64]	; 0x40
 8008b3e:	e9c1 2300 	strd	r2, r3, [r1]
 8008b42:	e4e7      	b.n	8008514 <_svfprintf_r+0x4c>
 8008b44:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008b46:	6827      	ldr	r7, [r4, #0]
 8008b48:	f04f 0a00 	mov.w	sl, #0
 8008b4c:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 8008b50:	1d25      	adds	r5, r4, #4
 8008b52:	2f00      	cmp	r7, #0
 8008b54:	f000 85f5 	beq.w	8009742 <_svfprintf_r+0x127a>
 8008b58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b5a:	2c00      	cmp	r4, #0
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	f2c0 85a7 	blt.w	80096b0 <_svfprintf_r+0x11e8>
 8008b62:	4651      	mov	r1, sl
 8008b64:	4622      	mov	r2, r4
 8008b66:	f002 ff9b 	bl	800baa0 <memchr>
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	f000 861f 	beq.w	80097ae <_svfprintf_r+0x12e6>
 8008b70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b72:	9510      	str	r5, [sp, #64]	; 0x40
 8008b74:	1bc0      	subs	r0, r0, r7
 8008b76:	42a0      	cmp	r0, r4
 8008b78:	bfb8      	it	lt
 8008b7a:	4604      	movlt	r4, r0
 8008b7c:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 8008b80:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008b84:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 8008b88:	950b      	str	r5, [sp, #44]	; 0x2c
 8008b8a:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8008b8e:	e632      	b.n	80087f6 <_svfprintf_r+0x32e>
 8008b90:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8008b94:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 8008b98:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8008b9c:	f899 8000 	ldrb.w	r8, [r9]
 8008ba0:	e4ee      	b.n	8008580 <_svfprintf_r+0xb8>
 8008ba2:	f899 8000 	ldrb.w	r8, [r9]
 8008ba6:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 8008baa:	464b      	mov	r3, r9
 8008bac:	f000 848b 	beq.w	80094c6 <_svfprintf_r+0xffe>
 8008bb0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008bb2:	f045 0510 	orr.w	r5, r5, #16
 8008bb6:	9509      	str	r5, [sp, #36]	; 0x24
 8008bb8:	e4e2      	b.n	8008580 <_svfprintf_r+0xb8>
 8008bba:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008bbc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008bbe:	6824      	ldr	r4, [r4, #0]
 8008bc0:	940f      	str	r4, [sp, #60]	; 0x3c
 8008bc2:	2c00      	cmp	r4, #0
 8008bc4:	f105 0304 	add.w	r3, r5, #4
 8008bc8:	f6ff ad7c 	blt.w	80086c4 <_svfprintf_r+0x1fc>
 8008bcc:	9310      	str	r3, [sp, #64]	; 0x40
 8008bce:	f899 8000 	ldrb.w	r8, [r9]
 8008bd2:	e4d5      	b.n	8008580 <_svfprintf_r+0xb8>
 8008bd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008bd6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8008bda:	487e      	ldr	r0, [pc, #504]	; (8008dd4 <_svfprintf_r+0x90c>)
 8008bdc:	6814      	ldr	r4, [r2, #0]
 8008bde:	901a      	str	r0, [sp, #104]	; 0x68
 8008be0:	2330      	movs	r3, #48	; 0x30
 8008be2:	1d15      	adds	r5, r2, #4
 8008be4:	f04f 0878 	mov.w	r8, #120	; 0x78
 8008be8:	f04c 0c02 	orr.w	ip, ip, #2
 8008bec:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8008bf0:	9510      	str	r5, [sp, #64]	; 0x40
 8008bf2:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8008bf6:	2500      	movs	r5, #0
 8008bf8:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	e5cd      	b.n	800879c <_svfprintf_r+0x2d4>
 8008c00:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c02:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008c04:	6812      	ldr	r2, [r2, #0]
 8008c06:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	2401      	movs	r4, #1
 8008c0e:	3504      	adds	r5, #4
 8008c10:	469a      	mov	sl, r3
 8008c12:	940b      	str	r4, [sp, #44]	; 0x2c
 8008c14:	9510      	str	r5, [sp, #64]	; 0x40
 8008c16:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8008c1a:	930a      	str	r3, [sp, #40]	; 0x28
 8008c1c:	9314      	str	r3, [sp, #80]	; 0x50
 8008c1e:	af2e      	add	r7, sp, #184	; 0xb8
 8008c20:	e5ef      	b.n	8008802 <_svfprintf_r+0x33a>
 8008c22:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008c24:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 8008c28:	06a3      	lsls	r3, r4, #26
 8008c2a:	f53f af4e 	bmi.w	8008aca <_svfprintf_r+0x602>
 8008c2e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8008c32:	f01c 0f10 	tst.w	ip, #16
 8008c36:	f040 82d2 	bne.w	80091de <_svfprintf_r+0xd16>
 8008c3a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008c3c:	0667      	lsls	r7, r4, #25
 8008c3e:	f140 82ce 	bpl.w	80091de <_svfprintf_r+0xd16>
 8008c42:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8008c46:	f9bc 4000 	ldrsh.w	r4, [ip]
 8008c4a:	f10c 0c04 	add.w	ip, ip, #4
 8008c4e:	17e5      	asrs	r5, r4, #31
 8008c50:	4622      	mov	r2, r4
 8008c52:	462b      	mov	r3, r5
 8008c54:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8008c58:	e741      	b.n	8008ade <_svfprintf_r+0x616>
 8008c5a:	f899 8000 	ldrb.w	r8, [r9]
 8008c5e:	222b      	movs	r2, #43	; 0x2b
 8008c60:	e48e      	b.n	8008580 <_svfprintf_r+0xb8>
 8008c62:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008c64:	f045 0508 	orr.w	r5, r5, #8
 8008c68:	9509      	str	r5, [sp, #36]	; 0x24
 8008c6a:	f899 8000 	ldrb.w	r8, [r9]
 8008c6e:	e487      	b.n	8008580 <_svfprintf_r+0xb8>
 8008c70:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008c72:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008c74:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 8008c78:	1deb      	adds	r3, r5, #7
 8008c7a:	0725      	lsls	r5, r4, #28
 8008c7c:	f023 0307 	bic.w	r3, r3, #7
 8008c80:	f140 838a 	bpl.w	8009398 <_svfprintf_r+0xed0>
 8008c84:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008c88:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
 8008c8c:	f103 0c08 	add.w	ip, r3, #8
 8008c90:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8008c94:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8008c98:	f003 fb96 	bl	800c3c8 <__fpclassifyd>
 8008c9c:	2801      	cmp	r0, #1
 8008c9e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8008ca2:	f040 835f 	bne.w	8009364 <_svfprintf_r+0xe9c>
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	2300      	movs	r3, #0
 8008caa:	f7f8 fa13 	bl	80010d4 <__aeabi_dcmplt>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	f040 856d 	bne.w	800978e <_svfprintf_r+0x12c6>
 8008cb4:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8008cb8:	2503      	movs	r5, #3
 8008cba:	950b      	str	r5, [sp, #44]	; 0x2c
 8008cbc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008cbe:	4f46      	ldr	r7, [pc, #280]	; (8008dd8 <_svfprintf_r+0x910>)
 8008cc0:	4b46      	ldr	r3, [pc, #280]	; (8008ddc <_svfprintf_r+0x914>)
 8008cc2:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8008cc6:	2400      	movs	r4, #0
 8008cc8:	9509      	str	r5, [sp, #36]	; 0x24
 8008cca:	2500      	movs	r5, #0
 8008ccc:	940a      	str	r4, [sp, #40]	; 0x28
 8008cce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008cd2:	bfd8      	it	le
 8008cd4:	461f      	movle	r7, r3
 8008cd6:	2403      	movs	r4, #3
 8008cd8:	9514      	str	r5, [sp, #80]	; 0x50
 8008cda:	e58c      	b.n	80087f6 <_svfprintf_r+0x32e>
 8008cdc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8008ce0:	f04c 0c20 	orr.w	ip, ip, #32
 8008ce4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8008ce8:	f899 8000 	ldrb.w	r8, [r9]
 8008cec:	e448      	b.n	8008580 <_svfprintf_r+0xb8>
 8008cee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008cf0:	1de3      	adds	r3, r4, #7
 8008cf2:	f023 0307 	bic.w	r3, r3, #7
 8008cf6:	f103 0508 	add.w	r5, r3, #8
 8008cfa:	9510      	str	r5, [sp, #64]	; 0x40
 8008cfc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008d00:	2300      	movs	r3, #0
 8008d02:	e54b      	b.n	800879c <_svfprintf_r+0x2d4>
 8008d04:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008d06:	1deb      	adds	r3, r5, #7
 8008d08:	f023 0307 	bic.w	r3, r3, #7
 8008d0c:	f103 0c08 	add.w	ip, r3, #8
 8008d10:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008d14:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e53f      	b.n	800879c <_svfprintf_r+0x2d4>
 8008d1c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 8008d20:	f1b8 0f00 	cmp.w	r8, #0
 8008d24:	f43f ace1 	beq.w	80086ea <_svfprintf_r+0x222>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	f04f 0c01 	mov.w	ip, #1
 8008d2e:	469a      	mov	sl, r3
 8008d30:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8008d34:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
 8008d38:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8008d3c:	930a      	str	r3, [sp, #40]	; 0x28
 8008d3e:	9314      	str	r3, [sp, #80]	; 0x50
 8008d40:	4664      	mov	r4, ip
 8008d42:	af2e      	add	r7, sp, #184	; 0xb8
 8008d44:	e55d      	b.n	8008802 <_svfprintf_r+0x33a>
 8008d46:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8008d4a:	e5b5      	b.n	80088b8 <_svfprintf_r+0x3f0>
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	f000 80ec 	beq.w	8008f2a <_svfprintf_r+0xa62>
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
 8008d58:	d118      	bne.n	8008d8c <_svfprintf_r+0x8c4>
 8008d5a:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
 8008d5e:	4619      	mov	r1, r3
 8008d60:	f004 000f 	and.w	r0, r4, #15
 8008d64:	0922      	lsrs	r2, r4, #4
 8008d66:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
 8008d6a:	460f      	mov	r7, r1
 8008d6c:	092b      	lsrs	r3, r5, #4
 8008d6e:	f81c 1000 	ldrb.w	r1, [ip, r0]
 8008d72:	7039      	strb	r1, [r7, #0]
 8008d74:	ea52 0003 	orrs.w	r0, r2, r3
 8008d78:	4614      	mov	r4, r2
 8008d7a:	461d      	mov	r5, r3
 8008d7c:	f107 31ff 	add.w	r1, r7, #4294967295
 8008d80:	d1ee      	bne.n	8008d60 <_svfprintf_r+0x898>
 8008d82:	9d08      	ldr	r5, [sp, #32]
 8008d84:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8008d88:	1bec      	subs	r4, r5, r7
 8008d8a:	e52b      	b.n	80087e4 <_svfprintf_r+0x31c>
 8008d8c:	08e0      	lsrs	r0, r4, #3
 8008d8e:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
 8008d92:	f004 0207 	and.w	r2, r4, #7
 8008d96:	08e9      	lsrs	r1, r5, #3
 8008d98:	3230      	adds	r2, #48	; 0x30
 8008d9a:	ea50 0c01 	orrs.w	ip, r0, r1
 8008d9e:	461f      	mov	r7, r3
 8008da0:	701a      	strb	r2, [r3, #0]
 8008da2:	4604      	mov	r4, r0
 8008da4:	460d      	mov	r5, r1
 8008da6:	f103 33ff 	add.w	r3, r3, #4294967295
 8008daa:	d1ef      	bne.n	8008d8c <_svfprintf_r+0x8c4>
 8008dac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008dae:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 8008db2:	07e0      	lsls	r0, r4, #31
 8008db4:	4639      	mov	r1, r7
 8008db6:	f140 80c1 	bpl.w	8008f3c <_svfprintf_r+0xa74>
 8008dba:	2a30      	cmp	r2, #48	; 0x30
 8008dbc:	f000 80be 	beq.w	8008f3c <_svfprintf_r+0xa74>
 8008dc0:	9d08      	ldr	r5, [sp, #32]
 8008dc2:	461f      	mov	r7, r3
 8008dc4:	2330      	movs	r3, #48	; 0x30
 8008dc6:	1bec      	subs	r4, r5, r7
 8008dc8:	f801 3c01 	strb.w	r3, [r1, #-1]
 8008dcc:	e50a      	b.n	80087e4 <_svfprintf_r+0x31c>
 8008dce:	bf00      	nop
 8008dd0:	0800ef64 	.word	0x0800ef64
 8008dd4:	0800ef78 	.word	0x0800ef78
 8008dd8:	0800ef58 	.word	0x0800ef58
 8008ddc:	0800ef54 	.word	0x0800ef54
 8008de0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8008de4:	f340 80ad 	ble.w	8008f42 <_svfprintf_r+0xa7a>
 8008de8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8008dec:	2200      	movs	r2, #0
 8008dee:	2300      	movs	r3, #0
 8008df0:	f8cd c01c 	str.w	ip, [sp, #28]
 8008df4:	f7f8 f964 	bl	80010c0 <__aeabi_dcmpeq>
 8008df8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	f000 8126 	beq.w	800904e <_svfprintf_r+0xb86>
 8008e02:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008e04:	4aaa      	ldr	r2, [pc, #680]	; (80090b0 <_svfprintf_r+0xbe8>)
 8008e06:	6032      	str	r2, [r6, #0]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	f10c 0c01 	add.w	ip, ip, #1
 8008e0e:	2201      	movs	r2, #1
 8008e10:	2b07      	cmp	r3, #7
 8008e12:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8008e16:	932c      	str	r3, [sp, #176]	; 0xb0
 8008e18:	6072      	str	r2, [r6, #4]
 8008e1a:	f300 82f7 	bgt.w	800940c <_svfprintf_r+0xf44>
 8008e1e:	3608      	adds	r6, #8
 8008e20:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008e22:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008e24:	42a3      	cmp	r3, r4
 8008e26:	db03      	blt.n	8008e30 <_svfprintf_r+0x968>
 8008e28:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008e2a:	07ec      	lsls	r4, r5, #31
 8008e2c:	f57f adbe 	bpl.w	80089ac <_svfprintf_r+0x4e4>
 8008e30:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008e32:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8008e34:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8008e36:	6034      	str	r4, [r6, #0]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	44ac      	add	ip, r5
 8008e3c:	2b07      	cmp	r3, #7
 8008e3e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8008e42:	6075      	str	r5, [r6, #4]
 8008e44:	932c      	str	r3, [sp, #176]	; 0xb0
 8008e46:	f300 8348 	bgt.w	80094da <_svfprintf_r+0x1012>
 8008e4a:	3608      	adds	r6, #8
 8008e4c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008e4e:	1e6c      	subs	r4, r5, #1
 8008e50:	2c00      	cmp	r4, #0
 8008e52:	f77f adab 	ble.w	80089ac <_svfprintf_r+0x4e4>
 8008e56:	2c10      	cmp	r4, #16
 8008e58:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008e5a:	4d96      	ldr	r5, [pc, #600]	; (80090b4 <_svfprintf_r+0xbec>)
 8008e5c:	f340 8197 	ble.w	800918e <_svfprintf_r+0xcc6>
 8008e60:	2710      	movs	r7, #16
 8008e62:	4662      	mov	r2, ip
 8008e64:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8008e68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008e6c:	e004      	b.n	8008e78 <_svfprintf_r+0x9b0>
 8008e6e:	3608      	adds	r6, #8
 8008e70:	3c10      	subs	r4, #16
 8008e72:	2c10      	cmp	r4, #16
 8008e74:	f340 818a 	ble.w	800918c <_svfprintf_r+0xcc4>
 8008e78:	3301      	adds	r3, #1
 8008e7a:	3210      	adds	r2, #16
 8008e7c:	2b07      	cmp	r3, #7
 8008e7e:	922d      	str	r2, [sp, #180]	; 0xb4
 8008e80:	932c      	str	r3, [sp, #176]	; 0xb0
 8008e82:	e886 00a0 	stmia.w	r6, {r5, r7}
 8008e86:	ddf2      	ble.n	8008e6e <_svfprintf_r+0x9a6>
 8008e88:	4640      	mov	r0, r8
 8008e8a:	4651      	mov	r1, sl
 8008e8c:	aa2b      	add	r2, sp, #172	; 0xac
 8008e8e:	f004 fd67 	bl	800d960 <__ssprint_r>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	f47f ac30 	bne.w	80086f8 <_svfprintf_r+0x230>
 8008e98:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008e9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008e9c:	ae38      	add	r6, sp, #224	; 0xe0
 8008e9e:	e7e7      	b.n	8008e70 <_svfprintf_r+0x9a8>
 8008ea0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008ea2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008ea4:	ebc0 0a05 	rsb	sl, r0, r5
 8008ea8:	f1ba 0f00 	cmp.w	sl, #0
 8008eac:	f77f ad2c 	ble.w	8008908 <_svfprintf_r+0x440>
 8008eb0:	f1ba 0f10 	cmp.w	sl, #16
 8008eb4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008eb6:	4d7f      	ldr	r5, [pc, #508]	; (80090b4 <_svfprintf_r+0xbec>)
 8008eb8:	dd2b      	ble.n	8008f12 <_svfprintf_r+0xa4a>
 8008eba:	9412      	str	r4, [sp, #72]	; 0x48
 8008ebc:	4632      	mov	r2, r6
 8008ebe:	f04f 0b10 	mov.w	fp, #16
 8008ec2:	462e      	mov	r6, r5
 8008ec4:	4661      	mov	r1, ip
 8008ec6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008ec8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008eca:	e006      	b.n	8008eda <_svfprintf_r+0xa12>
 8008ecc:	f1aa 0a10 	sub.w	sl, sl, #16
 8008ed0:	f1ba 0f10 	cmp.w	sl, #16
 8008ed4:	f102 0208 	add.w	r2, r2, #8
 8008ed8:	dd17      	ble.n	8008f0a <_svfprintf_r+0xa42>
 8008eda:	3301      	adds	r3, #1
 8008edc:	3110      	adds	r1, #16
 8008ede:	2b07      	cmp	r3, #7
 8008ee0:	912d      	str	r1, [sp, #180]	; 0xb4
 8008ee2:	932c      	str	r3, [sp, #176]	; 0xb0
 8008ee4:	e882 0840 	stmia.w	r2, {r6, fp}
 8008ee8:	ddf0      	ble.n	8008ecc <_svfprintf_r+0xa04>
 8008eea:	4620      	mov	r0, r4
 8008eec:	4629      	mov	r1, r5
 8008eee:	aa2b      	add	r2, sp, #172	; 0xac
 8008ef0:	f004 fd36 	bl	800d960 <__ssprint_r>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	f47f abff 	bne.w	80086f8 <_svfprintf_r+0x230>
 8008efa:	f1aa 0a10 	sub.w	sl, sl, #16
 8008efe:	f1ba 0f10 	cmp.w	sl, #16
 8008f02:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8008f04:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008f06:	aa38      	add	r2, sp, #224	; 0xe0
 8008f08:	dce7      	bgt.n	8008eda <_svfprintf_r+0xa12>
 8008f0a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8008f0c:	4635      	mov	r5, r6
 8008f0e:	468c      	mov	ip, r1
 8008f10:	4616      	mov	r6, r2
 8008f12:	3301      	adds	r3, #1
 8008f14:	44d4      	add	ip, sl
 8008f16:	2b07      	cmp	r3, #7
 8008f18:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8008f1c:	932c      	str	r3, [sp, #176]	; 0xb0
 8008f1e:	e886 0420 	stmia.w	r6, {r5, sl}
 8008f22:	f300 8212 	bgt.w	800934a <_svfprintf_r+0xe82>
 8008f26:	3608      	adds	r6, #8
 8008f28:	e4ee      	b.n	8008908 <_svfprintf_r+0x440>
 8008f2a:	2d00      	cmp	r5, #0
 8008f2c:	bf08      	it	eq
 8008f2e:	2c0a      	cmpeq	r4, #10
 8008f30:	f080 8138 	bcs.w	80091a4 <_svfprintf_r+0xcdc>
 8008f34:	af48      	add	r7, sp, #288	; 0x120
 8008f36:	3430      	adds	r4, #48	; 0x30
 8008f38:	f807 4d41 	strb.w	r4, [r7, #-65]!
 8008f3c:	9d08      	ldr	r5, [sp, #32]
 8008f3e:	1bec      	subs	r4, r5, r7
 8008f40:	e450      	b.n	80087e4 <_svfprintf_r+0x31c>
 8008f42:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008f44:	2c01      	cmp	r4, #1
 8008f46:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8008f48:	f340 81d5 	ble.w	80092f6 <_svfprintf_r+0xe2e>
 8008f4c:	3401      	adds	r4, #1
 8008f4e:	f10c 0301 	add.w	r3, ip, #1
 8008f52:	2201      	movs	r2, #1
 8008f54:	2c07      	cmp	r4, #7
 8008f56:	6037      	str	r7, [r6, #0]
 8008f58:	932d      	str	r3, [sp, #180]	; 0xb4
 8008f5a:	942c      	str	r4, [sp, #176]	; 0xb0
 8008f5c:	6072      	str	r2, [r6, #4]
 8008f5e:	f300 81db 	bgt.w	8009318 <_svfprintf_r+0xe50>
 8008f62:	3608      	adds	r6, #8
 8008f64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008f68:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008f6a:	6035      	str	r5, [r6, #0]
 8008f6c:	3401      	adds	r4, #1
 8008f6e:	4498      	add	r8, r3
 8008f70:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8008f72:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
 8008f76:	2c07      	cmp	r4, #7
 8008f78:	942c      	str	r4, [sp, #176]	; 0xb0
 8008f7a:	6075      	str	r5, [r6, #4]
 8008f7c:	f300 81d8 	bgt.w	8009330 <_svfprintf_r+0xe68>
 8008f80:	3608      	adds	r6, #8
 8008f82:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8008f86:	2200      	movs	r2, #0
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f7f8 f899 	bl	80010c0 <__aeabi_dcmpeq>
 8008f8e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008f90:	2800      	cmp	r0, #0
 8008f92:	f040 80b9 	bne.w	8009108 <_svfprintf_r+0xc40>
 8008f96:	1e6b      	subs	r3, r5, #1
 8008f98:	3401      	adds	r4, #1
 8008f9a:	3701      	adds	r7, #1
 8008f9c:	4498      	add	r8, r3
 8008f9e:	2c07      	cmp	r4, #7
 8008fa0:	942c      	str	r4, [sp, #176]	; 0xb0
 8008fa2:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
 8008fa6:	6037      	str	r7, [r6, #0]
 8008fa8:	6073      	str	r3, [r6, #4]
 8008faa:	f300 80e2 	bgt.w	8009172 <_svfprintf_r+0xcaa>
 8008fae:	3608      	adds	r6, #8
 8008fb0:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 8008fb4:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008fb6:	3401      	adds	r4, #1
 8008fb8:	44c4      	add	ip, r8
 8008fba:	ab27      	add	r3, sp, #156	; 0x9c
 8008fbc:	2c07      	cmp	r4, #7
 8008fbe:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8008fc2:	942c      	str	r4, [sp, #176]	; 0xb0
 8008fc4:	e886 0028 	stmia.w	r6, {r3, r5}
 8008fc8:	f77f acef 	ble.w	80089aa <_svfprintf_r+0x4e2>
 8008fcc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008fce:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008fd0:	aa2b      	add	r2, sp, #172	; 0xac
 8008fd2:	f004 fcc5 	bl	800d960 <__ssprint_r>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	f47f ab8e 	bne.w	80086f8 <_svfprintf_r+0x230>
 8008fdc:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8008fe0:	ae38      	add	r6, sp, #224	; 0xe0
 8008fe2:	e4e3      	b.n	80089ac <_svfprintf_r+0x4e4>
 8008fe4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008fe6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008fe8:	aa2b      	add	r2, sp, #172	; 0xac
 8008fea:	f004 fcb9 	bl	800d960 <__ssprint_r>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	f43f ad35 	beq.w	8008a5e <_svfprintf_r+0x596>
 8008ff4:	f7ff bb80 	b.w	80086f8 <_svfprintf_r+0x230>
 8008ff8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008ffa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008ffc:	aa2b      	add	r2, sp, #172	; 0xac
 8008ffe:	f004 fcaf 	bl	800d960 <__ssprint_r>
 8009002:	2800      	cmp	r0, #0
 8009004:	f47f ab78 	bne.w	80086f8 <_svfprintf_r+0x230>
 8009008:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 800900c:	ae38      	add	r6, sp, #224	; 0xe0
 800900e:	e4bd      	b.n	800898c <_svfprintf_r+0x4c4>
 8009010:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009012:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009014:	aa2b      	add	r2, sp, #172	; 0xac
 8009016:	f004 fca3 	bl	800d960 <__ssprint_r>
 800901a:	2800      	cmp	r0, #0
 800901c:	f47f ab6c 	bne.w	80086f8 <_svfprintf_r+0x230>
 8009020:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8009024:	ae38      	add	r6, sp, #224	; 0xe0
 8009026:	e45a      	b.n	80088de <_svfprintf_r+0x416>
 8009028:	980d      	ldr	r0, [sp, #52]	; 0x34
 800902a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800902c:	aa2b      	add	r2, sp, #172	; 0xac
 800902e:	f004 fc97 	bl	800d960 <__ssprint_r>
 8009032:	2800      	cmp	r0, #0
 8009034:	f47f ab60 	bne.w	80086f8 <_svfprintf_r+0x230>
 8009038:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 800903c:	ae38      	add	r6, sp, #224	; 0xe0
 800903e:	e45f      	b.n	8008900 <_svfprintf_r+0x438>
 8009040:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009042:	af38      	add	r7, sp, #224	; 0xe0
 8009044:	f7ff bbce 	b.w	80087e4 <_svfprintf_r+0x31c>
 8009048:	2302      	movs	r3, #2
 800904a:	f7ff bba7 	b.w	800879c <_svfprintf_r+0x2d4>
 800904e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8009050:	2b00      	cmp	r3, #0
 8009052:	f340 81e7 	ble.w	8009424 <_svfprintf_r+0xf5c>
 8009056:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8009058:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800905a:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800905e:	42ac      	cmp	r4, r5
 8009060:	bfa8      	it	ge
 8009062:	462c      	movge	r4, r5
 8009064:	2c00      	cmp	r4, #0
 8009066:	44ba      	add	sl, r7
 8009068:	dd0b      	ble.n	8009082 <_svfprintf_r+0xbba>
 800906a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800906c:	6037      	str	r7, [r6, #0]
 800906e:	3301      	adds	r3, #1
 8009070:	44a4      	add	ip, r4
 8009072:	2b07      	cmp	r3, #7
 8009074:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8009078:	6074      	str	r4, [r6, #4]
 800907a:	932c      	str	r3, [sp, #176]	; 0xb0
 800907c:	f300 8328 	bgt.w	80096d0 <_svfprintf_r+0x1208>
 8009080:	3608      	adds	r6, #8
 8009082:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009084:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8009088:	1b2c      	subs	r4, r5, r4
 800908a:	2c00      	cmp	r4, #0
 800908c:	f340 80db 	ble.w	8009246 <_svfprintf_r+0xd7e>
 8009090:	2c10      	cmp	r4, #16
 8009092:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8009094:	4d07      	ldr	r5, [pc, #28]	; (80090b4 <_svfprintf_r+0xbec>)
 8009096:	f340 81ad 	ble.w	80093f4 <_svfprintf_r+0xf2c>
 800909a:	970a      	str	r7, [sp, #40]	; 0x28
 800909c:	f04f 0810 	mov.w	r8, #16
 80090a0:	462f      	mov	r7, r5
 80090a2:	4662      	mov	r2, ip
 80090a4:	4625      	mov	r5, r4
 80090a6:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80090aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80090ac:	e009      	b.n	80090c2 <_svfprintf_r+0xbfa>
 80090ae:	bf00      	nop
 80090b0:	0800ef94 	.word	0x0800ef94
 80090b4:	0800ef44 	.word	0x0800ef44
 80090b8:	3608      	adds	r6, #8
 80090ba:	3d10      	subs	r5, #16
 80090bc:	2d10      	cmp	r5, #16
 80090be:	f340 8195 	ble.w	80093ec <_svfprintf_r+0xf24>
 80090c2:	3301      	adds	r3, #1
 80090c4:	3210      	adds	r2, #16
 80090c6:	2b07      	cmp	r3, #7
 80090c8:	922d      	str	r2, [sp, #180]	; 0xb4
 80090ca:	932c      	str	r3, [sp, #176]	; 0xb0
 80090cc:	e886 0180 	stmia.w	r6, {r7, r8}
 80090d0:	ddf2      	ble.n	80090b8 <_svfprintf_r+0xbf0>
 80090d2:	4658      	mov	r0, fp
 80090d4:	4621      	mov	r1, r4
 80090d6:	aa2b      	add	r2, sp, #172	; 0xac
 80090d8:	f004 fc42 	bl	800d960 <__ssprint_r>
 80090dc:	2800      	cmp	r0, #0
 80090de:	f47f ab0b 	bne.w	80086f8 <_svfprintf_r+0x230>
 80090e2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80090e4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80090e6:	ae38      	add	r6, sp, #224	; 0xe0
 80090e8:	e7e7      	b.n	80090ba <_svfprintf_r+0xbf2>
 80090ea:	980d      	ldr	r0, [sp, #52]	; 0x34
 80090ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80090ee:	aa2b      	add	r2, sp, #172	; 0xac
 80090f0:	f004 fc36 	bl	800d960 <__ssprint_r>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	f47f aaff 	bne.w	80086f8 <_svfprintf_r+0x230>
 80090fa:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 80090fe:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8009102:	ae38      	add	r6, sp, #224	; 0xe0
 8009104:	f7ff bbd8 	b.w	80088b8 <_svfprintf_r+0x3f0>
 8009108:	1e6f      	subs	r7, r5, #1
 800910a:	2f00      	cmp	r7, #0
 800910c:	f77f af50 	ble.w	8008fb0 <_svfprintf_r+0xae8>
 8009110:	2f10      	cmp	r7, #16
 8009112:	4db3      	ldr	r5, [pc, #716]	; (80093e0 <_svfprintf_r+0xf18>)
 8009114:	dd23      	ble.n	800915e <_svfprintf_r+0xc96>
 8009116:	4643      	mov	r3, r8
 8009118:	f04f 0a10 	mov.w	sl, #16
 800911c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8009120:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8009124:	e004      	b.n	8009130 <_svfprintf_r+0xc68>
 8009126:	3f10      	subs	r7, #16
 8009128:	2f10      	cmp	r7, #16
 800912a:	f106 0608 	add.w	r6, r6, #8
 800912e:	dd15      	ble.n	800915c <_svfprintf_r+0xc94>
 8009130:	3401      	adds	r4, #1
 8009132:	3310      	adds	r3, #16
 8009134:	2c07      	cmp	r4, #7
 8009136:	932d      	str	r3, [sp, #180]	; 0xb4
 8009138:	942c      	str	r4, [sp, #176]	; 0xb0
 800913a:	e886 0420 	stmia.w	r6, {r5, sl}
 800913e:	ddf2      	ble.n	8009126 <_svfprintf_r+0xc5e>
 8009140:	4640      	mov	r0, r8
 8009142:	4659      	mov	r1, fp
 8009144:	aa2b      	add	r2, sp, #172	; 0xac
 8009146:	f004 fc0b 	bl	800d960 <__ssprint_r>
 800914a:	2800      	cmp	r0, #0
 800914c:	f47f aad4 	bne.w	80086f8 <_svfprintf_r+0x230>
 8009150:	3f10      	subs	r7, #16
 8009152:	2f10      	cmp	r7, #16
 8009154:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009156:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8009158:	ae38      	add	r6, sp, #224	; 0xe0
 800915a:	dce9      	bgt.n	8009130 <_svfprintf_r+0xc68>
 800915c:	4698      	mov	r8, r3
 800915e:	3401      	adds	r4, #1
 8009160:	44b8      	add	r8, r7
 8009162:	2c07      	cmp	r4, #7
 8009164:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
 8009168:	942c      	str	r4, [sp, #176]	; 0xb0
 800916a:	e886 00a0 	stmia.w	r6, {r5, r7}
 800916e:	f77f af1e 	ble.w	8008fae <_svfprintf_r+0xae6>
 8009172:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009174:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009176:	aa2b      	add	r2, sp, #172	; 0xac
 8009178:	f004 fbf2 	bl	800d960 <__ssprint_r>
 800917c:	2800      	cmp	r0, #0
 800917e:	f47f aabb 	bne.w	80086f8 <_svfprintf_r+0x230>
 8009182:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
 8009186:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8009188:	ae38      	add	r6, sp, #224	; 0xe0
 800918a:	e711      	b.n	8008fb0 <_svfprintf_r+0xae8>
 800918c:	4694      	mov	ip, r2
 800918e:	3301      	adds	r3, #1
 8009190:	44a4      	add	ip, r4
 8009192:	2b07      	cmp	r3, #7
 8009194:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8009198:	932c      	str	r3, [sp, #176]	; 0xb0
 800919a:	6035      	str	r5, [r6, #0]
 800919c:	6074      	str	r4, [r6, #4]
 800919e:	f77f ac04 	ble.w	80089aa <_svfprintf_r+0x4e2>
 80091a2:	e713      	b.n	8008fcc <_svfprintf_r+0xb04>
 80091a4:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
 80091a8:	4620      	mov	r0, r4
 80091aa:	4629      	mov	r1, r5
 80091ac:	220a      	movs	r2, #10
 80091ae:	2300      	movs	r3, #0
 80091b0:	f7f7 ffe0 	bl	8001174 <__aeabi_uldivmod>
 80091b4:	3230      	adds	r2, #48	; 0x30
 80091b6:	f88b 2000 	strb.w	r2, [fp]
 80091ba:	4620      	mov	r0, r4
 80091bc:	4629      	mov	r1, r5
 80091be:	220a      	movs	r2, #10
 80091c0:	2300      	movs	r3, #0
 80091c2:	f7f7 ffd7 	bl	8001174 <__aeabi_uldivmod>
 80091c6:	4604      	mov	r4, r0
 80091c8:	460d      	mov	r5, r1
 80091ca:	ea54 0c05 	orrs.w	ip, r4, r5
 80091ce:	465f      	mov	r7, fp
 80091d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80091d4:	d1e8      	bne.n	80091a8 <_svfprintf_r+0xce0>
 80091d6:	9d08      	ldr	r5, [sp, #32]
 80091d8:	1bec      	subs	r4, r5, r7
 80091da:	f7ff bb03 	b.w	80087e4 <_svfprintf_r+0x31c>
 80091de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80091e0:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 80091e4:	682c      	ldr	r4, [r5, #0]
 80091e6:	17e5      	asrs	r5, r4, #31
 80091e8:	4622      	mov	r2, r4
 80091ea:	462b      	mov	r3, r5
 80091ec:	f10c 0c04 	add.w	ip, ip, #4
 80091f0:	2a00      	cmp	r2, #0
 80091f2:	f173 0000 	sbcs.w	r0, r3, #0
 80091f6:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 80091fa:	f6bf ac75 	bge.w	8008ae8 <_svfprintf_r+0x620>
 80091fe:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8009202:	4264      	negs	r4, r4
 8009204:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8009208:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 800920c:	2301      	movs	r3, #1
 800920e:	f7ff bac9 	b.w	80087a4 <_svfprintf_r+0x2dc>
 8009212:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009214:	682c      	ldr	r4, [r5, #0]
 8009216:	3504      	adds	r5, #4
 8009218:	9510      	str	r5, [sp, #64]	; 0x40
 800921a:	2500      	movs	r5, #0
 800921c:	f7ff babe 	b.w	800879c <_svfprintf_r+0x2d4>
 8009220:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009222:	682c      	ldr	r4, [r5, #0]
 8009224:	3504      	adds	r5, #4
 8009226:	9510      	str	r5, [sp, #64]	; 0x40
 8009228:	2301      	movs	r3, #1
 800922a:	2500      	movs	r5, #0
 800922c:	f7ff bab6 	b.w	800879c <_svfprintf_r+0x2d4>
 8009230:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009232:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009234:	aa2b      	add	r2, sp, #172	; 0xac
 8009236:	f004 fb93 	bl	800d960 <__ssprint_r>
 800923a:	2800      	cmp	r0, #0
 800923c:	f47f aa5c 	bne.w	80086f8 <_svfprintf_r+0x230>
 8009240:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8009244:	ae38      	add	r6, sp, #224	; 0xe0
 8009246:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009248:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800924a:	442f      	add	r7, r5
 800924c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800924e:	42ac      	cmp	r4, r5
 8009250:	db42      	blt.n	80092d8 <_svfprintf_r+0xe10>
 8009252:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009254:	07e9      	lsls	r1, r5, #31
 8009256:	d43f      	bmi.n	80092d8 <_svfprintf_r+0xe10>
 8009258:	9811      	ldr	r0, [sp, #68]	; 0x44
 800925a:	ebc7 050a 	rsb	r5, r7, sl
 800925e:	1b04      	subs	r4, r0, r4
 8009260:	42ac      	cmp	r4, r5
 8009262:	bfb8      	it	lt
 8009264:	4625      	movlt	r5, r4
 8009266:	2d00      	cmp	r5, #0
 8009268:	dd0b      	ble.n	8009282 <_svfprintf_r+0xdba>
 800926a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800926c:	6037      	str	r7, [r6, #0]
 800926e:	3301      	adds	r3, #1
 8009270:	44ac      	add	ip, r5
 8009272:	2b07      	cmp	r3, #7
 8009274:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8009278:	6075      	str	r5, [r6, #4]
 800927a:	932c      	str	r3, [sp, #176]	; 0xb0
 800927c:	f300 8252 	bgt.w	8009724 <_svfprintf_r+0x125c>
 8009280:	3608      	adds	r6, #8
 8009282:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8009286:	1b64      	subs	r4, r4, r5
 8009288:	2c00      	cmp	r4, #0
 800928a:	f77f ab8f 	ble.w	80089ac <_svfprintf_r+0x4e4>
 800928e:	2c10      	cmp	r4, #16
 8009290:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8009292:	4d53      	ldr	r5, [pc, #332]	; (80093e0 <_svfprintf_r+0xf18>)
 8009294:	f77f af7b 	ble.w	800918e <_svfprintf_r+0xcc6>
 8009298:	2710      	movs	r7, #16
 800929a:	4662      	mov	r2, ip
 800929c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80092a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80092a4:	e004      	b.n	80092b0 <_svfprintf_r+0xde8>
 80092a6:	3608      	adds	r6, #8
 80092a8:	3c10      	subs	r4, #16
 80092aa:	2c10      	cmp	r4, #16
 80092ac:	f77f af6e 	ble.w	800918c <_svfprintf_r+0xcc4>
 80092b0:	3301      	adds	r3, #1
 80092b2:	3210      	adds	r2, #16
 80092b4:	2b07      	cmp	r3, #7
 80092b6:	922d      	str	r2, [sp, #180]	; 0xb4
 80092b8:	932c      	str	r3, [sp, #176]	; 0xb0
 80092ba:	e886 00a0 	stmia.w	r6, {r5, r7}
 80092be:	ddf2      	ble.n	80092a6 <_svfprintf_r+0xdde>
 80092c0:	4640      	mov	r0, r8
 80092c2:	4651      	mov	r1, sl
 80092c4:	aa2b      	add	r2, sp, #172	; 0xac
 80092c6:	f004 fb4b 	bl	800d960 <__ssprint_r>
 80092ca:	2800      	cmp	r0, #0
 80092cc:	f47f aa14 	bne.w	80086f8 <_svfprintf_r+0x230>
 80092d0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80092d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80092d4:	ae38      	add	r6, sp, #224	; 0xe0
 80092d6:	e7e7      	b.n	80092a8 <_svfprintf_r+0xde0>
 80092d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80092da:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80092dc:	6035      	str	r5, [r6, #0]
 80092de:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80092e0:	6075      	str	r5, [r6, #4]
 80092e2:	3301      	adds	r3, #1
 80092e4:	44ac      	add	ip, r5
 80092e6:	2b07      	cmp	r3, #7
 80092e8:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 80092ec:	932c      	str	r3, [sp, #176]	; 0xb0
 80092ee:	f300 81fb 	bgt.w	80096e8 <_svfprintf_r+0x1220>
 80092f2:	3608      	adds	r6, #8
 80092f4:	e7b0      	b.n	8009258 <_svfprintf_r+0xd90>
 80092f6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80092f8:	07ea      	lsls	r2, r5, #31
 80092fa:	f53f ae27 	bmi.w	8008f4c <_svfprintf_r+0xa84>
 80092fe:	3401      	adds	r4, #1
 8009300:	f10c 0801 	add.w	r8, ip, #1
 8009304:	2301      	movs	r3, #1
 8009306:	2c07      	cmp	r4, #7
 8009308:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
 800930c:	942c      	str	r4, [sp, #176]	; 0xb0
 800930e:	6037      	str	r7, [r6, #0]
 8009310:	6073      	str	r3, [r6, #4]
 8009312:	f77f ae4c 	ble.w	8008fae <_svfprintf_r+0xae6>
 8009316:	e72c      	b.n	8009172 <_svfprintf_r+0xcaa>
 8009318:	980d      	ldr	r0, [sp, #52]	; 0x34
 800931a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800931c:	aa2b      	add	r2, sp, #172	; 0xac
 800931e:	f004 fb1f 	bl	800d960 <__ssprint_r>
 8009322:	2800      	cmp	r0, #0
 8009324:	f47f a9e8 	bne.w	80086f8 <_svfprintf_r+0x230>
 8009328:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800932a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800932c:	ae38      	add	r6, sp, #224	; 0xe0
 800932e:	e619      	b.n	8008f64 <_svfprintf_r+0xa9c>
 8009330:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009332:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009334:	aa2b      	add	r2, sp, #172	; 0xac
 8009336:	f004 fb13 	bl	800d960 <__ssprint_r>
 800933a:	2800      	cmp	r0, #0
 800933c:	f47f a9dc 	bne.w	80086f8 <_svfprintf_r+0x230>
 8009340:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
 8009344:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8009346:	ae38      	add	r6, sp, #224	; 0xe0
 8009348:	e61b      	b.n	8008f82 <_svfprintf_r+0xaba>
 800934a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800934c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800934e:	aa2b      	add	r2, sp, #172	; 0xac
 8009350:	f004 fb06 	bl	800d960 <__ssprint_r>
 8009354:	2800      	cmp	r0, #0
 8009356:	f47f a9cf 	bne.w	80086f8 <_svfprintf_r+0x230>
 800935a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 800935e:	ae38      	add	r6, sp, #224	; 0xe0
 8009360:	f7ff bad2 	b.w	8008908 <_svfprintf_r+0x440>
 8009364:	f003 f830 	bl	800c3c8 <__fpclassifyd>
 8009368:	2800      	cmp	r0, #0
 800936a:	f040 80c2 	bne.w	80094f2 <_svfprintf_r+0x102a>
 800936e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009370:	4f1c      	ldr	r7, [pc, #112]	; (80093e4 <_svfprintf_r+0xf1c>)
 8009372:	4b1d      	ldr	r3, [pc, #116]	; (80093e8 <_svfprintf_r+0xf20>)
 8009374:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8009378:	900a      	str	r0, [sp, #40]	; 0x28
 800937a:	f04f 0c03 	mov.w	ip, #3
 800937e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8009382:	9409      	str	r4, [sp, #36]	; 0x24
 8009384:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8009388:	9014      	str	r0, [sp, #80]	; 0x50
 800938a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800938e:	bfd8      	it	le
 8009390:	461f      	movle	r7, r3
 8009392:	4664      	mov	r4, ip
 8009394:	f7ff ba2f 	b.w	80087f6 <_svfprintf_r+0x32e>
 8009398:	e9d3 4500 	ldrd	r4, r5, [r3]
 800939c:	3308      	adds	r3, #8
 800939e:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
 80093a2:	9310      	str	r3, [sp, #64]	; 0x40
 80093a4:	e476      	b.n	8008c94 <_svfprintf_r+0x7cc>
 80093a6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80093aa:	f01c 0f10 	tst.w	ip, #16
 80093ae:	f000 8155 	beq.w	800965c <_svfprintf_r+0x1194>
 80093b2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80093b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	3404      	adds	r4, #4
 80093ba:	9410      	str	r4, [sp, #64]	; 0x40
 80093bc:	601d      	str	r5, [r3, #0]
 80093be:	f7ff b8a9 	b.w	8008514 <_svfprintf_r+0x4c>
 80093c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80093c4:	0664      	lsls	r4, r4, #25
 80093c6:	f140 8142 	bpl.w	800964e <_svfprintf_r+0x1186>
 80093ca:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 80093ce:	f8bc 4000 	ldrh.w	r4, [ip]
 80093d2:	f10c 0c04 	add.w	ip, ip, #4
 80093d6:	2500      	movs	r5, #0
 80093d8:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 80093dc:	f7ff b9ca 	b.w	8008774 <_svfprintf_r+0x2ac>
 80093e0:	0800ef44 	.word	0x0800ef44
 80093e4:	0800ef60 	.word	0x0800ef60
 80093e8:	0800ef5c 	.word	0x0800ef5c
 80093ec:	462c      	mov	r4, r5
 80093ee:	463d      	mov	r5, r7
 80093f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80093f2:	4694      	mov	ip, r2
 80093f4:	3301      	adds	r3, #1
 80093f6:	44a4      	add	ip, r4
 80093f8:	2b07      	cmp	r3, #7
 80093fa:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 80093fe:	932c      	str	r3, [sp, #176]	; 0xb0
 8009400:	6035      	str	r5, [r6, #0]
 8009402:	6074      	str	r4, [r6, #4]
 8009404:	f73f af14 	bgt.w	8009230 <_svfprintf_r+0xd68>
 8009408:	3608      	adds	r6, #8
 800940a:	e71c      	b.n	8009246 <_svfprintf_r+0xd7e>
 800940c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800940e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009410:	aa2b      	add	r2, sp, #172	; 0xac
 8009412:	f004 faa5 	bl	800d960 <__ssprint_r>
 8009416:	2800      	cmp	r0, #0
 8009418:	f47f a96e 	bne.w	80086f8 <_svfprintf_r+0x230>
 800941c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8009420:	ae38      	add	r6, sp, #224	; 0xe0
 8009422:	e4fd      	b.n	8008e20 <_svfprintf_r+0x958>
 8009424:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8009426:	49b7      	ldr	r1, [pc, #732]	; (8009704 <_svfprintf_r+0x123c>)
 8009428:	6031      	str	r1, [r6, #0]
 800942a:	3201      	adds	r2, #1
 800942c:	f10c 0c01 	add.w	ip, ip, #1
 8009430:	2101      	movs	r1, #1
 8009432:	2a07      	cmp	r2, #7
 8009434:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8009438:	922c      	str	r2, [sp, #176]	; 0xb0
 800943a:	6071      	str	r1, [r6, #4]
 800943c:	f300 80f7 	bgt.w	800962e <_svfprintf_r+0x1166>
 8009440:	3608      	adds	r6, #8
 8009442:	461c      	mov	r4, r3
 8009444:	b92c      	cbnz	r4, 8009452 <_svfprintf_r+0xf8a>
 8009446:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8009448:	b91d      	cbnz	r5, 8009452 <_svfprintf_r+0xf8a>
 800944a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800944c:	07e8      	lsls	r0, r5, #31
 800944e:	f57f aaad 	bpl.w	80089ac <_svfprintf_r+0x4e4>
 8009452:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8009454:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009456:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009458:	6035      	str	r5, [r6, #0]
 800945a:	3301      	adds	r3, #1
 800945c:	4461      	add	r1, ip
 800945e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8009460:	912d      	str	r1, [sp, #180]	; 0xb4
 8009462:	2b07      	cmp	r3, #7
 8009464:	6075      	str	r5, [r6, #4]
 8009466:	932c      	str	r3, [sp, #176]	; 0xb0
 8009468:	f300 81de 	bgt.w	8009828 <_svfprintf_r+0x1360>
 800946c:	f106 0208 	add.w	r2, r6, #8
 8009470:	4264      	negs	r4, r4
 8009472:	2c00      	cmp	r4, #0
 8009474:	f340 810b 	ble.w	800968e <_svfprintf_r+0x11c6>
 8009478:	2c10      	cmp	r4, #16
 800947a:	4da3      	ldr	r5, [pc, #652]	; (8009708 <_svfprintf_r+0x1240>)
 800947c:	f340 8148 	ble.w	8009710 <_svfprintf_r+0x1248>
 8009480:	46a3      	mov	fp, r4
 8009482:	2610      	movs	r6, #16
 8009484:	460c      	mov	r4, r1
 8009486:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800948a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800948e:	e006      	b.n	800949e <_svfprintf_r+0xfd6>
 8009490:	3208      	adds	r2, #8
 8009492:	f1ab 0b10 	sub.w	fp, fp, #16
 8009496:	f1bb 0f10 	cmp.w	fp, #16
 800949a:	f340 8137 	ble.w	800970c <_svfprintf_r+0x1244>
 800949e:	3301      	adds	r3, #1
 80094a0:	3410      	adds	r4, #16
 80094a2:	2b07      	cmp	r3, #7
 80094a4:	942d      	str	r4, [sp, #180]	; 0xb4
 80094a6:	932c      	str	r3, [sp, #176]	; 0xb0
 80094a8:	e882 0060 	stmia.w	r2, {r5, r6}
 80094ac:	ddf0      	ble.n	8009490 <_svfprintf_r+0xfc8>
 80094ae:	4640      	mov	r0, r8
 80094b0:	4651      	mov	r1, sl
 80094b2:	aa2b      	add	r2, sp, #172	; 0xac
 80094b4:	f004 fa54 	bl	800d960 <__ssprint_r>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	f47f a91d 	bne.w	80086f8 <_svfprintf_r+0x230>
 80094be:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80094c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80094c2:	aa38      	add	r2, sp, #224	; 0xe0
 80094c4:	e7e5      	b.n	8009492 <_svfprintf_r+0xfca>
 80094c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80094c8:	f893 8001 	ldrb.w	r8, [r3, #1]
 80094cc:	f044 0420 	orr.w	r4, r4, #32
 80094d0:	f109 0901 	add.w	r9, r9, #1
 80094d4:	9409      	str	r4, [sp, #36]	; 0x24
 80094d6:	f7ff b853 	b.w	8008580 <_svfprintf_r+0xb8>
 80094da:	980d      	ldr	r0, [sp, #52]	; 0x34
 80094dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80094de:	aa2b      	add	r2, sp, #172	; 0xac
 80094e0:	f004 fa3e 	bl	800d960 <__ssprint_r>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	f47f a907 	bne.w	80086f8 <_svfprintf_r+0x230>
 80094ea:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 80094ee:	ae38      	add	r6, sp, #224	; 0xe0
 80094f0:	e4ac      	b.n	8008e4c <_svfprintf_r+0x984>
 80094f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80094f4:	3501      	adds	r5, #1
 80094f6:	f028 0a20 	bic.w	sl, r8, #32
 80094fa:	f000 80a5 	beq.w	8009648 <_svfprintf_r+0x1180>
 80094fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009502:	d104      	bne.n	800950e <_svfprintf_r+0x1046>
 8009504:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009506:	2d00      	cmp	r5, #0
 8009508:	bf08      	it	eq
 800950a:	2501      	moveq	r5, #1
 800950c:	950a      	str	r5, [sp, #40]	; 0x28
 800950e:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009512:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8009516:	2b00      	cmp	r3, #0
 8009518:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 800951c:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8009520:	f2c0 819c 	blt.w	800985c <_svfprintf_r+0x1394>
 8009524:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 8009528:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
 800952c:	f04f 0b00 	mov.w	fp, #0
 8009530:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8009534:	f000 819b 	beq.w	800986e <_svfprintf_r+0x13a6>
 8009538:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800953c:	f000 81a9 	beq.w	8009892 <_svfprintf_r+0x13ca>
 8009540:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
 8009544:	bf0a      	itet	eq
 8009546:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
 8009548:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
 800954a:	1c65      	addeq	r5, r4, #1
 800954c:	2002      	movs	r0, #2
 800954e:	a925      	add	r1, sp, #148	; 0x94
 8009550:	aa26      	add	r2, sp, #152	; 0x98
 8009552:	ab29      	add	r3, sp, #164	; 0xa4
 8009554:	e88d 0021 	stmia.w	sp, {r0, r5}
 8009558:	9203      	str	r2, [sp, #12]
 800955a:	9304      	str	r3, [sp, #16]
 800955c:	9102      	str	r1, [sp, #8]
 800955e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009560:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8009564:	f001 fa04 	bl	800a970 <_dtoa_r>
 8009568:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800956c:	4607      	mov	r7, r0
 800956e:	d002      	beq.n	8009576 <_svfprintf_r+0x10ae>
 8009570:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009574:	d105      	bne.n	8009582 <_svfprintf_r+0x10ba>
 8009576:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800957a:	f01c 0f01 	tst.w	ip, #1
 800957e:	f000 819c 	beq.w	80098ba <_svfprintf_r+0x13f2>
 8009582:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
 8009586:	eb07 0405 	add.w	r4, r7, r5
 800958a:	f000 811c 	beq.w	80097c6 <_svfprintf_r+0x12fe>
 800958e:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8009592:	2200      	movs	r2, #0
 8009594:	2300      	movs	r3, #0
 8009596:	f7f7 fd93 	bl	80010c0 <__aeabi_dcmpeq>
 800959a:	2800      	cmp	r0, #0
 800959c:	f040 8105 	bne.w	80097aa <_svfprintf_r+0x12e2>
 80095a0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80095a2:	429c      	cmp	r4, r3
 80095a4:	d906      	bls.n	80095b4 <_svfprintf_r+0x10ec>
 80095a6:	2130      	movs	r1, #48	; 0x30
 80095a8:	1c5a      	adds	r2, r3, #1
 80095aa:	9229      	str	r2, [sp, #164]	; 0xa4
 80095ac:	7019      	strb	r1, [r3, #0]
 80095ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80095b0:	429c      	cmp	r4, r3
 80095b2:	d8f9      	bhi.n	80095a8 <_svfprintf_r+0x10e0>
 80095b4:	1bdb      	subs	r3, r3, r7
 80095b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80095ba:	9311      	str	r3, [sp, #68]	; 0x44
 80095bc:	f000 80ed 	beq.w	800979a <_svfprintf_r+0x12d2>
 80095c0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80095c4:	f340 81f2 	ble.w	80099ac <_svfprintf_r+0x14e4>
 80095c8:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80095cc:	f000 8168 	beq.w	80098a0 <_svfprintf_r+0x13d8>
 80095d0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80095d2:	9414      	str	r4, [sp, #80]	; 0x50
 80095d4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80095d6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80095d8:	42ac      	cmp	r4, r5
 80095da:	f300 8132 	bgt.w	8009842 <_svfprintf_r+0x137a>
 80095de:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80095e2:	f01c 0f01 	tst.w	ip, #1
 80095e6:	f040 81ad 	bne.w	8009944 <_svfprintf_r+0x147c>
 80095ea:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 80095ee:	462c      	mov	r4, r5
 80095f0:	f04f 0867 	mov.w	r8, #103	; 0x67
 80095f4:	f1bb 0f00 	cmp.w	fp, #0
 80095f8:	f040 80b2 	bne.w	8009760 <_svfprintf_r+0x1298>
 80095fc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80095fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009600:	9509      	str	r5, [sp, #36]	; 0x24
 8009602:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009606:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 800960a:	f7ff b8f4 	b.w	80087f6 <_svfprintf_r+0x32e>
 800960e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009610:	2140      	movs	r1, #64	; 0x40
 8009612:	f7fe fb21 	bl	8007c58 <_malloc_r>
 8009616:	6020      	str	r0, [r4, #0]
 8009618:	6120      	str	r0, [r4, #16]
 800961a:	2800      	cmp	r0, #0
 800961c:	f000 81bf 	beq.w	800999e <_svfprintf_r+0x14d6>
 8009620:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 8009624:	2340      	movs	r3, #64	; 0x40
 8009626:	f8cc 3014 	str.w	r3, [ip, #20]
 800962a:	f7fe bf63 	b.w	80084f4 <_svfprintf_r+0x2c>
 800962e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009630:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009632:	aa2b      	add	r2, sp, #172	; 0xac
 8009634:	f004 f994 	bl	800d960 <__ssprint_r>
 8009638:	2800      	cmp	r0, #0
 800963a:	f47f a85d 	bne.w	80086f8 <_svfprintf_r+0x230>
 800963e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009640:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 8009644:	ae38      	add	r6, sp, #224	; 0xe0
 8009646:	e6fd      	b.n	8009444 <_svfprintf_r+0xf7c>
 8009648:	2406      	movs	r4, #6
 800964a:	940a      	str	r4, [sp, #40]	; 0x28
 800964c:	e75f      	b.n	800950e <_svfprintf_r+0x1046>
 800964e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009650:	682c      	ldr	r4, [r5, #0]
 8009652:	3504      	adds	r5, #4
 8009654:	9510      	str	r5, [sp, #64]	; 0x40
 8009656:	2500      	movs	r5, #0
 8009658:	f7ff b88c 	b.w	8008774 <_svfprintf_r+0x2ac>
 800965c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8009660:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8009664:	f000 8087 	beq.w	8009776 <_svfprintf_r+0x12ae>
 8009668:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800966a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800966c:	6823      	ldr	r3, [r4, #0]
 800966e:	3404      	adds	r4, #4
 8009670:	9410      	str	r4, [sp, #64]	; 0x40
 8009672:	801d      	strh	r5, [r3, #0]
 8009674:	f7fe bf4e 	b.w	8008514 <_svfprintf_r+0x4c>
 8009678:	980d      	ldr	r0, [sp, #52]	; 0x34
 800967a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800967c:	aa2b      	add	r2, sp, #172	; 0xac
 800967e:	f004 f96f 	bl	800d960 <__ssprint_r>
 8009682:	2800      	cmp	r0, #0
 8009684:	f47f a838 	bne.w	80086f8 <_svfprintf_r+0x230>
 8009688:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800968a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800968c:	aa38      	add	r2, sp, #224	; 0xe0
 800968e:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8009692:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8009694:	6017      	str	r7, [r2, #0]
 8009696:	3301      	adds	r3, #1
 8009698:	448c      	add	ip, r1
 800969a:	2b07      	cmp	r3, #7
 800969c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 80096a0:	932c      	str	r3, [sp, #176]	; 0xb0
 80096a2:	6054      	str	r4, [r2, #4]
 80096a4:	f73f ac92 	bgt.w	8008fcc <_svfprintf_r+0xb04>
 80096a8:	f102 0608 	add.w	r6, r2, #8
 80096ac:	f7ff b97e 	b.w	80089ac <_svfprintf_r+0x4e4>
 80096b0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80096b4:	f7fe fe7e 	bl	80083b4 <strlen>
 80096b8:	9510      	str	r5, [sp, #64]	; 0x40
 80096ba:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
 80096be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80096c0:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80096c4:	4604      	mov	r4, r0
 80096c6:	9514      	str	r5, [sp, #80]	; 0x50
 80096c8:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 80096cc:	f7ff b893 	b.w	80087f6 <_svfprintf_r+0x32e>
 80096d0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80096d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80096d4:	aa2b      	add	r2, sp, #172	; 0xac
 80096d6:	f004 f943 	bl	800d960 <__ssprint_r>
 80096da:	2800      	cmp	r0, #0
 80096dc:	f47f a80c 	bne.w	80086f8 <_svfprintf_r+0x230>
 80096e0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 80096e4:	ae38      	add	r6, sp, #224	; 0xe0
 80096e6:	e4cc      	b.n	8009082 <_svfprintf_r+0xbba>
 80096e8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80096ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80096ec:	aa2b      	add	r2, sp, #172	; 0xac
 80096ee:	f004 f937 	bl	800d960 <__ssprint_r>
 80096f2:	2800      	cmp	r0, #0
 80096f4:	f47f a800 	bne.w	80086f8 <_svfprintf_r+0x230>
 80096f8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80096fa:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 80096fe:	ae38      	add	r6, sp, #224	; 0xe0
 8009700:	e5aa      	b.n	8009258 <_svfprintf_r+0xd90>
 8009702:	bf00      	nop
 8009704:	0800ef94 	.word	0x0800ef94
 8009708:	0800ef44 	.word	0x0800ef44
 800970c:	4621      	mov	r1, r4
 800970e:	465c      	mov	r4, fp
 8009710:	3301      	adds	r3, #1
 8009712:	4421      	add	r1, r4
 8009714:	2b07      	cmp	r3, #7
 8009716:	912d      	str	r1, [sp, #180]	; 0xb4
 8009718:	932c      	str	r3, [sp, #176]	; 0xb0
 800971a:	6015      	str	r5, [r2, #0]
 800971c:	6054      	str	r4, [r2, #4]
 800971e:	dcab      	bgt.n	8009678 <_svfprintf_r+0x11b0>
 8009720:	3208      	adds	r2, #8
 8009722:	e7b4      	b.n	800968e <_svfprintf_r+0x11c6>
 8009724:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009726:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009728:	aa2b      	add	r2, sp, #172	; 0xac
 800972a:	f004 f919 	bl	800d960 <__ssprint_r>
 800972e:	2800      	cmp	r0, #0
 8009730:	f47e afe2 	bne.w	80086f8 <_svfprintf_r+0x230>
 8009734:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009736:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009738:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
 800973c:	1b0c      	subs	r4, r1, r4
 800973e:	ae38      	add	r6, sp, #224	; 0xe0
 8009740:	e59f      	b.n	8009282 <_svfprintf_r+0xdba>
 8009742:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009744:	9714      	str	r7, [sp, #80]	; 0x50
 8009746:	2c06      	cmp	r4, #6
 8009748:	bf28      	it	cs
 800974a:	2406      	movcs	r4, #6
 800974c:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
 8009750:	46ba      	mov	sl, r7
 8009752:	970a      	str	r7, [sp, #40]	; 0x28
 8009754:	9510      	str	r5, [sp, #64]	; 0x40
 8009756:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800975a:	4f97      	ldr	r7, [pc, #604]	; (80099b8 <_svfprintf_r+0x14f0>)
 800975c:	f7ff b84b 	b.w	80087f6 <_svfprintf_r+0x32e>
 8009760:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8009762:	9509      	str	r5, [sp, #36]	; 0x24
 8009764:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8009768:	2500      	movs	r5, #0
 800976a:	930b      	str	r3, [sp, #44]	; 0x2c
 800976c:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 8009770:	950a      	str	r5, [sp, #40]	; 0x28
 8009772:	f7ff b843 	b.w	80087fc <_svfprintf_r+0x334>
 8009776:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 800977a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800977c:	f8dc 3000 	ldr.w	r3, [ip]
 8009780:	f10c 0c04 	add.w	ip, ip, #4
 8009784:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8009788:	601c      	str	r4, [r3, #0]
 800978a:	f7fe bec3 	b.w	8008514 <_svfprintf_r+0x4c>
 800978e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8009792:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 8009796:	f7ff ba8f 	b.w	8008cb8 <_svfprintf_r+0x7f0>
 800979a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800979c:	1cdc      	adds	r4, r3, #3
 800979e:	db19      	blt.n	80097d4 <_svfprintf_r+0x130c>
 80097a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80097a2:	429c      	cmp	r4, r3
 80097a4:	db16      	blt.n	80097d4 <_svfprintf_r+0x130c>
 80097a6:	9314      	str	r3, [sp, #80]	; 0x50
 80097a8:	e714      	b.n	80095d4 <_svfprintf_r+0x110c>
 80097aa:	4623      	mov	r3, r4
 80097ac:	e702      	b.n	80095b4 <_svfprintf_r+0x10ec>
 80097ae:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
 80097b2:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80097b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80097b8:	9510      	str	r5, [sp, #64]	; 0x40
 80097ba:	900a      	str	r0, [sp, #40]	; 0x28
 80097bc:	9014      	str	r0, [sp, #80]	; 0x50
 80097be:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 80097c2:	f7ff b818 	b.w	80087f6 <_svfprintf_r+0x32e>
 80097c6:	783b      	ldrb	r3, [r7, #0]
 80097c8:	2b30      	cmp	r3, #48	; 0x30
 80097ca:	f000 80ad 	beq.w	8009928 <_svfprintf_r+0x1460>
 80097ce:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80097d0:	442c      	add	r4, r5
 80097d2:	e6dc      	b.n	800958e <_svfprintf_r+0x10c6>
 80097d4:	f1a8 0802 	sub.w	r8, r8, #2
 80097d8:	3b01      	subs	r3, #1
 80097da:	2b00      	cmp	r3, #0
 80097dc:	9325      	str	r3, [sp, #148]	; 0x94
 80097de:	bfba      	itte	lt
 80097e0:	425b      	neglt	r3, r3
 80097e2:	222d      	movlt	r2, #45	; 0x2d
 80097e4:	222b      	movge	r2, #43	; 0x2b
 80097e6:	2b09      	cmp	r3, #9
 80097e8:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
 80097ec:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
 80097f0:	dc65      	bgt.n	80098be <_svfprintf_r+0x13f6>
 80097f2:	3330      	adds	r3, #48	; 0x30
 80097f4:	2230      	movs	r2, #48	; 0x30
 80097f6:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 80097fa:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
 80097fe:	ab28      	add	r3, sp, #160	; 0xa0
 8009800:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8009802:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8009804:	aa27      	add	r2, sp, #156	; 0x9c
 8009806:	1a9a      	subs	r2, r3, r2
 8009808:	2d01      	cmp	r5, #1
 800980a:	9219      	str	r2, [sp, #100]	; 0x64
 800980c:	4414      	add	r4, r2
 800980e:	f340 80b7 	ble.w	8009980 <_svfprintf_r+0x14b8>
 8009812:	3401      	adds	r4, #1
 8009814:	2500      	movs	r5, #0
 8009816:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 800981a:	9514      	str	r5, [sp, #80]	; 0x50
 800981c:	e6ea      	b.n	80095f4 <_svfprintf_r+0x112c>
 800981e:	2400      	movs	r4, #0
 8009820:	4681      	mov	r9, r0
 8009822:	940a      	str	r4, [sp, #40]	; 0x28
 8009824:	f7fe beae 	b.w	8008584 <_svfprintf_r+0xbc>
 8009828:	980d      	ldr	r0, [sp, #52]	; 0x34
 800982a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800982c:	aa2b      	add	r2, sp, #172	; 0xac
 800982e:	f004 f897 	bl	800d960 <__ssprint_r>
 8009832:	2800      	cmp	r0, #0
 8009834:	f47e af60 	bne.w	80086f8 <_svfprintf_r+0x230>
 8009838:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800983a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800983c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800983e:	aa38      	add	r2, sp, #224	; 0xe0
 8009840:	e616      	b.n	8009470 <_svfprintf_r+0xfa8>
 8009842:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8009844:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8009846:	2c00      	cmp	r4, #0
 8009848:	bfd4      	ite	le
 800984a:	f1c4 0402 	rsble	r4, r4, #2
 800984e:	2401      	movgt	r4, #1
 8009850:	442c      	add	r4, r5
 8009852:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8009856:	f04f 0867 	mov.w	r8, #103	; 0x67
 800985a:	e6cb      	b.n	80095f4 <_svfprintf_r+0x112c>
 800985c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800985e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009860:	9020      	str	r0, [sp, #128]	; 0x80
 8009862:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009866:	9121      	str	r1, [sp, #132]	; 0x84
 8009868:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
 800986c:	e660      	b.n	8009530 <_svfprintf_r+0x1068>
 800986e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009870:	9501      	str	r5, [sp, #4]
 8009872:	2003      	movs	r0, #3
 8009874:	a925      	add	r1, sp, #148	; 0x94
 8009876:	aa26      	add	r2, sp, #152	; 0x98
 8009878:	ab29      	add	r3, sp, #164	; 0xa4
 800987a:	9000      	str	r0, [sp, #0]
 800987c:	9203      	str	r2, [sp, #12]
 800987e:	9304      	str	r3, [sp, #16]
 8009880:	9102      	str	r1, [sp, #8]
 8009882:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009884:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8009888:	f001 f872 	bl	800a970 <_dtoa_r>
 800988c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800988e:	4607      	mov	r7, r0
 8009890:	e677      	b.n	8009582 <_svfprintf_r+0x10ba>
 8009892:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009894:	9401      	str	r4, [sp, #4]
 8009896:	2003      	movs	r0, #3
 8009898:	a925      	add	r1, sp, #148	; 0x94
 800989a:	aa26      	add	r2, sp, #152	; 0x98
 800989c:	ab29      	add	r3, sp, #164	; 0xa4
 800989e:	e7ec      	b.n	800987a <_svfprintf_r+0x13b2>
 80098a0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80098a2:	9514      	str	r5, [sp, #80]	; 0x50
 80098a4:	2d00      	cmp	r5, #0
 80098a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80098a8:	dd63      	ble.n	8009972 <_svfprintf_r+0x14aa>
 80098aa:	bbb4      	cbnz	r4, 800991a <_svfprintf_r+0x1452>
 80098ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80098ae:	07e8      	lsls	r0, r5, #31
 80098b0:	d433      	bmi.n	800991a <_svfprintf_r+0x1452>
 80098b2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80098b4:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 80098b8:	e69c      	b.n	80095f4 <_svfprintf_r+0x112c>
 80098ba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80098bc:	e67a      	b.n	80095b4 <_svfprintf_r+0x10ec>
 80098be:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
 80098c2:	4d3e      	ldr	r5, [pc, #248]	; (80099bc <_svfprintf_r+0x14f4>)
 80098c4:	17da      	asrs	r2, r3, #31
 80098c6:	fb85 5103 	smull	r5, r1, r5, r3
 80098ca:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
 80098ce:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 80098d2:	4602      	mov	r2, r0
 80098d4:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 80098d8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80098dc:	2909      	cmp	r1, #9
 80098de:	7010      	strb	r0, [r2, #0]
 80098e0:	460b      	mov	r3, r1
 80098e2:	f102 30ff 	add.w	r0, r2, #4294967295
 80098e6:	dcec      	bgt.n	80098c2 <_svfprintf_r+0x13fa>
 80098e8:	f101 0330 	add.w	r3, r1, #48	; 0x30
 80098ec:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
 80098f0:	b2d9      	uxtb	r1, r3
 80098f2:	4284      	cmp	r4, r0
 80098f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80098f8:	d95a      	bls.n	80099b0 <_svfprintf_r+0x14e8>
 80098fa:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
 80098fe:	4613      	mov	r3, r2
 8009900:	e001      	b.n	8009906 <_svfprintf_r+0x143e>
 8009902:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009906:	42a3      	cmp	r3, r4
 8009908:	f800 1f01 	strb.w	r1, [r0, #1]!
 800990c:	d1f9      	bne.n	8009902 <_svfprintf_r+0x143a>
 800990e:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
 8009912:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8009916:	3bf6      	subs	r3, #246	; 0xf6
 8009918:	e772      	b.n	8009800 <_svfprintf_r+0x1338>
 800991a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800991c:	1c6c      	adds	r4, r5, #1
 800991e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009920:	442c      	add	r4, r5
 8009922:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8009926:	e665      	b.n	80095f4 <_svfprintf_r+0x112c>
 8009928:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800992c:	2200      	movs	r2, #0
 800992e:	2300      	movs	r3, #0
 8009930:	f7f7 fbc6 	bl	80010c0 <__aeabi_dcmpeq>
 8009934:	2800      	cmp	r0, #0
 8009936:	f47f af4a 	bne.w	80097ce <_svfprintf_r+0x1306>
 800993a:	f1c5 0501 	rsb	r5, r5, #1
 800993e:	9525      	str	r5, [sp, #148]	; 0x94
 8009940:	442c      	add	r4, r5
 8009942:	e624      	b.n	800958e <_svfprintf_r+0x10c6>
 8009944:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009946:	1c6c      	adds	r4, r5, #1
 8009948:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 800994c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8009950:	e650      	b.n	80095f4 <_svfprintf_r+0x112c>
 8009952:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009954:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8009958:	682d      	ldr	r5, [r5, #0]
 800995a:	f899 8001 	ldrb.w	r8, [r9, #1]
 800995e:	950a      	str	r5, [sp, #40]	; 0x28
 8009960:	f10c 0304 	add.w	r3, ip, #4
 8009964:	2d00      	cmp	r5, #0
 8009966:	9310      	str	r3, [sp, #64]	; 0x40
 8009968:	4681      	mov	r9, r0
 800996a:	f6be ae09 	bge.w	8008580 <_svfprintf_r+0xb8>
 800996e:	f7fe be04 	b.w	800857a <_svfprintf_r+0xb2>
 8009972:	b97c      	cbnz	r4, 8009994 <_svfprintf_r+0x14cc>
 8009974:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009976:	07e9      	lsls	r1, r5, #31
 8009978:	d40c      	bmi.n	8009994 <_svfprintf_r+0x14cc>
 800997a:	2301      	movs	r3, #1
 800997c:	461c      	mov	r4, r3
 800997e:	e639      	b.n	80095f4 <_svfprintf_r+0x112c>
 8009980:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8009984:	f01c 0301 	ands.w	r3, ip, #1
 8009988:	f47f af43 	bne.w	8009812 <_svfprintf_r+0x134a>
 800998c:	9314      	str	r3, [sp, #80]	; 0x50
 800998e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8009992:	e62f      	b.n	80095f4 <_svfprintf_r+0x112c>
 8009994:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009996:	1cac      	adds	r4, r5, #2
 8009998:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 800999c:	e62a      	b.n	80095f4 <_svfprintf_r+0x112c>
 800999e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80099a0:	230c      	movs	r3, #12
 80099a2:	602b      	str	r3, [r5, #0]
 80099a4:	f04f 30ff 	mov.w	r0, #4294967295
 80099a8:	f7fe beae 	b.w	8008708 <_svfprintf_r+0x240>
 80099ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80099ae:	e713      	b.n	80097d8 <_svfprintf_r+0x1310>
 80099b0:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
 80099b4:	e724      	b.n	8009800 <_svfprintf_r+0x1338>
 80099b6:	bf00      	nop
 80099b8:	0800ef8c 	.word	0x0800ef8c
 80099bc:	66666667 	.word	0x66666667

080099c0 <__ssvfscanf_r>:
 80099c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c4:	460d      	mov	r5, r1
 80099c6:	8989      	ldrh	r1, [r1, #12]
 80099c8:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 80099cc:	048c      	lsls	r4, r1, #18
 80099ce:	900e      	str	r0, [sp, #56]	; 0x38
 80099d0:	9306      	str	r3, [sp, #24]
 80099d2:	d406      	bmi.n	80099e2 <__ssvfscanf_r+0x22>
 80099d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099d6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80099da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099de:	81a9      	strh	r1, [r5, #12]
 80099e0:	666b      	str	r3, [r5, #100]	; 0x64
 80099e2:	4692      	mov	sl, r2
 80099e4:	2400      	movs	r4, #0
 80099e6:	f81a 3b01 	ldrb.w	r3, [sl], #1
 80099ea:	9409      	str	r4, [sp, #36]	; 0x24
 80099ec:	940c      	str	r4, [sp, #48]	; 0x30
 80099ee:	46a1      	mov	r9, r4
 80099f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80099f2:	f8df 83e4 	ldr.w	r8, [pc, #996]	; 8009dd8 <__ssvfscanf_r+0x418>
 80099f6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80099f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80099fa:	b343      	cbz	r3, 8009a4e <__ssvfscanf_r+0x8e>
 80099fc:	f8d8 1000 	ldr.w	r1, [r8]
 8009a00:	18c8      	adds	r0, r1, r3
 8009a02:	7840      	ldrb	r0, [r0, #1]
 8009a04:	f000 0008 	and.w	r0, r0, #8
 8009a08:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8009a0c:	b320      	cbz	r0, 8009a58 <__ssvfscanf_r+0x98>
 8009a0e:	686b      	ldr	r3, [r5, #4]
 8009a10:	e00e      	b.n	8009a30 <__ssvfscanf_r+0x70>
 8009a12:	682b      	ldr	r3, [r5, #0]
 8009a14:	f8d8 2000 	ldr.w	r2, [r8]
 8009a18:	7819      	ldrb	r1, [r3, #0]
 8009a1a:	440a      	add	r2, r1
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	7852      	ldrb	r2, [r2, #1]
 8009a20:	0710      	lsls	r0, r2, #28
 8009a22:	d50d      	bpl.n	8009a40 <__ssvfscanf_r+0x80>
 8009a24:	686a      	ldr	r2, [r5, #4]
 8009a26:	602b      	str	r3, [r5, #0]
 8009a28:	1e53      	subs	r3, r2, #1
 8009a2a:	f109 0901 	add.w	r9, r9, #1
 8009a2e:	606b      	str	r3, [r5, #4]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	dcee      	bgt.n	8009a12 <__ssvfscanf_r+0x52>
 8009a34:	4630      	mov	r0, r6
 8009a36:	4629      	mov	r1, r5
 8009a38:	f004 f852 	bl	800dae0 <__ssrefill_r>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d0e8      	beq.n	8009a12 <__ssvfscanf_r+0x52>
 8009a40:	4652      	mov	r2, sl
 8009a42:	4692      	mov	sl, r2
 8009a44:	f81a 3b01 	ldrb.w	r3, [sl], #1
 8009a48:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1d6      	bne.n	80099fc <__ssvfscanf_r+0x3c>
 8009a4e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009a50:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
 8009a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a58:	2b25      	cmp	r3, #37	; 0x25
 8009a5a:	f040 8084 	bne.w	8009b66 <__ssvfscanf_r+0x1a6>
 8009a5e:	7853      	ldrb	r3, [r2, #1]
 8009a60:	463c      	mov	r4, r7
 8009a62:	f10a 0201 	add.w	r2, sl, #1
 8009a66:	2b78      	cmp	r3, #120	; 0x78
 8009a68:	f200 82e5 	bhi.w	800a036 <__ssvfscanf_r+0x676>
 8009a6c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009a70:	02e3008f 	.word	0x02e3008f
 8009a74:	02e302e3 	.word	0x02e302e3
 8009a78:	02e302e3 	.word	0x02e302e3
 8009a7c:	02e302e3 	.word	0x02e302e3
 8009a80:	02e302e3 	.word	0x02e302e3
 8009a84:	02e302e3 	.word	0x02e302e3
 8009a88:	02e302e3 	.word	0x02e302e3
 8009a8c:	02e302e3 	.word	0x02e302e3
 8009a90:	02e302e3 	.word	0x02e302e3
 8009a94:	02e302e3 	.word	0x02e302e3
 8009a98:	02e302e3 	.word	0x02e302e3
 8009a9c:	02e302e3 	.word	0x02e302e3
 8009aa0:	02e302e3 	.word	0x02e302e3
 8009aa4:	02e302e3 	.word	0x02e302e3
 8009aa8:	02e302e3 	.word	0x02e302e3
 8009aac:	02e302e3 	.word	0x02e302e3
 8009ab0:	02e302e3 	.word	0x02e302e3
 8009ab4:	02e302e3 	.word	0x02e302e3
 8009ab8:	007902e3 	.word	0x007902e3
 8009abc:	02e302e3 	.word	0x02e302e3
 8009ac0:	02e302e3 	.word	0x02e302e3
 8009ac4:	02e30226 	.word	0x02e30226
 8009ac8:	02e302e3 	.word	0x02e302e3
 8009acc:	02e302e3 	.word	0x02e302e3
 8009ad0:	024f024f 	.word	0x024f024f
 8009ad4:	024f024f 	.word	0x024f024f
 8009ad8:	024f024f 	.word	0x024f024f
 8009adc:	024f024f 	.word	0x024f024f
 8009ae0:	024f024f 	.word	0x024f024f
 8009ae4:	02e302e3 	.word	0x02e302e3
 8009ae8:	02e302e3 	.word	0x02e302e3
 8009aec:	02e302e3 	.word	0x02e302e3
 8009af0:	02e302e3 	.word	0x02e302e3
 8009af4:	02e302e3 	.word	0x02e302e3
 8009af8:	0273022c 	.word	0x0273022c
 8009afc:	027302e3 	.word	0x027302e3
 8009b00:	02e302e3 	.word	0x02e302e3
 8009b04:	02e302e3 	.word	0x02e302e3
 8009b08:	02e3026d 	.word	0x02e3026d
 8009b0c:	026302e3 	.word	0x026302e3
 8009b10:	02e302e3 	.word	0x02e302e3
 8009b14:	02e302e3 	.word	0x02e302e3
 8009b18:	02e302e3 	.word	0x02e302e3
 8009b1c:	02e302e3 	.word	0x02e302e3
 8009b20:	02e30259 	.word	0x02e30259
 8009b24:	029302e3 	.word	0x029302e3
 8009b28:	02e302e3 	.word	0x02e302e3
 8009b2c:	02e302e3 	.word	0x02e302e3
 8009b30:	02e302e3 	.word	0x02e302e3
 8009b34:	028d02e3 	.word	0x028d02e3
 8009b38:	0273029e 	.word	0x0273029e
 8009b3c:	02730273 	.word	0x02730273
 8009b40:	00950287 	.word	0x00950287
 8009b44:	02e302e3 	.word	0x02e302e3
 8009b48:	02e302b6 	.word	0x02e302b6
 8009b4c:	02770279 	.word	0x02770279
 8009b50:	02e302ac 	.word	0x02e302ac
 8009b54:	02a802e3 	.word	0x02a802e3
 8009b58:	02a002e3 	.word	0x02a002e3
 8009b5c:	02e302e3 	.word	0x02e302e3
 8009b60:	0259      	.short	0x0259
 8009b62:	9207      	str	r2, [sp, #28]
 8009b64:	4692      	mov	sl, r2
 8009b66:	686b      	ldr	r3, [r5, #4]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f340 8557 	ble.w	800a61c <__ssvfscanf_r+0xc5c>
 8009b6e:	682b      	ldr	r3, [r5, #0]
 8009b70:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
 8009b74:	7819      	ldrb	r1, [r3, #0]
 8009b76:	4291      	cmp	r1, r2
 8009b78:	f47f af69 	bne.w	8009a4e <__ssvfscanf_r+0x8e>
 8009b7c:	686a      	ldr	r2, [r5, #4]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	3a01      	subs	r2, #1
 8009b82:	606a      	str	r2, [r5, #4]
 8009b84:	602b      	str	r3, [r5, #0]
 8009b86:	f109 0901 	add.w	r9, r9, #1
 8009b8a:	4652      	mov	r2, sl
 8009b8c:	e759      	b.n	8009a42 <__ssvfscanf_r+0x82>
 8009b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b92:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
 8009b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b9a:	9207      	str	r2, [sp, #28]
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	4a8d      	ldr	r2, [pc, #564]	; (8009dd4 <__ssvfscanf_r+0x414>)
 8009ba0:	9209      	str	r2, [sp, #36]	; 0x24
 8009ba2:	930c      	str	r3, [sp, #48]	; 0x30
 8009ba4:	f04f 0a03 	mov.w	sl, #3
 8009ba8:	686b      	ldr	r3, [r5, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f340 8199 	ble.w	8009ee2 <__ssvfscanf_r+0x522>
 8009bb0:	0679      	lsls	r1, r7, #25
 8009bb2:	d512      	bpl.n	8009bda <__ssvfscanf_r+0x21a>
 8009bb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bb8:	f1ba 0f03 	cmp.w	sl, #3
 8009bbc:	f200 80b7 	bhi.w	8009d2e <__ssvfscanf_r+0x36e>
 8009bc0:	e8df f01a 	tbh	[pc, sl, lsl #1]
 8009bc4:	008e00da 	.word	0x008e00da
 8009bc8:	0244001e 	.word	0x0244001e
 8009bcc:	4630      	mov	r0, r6
 8009bce:	4629      	mov	r1, r5
 8009bd0:	f003 ff86 	bl	800dae0 <__ssrefill_r>
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	f040 818b 	bne.w	8009ef0 <__ssvfscanf_r+0x530>
 8009bda:	f8d8 1000 	ldr.w	r1, [r8]
 8009bde:	682b      	ldr	r3, [r5, #0]
 8009be0:	e000      	b.n	8009be4 <__ssvfscanf_r+0x224>
 8009be2:	602b      	str	r3, [r5, #0]
 8009be4:	781a      	ldrb	r2, [r3, #0]
 8009be6:	440a      	add	r2, r1
 8009be8:	3301      	adds	r3, #1
 8009bea:	7852      	ldrb	r2, [r2, #1]
 8009bec:	0712      	lsls	r2, r2, #28
 8009bee:	d5e1      	bpl.n	8009bb4 <__ssvfscanf_r+0x1f4>
 8009bf0:	686a      	ldr	r2, [r5, #4]
 8009bf2:	3a01      	subs	r2, #1
 8009bf4:	2a00      	cmp	r2, #0
 8009bf6:	f109 0901 	add.w	r9, r9, #1
 8009bfa:	606a      	str	r2, [r5, #4]
 8009bfc:	dcf1      	bgt.n	8009be2 <__ssvfscanf_r+0x222>
 8009bfe:	e7e5      	b.n	8009bcc <__ssvfscanf_r+0x20c>
 8009c00:	1e63      	subs	r3, r4, #1
 8009c02:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8009c06:	bf86      	itte	hi
 8009c08:	f46f 71ae 	mvnhi.w	r1, #348	; 0x15c
 8009c0c:	1863      	addhi	r3, r4, r1
 8009c0e:	2300      	movls	r3, #0
 8009c10:	f04f 0b00 	mov.w	fp, #0
 8009c14:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
 8009c18:	9308      	str	r3, [sp, #32]
 8009c1a:	465b      	mov	r3, fp
 8009c1c:	46b3      	mov	fp, r6
 8009c1e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009c20:	f8cd c014 	str.w	ip, [sp, #20]
 8009c24:	46e2      	mov	sl, ip
 8009c26:	bf88      	it	hi
 8009c28:	f240 145d 	movwhi	r4, #349	; 0x15d
 8009c2c:	f447 6758 	orr.w	r7, r7, #3456	; 0xd80
 8009c30:	46cc      	mov	ip, r9
 8009c32:	6828      	ldr	r0, [r5, #0]
 8009c34:	7801      	ldrb	r1, [r0, #0]
 8009c36:	f1a1 022b 	sub.w	r2, r1, #43	; 0x2b
 8009c3a:	2a4d      	cmp	r2, #77	; 0x4d
 8009c3c:	f200 80e2 	bhi.w	8009e04 <__ssvfscanf_r+0x444>
 8009c40:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009c44:	00e00126 	.word	0x00e00126
 8009c48:	00e00126 	.word	0x00e00126
 8009c4c:	00fd00e0 	.word	0x00fd00e0
 8009c50:	00cc00cc 	.word	0x00cc00cc
 8009c54:	00cc00cc 	.word	0x00cc00cc
 8009c58:	00cc00cc 	.word	0x00cc00cc
 8009c5c:	013600cc 	.word	0x013600cc
 8009c60:	00e00136 	.word	0x00e00136
 8009c64:	00e000e0 	.word	0x00e000e0
 8009c68:	00e000e0 	.word	0x00e000e0
 8009c6c:	00e000e0 	.word	0x00e000e0
 8009c70:	01210121 	.word	0x01210121
 8009c74:	01210121 	.word	0x01210121
 8009c78:	01210121 	.word	0x01210121
 8009c7c:	00e000e0 	.word	0x00e000e0
 8009c80:	00e000e0 	.word	0x00e000e0
 8009c84:	00e000e0 	.word	0x00e000e0
 8009c88:	00e000e0 	.word	0x00e000e0
 8009c8c:	00e000e0 	.word	0x00e000e0
 8009c90:	00e000e0 	.word	0x00e000e0
 8009c94:	00e000e0 	.word	0x00e000e0
 8009c98:	00e000e0 	.word	0x00e000e0
 8009c9c:	012b00e0 	.word	0x012b00e0
 8009ca0:	00e000e0 	.word	0x00e000e0
 8009ca4:	00e000e0 	.word	0x00e000e0
 8009ca8:	00e000e0 	.word	0x00e000e0
 8009cac:	00e000e0 	.word	0x00e000e0
 8009cb0:	01210121 	.word	0x01210121
 8009cb4:	01210121 	.word	0x01210121
 8009cb8:	01210121 	.word	0x01210121
 8009cbc:	00e000e0 	.word	0x00e000e0
 8009cc0:	00e000e0 	.word	0x00e000e0
 8009cc4:	00e000e0 	.word	0x00e000e0
 8009cc8:	00e000e0 	.word	0x00e000e0
 8009ccc:	00e000e0 	.word	0x00e000e0
 8009cd0:	00e000e0 	.word	0x00e000e0
 8009cd4:	00e000e0 	.word	0x00e000e0
 8009cd8:	00e000e0 	.word	0x00e000e0
 8009cdc:	012b00e0 	.word	0x012b00e0
 8009ce0:	2c00      	cmp	r4, #0
 8009ce2:	bf08      	it	eq
 8009ce4:	f04f 34ff 	moveq.w	r4, #4294967295
 8009ce8:	f017 0301 	ands.w	r3, r7, #1
 8009cec:	f040 817f 	bne.w	8009fee <__ssvfscanf_r+0x62e>
 8009cf0:	06f9      	lsls	r1, r7, #27
 8009cf2:	f140 8390 	bpl.w	800a416 <__ssvfscanf_r+0xa56>
 8009cf6:	461f      	mov	r7, r3
 8009cf8:	f8d8 1000 	ldr.w	r1, [r8]
 8009cfc:	682b      	ldr	r3, [r5, #0]
 8009cfe:	781a      	ldrb	r2, [r3, #0]
 8009d00:	440a      	add	r2, r1
 8009d02:	3301      	adds	r3, #1
 8009d04:	7852      	ldrb	r2, [r2, #1]
 8009d06:	0712      	lsls	r2, r2, #28
 8009d08:	d431      	bmi.n	8009d6e <__ssvfscanf_r+0x3ae>
 8009d0a:	686a      	ldr	r2, [r5, #4]
 8009d0c:	602b      	str	r3, [r5, #0]
 8009d0e:	3701      	adds	r7, #1
 8009d10:	3a01      	subs	r2, #1
 8009d12:	42bc      	cmp	r4, r7
 8009d14:	606a      	str	r2, [r5, #4]
 8009d16:	d02a      	beq.n	8009d6e <__ssvfscanf_r+0x3ae>
 8009d18:	2a00      	cmp	r2, #0
 8009d1a:	dcf0      	bgt.n	8009cfe <__ssvfscanf_r+0x33e>
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	4629      	mov	r1, r5
 8009d20:	f003 fede 	bl	800dae0 <__ssrefill_r>
 8009d24:	bb18      	cbnz	r0, 8009d6e <__ssvfscanf_r+0x3ae>
 8009d26:	f8d8 1000 	ldr.w	r1, [r8]
 8009d2a:	682b      	ldr	r3, [r5, #0]
 8009d2c:	e7e7      	b.n	8009cfe <__ssvfscanf_r+0x33e>
 8009d2e:	2c00      	cmp	r4, #0
 8009d30:	bf08      	it	eq
 8009d32:	2401      	moveq	r4, #1
 8009d34:	f017 0301 	ands.w	r3, r7, #1
 8009d38:	f040 839f 	bne.w	800a47a <__ssvfscanf_r+0xaba>
 8009d3c:	06f9      	lsls	r1, r7, #27
 8009d3e:	f140 8454 	bpl.w	800a5ea <__ssvfscanf_r+0xc2a>
 8009d42:	461f      	mov	r7, r3
 8009d44:	e008      	b.n	8009d58 <__ssvfscanf_r+0x398>
 8009d46:	441a      	add	r2, r3
 8009d48:	602a      	str	r2, [r5, #0]
 8009d4a:	441f      	add	r7, r3
 8009d4c:	1ae4      	subs	r4, r4, r3
 8009d4e:	f003 fec7 	bl	800dae0 <__ssrefill_r>
 8009d52:	2800      	cmp	r0, #0
 8009d54:	f040 8441 	bne.w	800a5da <__ssvfscanf_r+0xc1a>
 8009d58:	686b      	ldr	r3, [r5, #4]
 8009d5a:	682a      	ldr	r2, [r5, #0]
 8009d5c:	42a3      	cmp	r3, r4
 8009d5e:	4630      	mov	r0, r6
 8009d60:	4629      	mov	r1, r5
 8009d62:	dbf0      	blt.n	8009d46 <__ssvfscanf_r+0x386>
 8009d64:	1b1b      	subs	r3, r3, r4
 8009d66:	4422      	add	r2, r4
 8009d68:	606b      	str	r3, [r5, #4]
 8009d6a:	4427      	add	r7, r4
 8009d6c:	602a      	str	r2, [r5, #0]
 8009d6e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009d72:	44b9      	add	r9, r7
 8009d74:	4652      	mov	r2, sl
 8009d76:	e664      	b.n	8009a42 <__ssvfscanf_r+0x82>
 8009d78:	2c00      	cmp	r4, #0
 8009d7a:	bf08      	it	eq
 8009d7c:	f04f 34ff 	moveq.w	r4, #4294967295
 8009d80:	06fa      	lsls	r2, r7, #27
 8009d82:	f140 8315 	bpl.w	800a3b0 <__ssvfscanf_r+0x9f0>
 8009d86:	682b      	ldr	r3, [r5, #0]
 8009d88:	2700      	movs	r7, #0
 8009d8a:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
 8009d8e:	781a      	ldrb	r2, [r3, #0]
 8009d90:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8009d94:	3301      	adds	r3, #1
 8009d96:	b1aa      	cbz	r2, 8009dc4 <__ssvfscanf_r+0x404>
 8009d98:	686a      	ldr	r2, [r5, #4]
 8009d9a:	602b      	str	r3, [r5, #0]
 8009d9c:	3701      	adds	r7, #1
 8009d9e:	3a01      	subs	r2, #1
 8009da0:	42bc      	cmp	r4, r7
 8009da2:	606a      	str	r2, [r5, #4]
 8009da4:	d0e3      	beq.n	8009d6e <__ssvfscanf_r+0x3ae>
 8009da6:	2a00      	cmp	r2, #0
 8009da8:	dcf1      	bgt.n	8009d8e <__ssvfscanf_r+0x3ce>
 8009daa:	4630      	mov	r0, r6
 8009dac:	4629      	mov	r1, r5
 8009dae:	f003 fe97 	bl	800dae0 <__ssrefill_r>
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d1db      	bne.n	8009d6e <__ssvfscanf_r+0x3ae>
 8009db6:	682b      	ldr	r3, [r5, #0]
 8009db8:	781a      	ldrb	r2, [r3, #0]
 8009dba:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	2a00      	cmp	r2, #0
 8009dc2:	d1e9      	bne.n	8009d98 <__ssvfscanf_r+0x3d8>
 8009dc4:	2f00      	cmp	r7, #0
 8009dc6:	f43f ae42 	beq.w	8009a4e <__ssvfscanf_r+0x8e>
 8009dca:	44b9      	add	r9, r7
 8009dcc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009dd0:	e7d0      	b.n	8009d74 <__ssvfscanf_r+0x3b4>
 8009dd2:	bf00      	nop
 8009dd4:	0800d401 	.word	0x0800d401
 8009dd8:	20000590 	.word	0x20000590
 8009ddc:	f8df 9364 	ldr.w	r9, [pc, #868]	; 800a144 <__ssvfscanf_r+0x784>
 8009de0:	f939 6016 	ldrsh.w	r6, [r9, r6, lsl #1]
 8009de4:	f427 6738 	bic.w	r7, r7, #2944	; 0xb80
 8009de8:	686a      	ldr	r2, [r5, #4]
 8009dea:	f88a 1000 	strb.w	r1, [sl]
 8009dee:	3a01      	subs	r2, #1
 8009df0:	2a00      	cmp	r2, #0
 8009df2:	f10a 0a01 	add.w	sl, sl, #1
 8009df6:	606a      	str	r2, [r5, #4]
 8009df8:	dd38      	ble.n	8009e6c <__ssvfscanf_r+0x4ac>
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	6028      	str	r0, [r5, #0]
 8009dfe:	3c01      	subs	r4, #1
 8009e00:	f47f af17 	bne.w	8009c32 <__ssvfscanf_r+0x272>
 8009e04:	05f9      	lsls	r1, r7, #23
 8009e06:	960c      	str	r6, [sp, #48]	; 0x30
 8009e08:	46e1      	mov	r9, ip
 8009e0a:	465e      	mov	r6, fp
 8009e0c:	469b      	mov	fp, r3
 8009e0e:	d508      	bpl.n	8009e22 <__ssvfscanf_r+0x462>
 8009e10:	9c05      	ldr	r4, [sp, #20]
 8009e12:	45a2      	cmp	sl, r4
 8009e14:	f200 840a 	bhi.w	800a62c <__ssvfscanf_r+0xc6c>
 8009e18:	f8dd c014 	ldr.w	ip, [sp, #20]
 8009e1c:	45e2      	cmp	sl, ip
 8009e1e:	f43f ae16 	beq.w	8009a4e <__ssvfscanf_r+0x8e>
 8009e22:	f017 0410 	ands.w	r4, r7, #16
 8009e26:	f000 8372 	beq.w	800a50e <__ssvfscanf_r+0xb4e>
 8009e2a:	f8dd c014 	ldr.w	ip, [sp, #20]
 8009e2e:	ebcc 0a0a 	rsb	sl, ip, sl
 8009e32:	44d3      	add	fp, sl
 8009e34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009e38:	44d9      	add	r9, fp
 8009e3a:	4652      	mov	r2, sl
 8009e3c:	e601      	b.n	8009a42 <__ssvfscanf_r+0x82>
 8009e3e:	053a      	lsls	r2, r7, #20
 8009e40:	d5d2      	bpl.n	8009de8 <__ssvfscanf_r+0x428>
 8009e42:	b916      	cbnz	r6, 8009e4a <__ssvfscanf_r+0x48a>
 8009e44:	f447 7700 	orr.w	r7, r7, #512	; 0x200
 8009e48:	2608      	movs	r6, #8
 8009e4a:	057a      	lsls	r2, r7, #21
 8009e4c:	f100 837d 	bmi.w	800a54a <__ssvfscanf_r+0xb8a>
 8009e50:	9a08      	ldr	r2, [sp, #32]
 8009e52:	f427 7760 	bic.w	r7, r7, #896	; 0x380
 8009e56:	b112      	cbz	r2, 8009e5e <__ssvfscanf_r+0x49e>
 8009e58:	3a01      	subs	r2, #1
 8009e5a:	9208      	str	r2, [sp, #32]
 8009e5c:	3401      	adds	r4, #1
 8009e5e:	686a      	ldr	r2, [r5, #4]
 8009e60:	3a01      	subs	r2, #1
 8009e62:	2a00      	cmp	r2, #0
 8009e64:	f103 0301 	add.w	r3, r3, #1
 8009e68:	606a      	str	r2, [r5, #4]
 8009e6a:	dcc6      	bgt.n	8009dfa <__ssvfscanf_r+0x43a>
 8009e6c:	4658      	mov	r0, fp
 8009e6e:	4629      	mov	r1, r5
 8009e70:	9303      	str	r3, [sp, #12]
 8009e72:	f8cd c010 	str.w	ip, [sp, #16]
 8009e76:	f003 fe33 	bl	800dae0 <__ssrefill_r>
 8009e7a:	9b03      	ldr	r3, [sp, #12]
 8009e7c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d0bc      	beq.n	8009dfe <__ssvfscanf_r+0x43e>
 8009e84:	e7be      	b.n	8009e04 <__ssvfscanf_r+0x444>
 8009e86:	2e0a      	cmp	r6, #10
 8009e88:	ddbc      	ble.n	8009e04 <__ssvfscanf_r+0x444>
 8009e8a:	f427 6738 	bic.w	r7, r7, #2944	; 0xb80
 8009e8e:	e7ab      	b.n	8009de8 <__ssvfscanf_r+0x428>
 8009e90:	063a      	lsls	r2, r7, #24
 8009e92:	d5b7      	bpl.n	8009e04 <__ssvfscanf_r+0x444>
 8009e94:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 8009e98:	e7a6      	b.n	8009de8 <__ssvfscanf_r+0x428>
 8009e9a:	f407 62c0 	and.w	r2, r7, #1536	; 0x600
 8009e9e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009ea2:	d1af      	bne.n	8009e04 <__ssvfscanf_r+0x444>
 8009ea4:	f427 7700 	bic.w	r7, r7, #512	; 0x200
 8009ea8:	f447 67a0 	orr.w	r7, r7, #1280	; 0x500
 8009eac:	2610      	movs	r6, #16
 8009eae:	e79b      	b.n	8009de8 <__ssvfscanf_r+0x428>
 8009eb0:	4aa4      	ldr	r2, [pc, #656]	; (800a144 <__ssvfscanf_r+0x784>)
 8009eb2:	f932 6016 	ldrsh.w	r6, [r2, r6, lsl #1]
 8009eb6:	2e08      	cmp	r6, #8
 8009eb8:	dce7      	bgt.n	8009e8a <__ssvfscanf_r+0x4ca>
 8009eba:	e7a3      	b.n	8009e04 <__ssvfscanf_r+0x444>
 8009ebc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8009ec0:	f047 0710 	orr.w	r7, r7, #16
 8009ec4:	4692      	mov	sl, r2
 8009ec6:	e5cc      	b.n	8009a62 <__ssvfscanf_r+0xa2>
 8009ec8:	9207      	str	r2, [sp, #28]
 8009eca:	f047 0701 	orr.w	r7, r7, #1
 8009ece:	686b      	ldr	r3, [r5, #4]
 8009ed0:	489d      	ldr	r0, [pc, #628]	; (800a148 <__ssvfscanf_r+0x788>)
 8009ed2:	9009      	str	r0, [sp, #36]	; 0x24
 8009ed4:	210a      	movs	r1, #10
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	910c      	str	r1, [sp, #48]	; 0x30
 8009eda:	f04f 0a03 	mov.w	sl, #3
 8009ede:	f73f ae67 	bgt.w	8009bb0 <__ssvfscanf_r+0x1f0>
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	4629      	mov	r1, r5
 8009ee6:	f003 fdfb 	bl	800dae0 <__ssrefill_r>
 8009eea:	2800      	cmp	r0, #0
 8009eec:	f43f ae60 	beq.w	8009bb0 <__ssvfscanf_r+0x1f0>
 8009ef0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009ef2:	2c00      	cmp	r4, #0
 8009ef4:	f43f ae4b 	beq.w	8009b8e <__ssvfscanf_r+0x1ce>
 8009ef8:	89ab      	ldrh	r3, [r5, #12]
 8009efa:	4620      	mov	r0, r4
 8009efc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009f00:	bf18      	it	ne
 8009f02:	f04f 30ff 	movne.w	r0, #4294967295
 8009f06:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
 8009f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8009f12:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8009f16:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8009f1a:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8009f1e:	4692      	mov	sl, r2
 8009f20:	e59f      	b.n	8009a62 <__ssvfscanf_r+0xa2>
 8009f22:	9207      	str	r2, [sp, #28]
 8009f24:	2310      	movs	r3, #16
 8009f26:	4a89      	ldr	r2, [pc, #548]	; (800a14c <__ssvfscanf_r+0x78c>)
 8009f28:	9209      	str	r2, [sp, #36]	; 0x24
 8009f2a:	f447 7700 	orr.w	r7, r7, #512	; 0x200
 8009f2e:	930c      	str	r3, [sp, #48]	; 0x30
 8009f30:	f04f 0a03 	mov.w	sl, #3
 8009f34:	e638      	b.n	8009ba8 <__ssvfscanf_r+0x1e8>
 8009f36:	9207      	str	r2, [sp, #28]
 8009f38:	f047 0701 	orr.w	r7, r7, #1
 8009f3c:	4a83      	ldr	r2, [pc, #524]	; (800a14c <__ssvfscanf_r+0x78c>)
 8009f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8009f40:	2308      	movs	r3, #8
 8009f42:	930c      	str	r3, [sp, #48]	; 0x30
 8009f44:	f04f 0a03 	mov.w	sl, #3
 8009f48:	e62e      	b.n	8009ba8 <__ssvfscanf_r+0x1e8>
 8009f4a:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8009f4e:	f047 0702 	orr.w	r7, r7, #2
 8009f52:	4692      	mov	sl, r2
 8009f54:	e585      	b.n	8009a62 <__ssvfscanf_r+0xa2>
 8009f56:	9207      	str	r2, [sp, #28]
 8009f58:	f04f 0a04 	mov.w	sl, #4
 8009f5c:	e624      	b.n	8009ba8 <__ssvfscanf_r+0x1e8>
 8009f5e:	9207      	str	r2, [sp, #28]
 8009f60:	e7ec      	b.n	8009f3c <__ssvfscanf_r+0x57c>
 8009f62:	06f9      	lsls	r1, r7, #27
 8009f64:	9207      	str	r2, [sp, #28]
 8009f66:	d462      	bmi.n	800a02e <__ssvfscanf_r+0x66e>
 8009f68:	077b      	lsls	r3, r7, #29
 8009f6a:	f140 8381 	bpl.w	800a670 <__ssvfscanf_r+0xcb0>
 8009f6e:	9c06      	ldr	r4, [sp, #24]
 8009f70:	6823      	ldr	r3, [r4, #0]
 8009f72:	3404      	adds	r4, #4
 8009f74:	4692      	mov	sl, r2
 8009f76:	f8a3 9000 	strh.w	r9, [r3]
 8009f7a:	9406      	str	r4, [sp, #24]
 8009f7c:	e560      	b.n	8009a40 <__ssvfscanf_r+0x80>
 8009f7e:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8009f82:	f047 0704 	orr.w	r7, r7, #4
 8009f86:	4692      	mov	sl, r2
 8009f88:	e56b      	b.n	8009a62 <__ssvfscanf_r+0xa2>
 8009f8a:	9207      	str	r2, [sp, #28]
 8009f8c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8009f90:	f04f 0a00 	mov.w	sl, #0
 8009f94:	e608      	b.n	8009ba8 <__ssvfscanf_r+0x1e8>
 8009f96:	4611      	mov	r1, r2
 8009f98:	a816      	add	r0, sp, #88	; 0x58
 8009f9a:	9207      	str	r2, [sp, #28]
 8009f9c:	f002 fa3c 	bl	800c418 <__sccl>
 8009fa0:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8009fa4:	9007      	str	r0, [sp, #28]
 8009fa6:	f04f 0a01 	mov.w	sl, #1
 8009faa:	e5fd      	b.n	8009ba8 <__ssvfscanf_r+0x1e8>
 8009fac:	9207      	str	r2, [sp, #28]
 8009fae:	e78e      	b.n	8009ece <__ssvfscanf_r+0x50e>
 8009fb0:	4866      	ldr	r0, [pc, #408]	; (800a14c <__ssvfscanf_r+0x78c>)
 8009fb2:	9207      	str	r2, [sp, #28]
 8009fb4:	210a      	movs	r1, #10
 8009fb6:	9009      	str	r0, [sp, #36]	; 0x24
 8009fb8:	910c      	str	r1, [sp, #48]	; 0x30
 8009fba:	f04f 0a03 	mov.w	sl, #3
 8009fbe:	e5f3      	b.n	8009ba8 <__ssvfscanf_r+0x1e8>
 8009fc0:	9207      	str	r2, [sp, #28]
 8009fc2:	f04f 0a02 	mov.w	sl, #2
 8009fc6:	e5ef      	b.n	8009ba8 <__ssvfscanf_r+0x1e8>
 8009fc8:	4860      	ldr	r0, [pc, #384]	; (800a14c <__ssvfscanf_r+0x78c>)
 8009fca:	9207      	str	r2, [sp, #28]
 8009fcc:	2110      	movs	r1, #16
 8009fce:	f447 7708 	orr.w	r7, r7, #544	; 0x220
 8009fd2:	9009      	str	r0, [sp, #36]	; 0x24
 8009fd4:	910c      	str	r1, [sp, #48]	; 0x30
 8009fd6:	f04f 0a03 	mov.w	sl, #3
 8009fda:	e5e5      	b.n	8009ba8 <__ssvfscanf_r+0x1e8>
 8009fdc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8009fe0:	2b6c      	cmp	r3, #108	; 0x6c
 8009fe2:	f000 8336 	beq.w	800a652 <__ssvfscanf_r+0xc92>
 8009fe6:	f047 0701 	orr.w	r7, r7, #1
 8009fea:	4692      	mov	sl, r2
 8009fec:	e539      	b.n	8009a62 <__ssvfscanf_r+0xa2>
 8009fee:	a814      	add	r0, sp, #80	; 0x50
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	2208      	movs	r2, #8
 8009ff4:	900a      	str	r0, [sp, #40]	; 0x28
 8009ff6:	f7fe f8cb 	bl	8008190 <memset>
 8009ffa:	f017 0b10 	ands.w	fp, r7, #16
 8009ffe:	f000 82bd 	beq.w	800a57c <__ssvfscanf_r+0xbbc>
 800a002:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
 800a006:	2200      	movs	r2, #0
 800a008:	6829      	ldr	r1, [r5, #0]
 800a00a:	f8d8 3000 	ldr.w	r3, [r8]
 800a00e:	7809      	ldrb	r1, [r1, #0]
 800a010:	440b      	add	r3, r1
 800a012:	785b      	ldrb	r3, [r3, #1]
 800a014:	0718      	lsls	r0, r3, #28
 800a016:	d402      	bmi.n	800a01e <__ssvfscanf_r+0x65e>
 800a018:	2c00      	cmp	r4, #0
 800a01a:	f040 8372 	bne.w	800a702 <__ssvfscanf_r+0xd42>
 800a01e:	f1bb 0f00 	cmp.w	fp, #0
 800a022:	d104      	bne.n	800a02e <__ssvfscanf_r+0x66e>
 800a024:	f8ca b000 	str.w	fp, [sl]
 800a028:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a02a:	3401      	adds	r4, #1
 800a02c:	940b      	str	r4, [sp, #44]	; 0x2c
 800a02e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a032:	4652      	mov	r2, sl
 800a034:	e505      	b.n	8009a42 <__ssvfscanf_r+0x82>
 800a036:	440b      	add	r3, r1
 800a038:	9207      	str	r2, [sp, #28]
 800a03a:	785b      	ldrb	r3, [r3, #1]
 800a03c:	f003 0303 	and.w	r3, r3, #3
 800a040:	2b01      	cmp	r3, #1
 800a042:	f47f af44 	bne.w	8009ece <__ssvfscanf_r+0x50e>
 800a046:	f047 0701 	orr.w	r7, r7, #1
 800a04a:	e740      	b.n	8009ece <__ssvfscanf_r+0x50e>
 800a04c:	4630      	mov	r0, r6
 800a04e:	f001 fcdf 	bl	800ba10 <_localeconv_r>
 800a052:	1e63      	subs	r3, r4, #1
 800a054:	6800      	ldr	r0, [r0, #0]
 800a056:	900f      	str	r0, [sp, #60]	; 0x3c
 800a058:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800a05c:	f240 81a5 	bls.w	800a3aa <__ssvfscanf_r+0x9ea>
 800a060:	f46f 70ae 	mvn.w	r0, #348	; 0x15c
 800a064:	4404      	add	r4, r0
 800a066:	940d      	str	r4, [sp, #52]	; 0x34
 800a068:	f240 145d 	movw	r4, #349	; 0x15d
 800a06c:	f04f 0a00 	mov.w	sl, #0
 800a070:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
 800a074:	960e      	str	r6, [sp, #56]	; 0x38
 800a076:	f8cd c014 	str.w	ip, [sp, #20]
 800a07a:	f447 67f0 	orr.w	r7, r7, #1920	; 0x780
 800a07e:	4653      	mov	r3, sl
 800a080:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800a084:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800a088:	f8cd a020 	str.w	sl, [sp, #32]
 800a08c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800a090:	46e3      	mov	fp, ip
 800a092:	4656      	mov	r6, sl
 800a094:	6828      	ldr	r0, [r5, #0]
 800a096:	7802      	ldrb	r2, [r0, #0]
 800a098:	f1a2 012b 	sub.w	r1, r2, #43	; 0x2b
 800a09c:	294e      	cmp	r1, #78	; 0x4e
 800a09e:	f200 8156 	bhi.w	800a34e <__ssvfscanf_r+0x98e>
 800a0a2:	e8df f011 	tbh	[pc, r1, lsl #1]
 800a0a6:	007e      	.short	0x007e
 800a0a8:	007e0154 	.word	0x007e0154
 800a0ac:	01540154 	.word	0x01540154
 800a0b0:	00550072 	.word	0x00550072
 800a0b4:	00550055 	.word	0x00550055
 800a0b8:	00550055 	.word	0x00550055
 800a0bc:	00550055 	.word	0x00550055
 800a0c0:	00550055 	.word	0x00550055
 800a0c4:	01540154 	.word	0x01540154
 800a0c8:	01540154 	.word	0x01540154
 800a0cc:	01540154 	.word	0x01540154
 800a0d0:	014f0154 	.word	0x014f0154
 800a0d4:	01540154 	.word	0x01540154
 800a0d8:	01350154 	.word	0x01350154
 800a0dc:	0154012e 	.word	0x0154012e
 800a0e0:	00a40154 	.word	0x00a40154
 800a0e4:	01540154 	.word	0x01540154
 800a0e8:	01540154 	.word	0x01540154
 800a0ec:	0154008f 	.word	0x0154008f
 800a0f0:	01540154 	.word	0x01540154
 800a0f4:	01540154 	.word	0x01540154
 800a0f8:	01540089 	.word	0x01540089
 800a0fc:	01540154 	.word	0x01540154
 800a100:	00830154 	.word	0x00830154
 800a104:	01540154 	.word	0x01540154
 800a108:	01540154 	.word	0x01540154
 800a10c:	01540154 	.word	0x01540154
 800a110:	014f0154 	.word	0x014f0154
 800a114:	01540154 	.word	0x01540154
 800a118:	01350154 	.word	0x01350154
 800a11c:	0154012e 	.word	0x0154012e
 800a120:	00a40154 	.word	0x00a40154
 800a124:	01540154 	.word	0x01540154
 800a128:	01540154 	.word	0x01540154
 800a12c:	0154008f 	.word	0x0154008f
 800a130:	01540154 	.word	0x01540154
 800a134:	01540154 	.word	0x01540154
 800a138:	01540089 	.word	0x01540089
 800a13c:	01540154 	.word	0x01540154
 800a140:	00830154 	.word	0x00830154
 800a144:	0800efa8 	.word	0x0800efa8
 800a148:	0800d401 	.word	0x0800d401
 800a14c:	0800d6b1 	.word	0x0800d6b1
 800a150:	eb03 010a 	add.w	r1, r3, sl
 800a154:	b999      	cbnz	r1, 800a17e <__ssvfscanf_r+0x7be>
 800a156:	f427 77c0 	bic.w	r7, r7, #384	; 0x180
 800a15a:	f88b 2000 	strb.w	r2, [fp]
 800a15e:	f10b 0b01 	add.w	fp, fp, #1
 800a162:	686a      	ldr	r2, [r5, #4]
 800a164:	3a01      	subs	r2, #1
 800a166:	2a00      	cmp	r2, #0
 800a168:	f104 34ff 	add.w	r4, r4, #4294967295
 800a16c:	f109 0901 	add.w	r9, r9, #1
 800a170:	606a      	str	r2, [r5, #4]
 800a172:	f340 80fa 	ble.w	800a36a <__ssvfscanf_r+0x9aa>
 800a176:	3001      	adds	r0, #1
 800a178:	6028      	str	r0, [r5, #0]
 800a17a:	2c00      	cmp	r4, #0
 800a17c:	d18a      	bne.n	800a094 <__ssvfscanf_r+0x6d4>
 800a17e:	9608      	str	r6, [sp, #32]
 800a180:	9c08      	ldr	r4, [sp, #32]
 800a182:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a184:	2c00      	cmp	r4, #0
 800a186:	d041      	beq.n	800a20c <__ssvfscanf_r+0x84c>
 800a188:	e10c      	b.n	800a3a4 <__ssvfscanf_r+0x9e4>
 800a18a:	05f9      	lsls	r1, r7, #23
 800a18c:	d5e0      	bpl.n	800a150 <__ssvfscanf_r+0x790>
 800a18e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a190:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 800a194:	3601      	adds	r6, #1
 800a196:	2a00      	cmp	r2, #0
 800a198:	d0e3      	beq.n	800a162 <__ssvfscanf_r+0x7a2>
 800a19a:	3a01      	subs	r2, #1
 800a19c:	920d      	str	r2, [sp, #52]	; 0x34
 800a19e:	3401      	adds	r4, #1
 800a1a0:	e7df      	b.n	800a162 <__ssvfscanf_r+0x7a2>
 800a1a2:	0639      	lsls	r1, r7, #24
 800a1a4:	d5eb      	bpl.n	800a17e <__ssvfscanf_r+0x7be>
 800a1a6:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 800a1aa:	e7d6      	b.n	800a15a <__ssvfscanf_r+0x79a>
 800a1ac:	f1ba 0f07 	cmp.w	sl, #7
 800a1b0:	d1e5      	bne.n	800a17e <__ssvfscanf_r+0x7be>
 800a1b2:	f04f 0a08 	mov.w	sl, #8
 800a1b6:	e7d0      	b.n	800a15a <__ssvfscanf_r+0x79a>
 800a1b8:	f1ba 0f06 	cmp.w	sl, #6
 800a1bc:	d1df      	bne.n	800a17e <__ssvfscanf_r+0x7be>
 800a1be:	f04f 0a07 	mov.w	sl, #7
 800a1c2:	e7ca      	b.n	800a15a <__ssvfscanf_r+0x79a>
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f040 80e6 	bne.w	800a396 <__ssvfscanf_r+0x9d6>
 800a1ca:	b92e      	cbnz	r6, 800a1d8 <__ssvfscanf_r+0x818>
 800a1cc:	f407 61e0 	and.w	r1, r7, #1792	; 0x700
 800a1d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a1d4:	f000 8239 	beq.w	800a64a <__ssvfscanf_r+0xc8a>
 800a1d8:	f1ba 0f01 	cmp.w	sl, #1
 800a1dc:	d002      	beq.n	800a1e4 <__ssvfscanf_r+0x824>
 800a1de:	f1ba 0f04 	cmp.w	sl, #4
 800a1e2:	d1cc      	bne.n	800a17e <__ssvfscanf_r+0x7be>
 800a1e4:	f10a 0a01 	add.w	sl, sl, #1
 800a1e8:	fa5f fa8a 	uxtb.w	sl, sl
 800a1ec:	e7b5      	b.n	800a15a <__ssvfscanf_r+0x79a>
 800a1ee:	f1ba 0f00 	cmp.w	sl, #0
 800a1f2:	f040 80c7 	bne.w	800a384 <__ssvfscanf_r+0x9c4>
 800a1f6:	2e00      	cmp	r6, #0
 800a1f8:	f040 80d2 	bne.w	800a3a0 <__ssvfscanf_r+0x9e0>
 800a1fc:	f407 61e0 	and.w	r1, r7, #1792	; 0x700
 800a200:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a204:	f000 821c 	beq.w	800a640 <__ssvfscanf_r+0xc80>
 800a208:	9608      	str	r6, [sp, #32]
 800a20a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a20c:	f103 3cff 	add.w	ip, r3, #4294967295
 800a210:	f1bc 0f01 	cmp.w	ip, #1
 800a214:	f240 82dc 	bls.w	800a7d0 <__ssvfscanf_r+0xe10>
 800a218:	f10a 32ff 	add.w	r2, sl, #4294967295
 800a21c:	2a06      	cmp	r2, #6
 800a21e:	d822      	bhi.n	800a266 <__ssvfscanf_r+0x8a6>
 800a220:	f1ba 0f02 	cmp.w	sl, #2
 800a224:	f240 82ad 	bls.w	800a782 <__ssvfscanf_r+0xdc2>
 800a228:	f1ba 0f03 	cmp.w	sl, #3
 800a22c:	d01b      	beq.n	800a266 <__ssvfscanf_r+0x8a6>
 800a22e:	f1aa 0a04 	sub.w	sl, sl, #4
 800a232:	fa5f fa8a 	uxtb.w	sl, sl
 800a236:	f10b 34ff 	add.w	r4, fp, #4294967295
 800a23a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a23e:	ebca 0404 	rsb	r4, sl, r4
 800a242:	46da      	mov	sl, fp
 800a244:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
 800a248:	4630      	mov	r0, r6
 800a24a:	462a      	mov	r2, r5
 800a24c:	f003 fc08 	bl	800da60 <_sungetc_r>
 800a250:	45a2      	cmp	sl, r4
 800a252:	d1f7      	bne.n	800a244 <__ssvfscanf_r+0x884>
 800a254:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800a258:	f109 39ff 	add.w	r9, r9, #4294967295
 800a25c:	ea6f 020c 	mvn.w	r2, ip
 800a260:	ebcc 0909 	rsb	r9, ip, r9
 800a264:	4493      	add	fp, r2
 800a266:	05f8      	lsls	r0, r7, #23
 800a268:	d51c      	bpl.n	800a2a4 <__ssvfscanf_r+0x8e4>
 800a26a:	0579      	lsls	r1, r7, #21
 800a26c:	f100 829b 	bmi.w	800a7a6 <__ssvfscanf_r+0xde6>
 800a270:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
 800a274:	2965      	cmp	r1, #101	; 0x65
 800a276:	f10b 34ff 	add.w	r4, fp, #4294967295
 800a27a:	f109 3aff 	add.w	sl, r9, #4294967295
 800a27e:	d00b      	beq.n	800a298 <__ssvfscanf_r+0x8d8>
 800a280:	2945      	cmp	r1, #69	; 0x45
 800a282:	d009      	beq.n	800a298 <__ssvfscanf_r+0x8d8>
 800a284:	4630      	mov	r0, r6
 800a286:	462a      	mov	r2, r5
 800a288:	f003 fbea 	bl	800da60 <_sungetc_r>
 800a28c:	f81b 1c02 	ldrb.w	r1, [fp, #-2]
 800a290:	f1a9 0a02 	sub.w	sl, r9, #2
 800a294:	f1ab 0402 	sub.w	r4, fp, #2
 800a298:	4630      	mov	r0, r6
 800a29a:	462a      	mov	r2, r5
 800a29c:	f003 fbe0 	bl	800da60 <_sungetc_r>
 800a2a0:	46d1      	mov	r9, sl
 800a2a2:	46a3      	mov	fp, r4
 800a2a4:	f017 0210 	ands.w	r2, r7, #16
 800a2a8:	f47f aec1 	bne.w	800a02e <__ssvfscanf_r+0x66e>
 800a2ac:	f407 61c0 	and.w	r1, r7, #1536	; 0x600
 800a2b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a2b4:	f88b 2000 	strb.w	r2, [fp]
 800a2b8:	f000 81d3 	beq.w	800a662 <__ssvfscanf_r+0xca2>
 800a2bc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800a2be:	2c00      	cmp	r4, #0
 800a2c0:	f040 816e 	bne.w	800a5a0 <__ssvfscanf_r+0xbe0>
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	9905      	ldr	r1, [sp, #20]
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	f002 f901 	bl	800c4d0 <_strtod_r>
 800a2ce:	07fa      	lsls	r2, r7, #31
 800a2d0:	4682      	mov	sl, r0
 800a2d2:	468b      	mov	fp, r1
 800a2d4:	f100 8132 	bmi.w	800a53c <__ssvfscanf_r+0xb7c>
 800a2d8:	07bb      	lsls	r3, r7, #30
 800a2da:	f140 81e8 	bpl.w	800a6ae <__ssvfscanf_r+0xcee>
 800a2de:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a2e2:	f8dc 3000 	ldr.w	r3, [ip]
 800a2e6:	f10c 0c04 	add.w	ip, ip, #4
 800a2ea:	f8cd c018 	str.w	ip, [sp, #24]
 800a2ee:	e9c3 ab00 	strd	sl, fp, [r3]
 800a2f2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a2f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a2f8:	3401      	adds	r4, #1
 800a2fa:	940b      	str	r4, [sp, #44]	; 0x2c
 800a2fc:	4652      	mov	r2, sl
 800a2fe:	f7ff bba0 	b.w	8009a42 <__ssvfscanf_r+0x82>
 800a302:	f1ba 0f02 	cmp.w	sl, #2
 800a306:	f47f af3a 	bne.w	800a17e <__ssvfscanf_r+0x7be>
 800a30a:	f04f 0a03 	mov.w	sl, #3
 800a30e:	e724      	b.n	800a15a <__ssvfscanf_r+0x79a>
 800a310:	f407 61a0 	and.w	r1, r7, #1280	; 0x500
 800a314:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a318:	d005      	beq.n	800a326 <__ssvfscanf_r+0x966>
 800a31a:	0579      	lsls	r1, r7, #21
 800a31c:	f57f af2f 	bpl.w	800a17e <__ssvfscanf_r+0x7be>
 800a320:	2e00      	cmp	r6, #0
 800a322:	f43f af71 	beq.w	800a208 <__ssvfscanf_r+0x848>
 800a326:	05b9      	lsls	r1, r7, #22
 800a328:	d406      	bmi.n	800a338 <__ssvfscanf_r+0x978>
 800a32a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800a32e:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800a332:	ebcc 0606 	rsb	r6, ip, r6
 800a336:	9610      	str	r6, [sp, #64]	; 0x40
 800a338:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
 800a33c:	f447 77c0 	orr.w	r7, r7, #384	; 0x180
 800a340:	2600      	movs	r6, #0
 800a342:	e70a      	b.n	800a15a <__ssvfscanf_r+0x79a>
 800a344:	2b01      	cmp	r3, #1
 800a346:	f47f af1a 	bne.w	800a17e <__ssvfscanf_r+0x7be>
 800a34a:	2302      	movs	r3, #2
 800a34c:	e705      	b.n	800a15a <__ssvfscanf_r+0x79a>
 800a34e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800a352:	f89c 1000 	ldrb.w	r1, [ip]
 800a356:	4291      	cmp	r1, r2
 800a358:	f47f af11 	bne.w	800a17e <__ssvfscanf_r+0x7be>
 800a35c:	05b9      	lsls	r1, r7, #22
 800a35e:	f57f af0e 	bpl.w	800a17e <__ssvfscanf_r+0x7be>
 800a362:	f427 7720 	bic.w	r7, r7, #640	; 0x280
 800a366:	960a      	str	r6, [sp, #40]	; 0x28
 800a368:	e6f7      	b.n	800a15a <__ssvfscanf_r+0x79a>
 800a36a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a36c:	9303      	str	r3, [sp, #12]
 800a36e:	4629      	mov	r1, r5
 800a370:	f003 fbb6 	bl	800dae0 <__ssrefill_r>
 800a374:	9b03      	ldr	r3, [sp, #12]
 800a376:	2800      	cmp	r0, #0
 800a378:	f47f af01 	bne.w	800a17e <__ssvfscanf_r+0x7be>
 800a37c:	2c00      	cmp	r4, #0
 800a37e:	f47f ae89 	bne.w	800a094 <__ssvfscanf_r+0x6d4>
 800a382:	e6fc      	b.n	800a17e <__ssvfscanf_r+0x7be>
 800a384:	f1ba 0f03 	cmp.w	sl, #3
 800a388:	f43f af2c 	beq.w	800a1e4 <__ssvfscanf_r+0x824>
 800a38c:	f1ba 0f05 	cmp.w	sl, #5
 800a390:	f43f af28 	beq.w	800a1e4 <__ssvfscanf_r+0x824>
 800a394:	e6f3      	b.n	800a17e <__ssvfscanf_r+0x7be>
 800a396:	2b02      	cmp	r3, #2
 800a398:	f47f af1e 	bne.w	800a1d8 <__ssvfscanf_r+0x818>
 800a39c:	2303      	movs	r3, #3
 800a39e:	e6dc      	b.n	800a15a <__ssvfscanf_r+0x79a>
 800a3a0:	9608      	str	r6, [sp, #32]
 800a3a2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a3a4:	f427 7780 	bic.w	r7, r7, #256	; 0x100
 800a3a8:	e730      	b.n	800a20c <__ssvfscanf_r+0x84c>
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	920d      	str	r2, [sp, #52]	; 0x34
 800a3ae:	e65d      	b.n	800a06c <__ssvfscanf_r+0x6ac>
 800a3b0:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a3b4:	f8dc 7000 	ldr.w	r7, [ip]
 800a3b8:	f10c 0204 	add.w	r2, ip, #4
 800a3bc:	9206      	str	r2, [sp, #24]
 800a3be:	46ba      	mov	sl, r7
 800a3c0:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
 800a3c4:	682b      	ldr	r3, [r5, #0]
 800a3c6:	781a      	ldrb	r2, [r3, #0]
 800a3c8:	f81b 2002 	ldrb.w	r2, [fp, r2]
 800a3cc:	1c59      	adds	r1, r3, #1
 800a3ce:	b1a2      	cbz	r2, 800a3fa <__ssvfscanf_r+0xa3a>
 800a3d0:	686a      	ldr	r2, [r5, #4]
 800a3d2:	6029      	str	r1, [r5, #0]
 800a3d4:	3a01      	subs	r2, #1
 800a3d6:	606a      	str	r2, [r5, #4]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	f80a 3b01 	strb.w	r3, [sl], #1
 800a3de:	3c01      	subs	r4, #1
 800a3e0:	d00b      	beq.n	800a3fa <__ssvfscanf_r+0xa3a>
 800a3e2:	686b      	ldr	r3, [r5, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	dced      	bgt.n	800a3c4 <__ssvfscanf_r+0xa04>
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	4629      	mov	r1, r5
 800a3ec:	f003 fb78 	bl	800dae0 <__ssrefill_r>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	d0e7      	beq.n	800a3c4 <__ssvfscanf_r+0xa04>
 800a3f4:	4557      	cmp	r7, sl
 800a3f6:	f43f ad7b 	beq.w	8009ef0 <__ssvfscanf_r+0x530>
 800a3fa:	ebba 0707 	subs.w	r7, sl, r7
 800a3fe:	f43f ab26 	beq.w	8009a4e <__ssvfscanf_r+0x8e>
 800a402:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a404:	2300      	movs	r3, #0
 800a406:	3401      	adds	r4, #1
 800a408:	f88a 3000 	strb.w	r3, [sl]
 800a40c:	940b      	str	r4, [sp, #44]	; 0x2c
 800a40e:	44b9      	add	r9, r7
 800a410:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a414:	e4ae      	b.n	8009d74 <__ssvfscanf_r+0x3b4>
 800a416:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a41a:	f8dc 7000 	ldr.w	r7, [ip]
 800a41e:	f10c 0a04 	add.w	sl, ip, #4
 800a422:	46bb      	mov	fp, r7
 800a424:	682b      	ldr	r3, [r5, #0]
 800a426:	f8d8 2000 	ldr.w	r2, [r8]
 800a42a:	7819      	ldrb	r1, [r3, #0]
 800a42c:	440a      	add	r2, r1
 800a42e:	1c59      	adds	r1, r3, #1
 800a430:	7852      	ldrb	r2, [r2, #1]
 800a432:	0710      	lsls	r0, r2, #28
 800a434:	d411      	bmi.n	800a45a <__ssvfscanf_r+0xa9a>
 800a436:	686a      	ldr	r2, [r5, #4]
 800a438:	6029      	str	r1, [r5, #0]
 800a43a:	3a01      	subs	r2, #1
 800a43c:	606a      	str	r2, [r5, #4]
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	f80b 3b01 	strb.w	r3, [fp], #1
 800a444:	3c01      	subs	r4, #1
 800a446:	d008      	beq.n	800a45a <__ssvfscanf_r+0xa9a>
 800a448:	686b      	ldr	r3, [r5, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	dcea      	bgt.n	800a424 <__ssvfscanf_r+0xa64>
 800a44e:	4630      	mov	r0, r6
 800a450:	4629      	mov	r1, r5
 800a452:	f003 fb45 	bl	800dae0 <__ssrefill_r>
 800a456:	2800      	cmp	r0, #0
 800a458:	d0e4      	beq.n	800a424 <__ssvfscanf_r+0xa64>
 800a45a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a45c:	f8cd a018 	str.w	sl, [sp, #24]
 800a460:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a464:	ebc7 070b 	rsb	r7, r7, fp
 800a468:	2300      	movs	r3, #0
 800a46a:	3401      	adds	r4, #1
 800a46c:	44b9      	add	r9, r7
 800a46e:	940b      	str	r4, [sp, #44]	; 0x2c
 800a470:	f88b 3000 	strb.w	r3, [fp]
 800a474:	4652      	mov	r2, sl
 800a476:	f7ff bae4 	b.w	8009a42 <__ssvfscanf_r+0x82>
 800a47a:	ab14      	add	r3, sp, #80	; 0x50
 800a47c:	4618      	mov	r0, r3
 800a47e:	2100      	movs	r1, #0
 800a480:	2208      	movs	r2, #8
 800a482:	930a      	str	r3, [sp, #40]	; 0x28
 800a484:	f7fd fe84 	bl	8008190 <memset>
 800a488:	f017 0710 	ands.w	r7, r7, #16
 800a48c:	970d      	str	r7, [sp, #52]	; 0x34
 800a48e:	d06c      	beq.n	800a56a <__ssvfscanf_r+0xbaa>
 800a490:	f04f 0a00 	mov.w	sl, #0
 800a494:	9608      	str	r6, [sp, #32]
 800a496:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800a498:	f8cd 9014 	str.w	r9, [sp, #20]
 800a49c:	f04f 0b00 	mov.w	fp, #0
 800a4a0:	af56      	add	r7, sp, #344	; 0x158
 800a4a2:	f001 faaf 	bl	800ba04 <__locale_mb_cur_max>
 800a4a6:	4558      	cmp	r0, fp
 800a4a8:	f43f ad22 	beq.w	8009ef0 <__ssvfscanf_r+0x530>
 800a4ac:	682b      	ldr	r3, [r5, #0]
 800a4ae:	6869      	ldr	r1, [r5, #4]
 800a4b0:	f813 eb01 	ldrb.w	lr, [r3], #1
 800a4b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a4b6:	602b      	str	r3, [r5, #0]
 800a4b8:	3901      	subs	r1, #1
 800a4ba:	f10b 0901 	add.w	r9, fp, #1
 800a4be:	9000      	str	r0, [sp, #0]
 800a4c0:	464b      	mov	r3, r9
 800a4c2:	6069      	str	r1, [r5, #4]
 800a4c4:	9808      	ldr	r0, [sp, #32]
 800a4c6:	f807 e00b 	strb.w	lr, [r7, fp]
 800a4ca:	4651      	mov	r1, sl
 800a4cc:	463a      	mov	r2, r7
 800a4ce:	f001 faa3 	bl	800ba18 <_mbrtowc_r>
 800a4d2:	1c43      	adds	r3, r0, #1
 800a4d4:	f43f ad0c 	beq.w	8009ef0 <__ssvfscanf_r+0x530>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d177      	bne.n	800a5cc <__ssvfscanf_r+0xc0c>
 800a4dc:	b90e      	cbnz	r6, 800a4e2 <__ssvfscanf_r+0xb22>
 800a4de:	f8ca 6000 	str.w	r6, [sl]
 800a4e2:	9905      	ldr	r1, [sp, #20]
 800a4e4:	4449      	add	r1, r9
 800a4e6:	9105      	str	r1, [sp, #20]
 800a4e8:	3c01      	subs	r4, #1
 800a4ea:	2e00      	cmp	r6, #0
 800a4ec:	d172      	bne.n	800a5d4 <__ssvfscanf_r+0xc14>
 800a4ee:	f10a 0a04 	add.w	sl, sl, #4
 800a4f2:	46b3      	mov	fp, r6
 800a4f4:	686b      	ldr	r3, [r5, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	dd2a      	ble.n	800a550 <__ssvfscanf_r+0xb90>
 800a4fa:	2c00      	cmp	r4, #0
 800a4fc:	d1d1      	bne.n	800a4a2 <__ssvfscanf_r+0xae2>
 800a4fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a502:	9e08      	ldr	r6, [sp, #32]
 800a504:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a506:	2c00      	cmp	r4, #0
 800a508:	f43f ad8e 	beq.w	800a028 <__ssvfscanf_r+0x668>
 800a50c:	e58f      	b.n	800a02e <__ssvfscanf_r+0x66e>
 800a50e:	4622      	mov	r2, r4
 800a510:	f88a 4000 	strb.w	r4, [sl]
 800a514:	4630      	mov	r0, r6
 800a516:	9905      	ldr	r1, [sp, #20]
 800a518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a51a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a51c:	47a0      	blx	r4
 800a51e:	06ba      	lsls	r2, r7, #26
 800a520:	d535      	bpl.n	800a58e <__ssvfscanf_r+0xbce>
 800a522:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a526:	f8dc 3000 	ldr.w	r3, [ip]
 800a52a:	f10c 0c04 	add.w	ip, ip, #4
 800a52e:	f8cd c018 	str.w	ip, [sp, #24]
 800a532:	6018      	str	r0, [r3, #0]
 800a534:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a536:	3401      	adds	r4, #1
 800a538:	940b      	str	r4, [sp, #44]	; 0x2c
 800a53a:	e476      	b.n	8009e2a <__ssvfscanf_r+0x46a>
 800a53c:	9c06      	ldr	r4, [sp, #24]
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	3404      	adds	r4, #4
 800a542:	9406      	str	r4, [sp, #24]
 800a544:	e9c3 ab00 	strd	sl, fp, [r3]
 800a548:	e6d3      	b.n	800a2f2 <__ssvfscanf_r+0x932>
 800a54a:	f427 67b0 	bic.w	r7, r7, #1408	; 0x580
 800a54e:	e44b      	b.n	8009de8 <__ssvfscanf_r+0x428>
 800a550:	9808      	ldr	r0, [sp, #32]
 800a552:	4629      	mov	r1, r5
 800a554:	f003 fac4 	bl	800dae0 <__ssrefill_r>
 800a558:	2800      	cmp	r0, #0
 800a55a:	d0ce      	beq.n	800a4fa <__ssvfscanf_r+0xb3a>
 800a55c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a560:	9e08      	ldr	r6, [sp, #32]
 800a562:	f1bb 0f00 	cmp.w	fp, #0
 800a566:	d0cd      	beq.n	800a504 <__ssvfscanf_r+0xb44>
 800a568:	e4c2      	b.n	8009ef0 <__ssvfscanf_r+0x530>
 800a56a:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a56e:	f8dc a000 	ldr.w	sl, [ip]
 800a572:	f10c 0c04 	add.w	ip, ip, #4
 800a576:	f8cd c018 	str.w	ip, [sp, #24]
 800a57a:	e78b      	b.n	800a494 <__ssvfscanf_r+0xad4>
 800a57c:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a580:	f8dc a000 	ldr.w	sl, [ip]
 800a584:	f10c 0c04 	add.w	ip, ip, #4
 800a588:	f8cd c018 	str.w	ip, [sp, #24]
 800a58c:	e53b      	b.n	800a006 <__ssvfscanf_r+0x646>
 800a58e:	077b      	lsls	r3, r7, #29
 800a590:	f140 809b 	bpl.w	800a6ca <__ssvfscanf_r+0xd0a>
 800a594:	9c06      	ldr	r4, [sp, #24]
 800a596:	6823      	ldr	r3, [r4, #0]
 800a598:	3404      	adds	r4, #4
 800a59a:	9406      	str	r4, [sp, #24]
 800a59c:	8018      	strh	r0, [r3, #0]
 800a59e:	e7c9      	b.n	800a534 <__ssvfscanf_r+0xb74>
 800a5a0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	f10c 0101 	add.w	r1, ip, #1
 800a5aa:	230a      	movs	r3, #10
 800a5ac:	f002 ff28 	bl	800d400 <_strtol_r>
 800a5b0:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800a5b4:	1b02      	subs	r2, r0, r4
 800a5b6:	f20d 21ab 	addw	r1, sp, #683	; 0x2ab
 800a5ba:	458b      	cmp	fp, r1
 800a5bc:	bf28      	it	cs
 800a5be:	f20d 2baa 	addwcs	fp, sp, #682	; 0x2aa
 800a5c2:	4658      	mov	r0, fp
 800a5c4:	499b      	ldr	r1, [pc, #620]	; (800a834 <__ssvfscanf_r+0xe74>)
 800a5c6:	f7fd fe43 	bl	8008250 <sprintf>
 800a5ca:	e67b      	b.n	800a2c4 <__ssvfscanf_r+0x904>
 800a5cc:	3002      	adds	r0, #2
 800a5ce:	d188      	bne.n	800a4e2 <__ssvfscanf_r+0xb22>
 800a5d0:	46cb      	mov	fp, r9
 800a5d2:	e78f      	b.n	800a4f4 <__ssvfscanf_r+0xb34>
 800a5d4:	f04f 0b00 	mov.w	fp, #0
 800a5d8:	e78c      	b.n	800a4f4 <__ssvfscanf_r+0xb34>
 800a5da:	2f00      	cmp	r7, #0
 800a5dc:	f43f ac88 	beq.w	8009ef0 <__ssvfscanf_r+0x530>
 800a5e0:	44b9      	add	r9, r7
 800a5e2:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a5e6:	f7ff bbc5 	b.w	8009d74 <__ssvfscanf_r+0x3b4>
 800a5ea:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a5ee:	4623      	mov	r3, r4
 800a5f0:	f8dc 1000 	ldr.w	r1, [ip]
 800a5f4:	9500      	str	r5, [sp, #0]
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	f003 fa8f 	bl	800db1c <_sfread_r>
 800a5fe:	9c06      	ldr	r4, [sp, #24]
 800a600:	1d23      	adds	r3, r4, #4
 800a602:	2800      	cmp	r0, #0
 800a604:	f43f ac74 	beq.w	8009ef0 <__ssvfscanf_r+0x530>
 800a608:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a60a:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a60e:	9306      	str	r3, [sp, #24]
 800a610:	3401      	adds	r4, #1
 800a612:	4481      	add	r9, r0
 800a614:	940b      	str	r4, [sp, #44]	; 0x2c
 800a616:	4652      	mov	r2, sl
 800a618:	f7ff ba13 	b.w	8009a42 <__ssvfscanf_r+0x82>
 800a61c:	4630      	mov	r0, r6
 800a61e:	4629      	mov	r1, r5
 800a620:	f003 fa5e 	bl	800dae0 <__ssrefill_r>
 800a624:	2800      	cmp	r0, #0
 800a626:	f43f aaa2 	beq.w	8009b6e <__ssvfscanf_r+0x1ae>
 800a62a:	e461      	b.n	8009ef0 <__ssvfscanf_r+0x530>
 800a62c:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 800a630:	4630      	mov	r0, r6
 800a632:	462a      	mov	r2, r5
 800a634:	f003 fa14 	bl	800da60 <_sungetc_r>
 800a638:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a63c:	f7ff bbec 	b.w	8009e18 <__ssvfscanf_r+0x458>
 800a640:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
 800a644:	f04f 0a01 	mov.w	sl, #1
 800a648:	e587      	b.n	800a15a <__ssvfscanf_r+0x79a>
 800a64a:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
 800a64e:	2301      	movs	r3, #1
 800a650:	e583      	b.n	800a15a <__ssvfscanf_r+0x79a>
 800a652:	f89a 3002 	ldrb.w	r3, [sl, #2]
 800a656:	f047 0702 	orr.w	r7, r7, #2
 800a65a:	f10a 0a02 	add.w	sl, sl, #2
 800a65e:	f7ff ba00 	b.w	8009a62 <__ssvfscanf_r+0xa2>
 800a662:	9b08      	ldr	r3, [sp, #32]
 800a664:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a666:	1b19      	subs	r1, r3, r4
 800a668:	424a      	negs	r2, r1
 800a66a:	2900      	cmp	r1, #0
 800a66c:	d1a3      	bne.n	800a5b6 <__ssvfscanf_r+0xbf6>
 800a66e:	e629      	b.n	800a2c4 <__ssvfscanf_r+0x904>
 800a670:	07fc      	lsls	r4, r7, #31
 800a672:	d40e      	bmi.n	800a692 <__ssvfscanf_r+0xcd2>
 800a674:	07b8      	lsls	r0, r7, #30
 800a676:	d50c      	bpl.n	800a692 <__ssvfscanf_r+0xcd2>
 800a678:	9c06      	ldr	r4, [sp, #24]
 800a67a:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a67e:	6821      	ldr	r1, [r4, #0]
 800a680:	464a      	mov	r2, r9
 800a682:	ea4f 73e9 	mov.w	r3, r9, asr #31
 800a686:	3404      	adds	r4, #4
 800a688:	9406      	str	r4, [sp, #24]
 800a68a:	e9c1 2300 	strd	r2, r3, [r1]
 800a68e:	f7ff b9d7 	b.w	8009a40 <__ssvfscanf_r+0x80>
 800a692:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a696:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a69a:	f8dc 3000 	ldr.w	r3, [ip]
 800a69e:	f10c 0c04 	add.w	ip, ip, #4
 800a6a2:	f8c3 9000 	str.w	r9, [r3]
 800a6a6:	f8cd c018 	str.w	ip, [sp, #24]
 800a6aa:	f7ff b9c9 	b.w	8009a40 <__ssvfscanf_r+0x80>
 800a6ae:	9c06      	ldr	r4, [sp, #24]
 800a6b0:	1d27      	adds	r7, r4, #4
 800a6b2:	6824      	ldr	r4, [r4, #0]
 800a6b4:	f001 fe88 	bl	800c3c8 <__fpclassifyd>
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	d056      	beq.n	800a76a <__ssvfscanf_r+0xdaa>
 800a6bc:	4650      	mov	r0, sl
 800a6be:	4659      	mov	r1, fp
 800a6c0:	f7f6 f960 	bl	8000984 <__aeabi_d2f>
 800a6c4:	9706      	str	r7, [sp, #24]
 800a6c6:	6020      	str	r0, [r4, #0]
 800a6c8:	e613      	b.n	800a2f2 <__ssvfscanf_r+0x932>
 800a6ca:	f017 0201 	ands.w	r2, r7, #1
 800a6ce:	f47f af28 	bne.w	800a522 <__ssvfscanf_r+0xb62>
 800a6d2:	07bc      	lsls	r4, r7, #30
 800a6d4:	f140 8097 	bpl.w	800a806 <__ssvfscanf_r+0xe46>
 800a6d8:	4b57      	ldr	r3, [pc, #348]	; (800a838 <__ssvfscanf_r+0xe78>)
 800a6da:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a6dc:	9905      	ldr	r1, [sp, #20]
 800a6de:	429c      	cmp	r4, r3
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6e4:	f000 80a2 	beq.w	800a82c <__ssvfscanf_r+0xe6c>
 800a6e8:	f002 ff14 	bl	800d514 <_strtoll_r>
 800a6ec:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a6f0:	f8dc 3000 	ldr.w	r3, [ip]
 800a6f4:	f10c 0c04 	add.w	ip, ip, #4
 800a6f8:	f8cd c018 	str.w	ip, [sp, #24]
 800a6fc:	e9c3 0100 	strd	r0, r1, [r3]
 800a700:	e718      	b.n	800a534 <__ssvfscanf_r+0xb74>
 800a702:	9204      	str	r2, [sp, #16]
 800a704:	f001 f97e 	bl	800ba04 <__locale_mb_cur_max>
 800a708:	9a04      	ldr	r2, [sp, #16]
 800a70a:	4290      	cmp	r0, r2
 800a70c:	f43f abf0 	beq.w	8009ef0 <__ssvfscanf_r+0x530>
 800a710:	682b      	ldr	r3, [r5, #0]
 800a712:	6869      	ldr	r1, [r5, #4]
 800a714:	f813 eb01 	ldrb.w	lr, [r3], #1
 800a718:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a71a:	602b      	str	r3, [r5, #0]
 800a71c:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
 800a720:	1c57      	adds	r7, r2, #1
 800a722:	3901      	subs	r1, #1
 800a724:	9000      	str	r0, [sp, #0]
 800a726:	463b      	mov	r3, r7
 800a728:	6069      	str	r1, [r5, #4]
 800a72a:	f80c e002 	strb.w	lr, [ip, r2]
 800a72e:	4630      	mov	r0, r6
 800a730:	4651      	mov	r1, sl
 800a732:	4662      	mov	r2, ip
 800a734:	f001 f970 	bl	800ba18 <_mbrtowc_r>
 800a738:	1c43      	adds	r3, r0, #1
 800a73a:	f43f abd9 	beq.w	8009ef0 <__ssvfscanf_r+0x530>
 800a73e:	b9c8      	cbnz	r0, 800a774 <__ssvfscanf_r+0xdb4>
 800a740:	f8ca 0000 	str.w	r0, [sl]
 800a744:	f001 f94c 	bl	800b9e0 <iswspace>
 800a748:	2800      	cmp	r0, #0
 800a74a:	d053      	beq.n	800a7f4 <__ssvfscanf_r+0xe34>
 800a74c:	2f00      	cmp	r7, #0
 800a74e:	f43f ac66 	beq.w	800a01e <__ssvfscanf_r+0x65e>
 800a752:	ac56      	add	r4, sp, #344	; 0x158
 800a754:	443c      	add	r4, r7
 800a756:	3f01      	subs	r7, #1
 800a758:	4630      	mov	r0, r6
 800a75a:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 800a75e:	462a      	mov	r2, r5
 800a760:	f003 f97e 	bl	800da60 <_sungetc_r>
 800a764:	2f00      	cmp	r7, #0
 800a766:	d1f6      	bne.n	800a756 <__ssvfscanf_r+0xd96>
 800a768:	e459      	b.n	800a01e <__ssvfscanf_r+0x65e>
 800a76a:	f001 fe8d 	bl	800c488 <nanf>
 800a76e:	9706      	str	r7, [sp, #24]
 800a770:	6020      	str	r0, [r4, #0]
 800a772:	e5be      	b.n	800a2f2 <__ssvfscanf_r+0x932>
 800a774:	3002      	adds	r0, #2
 800a776:	d128      	bne.n	800a7ca <__ssvfscanf_r+0xe0a>
 800a778:	686b      	ldr	r3, [r5, #4]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	dd4b      	ble.n	800a816 <__ssvfscanf_r+0xe56>
 800a77e:	463a      	mov	r2, r7
 800a780:	e442      	b.n	800a008 <__ssvfscanf_r+0x648>
 800a782:	9c05      	ldr	r4, [sp, #20]
 800a784:	45a3      	cmp	fp, r4
 800a786:	bf88      	it	hi
 800a788:	465c      	movhi	r4, fp
 800a78a:	f67f a960 	bls.w	8009a4e <__ssvfscanf_r+0x8e>
 800a78e:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 800a792:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a794:	462a      	mov	r2, r5
 800a796:	f003 f963 	bl	800da60 <_sungetc_r>
 800a79a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a79e:	454c      	cmp	r4, r9
 800a7a0:	d1f5      	bne.n	800a78e <__ssvfscanf_r+0xdce>
 800a7a2:	f7ff b954 	b.w	8009a4e <__ssvfscanf_r+0x8e>
 800a7a6:	f8dd c014 	ldr.w	ip, [sp, #20]
 800a7aa:	45e3      	cmp	fp, ip
 800a7ac:	f67f a94f 	bls.w	8009a4e <__ssvfscanf_r+0x8e>
 800a7b0:	465c      	mov	r4, fp
 800a7b2:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 800a7b6:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a7b8:	462a      	mov	r2, r5
 800a7ba:	f003 f951 	bl	800da60 <_sungetc_r>
 800a7be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a7c2:	454c      	cmp	r4, r9
 800a7c4:	d1f5      	bne.n	800a7b2 <__ssvfscanf_r+0xdf2>
 800a7c6:	f7ff b942 	b.w	8009a4e <__ssvfscanf_r+0x8e>
 800a7ca:	f8da 0000 	ldr.w	r0, [sl]
 800a7ce:	e7b9      	b.n	800a744 <__ssvfscanf_r+0xd84>
 800a7d0:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a7d4:	45cb      	cmp	fp, r9
 800a7d6:	f67f a93a 	bls.w	8009a4e <__ssvfscanf_r+0x8e>
 800a7da:	465c      	mov	r4, fp
 800a7dc:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 800a7e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a7e2:	462a      	mov	r2, r5
 800a7e4:	f003 f93c 	bl	800da60 <_sungetc_r>
 800a7e8:	f8dd c014 	ldr.w	ip, [sp, #20]
 800a7ec:	4564      	cmp	r4, ip
 800a7ee:	d1f5      	bne.n	800a7dc <__ssvfscanf_r+0xe1c>
 800a7f0:	f7ff b92d 	b.w	8009a4e <__ssvfscanf_r+0x8e>
 800a7f4:	44b9      	add	r9, r7
 800a7f6:	3c01      	subs	r4, #1
 800a7f8:	f1bb 0f00 	cmp.w	fp, #0
 800a7fc:	d109      	bne.n	800a812 <__ssvfscanf_r+0xe52>
 800a7fe:	f10a 0a04 	add.w	sl, sl, #4
 800a802:	465f      	mov	r7, fp
 800a804:	e7b8      	b.n	800a778 <__ssvfscanf_r+0xdb8>
 800a806:	9c06      	ldr	r4, [sp, #24]
 800a808:	6823      	ldr	r3, [r4, #0]
 800a80a:	3404      	adds	r4, #4
 800a80c:	9406      	str	r4, [sp, #24]
 800a80e:	6018      	str	r0, [r3, #0]
 800a810:	e690      	b.n	800a534 <__ssvfscanf_r+0xb74>
 800a812:	4607      	mov	r7, r0
 800a814:	e7b0      	b.n	800a778 <__ssvfscanf_r+0xdb8>
 800a816:	4630      	mov	r0, r6
 800a818:	4629      	mov	r1, r5
 800a81a:	f003 f961 	bl	800dae0 <__ssrefill_r>
 800a81e:	2800      	cmp	r0, #0
 800a820:	d0ad      	beq.n	800a77e <__ssvfscanf_r+0xdbe>
 800a822:	2f00      	cmp	r7, #0
 800a824:	f47f ab64 	bne.w	8009ef0 <__ssvfscanf_r+0x530>
 800a828:	f7ff bbf9 	b.w	800a01e <__ssvfscanf_r+0x65e>
 800a82c:	f002 ffd0 	bl	800d7d0 <_strtoull_r>
 800a830:	e75c      	b.n	800a6ec <__ssvfscanf_r+0xd2c>
 800a832:	bf00      	nop
 800a834:	0800efcc 	.word	0x0800efcc
 800a838:	0800d6b1 	.word	0x0800d6b1

0800a83c <quorem>:
 800a83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a840:	6903      	ldr	r3, [r0, #16]
 800a842:	690d      	ldr	r5, [r1, #16]
 800a844:	429d      	cmp	r5, r3
 800a846:	b083      	sub	sp, #12
 800a848:	4683      	mov	fp, r0
 800a84a:	f300 808b 	bgt.w	800a964 <quorem+0x128>
 800a84e:	3d01      	subs	r5, #1
 800a850:	f101 0414 	add.w	r4, r1, #20
 800a854:	f100 0a14 	add.w	sl, r0, #20
 800a858:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 800a85c:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 800a860:	3201      	adds	r2, #1
 800a862:	fbb3 f8f2 	udiv	r8, r3, r2
 800a866:	00aa      	lsls	r2, r5, #2
 800a868:	4691      	mov	r9, r2
 800a86a:	9200      	str	r2, [sp, #0]
 800a86c:	4452      	add	r2, sl
 800a86e:	44a1      	add	r9, r4
 800a870:	9201      	str	r2, [sp, #4]
 800a872:	f1b8 0f00 	cmp.w	r8, #0
 800a876:	d03d      	beq.n	800a8f4 <quorem+0xb8>
 800a878:	f04f 0e00 	mov.w	lr, #0
 800a87c:	4670      	mov	r0, lr
 800a87e:	4622      	mov	r2, r4
 800a880:	4653      	mov	r3, sl
 800a882:	468c      	mov	ip, r1
 800a884:	f852 6b04 	ldr.w	r6, [r2], #4
 800a888:	6819      	ldr	r1, [r3, #0]
 800a88a:	b2b7      	uxth	r7, r6
 800a88c:	0c36      	lsrs	r6, r6, #16
 800a88e:	fb07 ee08 	mla	lr, r7, r8, lr
 800a892:	fb06 f608 	mul.w	r6, r6, r8
 800a896:	eb06 461e 	add.w	r6, r6, lr, lsr #16
 800a89a:	fa1f f78e 	uxth.w	r7, lr
 800a89e:	1bc7      	subs	r7, r0, r7
 800a8a0:	b2b0      	uxth	r0, r6
 800a8a2:	fa17 f781 	uxtah	r7, r7, r1
 800a8a6:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
 800a8aa:	eb00 4027 	add.w	r0, r0, r7, asr #16
 800a8ae:	b2bf      	uxth	r7, r7
 800a8b0:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
 800a8b4:	4591      	cmp	r9, r2
 800a8b6:	f843 7b04 	str.w	r7, [r3], #4
 800a8ba:	ea4f 4020 	mov.w	r0, r0, asr #16
 800a8be:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800a8c2:	d2df      	bcs.n	800a884 <quorem+0x48>
 800a8c4:	9a00      	ldr	r2, [sp, #0]
 800a8c6:	f85a 3002 	ldr.w	r3, [sl, r2]
 800a8ca:	4661      	mov	r1, ip
 800a8cc:	b993      	cbnz	r3, 800a8f4 <quorem+0xb8>
 800a8ce:	9a01      	ldr	r2, [sp, #4]
 800a8d0:	1f13      	subs	r3, r2, #4
 800a8d2:	459a      	cmp	sl, r3
 800a8d4:	d20c      	bcs.n	800a8f0 <quorem+0xb4>
 800a8d6:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800a8da:	b94b      	cbnz	r3, 800a8f0 <quorem+0xb4>
 800a8dc:	f1a2 0308 	sub.w	r3, r2, #8
 800a8e0:	e002      	b.n	800a8e8 <quorem+0xac>
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	3b04      	subs	r3, #4
 800a8e6:	b91a      	cbnz	r2, 800a8f0 <quorem+0xb4>
 800a8e8:	459a      	cmp	sl, r3
 800a8ea:	f105 35ff 	add.w	r5, r5, #4294967295
 800a8ee:	d3f8      	bcc.n	800a8e2 <quorem+0xa6>
 800a8f0:	f8cb 5010 	str.w	r5, [fp, #16]
 800a8f4:	4658      	mov	r0, fp
 800a8f6:	f001 fb85 	bl	800c004 <__mcmp>
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	db2e      	blt.n	800a95c <quorem+0x120>
 800a8fe:	f108 0801 	add.w	r8, r8, #1
 800a902:	4653      	mov	r3, sl
 800a904:	2200      	movs	r2, #0
 800a906:	f854 6b04 	ldr.w	r6, [r4], #4
 800a90a:	6818      	ldr	r0, [r3, #0]
 800a90c:	b2b1      	uxth	r1, r6
 800a90e:	1a52      	subs	r2, r2, r1
 800a910:	0c36      	lsrs	r6, r6, #16
 800a912:	fa12 f180 	uxtah	r1, r2, r0
 800a916:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
 800a91a:	eb02 4221 	add.w	r2, r2, r1, asr #16
 800a91e:	b289      	uxth	r1, r1
 800a920:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a924:	45a1      	cmp	r9, r4
 800a926:	f843 1b04 	str.w	r1, [r3], #4
 800a92a:	ea4f 4222 	mov.w	r2, r2, asr #16
 800a92e:	d2ea      	bcs.n	800a906 <quorem+0xca>
 800a930:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
 800a934:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
 800a938:	b982      	cbnz	r2, 800a95c <quorem+0x120>
 800a93a:	1f1a      	subs	r2, r3, #4
 800a93c:	4592      	cmp	sl, r2
 800a93e:	d20b      	bcs.n	800a958 <quorem+0x11c>
 800a940:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800a944:	b942      	cbnz	r2, 800a958 <quorem+0x11c>
 800a946:	3b08      	subs	r3, #8
 800a948:	e002      	b.n	800a950 <quorem+0x114>
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	3b04      	subs	r3, #4
 800a94e:	b91a      	cbnz	r2, 800a958 <quorem+0x11c>
 800a950:	459a      	cmp	sl, r3
 800a952:	f105 35ff 	add.w	r5, r5, #4294967295
 800a956:	d3f8      	bcc.n	800a94a <quorem+0x10e>
 800a958:	f8cb 5010 	str.w	r5, [fp, #16]
 800a95c:	4640      	mov	r0, r8
 800a95e:	b003      	add	sp, #12
 800a960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a964:	2000      	movs	r0, #0
 800a966:	b003      	add	sp, #12
 800a968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a96c:	0000      	movs	r0, r0
	...

0800a970 <_dtoa_r>:
 800a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a974:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a976:	b09b      	sub	sp, #108	; 0x6c
 800a978:	4604      	mov	r4, r0
 800a97a:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800a97c:	4692      	mov	sl, r2
 800a97e:	469b      	mov	fp, r3
 800a980:	b149      	cbz	r1, 800a996 <_dtoa_r+0x26>
 800a982:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a984:	604b      	str	r3, [r1, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	fa02 f303 	lsl.w	r3, r2, r3
 800a98c:	608b      	str	r3, [r1, #8]
 800a98e:	f001 f8f5 	bl	800bb7c <_Bfree>
 800a992:	2300      	movs	r3, #0
 800a994:	6423      	str	r3, [r4, #64]	; 0x40
 800a996:	f1bb 0f00 	cmp.w	fp, #0
 800a99a:	46d9      	mov	r9, fp
 800a99c:	db33      	blt.n	800aa06 <_dtoa_r+0x96>
 800a99e:	2300      	movs	r3, #0
 800a9a0:	602b      	str	r3, [r5, #0]
 800a9a2:	4ba5      	ldr	r3, [pc, #660]	; (800ac38 <_dtoa_r+0x2c8>)
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	ea09 0303 	and.w	r3, r9, r3
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d014      	beq.n	800a9d8 <_dtoa_r+0x68>
 800a9ae:	4650      	mov	r0, sl
 800a9b0:	4659      	mov	r1, fp
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	f7f6 fb83 	bl	80010c0 <__aeabi_dcmpeq>
 800a9ba:	4680      	mov	r8, r0
 800a9bc:	b348      	cbz	r0, 800aa12 <_dtoa_r+0xa2>
 800a9be:	9e26      	ldr	r6, [sp, #152]	; 0x98
 800a9c0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	6033      	str	r3, [r6, #0]
 800a9c6:	2d00      	cmp	r5, #0
 800a9c8:	f000 80c9 	beq.w	800ab5e <_dtoa_r+0x1ee>
 800a9cc:	489b      	ldr	r0, [pc, #620]	; (800ac3c <_dtoa_r+0x2cc>)
 800a9ce:	6028      	str	r0, [r5, #0]
 800a9d0:	3801      	subs	r0, #1
 800a9d2:	b01b      	add	sp, #108	; 0x6c
 800a9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d8:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800a9da:	f242 730f 	movw	r3, #9999	; 0x270f
 800a9de:	602b      	str	r3, [r5, #0]
 800a9e0:	f1ba 0f00 	cmp.w	sl, #0
 800a9e4:	f000 80a4 	beq.w	800ab30 <_dtoa_r+0x1c0>
 800a9e8:	4895      	ldr	r0, [pc, #596]	; (800ac40 <_dtoa_r+0x2d0>)
 800a9ea:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800a9ec:	2e00      	cmp	r6, #0
 800a9ee:	d0f0      	beq.n	800a9d2 <_dtoa_r+0x62>
 800a9f0:	78c3      	ldrb	r3, [r0, #3]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	f000 80b5 	beq.w	800ab62 <_dtoa_r+0x1f2>
 800a9f8:	f100 0308 	add.w	r3, r0, #8
 800a9fc:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800a9fe:	602b      	str	r3, [r5, #0]
 800aa00:	b01b      	add	sp, #108	; 0x6c
 800aa02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa06:	2301      	movs	r3, #1
 800aa08:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
 800aa0c:	602b      	str	r3, [r5, #0]
 800aa0e:	46cb      	mov	fp, r9
 800aa10:	e7c7      	b.n	800a9a2 <_dtoa_r+0x32>
 800aa12:	aa19      	add	r2, sp, #100	; 0x64
 800aa14:	ab18      	add	r3, sp, #96	; 0x60
 800aa16:	e88d 000c 	stmia.w	sp, {r2, r3}
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	4652      	mov	r2, sl
 800aa1e:	465b      	mov	r3, fp
 800aa20:	f001 fbf8 	bl	800c214 <__d2b>
 800aa24:	ea5f 5519 	movs.w	r5, r9, lsr #20
 800aa28:	900a      	str	r0, [sp, #40]	; 0x28
 800aa2a:	f040 808a 	bne.w	800ab42 <_dtoa_r+0x1d2>
 800aa2e:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800aa30:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800aa32:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 800aa36:	443d      	add	r5, r7
 800aa38:	429d      	cmp	r5, r3
 800aa3a:	f2c0 8294 	blt.w	800af66 <_dtoa_r+0x5f6>
 800aa3e:	331f      	adds	r3, #31
 800aa40:	f205 4212 	addw	r2, r5, #1042	; 0x412
 800aa44:	1b5b      	subs	r3, r3, r5
 800aa46:	fa09 f303 	lsl.w	r3, r9, r3
 800aa4a:	fa2a f202 	lsr.w	r2, sl, r2
 800aa4e:	ea43 0002 	orr.w	r0, r3, r2
 800aa52:	f7f5 fcef 	bl	8000434 <__aeabi_ui2d>
 800aa56:	2601      	movs	r6, #1
 800aa58:	3d01      	subs	r5, #1
 800aa5a:	46b8      	mov	r8, r7
 800aa5c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800aa60:	9616      	str	r6, [sp, #88]	; 0x58
 800aa62:	2200      	movs	r2, #0
 800aa64:	4b77      	ldr	r3, [pc, #476]	; (800ac44 <_dtoa_r+0x2d4>)
 800aa66:	f7f5 fba7 	bl	80001b8 <__aeabi_dsub>
 800aa6a:	a36d      	add	r3, pc, #436	; (adr r3, 800ac20 <_dtoa_r+0x2b0>)
 800aa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa70:	f7f5 fd56 	bl	8000520 <__aeabi_dmul>
 800aa74:	a36c      	add	r3, pc, #432	; (adr r3, 800ac28 <_dtoa_r+0x2b8>)
 800aa76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7a:	f7f5 fb9f 	bl	80001bc <__adddf3>
 800aa7e:	4606      	mov	r6, r0
 800aa80:	4628      	mov	r0, r5
 800aa82:	460f      	mov	r7, r1
 800aa84:	f7f5 fce6 	bl	8000454 <__aeabi_i2d>
 800aa88:	a369      	add	r3, pc, #420	; (adr r3, 800ac30 <_dtoa_r+0x2c0>)
 800aa8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8e:	f7f5 fd47 	bl	8000520 <__aeabi_dmul>
 800aa92:	4602      	mov	r2, r0
 800aa94:	460b      	mov	r3, r1
 800aa96:	4630      	mov	r0, r6
 800aa98:	4639      	mov	r1, r7
 800aa9a:	f7f5 fb8f 	bl	80001bc <__adddf3>
 800aa9e:	4606      	mov	r6, r0
 800aaa0:	460f      	mov	r7, r1
 800aaa2:	f7f6 fb3f 	bl	8001124 <__aeabi_d2iz>
 800aaa6:	4639      	mov	r1, r7
 800aaa8:	9007      	str	r0, [sp, #28]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	4630      	mov	r0, r6
 800aaae:	2300      	movs	r3, #0
 800aab0:	f7f6 fb10 	bl	80010d4 <__aeabi_dcmplt>
 800aab4:	2800      	cmp	r0, #0
 800aab6:	f040 8228 	bne.w	800af0a <_dtoa_r+0x59a>
 800aaba:	9e07      	ldr	r6, [sp, #28]
 800aabc:	2e16      	cmp	r6, #22
 800aabe:	f200 8221 	bhi.w	800af04 <_dtoa_r+0x594>
 800aac2:	4b61      	ldr	r3, [pc, #388]	; (800ac48 <_dtoa_r+0x2d8>)
 800aac4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aac8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aacc:	4652      	mov	r2, sl
 800aace:	465b      	mov	r3, fp
 800aad0:	f7f6 fb1e 	bl	8001110 <__aeabi_dcmpgt>
 800aad4:	2800      	cmp	r0, #0
 800aad6:	f000 824b 	beq.w	800af70 <_dtoa_r+0x600>
 800aada:	3e01      	subs	r6, #1
 800aadc:	9607      	str	r6, [sp, #28]
 800aade:	2600      	movs	r6, #0
 800aae0:	960e      	str	r6, [sp, #56]	; 0x38
 800aae2:	ebc5 0508 	rsb	r5, r5, r8
 800aae6:	3d01      	subs	r5, #1
 800aae8:	9506      	str	r5, [sp, #24]
 800aaea:	f100 8225 	bmi.w	800af38 <_dtoa_r+0x5c8>
 800aaee:	2500      	movs	r5, #0
 800aaf0:	9508      	str	r5, [sp, #32]
 800aaf2:	9e07      	ldr	r6, [sp, #28]
 800aaf4:	2e00      	cmp	r6, #0
 800aaf6:	f2c0 8216 	blt.w	800af26 <_dtoa_r+0x5b6>
 800aafa:	9d06      	ldr	r5, [sp, #24]
 800aafc:	960d      	str	r6, [sp, #52]	; 0x34
 800aafe:	4435      	add	r5, r6
 800ab00:	2600      	movs	r6, #0
 800ab02:	9506      	str	r5, [sp, #24]
 800ab04:	960c      	str	r6, [sp, #48]	; 0x30
 800ab06:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800ab08:	2d09      	cmp	r5, #9
 800ab0a:	d82c      	bhi.n	800ab66 <_dtoa_r+0x1f6>
 800ab0c:	2d05      	cmp	r5, #5
 800ab0e:	bfc4      	itt	gt
 800ab10:	3d04      	subgt	r5, #4
 800ab12:	9524      	strgt	r5, [sp, #144]	; 0x90
 800ab14:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800ab16:	f1a6 0302 	sub.w	r3, r6, #2
 800ab1a:	bfcc      	ite	gt
 800ab1c:	2500      	movgt	r5, #0
 800ab1e:	2501      	movle	r5, #1
 800ab20:	2b03      	cmp	r3, #3
 800ab22:	d822      	bhi.n	800ab6a <_dtoa_r+0x1fa>
 800ab24:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ab28:	029e03b7 	.word	0x029e03b7
 800ab2c:	049a03c0 	.word	0x049a03c0
 800ab30:	4a46      	ldr	r2, [pc, #280]	; (800ac4c <_dtoa_r+0x2dc>)
 800ab32:	4b43      	ldr	r3, [pc, #268]	; (800ac40 <_dtoa_r+0x2d0>)
 800ab34:	f3c9 0013 	ubfx	r0, r9, #0, #20
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	bf0c      	ite	eq
 800ab3c:	4610      	moveq	r0, r2
 800ab3e:	4618      	movne	r0, r3
 800ab40:	e753      	b.n	800a9ea <_dtoa_r+0x7a>
 800ab42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab46:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800ab4a:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
 800ab4e:	4650      	mov	r0, sl
 800ab50:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ab54:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ab58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ab5c:	e781      	b.n	800aa62 <_dtoa_r+0xf2>
 800ab5e:	483c      	ldr	r0, [pc, #240]	; (800ac50 <_dtoa_r+0x2e0>)
 800ab60:	e737      	b.n	800a9d2 <_dtoa_r+0x62>
 800ab62:	1cc3      	adds	r3, r0, #3
 800ab64:	e74a      	b.n	800a9fc <_dtoa_r+0x8c>
 800ab66:	2500      	movs	r5, #0
 800ab68:	9524      	str	r5, [sp, #144]	; 0x90
 800ab6a:	2500      	movs	r5, #0
 800ab6c:	6465      	str	r5, [r4, #68]	; 0x44
 800ab6e:	4629      	mov	r1, r5
 800ab70:	4620      	mov	r0, r4
 800ab72:	f000 ffdd 	bl	800bb30 <_Balloc>
 800ab76:	f04f 39ff 	mov.w	r9, #4294967295
 800ab7a:	2601      	movs	r6, #1
 800ab7c:	9009      	str	r0, [sp, #36]	; 0x24
 800ab7e:	9525      	str	r5, [sp, #148]	; 0x94
 800ab80:	6420      	str	r0, [r4, #64]	; 0x40
 800ab82:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800ab86:	960b      	str	r6, [sp, #44]	; 0x2c
 800ab88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	f2c0 80d2 	blt.w	800ad34 <_dtoa_r+0x3c4>
 800ab90:	9e07      	ldr	r6, [sp, #28]
 800ab92:	2e0e      	cmp	r6, #14
 800ab94:	f300 80ce 	bgt.w	800ad34 <_dtoa_r+0x3c4>
 800ab98:	4b2b      	ldr	r3, [pc, #172]	; (800ac48 <_dtoa_r+0x2d8>)
 800ab9a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ab9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aba2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aba6:	9925      	ldr	r1, [sp, #148]	; 0x94
 800aba8:	2900      	cmp	r1, #0
 800abaa:	f2c0 8380 	blt.w	800b2ae <_dtoa_r+0x93e>
 800abae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abb2:	4659      	mov	r1, fp
 800abb4:	4650      	mov	r0, sl
 800abb6:	f7f5 fddd 	bl	8000774 <__aeabi_ddiv>
 800abba:	f7f6 fab3 	bl	8001124 <__aeabi_d2iz>
 800abbe:	4605      	mov	r5, r0
 800abc0:	f7f5 fc48 	bl	8000454 <__aeabi_i2d>
 800abc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abc8:	f7f5 fcaa 	bl	8000520 <__aeabi_dmul>
 800abcc:	4602      	mov	r2, r0
 800abce:	460b      	mov	r3, r1
 800abd0:	4650      	mov	r0, sl
 800abd2:	4659      	mov	r1, fp
 800abd4:	f7f5 faf0 	bl	80001b8 <__aeabi_dsub>
 800abd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abda:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800abde:	f1b9 0f01 	cmp.w	r9, #1
 800abe2:	4606      	mov	r6, r0
 800abe4:	460f      	mov	r7, r1
 800abe6:	7013      	strb	r3, [r2, #0]
 800abe8:	f102 0b01 	add.w	fp, r2, #1
 800abec:	d064      	beq.n	800acb8 <_dtoa_r+0x348>
 800abee:	2200      	movs	r2, #0
 800abf0:	4b18      	ldr	r3, [pc, #96]	; (800ac54 <_dtoa_r+0x2e4>)
 800abf2:	f7f5 fc95 	bl	8000520 <__aeabi_dmul>
 800abf6:	2200      	movs	r2, #0
 800abf8:	2300      	movs	r3, #0
 800abfa:	4606      	mov	r6, r0
 800abfc:	460f      	mov	r7, r1
 800abfe:	f7f6 fa5f 	bl	80010c0 <__aeabi_dcmpeq>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	f040 8081 	bne.w	800ad0a <_dtoa_r+0x39a>
 800ac08:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800ac0c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ac0e:	9403      	str	r4, [sp, #12]
 800ac10:	44c8      	add	r8, r9
 800ac12:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ac16:	f105 0902 	add.w	r9, r5, #2
 800ac1a:	e028      	b.n	800ac6e <_dtoa_r+0x2fe>
 800ac1c:	f3af 8000 	nop.w
 800ac20:	636f4361 	.word	0x636f4361
 800ac24:	3fd287a7 	.word	0x3fd287a7
 800ac28:	8b60c8b3 	.word	0x8b60c8b3
 800ac2c:	3fc68a28 	.word	0x3fc68a28
 800ac30:	509f79fb 	.word	0x509f79fb
 800ac34:	3fd34413 	.word	0x3fd34413
 800ac38:	7ff00000 	.word	0x7ff00000
 800ac3c:	0800ef95 	.word	0x0800ef95
 800ac40:	0800f0e4 	.word	0x0800f0e4
 800ac44:	3ff80000 	.word	0x3ff80000
 800ac48:	0800f0f8 	.word	0x0800f0f8
 800ac4c:	0800f0d8 	.word	0x0800f0d8
 800ac50:	0800ef94 	.word	0x0800ef94
 800ac54:	40240000 	.word	0x40240000
 800ac58:	f7f5 fc62 	bl	8000520 <__aeabi_dmul>
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	2300      	movs	r3, #0
 800ac60:	4606      	mov	r6, r0
 800ac62:	460f      	mov	r7, r1
 800ac64:	f7f6 fa2c 	bl	80010c0 <__aeabi_dcmpeq>
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	f040 83c1 	bne.w	800b3f0 <_dtoa_r+0xa80>
 800ac6e:	4652      	mov	r2, sl
 800ac70:	465b      	mov	r3, fp
 800ac72:	4630      	mov	r0, r6
 800ac74:	4639      	mov	r1, r7
 800ac76:	f7f5 fd7d 	bl	8000774 <__aeabi_ddiv>
 800ac7a:	f7f6 fa53 	bl	8001124 <__aeabi_d2iz>
 800ac7e:	4605      	mov	r5, r0
 800ac80:	f7f5 fbe8 	bl	8000454 <__aeabi_i2d>
 800ac84:	4652      	mov	r2, sl
 800ac86:	465b      	mov	r3, fp
 800ac88:	f7f5 fc4a 	bl	8000520 <__aeabi_dmul>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	460b      	mov	r3, r1
 800ac90:	4630      	mov	r0, r6
 800ac92:	4639      	mov	r1, r7
 800ac94:	f7f5 fa90 	bl	80001b8 <__aeabi_dsub>
 800ac98:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800ac9c:	45c1      	cmp	r9, r8
 800ac9e:	f809 ec01 	strb.w	lr, [r9, #-1]
 800aca2:	464c      	mov	r4, r9
 800aca4:	4606      	mov	r6, r0
 800aca6:	460f      	mov	r7, r1
 800aca8:	f04f 0200 	mov.w	r2, #0
 800acac:	4ba7      	ldr	r3, [pc, #668]	; (800af4c <_dtoa_r+0x5dc>)
 800acae:	f109 0901 	add.w	r9, r9, #1
 800acb2:	d1d1      	bne.n	800ac58 <_dtoa_r+0x2e8>
 800acb4:	46a3      	mov	fp, r4
 800acb6:	9c03      	ldr	r4, [sp, #12]
 800acb8:	4632      	mov	r2, r6
 800acba:	463b      	mov	r3, r7
 800acbc:	4630      	mov	r0, r6
 800acbe:	4639      	mov	r1, r7
 800acc0:	f7f5 fa7c 	bl	80001bc <__adddf3>
 800acc4:	4606      	mov	r6, r0
 800acc6:	460f      	mov	r7, r1
 800acc8:	4632      	mov	r2, r6
 800acca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acce:	463b      	mov	r3, r7
 800acd0:	f7f6 fa00 	bl	80010d4 <__aeabi_dcmplt>
 800acd4:	b940      	cbnz	r0, 800ace8 <_dtoa_r+0x378>
 800acd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acda:	4632      	mov	r2, r6
 800acdc:	463b      	mov	r3, r7
 800acde:	f7f6 f9ef 	bl	80010c0 <__aeabi_dcmpeq>
 800ace2:	b190      	cbz	r0, 800ad0a <_dtoa_r+0x39a>
 800ace4:	07eb      	lsls	r3, r5, #31
 800ace6:	d510      	bpl.n	800ad0a <_dtoa_r+0x39a>
 800ace8:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
 800acec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acee:	e005      	b.n	800acfc <_dtoa_r+0x38c>
 800acf0:	429a      	cmp	r2, r3
 800acf2:	f000 8428 	beq.w	800b546 <_dtoa_r+0xbd6>
 800acf6:	f813 5c01 	ldrb.w	r5, [r3, #-1]
 800acfa:	469b      	mov	fp, r3
 800acfc:	2d39      	cmp	r5, #57	; 0x39
 800acfe:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ad02:	d0f5      	beq.n	800acf0 <_dtoa_r+0x380>
 800ad04:	1c6a      	adds	r2, r5, #1
 800ad06:	b2d2      	uxtb	r2, r2
 800ad08:	701a      	strb	r2, [r3, #0]
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ad0e:	f000 ff35 	bl	800bb7c <_Bfree>
 800ad12:	9e07      	ldr	r6, [sp, #28]
 800ad14:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800ad16:	1c73      	adds	r3, r6, #1
 800ad18:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f88b 2000 	strb.w	r2, [fp]
 800ad20:	602b      	str	r3, [r5, #0]
 800ad22:	2e00      	cmp	r6, #0
 800ad24:	f000 8325 	beq.w	800b372 <_dtoa_r+0xa02>
 800ad28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad2a:	f8c6 b000 	str.w	fp, [r6]
 800ad2e:	b01b      	add	sp, #108	; 0x6c
 800ad30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad34:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ad36:	2d00      	cmp	r5, #0
 800ad38:	f000 8103 	beq.w	800af42 <_dtoa_r+0x5d2>
 800ad3c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800ad3e:	2e01      	cmp	r6, #1
 800ad40:	f340 82dc 	ble.w	800b2fc <_dtoa_r+0x98c>
 800ad44:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ad46:	f109 37ff 	add.w	r7, r9, #4294967295
 800ad4a:	42be      	cmp	r6, r7
 800ad4c:	f2c0 8389 	blt.w	800b462 <_dtoa_r+0xaf2>
 800ad50:	1bf7      	subs	r7, r6, r7
 800ad52:	f1b9 0f00 	cmp.w	r9, #0
 800ad56:	f2c0 8486 	blt.w	800b666 <_dtoa_r+0xcf6>
 800ad5a:	9d08      	ldr	r5, [sp, #32]
 800ad5c:	464b      	mov	r3, r9
 800ad5e:	9e08      	ldr	r6, [sp, #32]
 800ad60:	441e      	add	r6, r3
 800ad62:	9608      	str	r6, [sp, #32]
 800ad64:	9e06      	ldr	r6, [sp, #24]
 800ad66:	4620      	mov	r0, r4
 800ad68:	441e      	add	r6, r3
 800ad6a:	2101      	movs	r1, #1
 800ad6c:	9606      	str	r6, [sp, #24]
 800ad6e:	f000 fff5 	bl	800bd5c <__i2b>
 800ad72:	4606      	mov	r6, r0
 800ad74:	b165      	cbz	r5, 800ad90 <_dtoa_r+0x420>
 800ad76:	9806      	ldr	r0, [sp, #24]
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	dd09      	ble.n	800ad90 <_dtoa_r+0x420>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	9908      	ldr	r1, [sp, #32]
 800ad80:	42ab      	cmp	r3, r5
 800ad82:	bfa8      	it	ge
 800ad84:	462b      	movge	r3, r5
 800ad86:	1ac9      	subs	r1, r1, r3
 800ad88:	1ac0      	subs	r0, r0, r3
 800ad8a:	9108      	str	r1, [sp, #32]
 800ad8c:	1aed      	subs	r5, r5, r3
 800ad8e:	9006      	str	r0, [sp, #24]
 800ad90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad92:	2a00      	cmp	r2, #0
 800ad94:	dd1d      	ble.n	800add2 <_dtoa_r+0x462>
 800ad96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	f000 8358 	beq.w	800b44e <_dtoa_r+0xade>
 800ad9e:	2f00      	cmp	r7, #0
 800ada0:	dd11      	ble.n	800adc6 <_dtoa_r+0x456>
 800ada2:	4631      	mov	r1, r6
 800ada4:	463a      	mov	r2, r7
 800ada6:	4620      	mov	r0, r4
 800ada8:	f001 f880 	bl	800beac <__pow5mult>
 800adac:	4606      	mov	r6, r0
 800adae:	4631      	mov	r1, r6
 800adb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adb2:	4620      	mov	r0, r4
 800adb4:	f000 ffdc 	bl	800bd70 <__multiply>
 800adb8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800adba:	4680      	mov	r8, r0
 800adbc:	4620      	mov	r0, r4
 800adbe:	f000 fedd 	bl	800bb7c <_Bfree>
 800adc2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800adc6:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 800adca:	ebbe 0207 	subs.w	r2, lr, r7
 800adce:	f040 828f 	bne.w	800b2f0 <_dtoa_r+0x980>
 800add2:	4620      	mov	r0, r4
 800add4:	2101      	movs	r1, #1
 800add6:	f000 ffc1 	bl	800bd5c <__i2b>
 800adda:	4680      	mov	r8, r0
 800addc:	980d      	ldr	r0, [sp, #52]	; 0x34
 800adde:	2800      	cmp	r0, #0
 800ade0:	dd05      	ble.n	800adee <_dtoa_r+0x47e>
 800ade2:	4641      	mov	r1, r8
 800ade4:	4620      	mov	r0, r4
 800ade6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ade8:	f001 f860 	bl	800beac <__pow5mult>
 800adec:	4680      	mov	r8, r0
 800adee:	9924      	ldr	r1, [sp, #144]	; 0x90
 800adf0:	2901      	cmp	r1, #1
 800adf2:	f340 82c1 	ble.w	800b378 <_dtoa_r+0xa08>
 800adf6:	2700      	movs	r7, #0
 800adf8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800adfa:	2800      	cmp	r0, #0
 800adfc:	f040 82af 	bne.w	800b35e <_dtoa_r+0x9ee>
 800ae00:	2001      	movs	r0, #1
 800ae02:	9b06      	ldr	r3, [sp, #24]
 800ae04:	4403      	add	r3, r0
 800ae06:	f013 031f 	ands.w	r3, r3, #31
 800ae0a:	f000 80a1 	beq.w	800af50 <_dtoa_r+0x5e0>
 800ae0e:	f1c3 0220 	rsb	r2, r3, #32
 800ae12:	2a04      	cmp	r2, #4
 800ae14:	f340 84b5 	ble.w	800b782 <_dtoa_r+0xe12>
 800ae18:	9908      	ldr	r1, [sp, #32]
 800ae1a:	9a06      	ldr	r2, [sp, #24]
 800ae1c:	f1c3 031c 	rsb	r3, r3, #28
 800ae20:	4419      	add	r1, r3
 800ae22:	441a      	add	r2, r3
 800ae24:	9108      	str	r1, [sp, #32]
 800ae26:	441d      	add	r5, r3
 800ae28:	9206      	str	r2, [sp, #24]
 800ae2a:	9908      	ldr	r1, [sp, #32]
 800ae2c:	2900      	cmp	r1, #0
 800ae2e:	dd05      	ble.n	800ae3c <_dtoa_r+0x4cc>
 800ae30:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ae32:	9a08      	ldr	r2, [sp, #32]
 800ae34:	4620      	mov	r0, r4
 800ae36:	f001 f887 	bl	800bf48 <__lshift>
 800ae3a:	900a      	str	r0, [sp, #40]	; 0x28
 800ae3c:	9a06      	ldr	r2, [sp, #24]
 800ae3e:	2a00      	cmp	r2, #0
 800ae40:	dd04      	ble.n	800ae4c <_dtoa_r+0x4dc>
 800ae42:	4641      	mov	r1, r8
 800ae44:	4620      	mov	r0, r4
 800ae46:	f001 f87f 	bl	800bf48 <__lshift>
 800ae4a:	4680      	mov	r8, r0
 800ae4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	f040 826a 	bne.w	800b328 <_dtoa_r+0x9b8>
 800ae54:	f1b9 0f00 	cmp.w	r9, #0
 800ae58:	f340 82a6 	ble.w	800b3a8 <_dtoa_r+0xa38>
 800ae5c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	f040 8088 	bne.w	800af74 <_dtoa_r+0x604>
 800ae64:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ae66:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ae68:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800ae6c:	e006      	b.n	800ae7c <_dtoa_r+0x50c>
 800ae6e:	4639      	mov	r1, r7
 800ae70:	4620      	mov	r0, r4
 800ae72:	220a      	movs	r2, #10
 800ae74:	2300      	movs	r3, #0
 800ae76:	f000 fe8b 	bl	800bb90 <__multadd>
 800ae7a:	4607      	mov	r7, r0
 800ae7c:	4638      	mov	r0, r7
 800ae7e:	4641      	mov	r1, r8
 800ae80:	f7ff fcdc 	bl	800a83c <quorem>
 800ae84:	3030      	adds	r0, #48	; 0x30
 800ae86:	f80b 0005 	strb.w	r0, [fp, r5]
 800ae8a:	3501      	adds	r5, #1
 800ae8c:	45a9      	cmp	r9, r5
 800ae8e:	dcee      	bgt.n	800ae6e <_dtoa_r+0x4fe>
 800ae90:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800ae94:	970a      	str	r7, [sp, #40]	; 0x28
 800ae96:	4682      	mov	sl, r0
 800ae98:	f1b9 0f01 	cmp.w	r9, #1
 800ae9c:	bfac      	ite	ge
 800ae9e:	44cb      	addge	fp, r9
 800aea0:	f10b 0b01 	addlt.w	fp, fp, #1
 800aea4:	2500      	movs	r5, #0
 800aea6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aea8:	2201      	movs	r2, #1
 800aeaa:	4620      	mov	r0, r4
 800aeac:	f001 f84c 	bl	800bf48 <__lshift>
 800aeb0:	4641      	mov	r1, r8
 800aeb2:	900a      	str	r0, [sp, #40]	; 0x28
 800aeb4:	f001 f8a6 	bl	800c004 <__mcmp>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	f340 8309 	ble.w	800b4d0 <_dtoa_r+0xb60>
 800aebe:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 800aec2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aec4:	e005      	b.n	800aed2 <_dtoa_r+0x562>
 800aec6:	4299      	cmp	r1, r3
 800aec8:	f000 828b 	beq.w	800b3e2 <_dtoa_r+0xa72>
 800aecc:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800aed0:	469b      	mov	fp, r3
 800aed2:	2a39      	cmp	r2, #57	; 0x39
 800aed4:	f10b 33ff 	add.w	r3, fp, #4294967295
 800aed8:	d0f5      	beq.n	800aec6 <_dtoa_r+0x556>
 800aeda:	3201      	adds	r2, #1
 800aedc:	701a      	strb	r2, [r3, #0]
 800aede:	4641      	mov	r1, r8
 800aee0:	4620      	mov	r0, r4
 800aee2:	f000 fe4b 	bl	800bb7c <_Bfree>
 800aee6:	2e00      	cmp	r6, #0
 800aee8:	f43f af0f 	beq.w	800ad0a <_dtoa_r+0x39a>
 800aeec:	b12d      	cbz	r5, 800aefa <_dtoa_r+0x58a>
 800aeee:	42b5      	cmp	r5, r6
 800aef0:	d003      	beq.n	800aefa <_dtoa_r+0x58a>
 800aef2:	4629      	mov	r1, r5
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 fe41 	bl	800bb7c <_Bfree>
 800aefa:	4631      	mov	r1, r6
 800aefc:	4620      	mov	r0, r4
 800aefe:	f000 fe3d 	bl	800bb7c <_Bfree>
 800af02:	e702      	b.n	800ad0a <_dtoa_r+0x39a>
 800af04:	2601      	movs	r6, #1
 800af06:	960e      	str	r6, [sp, #56]	; 0x38
 800af08:	e5eb      	b.n	800aae2 <_dtoa_r+0x172>
 800af0a:	9807      	ldr	r0, [sp, #28]
 800af0c:	f7f5 faa2 	bl	8000454 <__aeabi_i2d>
 800af10:	4632      	mov	r2, r6
 800af12:	463b      	mov	r3, r7
 800af14:	f7f6 f8d4 	bl	80010c0 <__aeabi_dcmpeq>
 800af18:	2800      	cmp	r0, #0
 800af1a:	f47f adce 	bne.w	800aaba <_dtoa_r+0x14a>
 800af1e:	9e07      	ldr	r6, [sp, #28]
 800af20:	3e01      	subs	r6, #1
 800af22:	9607      	str	r6, [sp, #28]
 800af24:	e5c9      	b.n	800aaba <_dtoa_r+0x14a>
 800af26:	9e07      	ldr	r6, [sp, #28]
 800af28:	9d08      	ldr	r5, [sp, #32]
 800af2a:	1bad      	subs	r5, r5, r6
 800af2c:	9508      	str	r5, [sp, #32]
 800af2e:	4275      	negs	r5, r6
 800af30:	2600      	movs	r6, #0
 800af32:	950c      	str	r5, [sp, #48]	; 0x30
 800af34:	960d      	str	r6, [sp, #52]	; 0x34
 800af36:	e5e6      	b.n	800ab06 <_dtoa_r+0x196>
 800af38:	426d      	negs	r5, r5
 800af3a:	2600      	movs	r6, #0
 800af3c:	9508      	str	r5, [sp, #32]
 800af3e:	9606      	str	r6, [sp, #24]
 800af40:	e5d7      	b.n	800aaf2 <_dtoa_r+0x182>
 800af42:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800af44:	9d08      	ldr	r5, [sp, #32]
 800af46:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800af48:	e714      	b.n	800ad74 <_dtoa_r+0x404>
 800af4a:	bf00      	nop
 800af4c:	40240000 	.word	0x40240000
 800af50:	231c      	movs	r3, #28
 800af52:	f8dd e020 	ldr.w	lr, [sp, #32]
 800af56:	9806      	ldr	r0, [sp, #24]
 800af58:	449e      	add	lr, r3
 800af5a:	4418      	add	r0, r3
 800af5c:	f8cd e020 	str.w	lr, [sp, #32]
 800af60:	441d      	add	r5, r3
 800af62:	9006      	str	r0, [sp, #24]
 800af64:	e761      	b.n	800ae2a <_dtoa_r+0x4ba>
 800af66:	48a7      	ldr	r0, [pc, #668]	; (800b204 <_dtoa_r+0x894>)
 800af68:	1b40      	subs	r0, r0, r5
 800af6a:	fa0a f000 	lsl.w	r0, sl, r0
 800af6e:	e570      	b.n	800aa52 <_dtoa_r+0xe2>
 800af70:	900e      	str	r0, [sp, #56]	; 0x38
 800af72:	e5b6      	b.n	800aae2 <_dtoa_r+0x172>
 800af74:	2d00      	cmp	r5, #0
 800af76:	dd05      	ble.n	800af84 <_dtoa_r+0x614>
 800af78:	4631      	mov	r1, r6
 800af7a:	462a      	mov	r2, r5
 800af7c:	4620      	mov	r0, r4
 800af7e:	f000 ffe3 	bl	800bf48 <__lshift>
 800af82:	4606      	mov	r6, r0
 800af84:	2f00      	cmp	r7, #0
 800af86:	f040 82e8 	bne.w	800b55a <_dtoa_r+0xbea>
 800af8a:	4637      	mov	r7, r6
 800af8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800af8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af90:	444d      	add	r5, r9
 800af92:	9508      	str	r5, [sp, #32]
 800af94:	f00a 0501 	and.w	r5, sl, #1
 800af98:	950b      	str	r5, [sp, #44]	; 0x2c
 800af9a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800af9e:	1c45      	adds	r5, r0, #1
 800afa0:	e00a      	b.n	800afb8 <_dtoa_r+0x648>
 800afa2:	f000 fdf5 	bl	800bb90 <__multadd>
 800afa6:	4639      	mov	r1, r7
 800afa8:	4606      	mov	r6, r0
 800afaa:	220a      	movs	r2, #10
 800afac:	4620      	mov	r0, r4
 800afae:	2300      	movs	r3, #0
 800afb0:	f000 fdee 	bl	800bb90 <__multadd>
 800afb4:	4607      	mov	r7, r0
 800afb6:	3501      	adds	r5, #1
 800afb8:	4641      	mov	r1, r8
 800afba:	4648      	mov	r0, r9
 800afbc:	f7ff fc3e 	bl	800a83c <quorem>
 800afc0:	4631      	mov	r1, r6
 800afc2:	4683      	mov	fp, r0
 800afc4:	4648      	mov	r0, r9
 800afc6:	f001 f81d 	bl	800c004 <__mcmp>
 800afca:	4641      	mov	r1, r8
 800afcc:	9003      	str	r0, [sp, #12]
 800afce:	463a      	mov	r2, r7
 800afd0:	4620      	mov	r0, r4
 800afd2:	f001 f83b 	bl	800c04c <__mdiff>
 800afd6:	68c2      	ldr	r2, [r0, #12]
 800afd8:	1e69      	subs	r1, r5, #1
 800afda:	4603      	mov	r3, r0
 800afdc:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
 800afe0:	9106      	str	r1, [sp, #24]
 800afe2:	2a00      	cmp	r2, #0
 800afe4:	f040 8193 	bne.w	800b30e <_dtoa_r+0x99e>
 800afe8:	4619      	mov	r1, r3
 800afea:	4648      	mov	r0, r9
 800afec:	9302      	str	r3, [sp, #8]
 800afee:	f001 f809 	bl	800c004 <__mcmp>
 800aff2:	9b02      	ldr	r3, [sp, #8]
 800aff4:	4602      	mov	r2, r0
 800aff6:	4619      	mov	r1, r3
 800aff8:	4620      	mov	r0, r4
 800affa:	9202      	str	r2, [sp, #8]
 800affc:	f000 fdbe 	bl	800bb7c <_Bfree>
 800b000:	9a02      	ldr	r2, [sp, #8]
 800b002:	b92a      	cbnz	r2, 800b010 <_dtoa_r+0x6a0>
 800b004:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b006:	b91b      	cbnz	r3, 800b010 <_dtoa_r+0x6a0>
 800b008:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b00a:	2800      	cmp	r0, #0
 800b00c:	f000 8391 	beq.w	800b732 <_dtoa_r+0xdc2>
 800b010:	9b03      	ldr	r3, [sp, #12]
 800b012:	2b00      	cmp	r3, #0
 800b014:	f2c0 8234 	blt.w	800b480 <_dtoa_r+0xb10>
 800b018:	d105      	bne.n	800b026 <_dtoa_r+0x6b6>
 800b01a:	9824      	ldr	r0, [sp, #144]	; 0x90
 800b01c:	b918      	cbnz	r0, 800b026 <_dtoa_r+0x6b6>
 800b01e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b020:	2900      	cmp	r1, #0
 800b022:	f000 822d 	beq.w	800b480 <_dtoa_r+0xb10>
 800b026:	2a00      	cmp	r2, #0
 800b028:	f300 82ab 	bgt.w	800b582 <_dtoa_r+0xc12>
 800b02c:	f8dd e020 	ldr.w	lr, [sp, #32]
 800b030:	f805 ac01 	strb.w	sl, [r5, #-1]
 800b034:	4575      	cmp	r5, lr
 800b036:	46ab      	mov	fp, r5
 800b038:	f000 82b3 	beq.w	800b5a2 <_dtoa_r+0xc32>
 800b03c:	4649      	mov	r1, r9
 800b03e:	220a      	movs	r2, #10
 800b040:	2300      	movs	r3, #0
 800b042:	4620      	mov	r0, r4
 800b044:	f000 fda4 	bl	800bb90 <__multadd>
 800b048:	42be      	cmp	r6, r7
 800b04a:	4681      	mov	r9, r0
 800b04c:	4631      	mov	r1, r6
 800b04e:	4620      	mov	r0, r4
 800b050:	f04f 020a 	mov.w	r2, #10
 800b054:	f04f 0300 	mov.w	r3, #0
 800b058:	d1a3      	bne.n	800afa2 <_dtoa_r+0x632>
 800b05a:	f000 fd99 	bl	800bb90 <__multadd>
 800b05e:	4606      	mov	r6, r0
 800b060:	4607      	mov	r7, r0
 800b062:	e7a8      	b.n	800afb6 <_dtoa_r+0x646>
 800b064:	2600      	movs	r6, #0
 800b066:	960b      	str	r6, [sp, #44]	; 0x2c
 800b068:	9e07      	ldr	r6, [sp, #28]
 800b06a:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
 800b06e:	44b6      	add	lr, r6
 800b070:	f10e 0901 	add.w	r9, lr, #1
 800b074:	f1b9 0f00 	cmp.w	r9, #0
 800b078:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 800b07c:	464e      	mov	r6, r9
 800b07e:	f340 8150 	ble.w	800b322 <_dtoa_r+0x9b2>
 800b082:	2100      	movs	r1, #0
 800b084:	2e17      	cmp	r6, #23
 800b086:	6461      	str	r1, [r4, #68]	; 0x44
 800b088:	d90a      	bls.n	800b0a0 <_dtoa_r+0x730>
 800b08a:	2201      	movs	r2, #1
 800b08c:	2304      	movs	r3, #4
 800b08e:	005b      	lsls	r3, r3, #1
 800b090:	f103 0014 	add.w	r0, r3, #20
 800b094:	42b0      	cmp	r0, r6
 800b096:	4611      	mov	r1, r2
 800b098:	f102 0201 	add.w	r2, r2, #1
 800b09c:	d9f7      	bls.n	800b08e <_dtoa_r+0x71e>
 800b09e:	6461      	str	r1, [r4, #68]	; 0x44
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	f000 fd45 	bl	800bb30 <_Balloc>
 800b0a6:	2e0e      	cmp	r6, #14
 800b0a8:	9009      	str	r0, [sp, #36]	; 0x24
 800b0aa:	6420      	str	r0, [r4, #64]	; 0x40
 800b0ac:	f63f ad6c 	bhi.w	800ab88 <_dtoa_r+0x218>
 800b0b0:	2d00      	cmp	r5, #0
 800b0b2:	f43f ad69 	beq.w	800ab88 <_dtoa_r+0x218>
 800b0b6:	9d07      	ldr	r5, [sp, #28]
 800b0b8:	2d00      	cmp	r5, #0
 800b0ba:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 800b0be:	f340 821b 	ble.w	800b4f8 <_dtoa_r+0xb88>
 800b0c2:	4b51      	ldr	r3, [pc, #324]	; (800b208 <_dtoa_r+0x898>)
 800b0c4:	f005 020f 	and.w	r2, r5, #15
 800b0c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0cc:	112d      	asrs	r5, r5, #4
 800b0ce:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b0d2:	06eb      	lsls	r3, r5, #27
 800b0d4:	f140 81cd 	bpl.w	800b472 <_dtoa_r+0xb02>
 800b0d8:	4b4c      	ldr	r3, [pc, #304]	; (800b20c <_dtoa_r+0x89c>)
 800b0da:	4650      	mov	r0, sl
 800b0dc:	4659      	mov	r1, fp
 800b0de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b0e2:	f7f5 fb47 	bl	8000774 <__aeabi_ddiv>
 800b0e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b0ea:	f005 050f 	and.w	r5, r5, #15
 800b0ee:	f04f 0803 	mov.w	r8, #3
 800b0f2:	b18d      	cbz	r5, 800b118 <_dtoa_r+0x7a8>
 800b0f4:	f8df a114 	ldr.w	sl, [pc, #276]	; 800b20c <_dtoa_r+0x89c>
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	4639      	mov	r1, r7
 800b0fc:	07ee      	lsls	r6, r5, #31
 800b0fe:	d505      	bpl.n	800b10c <_dtoa_r+0x79c>
 800b100:	e9da 2300 	ldrd	r2, r3, [sl]
 800b104:	f108 0801 	add.w	r8, r8, #1
 800b108:	f7f5 fa0a 	bl	8000520 <__aeabi_dmul>
 800b10c:	106d      	asrs	r5, r5, #1
 800b10e:	f10a 0a08 	add.w	sl, sl, #8
 800b112:	d1f3      	bne.n	800b0fc <_dtoa_r+0x78c>
 800b114:	4606      	mov	r6, r0
 800b116:	460f      	mov	r7, r1
 800b118:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b11c:	4632      	mov	r2, r6
 800b11e:	463b      	mov	r3, r7
 800b120:	f7f5 fb28 	bl	8000774 <__aeabi_ddiv>
 800b124:	4682      	mov	sl, r0
 800b126:	468b      	mov	fp, r1
 800b128:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b12a:	b145      	cbz	r5, 800b13e <_dtoa_r+0x7ce>
 800b12c:	4650      	mov	r0, sl
 800b12e:	4659      	mov	r1, fp
 800b130:	2200      	movs	r2, #0
 800b132:	4b37      	ldr	r3, [pc, #220]	; (800b210 <_dtoa_r+0x8a0>)
 800b134:	f7f5 ffce 	bl	80010d4 <__aeabi_dcmplt>
 800b138:	2800      	cmp	r0, #0
 800b13a:	f040 82a9 	bne.w	800b690 <_dtoa_r+0xd20>
 800b13e:	4640      	mov	r0, r8
 800b140:	f7f5 f988 	bl	8000454 <__aeabi_i2d>
 800b144:	4652      	mov	r2, sl
 800b146:	465b      	mov	r3, fp
 800b148:	f7f5 f9ea 	bl	8000520 <__aeabi_dmul>
 800b14c:	2200      	movs	r2, #0
 800b14e:	4b31      	ldr	r3, [pc, #196]	; (800b214 <_dtoa_r+0x8a4>)
 800b150:	f7f5 f834 	bl	80001bc <__adddf3>
 800b154:	4606      	mov	r6, r0
 800b156:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800b15a:	f1b9 0f00 	cmp.w	r9, #0
 800b15e:	f000 815a 	beq.w	800b416 <_dtoa_r+0xaa6>
 800b162:	9d07      	ldr	r5, [sp, #28]
 800b164:	9517      	str	r5, [sp, #92]	; 0x5c
 800b166:	46c8      	mov	r8, r9
 800b168:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b16a:	2d00      	cmp	r5, #0
 800b16c:	f000 8222 	beq.w	800b5b4 <_dtoa_r+0xc44>
 800b170:	4b25      	ldr	r3, [pc, #148]	; (800b208 <_dtoa_r+0x898>)
 800b172:	4929      	ldr	r1, [pc, #164]	; (800b218 <_dtoa_r+0x8a8>)
 800b174:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b178:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b17c:	2000      	movs	r0, #0
 800b17e:	f7f5 faf9 	bl	8000774 <__aeabi_ddiv>
 800b182:	4632      	mov	r2, r6
 800b184:	463b      	mov	r3, r7
 800b186:	f7f5 f817 	bl	80001b8 <__aeabi_dsub>
 800b18a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b18e:	4659      	mov	r1, fp
 800b190:	4650      	mov	r0, sl
 800b192:	f7f5 ffc7 	bl	8001124 <__aeabi_d2iz>
 800b196:	4605      	mov	r5, r0
 800b198:	f7f5 f95c 	bl	8000454 <__aeabi_i2d>
 800b19c:	4602      	mov	r2, r0
 800b19e:	460b      	mov	r3, r1
 800b1a0:	4650      	mov	r0, sl
 800b1a2:	4659      	mov	r1, fp
 800b1a4:	f7f5 f808 	bl	80001b8 <__aeabi_dsub>
 800b1a8:	3530      	adds	r5, #48	; 0x30
 800b1aa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b1ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1b0:	b2ed      	uxtb	r5, r5
 800b1b2:	7035      	strb	r5, [r6, #0]
 800b1b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b1b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1bc:	f106 0b01 	add.w	fp, r6, #1
 800b1c0:	f7f5 ffa6 	bl	8001110 <__aeabi_dcmpgt>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	f040 82a9 	bne.w	800b71c <_dtoa_r+0xdac>
 800b1ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	490f      	ldr	r1, [pc, #60]	; (800b210 <_dtoa_r+0x8a0>)
 800b1d2:	f7f4 fff1 	bl	80001b8 <__aeabi_dsub>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	460b      	mov	r3, r1
 800b1da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b1de:	f7f5 ff97 	bl	8001110 <__aeabi_dcmpgt>
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	f040 82a0 	bne.w	800b728 <_dtoa_r+0xdb8>
 800b1e8:	f1b8 0f01 	cmp.w	r8, #1
 800b1ec:	f340 8180 	ble.w	800b4f0 <_dtoa_r+0xb80>
 800b1f0:	44b0      	add	r8, r6
 800b1f2:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 800b1f6:	46a2      	mov	sl, r4
 800b1f8:	46c1      	mov	r9, r8
 800b1fa:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800b1fe:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 800b202:	e019      	b.n	800b238 <_dtoa_r+0x8c8>
 800b204:	fffffbee 	.word	0xfffffbee
 800b208:	0800f0f8 	.word	0x0800f0f8
 800b20c:	0800f1c0 	.word	0x0800f1c0
 800b210:	3ff00000 	.word	0x3ff00000
 800b214:	401c0000 	.word	0x401c0000
 800b218:	3fe00000 	.word	0x3fe00000
 800b21c:	2000      	movs	r0, #0
 800b21e:	49a8      	ldr	r1, [pc, #672]	; (800b4c0 <_dtoa_r+0xb50>)
 800b220:	f7f4 ffca 	bl	80001b8 <__aeabi_dsub>
 800b224:	4622      	mov	r2, r4
 800b226:	462b      	mov	r3, r5
 800b228:	f7f5 ff54 	bl	80010d4 <__aeabi_dcmplt>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	f040 8279 	bne.w	800b724 <_dtoa_r+0xdb4>
 800b232:	45cb      	cmp	fp, r9
 800b234:	f000 8159 	beq.w	800b4ea <_dtoa_r+0xb7a>
 800b238:	4620      	mov	r0, r4
 800b23a:	4629      	mov	r1, r5
 800b23c:	2200      	movs	r2, #0
 800b23e:	4ba1      	ldr	r3, [pc, #644]	; (800b4c4 <_dtoa_r+0xb54>)
 800b240:	f7f5 f96e 	bl	8000520 <__aeabi_dmul>
 800b244:	2200      	movs	r2, #0
 800b246:	4b9f      	ldr	r3, [pc, #636]	; (800b4c4 <_dtoa_r+0xb54>)
 800b248:	4604      	mov	r4, r0
 800b24a:	460d      	mov	r5, r1
 800b24c:	4630      	mov	r0, r6
 800b24e:	4639      	mov	r1, r7
 800b250:	f7f5 f966 	bl	8000520 <__aeabi_dmul>
 800b254:	460f      	mov	r7, r1
 800b256:	4606      	mov	r6, r0
 800b258:	f7f5 ff64 	bl	8001124 <__aeabi_d2iz>
 800b25c:	4680      	mov	r8, r0
 800b25e:	f7f5 f8f9 	bl	8000454 <__aeabi_i2d>
 800b262:	4602      	mov	r2, r0
 800b264:	460b      	mov	r3, r1
 800b266:	4630      	mov	r0, r6
 800b268:	4639      	mov	r1, r7
 800b26a:	f7f4 ffa5 	bl	80001b8 <__aeabi_dsub>
 800b26e:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800b272:	fa5f f888 	uxtb.w	r8, r8
 800b276:	4622      	mov	r2, r4
 800b278:	462b      	mov	r3, r5
 800b27a:	f80b 8b01 	strb.w	r8, [fp], #1
 800b27e:	4606      	mov	r6, r0
 800b280:	460f      	mov	r7, r1
 800b282:	f7f5 ff27 	bl	80010d4 <__aeabi_dcmplt>
 800b286:	4632      	mov	r2, r6
 800b288:	463b      	mov	r3, r7
 800b28a:	2800      	cmp	r0, #0
 800b28c:	d0c6      	beq.n	800b21c <_dtoa_r+0x8ac>
 800b28e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b290:	9607      	str	r6, [sp, #28]
 800b292:	4654      	mov	r4, sl
 800b294:	e539      	b.n	800ad0a <_dtoa_r+0x39a>
 800b296:	2600      	movs	r6, #0
 800b298:	960b      	str	r6, [sp, #44]	; 0x2c
 800b29a:	9825      	ldr	r0, [sp, #148]	; 0x94
 800b29c:	2800      	cmp	r0, #0
 800b29e:	dd3c      	ble.n	800b31a <_dtoa_r+0x9aa>
 800b2a0:	4606      	mov	r6, r0
 800b2a2:	900f      	str	r0, [sp, #60]	; 0x3c
 800b2a4:	4681      	mov	r9, r0
 800b2a6:	e6ec      	b.n	800b082 <_dtoa_r+0x712>
 800b2a8:	2601      	movs	r6, #1
 800b2aa:	960b      	str	r6, [sp, #44]	; 0x2c
 800b2ac:	e7f5      	b.n	800b29a <_dtoa_r+0x92a>
 800b2ae:	f1b9 0f00 	cmp.w	r9, #0
 800b2b2:	f73f ac7c 	bgt.w	800abae <_dtoa_r+0x23e>
 800b2b6:	f040 80c6 	bne.w	800b446 <_dtoa_r+0xad6>
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	4b82      	ldr	r3, [pc, #520]	; (800b4c8 <_dtoa_r+0xb58>)
 800b2be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2c2:	f7f5 f92d 	bl	8000520 <__aeabi_dmul>
 800b2c6:	4652      	mov	r2, sl
 800b2c8:	465b      	mov	r3, fp
 800b2ca:	f7f5 ff17 	bl	80010fc <__aeabi_dcmpge>
 800b2ce:	46c8      	mov	r8, r9
 800b2d0:	464e      	mov	r6, r9
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d07c      	beq.n	800b3d0 <_dtoa_r+0xa60>
 800b2d6:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800b2d8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800b2dc:	43ed      	mvns	r5, r5
 800b2de:	9507      	str	r5, [sp, #28]
 800b2e0:	4641      	mov	r1, r8
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	f000 fc4a 	bl	800bb7c <_Bfree>
 800b2e8:	2e00      	cmp	r6, #0
 800b2ea:	f47f ae06 	bne.w	800aefa <_dtoa_r+0x58a>
 800b2ee:	e50c      	b.n	800ad0a <_dtoa_r+0x39a>
 800b2f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	f000 fdda 	bl	800beac <__pow5mult>
 800b2f8:	900a      	str	r0, [sp, #40]	; 0x28
 800b2fa:	e56a      	b.n	800add2 <_dtoa_r+0x462>
 800b2fc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800b2fe:	2d00      	cmp	r5, #0
 800b300:	f000 81b7 	beq.w	800b672 <_dtoa_r+0xd02>
 800b304:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b308:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800b30a:	9d08      	ldr	r5, [sp, #32]
 800b30c:	e527      	b.n	800ad5e <_dtoa_r+0x3ee>
 800b30e:	4601      	mov	r1, r0
 800b310:	4620      	mov	r0, r4
 800b312:	f000 fc33 	bl	800bb7c <_Bfree>
 800b316:	2201      	movs	r2, #1
 800b318:	e67a      	b.n	800b010 <_dtoa_r+0x6a0>
 800b31a:	2601      	movs	r6, #1
 800b31c:	9625      	str	r6, [sp, #148]	; 0x94
 800b31e:	960f      	str	r6, [sp, #60]	; 0x3c
 800b320:	46b1      	mov	r9, r6
 800b322:	2100      	movs	r1, #0
 800b324:	6461      	str	r1, [r4, #68]	; 0x44
 800b326:	e6bb      	b.n	800b0a0 <_dtoa_r+0x730>
 800b328:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b32a:	4641      	mov	r1, r8
 800b32c:	f000 fe6a 	bl	800c004 <__mcmp>
 800b330:	2800      	cmp	r0, #0
 800b332:	f6bf ad8f 	bge.w	800ae54 <_dtoa_r+0x4e4>
 800b336:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800b33a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b33c:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b340:	4620      	mov	r0, r4
 800b342:	220a      	movs	r2, #10
 800b344:	2300      	movs	r3, #0
 800b346:	f8cd e01c 	str.w	lr, [sp, #28]
 800b34a:	f000 fc21 	bl	800bb90 <__multadd>
 800b34e:	900a      	str	r0, [sp, #40]	; 0x28
 800b350:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b352:	2800      	cmp	r0, #0
 800b354:	f040 8207 	bne.w	800b766 <_dtoa_r+0xdf6>
 800b358:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800b35c:	e57a      	b.n	800ae54 <_dtoa_r+0x4e4>
 800b35e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b362:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800b366:	6918      	ldr	r0, [r3, #16]
 800b368:	f000 fcaa 	bl	800bcc0 <__hi0bits>
 800b36c:	f1c0 0020 	rsb	r0, r0, #32
 800b370:	e547      	b.n	800ae02 <_dtoa_r+0x492>
 800b372:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b374:	f7ff bb2d 	b.w	800a9d2 <_dtoa_r+0x62>
 800b378:	f1ba 0f00 	cmp.w	sl, #0
 800b37c:	f47f ad3b 	bne.w	800adf6 <_dtoa_r+0x486>
 800b380:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b384:	2b00      	cmp	r3, #0
 800b386:	f040 817b 	bne.w	800b680 <_dtoa_r+0xd10>
 800b38a:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800b38e:	0d3f      	lsrs	r7, r7, #20
 800b390:	053f      	lsls	r7, r7, #20
 800b392:	2f00      	cmp	r7, #0
 800b394:	f43f ad30 	beq.w	800adf8 <_dtoa_r+0x488>
 800b398:	9a08      	ldr	r2, [sp, #32]
 800b39a:	9b06      	ldr	r3, [sp, #24]
 800b39c:	3201      	adds	r2, #1
 800b39e:	3301      	adds	r3, #1
 800b3a0:	9208      	str	r2, [sp, #32]
 800b3a2:	9306      	str	r3, [sp, #24]
 800b3a4:	2701      	movs	r7, #1
 800b3a6:	e527      	b.n	800adf8 <_dtoa_r+0x488>
 800b3a8:	9924      	ldr	r1, [sp, #144]	; 0x90
 800b3aa:	2902      	cmp	r1, #2
 800b3ac:	f77f ad56 	ble.w	800ae5c <_dtoa_r+0x4ec>
 800b3b0:	f1b9 0f00 	cmp.w	r9, #0
 800b3b4:	d18f      	bne.n	800b2d6 <_dtoa_r+0x966>
 800b3b6:	4641      	mov	r1, r8
 800b3b8:	464b      	mov	r3, r9
 800b3ba:	2205      	movs	r2, #5
 800b3bc:	4620      	mov	r0, r4
 800b3be:	f000 fbe7 	bl	800bb90 <__multadd>
 800b3c2:	4680      	mov	r8, r0
 800b3c4:	4641      	mov	r1, r8
 800b3c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b3c8:	f000 fe1c 	bl	800c004 <__mcmp>
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	dd82      	ble.n	800b2d6 <_dtoa_r+0x966>
 800b3d0:	9d07      	ldr	r5, [sp, #28]
 800b3d2:	3501      	adds	r5, #1
 800b3d4:	9507      	str	r5, [sp, #28]
 800b3d6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b3d8:	2331      	movs	r3, #49	; 0x31
 800b3da:	702b      	strb	r3, [r5, #0]
 800b3dc:	f105 0b01 	add.w	fp, r5, #1
 800b3e0:	e77e      	b.n	800b2e0 <_dtoa_r+0x970>
 800b3e2:	9807      	ldr	r0, [sp, #28]
 800b3e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3e6:	2331      	movs	r3, #49	; 0x31
 800b3e8:	3001      	adds	r0, #1
 800b3ea:	9007      	str	r0, [sp, #28]
 800b3ec:	700b      	strb	r3, [r1, #0]
 800b3ee:	e576      	b.n	800aede <_dtoa_r+0x56e>
 800b3f0:	46a3      	mov	fp, r4
 800b3f2:	9c03      	ldr	r4, [sp, #12]
 800b3f4:	e489      	b.n	800ad0a <_dtoa_r+0x39a>
 800b3f6:	4640      	mov	r0, r8
 800b3f8:	f7f5 f82c 	bl	8000454 <__aeabi_i2d>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	460b      	mov	r3, r1
 800b400:	4650      	mov	r0, sl
 800b402:	4659      	mov	r1, fp
 800b404:	f7f5 f88c 	bl	8000520 <__aeabi_dmul>
 800b408:	2200      	movs	r2, #0
 800b40a:	4b30      	ldr	r3, [pc, #192]	; (800b4cc <_dtoa_r+0xb5c>)
 800b40c:	f7f4 fed6 	bl	80001bc <__adddf3>
 800b410:	4606      	mov	r6, r0
 800b412:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800b416:	4650      	mov	r0, sl
 800b418:	4659      	mov	r1, fp
 800b41a:	2200      	movs	r2, #0
 800b41c:	4b2a      	ldr	r3, [pc, #168]	; (800b4c8 <_dtoa_r+0xb58>)
 800b41e:	f7f4 fecb 	bl	80001b8 <__aeabi_dsub>
 800b422:	4632      	mov	r2, r6
 800b424:	463b      	mov	r3, r7
 800b426:	4682      	mov	sl, r0
 800b428:	468b      	mov	fp, r1
 800b42a:	f7f5 fe71 	bl	8001110 <__aeabi_dcmpgt>
 800b42e:	2800      	cmp	r0, #0
 800b430:	f040 80bc 	bne.w	800b5ac <_dtoa_r+0xc3c>
 800b434:	4632      	mov	r2, r6
 800b436:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b43a:	4650      	mov	r0, sl
 800b43c:	4659      	mov	r1, fp
 800b43e:	f7f5 fe49 	bl	80010d4 <__aeabi_dcmplt>
 800b442:	2800      	cmp	r0, #0
 800b444:	d054      	beq.n	800b4f0 <_dtoa_r+0xb80>
 800b446:	f04f 0800 	mov.w	r8, #0
 800b44a:	4646      	mov	r6, r8
 800b44c:	e743      	b.n	800b2d6 <_dtoa_r+0x966>
 800b44e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b452:	4620      	mov	r0, r4
 800b454:	f000 fd2a 	bl	800beac <__pow5mult>
 800b458:	900a      	str	r0, [sp, #40]	; 0x28
 800b45a:	e4ba      	b.n	800add2 <_dtoa_r+0x462>
 800b45c:	2601      	movs	r6, #1
 800b45e:	960b      	str	r6, [sp, #44]	; 0x2c
 800b460:	e602      	b.n	800b068 <_dtoa_r+0x6f8>
 800b462:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b464:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800b466:	970c      	str	r7, [sp, #48]	; 0x30
 800b468:	1b7b      	subs	r3, r7, r5
 800b46a:	441e      	add	r6, r3
 800b46c:	960d      	str	r6, [sp, #52]	; 0x34
 800b46e:	2700      	movs	r7, #0
 800b470:	e46f      	b.n	800ad52 <_dtoa_r+0x3e2>
 800b472:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800b476:	f04f 0802 	mov.w	r8, #2
 800b47a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b47e:	e638      	b.n	800b0f2 <_dtoa_r+0x782>
 800b480:	2a00      	cmp	r2, #0
 800b482:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800b486:	46d9      	mov	r9, fp
 800b488:	dd11      	ble.n	800b4ae <_dtoa_r+0xb3e>
 800b48a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b48c:	2201      	movs	r2, #1
 800b48e:	4620      	mov	r0, r4
 800b490:	f000 fd5a 	bl	800bf48 <__lshift>
 800b494:	4641      	mov	r1, r8
 800b496:	900a      	str	r0, [sp, #40]	; 0x28
 800b498:	f000 fdb4 	bl	800c004 <__mcmp>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	f340 815b 	ble.w	800b758 <_dtoa_r+0xde8>
 800b4a2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b4a6:	f000 811a 	beq.w	800b6de <_dtoa_r+0xd6e>
 800b4aa:	f109 0a31 	add.w	sl, r9, #49	; 0x31
 800b4ae:	9b06      	ldr	r3, [sp, #24]
 800b4b0:	4635      	mov	r5, r6
 800b4b2:	f883 a000 	strb.w	sl, [r3]
 800b4b6:	f103 0b01 	add.w	fp, r3, #1
 800b4ba:	463e      	mov	r6, r7
 800b4bc:	e50f      	b.n	800aede <_dtoa_r+0x56e>
 800b4be:	bf00      	nop
 800b4c0:	3ff00000 	.word	0x3ff00000
 800b4c4:	40240000 	.word	0x40240000
 800b4c8:	40140000 	.word	0x40140000
 800b4cc:	401c0000 	.word	0x401c0000
 800b4d0:	d103      	bne.n	800b4da <_dtoa_r+0xb6a>
 800b4d2:	f01a 0f01 	tst.w	sl, #1
 800b4d6:	f47f acf2 	bne.w	800aebe <_dtoa_r+0x54e>
 800b4da:	465b      	mov	r3, fp
 800b4dc:	469b      	mov	fp, r3
 800b4de:	3b01      	subs	r3, #1
 800b4e0:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 800b4e4:	2a30      	cmp	r2, #48	; 0x30
 800b4e6:	d0f9      	beq.n	800b4dc <_dtoa_r+0xb6c>
 800b4e8:	e4f9      	b.n	800aede <_dtoa_r+0x56e>
 800b4ea:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 800b4ee:	4654      	mov	r4, sl
 800b4f0:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 800b4f4:	f7ff bb48 	b.w	800ab88 <_dtoa_r+0x218>
 800b4f8:	9e07      	ldr	r6, [sp, #28]
 800b4fa:	4275      	negs	r5, r6
 800b4fc:	2d00      	cmp	r5, #0
 800b4fe:	f000 80c2 	beq.w	800b686 <_dtoa_r+0xd16>
 800b502:	4ba3      	ldr	r3, [pc, #652]	; (800b790 <_dtoa_r+0xe20>)
 800b504:	f005 020f 	and.w	r2, r5, #15
 800b508:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b510:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800b514:	f7f5 f804 	bl	8000520 <__aeabi_dmul>
 800b518:	112d      	asrs	r5, r5, #4
 800b51a:	4682      	mov	sl, r0
 800b51c:	468b      	mov	fp, r1
 800b51e:	f000 812d 	beq.w	800b77c <_dtoa_r+0xe0c>
 800b522:	4e9c      	ldr	r6, [pc, #624]	; (800b794 <_dtoa_r+0xe24>)
 800b524:	f04f 0802 	mov.w	r8, #2
 800b528:	07ea      	lsls	r2, r5, #31
 800b52a:	d505      	bpl.n	800b538 <_dtoa_r+0xbc8>
 800b52c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b530:	f108 0801 	add.w	r8, r8, #1
 800b534:	f7f4 fff4 	bl	8000520 <__aeabi_dmul>
 800b538:	106d      	asrs	r5, r5, #1
 800b53a:	f106 0608 	add.w	r6, r6, #8
 800b53e:	d1f3      	bne.n	800b528 <_dtoa_r+0xbb8>
 800b540:	4682      	mov	sl, r0
 800b542:	468b      	mov	fp, r1
 800b544:	e5f0      	b.n	800b128 <_dtoa_r+0x7b8>
 800b546:	9e07      	ldr	r6, [sp, #28]
 800b548:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b54a:	2230      	movs	r2, #48	; 0x30
 800b54c:	702a      	strb	r2, [r5, #0]
 800b54e:	3601      	adds	r6, #1
 800b550:	2231      	movs	r2, #49	; 0x31
 800b552:	9607      	str	r6, [sp, #28]
 800b554:	701a      	strb	r2, [r3, #0]
 800b556:	f7ff bbd8 	b.w	800ad0a <_dtoa_r+0x39a>
 800b55a:	6871      	ldr	r1, [r6, #4]
 800b55c:	4620      	mov	r0, r4
 800b55e:	f000 fae7 	bl	800bb30 <_Balloc>
 800b562:	6933      	ldr	r3, [r6, #16]
 800b564:	1c9a      	adds	r2, r3, #2
 800b566:	4605      	mov	r5, r0
 800b568:	0092      	lsls	r2, r2, #2
 800b56a:	f106 010c 	add.w	r1, r6, #12
 800b56e:	300c      	adds	r0, #12
 800b570:	f7f5 fcb6 	bl	8000ee0 <memcpy>
 800b574:	4620      	mov	r0, r4
 800b576:	4629      	mov	r1, r5
 800b578:	2201      	movs	r2, #1
 800b57a:	f000 fce5 	bl	800bf48 <__lshift>
 800b57e:	4607      	mov	r7, r0
 800b580:	e504      	b.n	800af8c <_dtoa_r+0x61c>
 800b582:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b586:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800b58a:	f000 80a8 	beq.w	800b6de <_dtoa_r+0xd6e>
 800b58e:	9d06      	ldr	r5, [sp, #24]
 800b590:	f10a 0301 	add.w	r3, sl, #1
 800b594:	702b      	strb	r3, [r5, #0]
 800b596:	4635      	mov	r5, r6
 800b598:	9e06      	ldr	r6, [sp, #24]
 800b59a:	f106 0b01 	add.w	fp, r6, #1
 800b59e:	463e      	mov	r6, r7
 800b5a0:	e49d      	b.n	800aede <_dtoa_r+0x56e>
 800b5a2:	4635      	mov	r5, r6
 800b5a4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800b5a8:	463e      	mov	r6, r7
 800b5aa:	e47c      	b.n	800aea6 <_dtoa_r+0x536>
 800b5ac:	f04f 0800 	mov.w	r8, #0
 800b5b0:	4646      	mov	r6, r8
 800b5b2:	e70d      	b.n	800b3d0 <_dtoa_r+0xa60>
 800b5b4:	4976      	ldr	r1, [pc, #472]	; (800b790 <_dtoa_r+0xe20>)
 800b5b6:	f108 35ff 	add.w	r5, r8, #4294967295
 800b5ba:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800b5be:	4632      	mov	r2, r6
 800b5c0:	463b      	mov	r3, r7
 800b5c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5c6:	9510      	str	r5, [sp, #64]	; 0x40
 800b5c8:	f7f4 ffaa 	bl	8000520 <__aeabi_dmul>
 800b5cc:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 800b5d0:	4659      	mov	r1, fp
 800b5d2:	4650      	mov	r0, sl
 800b5d4:	f7f5 fda6 	bl	8001124 <__aeabi_d2iz>
 800b5d8:	4605      	mov	r5, r0
 800b5da:	f7f4 ff3b 	bl	8000454 <__aeabi_i2d>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	4650      	mov	r0, sl
 800b5e4:	4659      	mov	r1, fp
 800b5e6:	f7f4 fde7 	bl	80001b8 <__aeabi_dsub>
 800b5ea:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 800b5ee:	3530      	adds	r5, #48	; 0x30
 800b5f0:	f1b8 0f01 	cmp.w	r8, #1
 800b5f4:	4606      	mov	r6, r0
 800b5f6:	460f      	mov	r7, r1
 800b5f8:	f88e 5000 	strb.w	r5, [lr]
 800b5fc:	f10e 0b01 	add.w	fp, lr, #1
 800b600:	d01e      	beq.n	800b640 <_dtoa_r+0xcd0>
 800b602:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b604:	1e6b      	subs	r3, r5, #1
 800b606:	eb03 0a08 	add.w	sl, r3, r8
 800b60a:	2200      	movs	r2, #0
 800b60c:	4b62      	ldr	r3, [pc, #392]	; (800b798 <_dtoa_r+0xe28>)
 800b60e:	f7f4 ff87 	bl	8000520 <__aeabi_dmul>
 800b612:	460f      	mov	r7, r1
 800b614:	4606      	mov	r6, r0
 800b616:	f7f5 fd85 	bl	8001124 <__aeabi_d2iz>
 800b61a:	4680      	mov	r8, r0
 800b61c:	f7f4 ff1a 	bl	8000454 <__aeabi_i2d>
 800b620:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800b624:	4602      	mov	r2, r0
 800b626:	460b      	mov	r3, r1
 800b628:	4630      	mov	r0, r6
 800b62a:	4639      	mov	r1, r7
 800b62c:	f7f4 fdc4 	bl	80001b8 <__aeabi_dsub>
 800b630:	f805 8f01 	strb.w	r8, [r5, #1]!
 800b634:	4555      	cmp	r5, sl
 800b636:	d1e8      	bne.n	800b60a <_dtoa_r+0xc9a>
 800b638:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b63a:	4606      	mov	r6, r0
 800b63c:	460f      	mov	r7, r1
 800b63e:	44ab      	add	fp, r5
 800b640:	2200      	movs	r2, #0
 800b642:	4b56      	ldr	r3, [pc, #344]	; (800b79c <_dtoa_r+0xe2c>)
 800b644:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800b648:	f7f4 fdb8 	bl	80001bc <__adddf3>
 800b64c:	4632      	mov	r2, r6
 800b64e:	463b      	mov	r3, r7
 800b650:	f7f5 fd40 	bl	80010d4 <__aeabi_dcmplt>
 800b654:	2800      	cmp	r0, #0
 800b656:	d04d      	beq.n	800b6f4 <_dtoa_r+0xd84>
 800b658:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b65a:	9607      	str	r6, [sp, #28]
 800b65c:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
 800b660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b662:	f7ff bb4b 	b.w	800acfc <_dtoa_r+0x38c>
 800b666:	9e08      	ldr	r6, [sp, #32]
 800b668:	2300      	movs	r3, #0
 800b66a:	ebc9 0506 	rsb	r5, r9, r6
 800b66e:	f7ff bb76 	b.w	800ad5e <_dtoa_r+0x3ee>
 800b672:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b674:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800b676:	9d08      	ldr	r5, [sp, #32]
 800b678:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b67c:	f7ff bb6f 	b.w	800ad5e <_dtoa_r+0x3ee>
 800b680:	4657      	mov	r7, sl
 800b682:	f7ff bbb9 	b.w	800adf8 <_dtoa_r+0x488>
 800b686:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 800b68a:	f04f 0802 	mov.w	r8, #2
 800b68e:	e54b      	b.n	800b128 <_dtoa_r+0x7b8>
 800b690:	f1b9 0f00 	cmp.w	r9, #0
 800b694:	f43f aeaf 	beq.w	800b3f6 <_dtoa_r+0xa86>
 800b698:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800b69a:	2e00      	cmp	r6, #0
 800b69c:	f77f af28 	ble.w	800b4f0 <_dtoa_r+0xb80>
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	4b3d      	ldr	r3, [pc, #244]	; (800b798 <_dtoa_r+0xe28>)
 800b6a4:	4650      	mov	r0, sl
 800b6a6:	4659      	mov	r1, fp
 800b6a8:	f7f4 ff3a 	bl	8000520 <__aeabi_dmul>
 800b6ac:	4682      	mov	sl, r0
 800b6ae:	f108 0001 	add.w	r0, r8, #1
 800b6b2:	468b      	mov	fp, r1
 800b6b4:	f7f4 fece 	bl	8000454 <__aeabi_i2d>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	4650      	mov	r0, sl
 800b6be:	4659      	mov	r1, fp
 800b6c0:	f7f4 ff2e 	bl	8000520 <__aeabi_dmul>
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	4b36      	ldr	r3, [pc, #216]	; (800b7a0 <_dtoa_r+0xe30>)
 800b6c8:	f7f4 fd78 	bl	80001bc <__adddf3>
 800b6cc:	9d07      	ldr	r5, [sp, #28]
 800b6ce:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800b6d2:	3d01      	subs	r5, #1
 800b6d4:	4606      	mov	r6, r0
 800b6d6:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800b6da:	9517      	str	r5, [sp, #92]	; 0x5c
 800b6dc:	e544      	b.n	800b168 <_dtoa_r+0x7f8>
 800b6de:	4635      	mov	r5, r6
 800b6e0:	9b06      	ldr	r3, [sp, #24]
 800b6e2:	9e06      	ldr	r6, [sp, #24]
 800b6e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6e6:	2239      	movs	r2, #57	; 0x39
 800b6e8:	7032      	strb	r2, [r6, #0]
 800b6ea:	f103 0b01 	add.w	fp, r3, #1
 800b6ee:	463e      	mov	r6, r7
 800b6f0:	f7ff bbef 	b.w	800aed2 <_dtoa_r+0x562>
 800b6f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b6f8:	2000      	movs	r0, #0
 800b6fa:	4928      	ldr	r1, [pc, #160]	; (800b79c <_dtoa_r+0xe2c>)
 800b6fc:	f7f4 fd5c 	bl	80001b8 <__aeabi_dsub>
 800b700:	4632      	mov	r2, r6
 800b702:	463b      	mov	r3, r7
 800b704:	f7f5 fd04 	bl	8001110 <__aeabi_dcmpgt>
 800b708:	2800      	cmp	r0, #0
 800b70a:	f43f aef1 	beq.w	800b4f0 <_dtoa_r+0xb80>
 800b70e:	465b      	mov	r3, fp
 800b710:	469b      	mov	fp, r3
 800b712:	3b01      	subs	r3, #1
 800b714:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 800b718:	2a30      	cmp	r2, #48	; 0x30
 800b71a:	d0f9      	beq.n	800b710 <_dtoa_r+0xda0>
 800b71c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800b71e:	9507      	str	r5, [sp, #28]
 800b720:	f7ff baf3 	b.w	800ad0a <_dtoa_r+0x39a>
 800b724:	4645      	mov	r5, r8
 800b726:	4654      	mov	r4, sl
 800b728:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b72a:	9607      	str	r6, [sp, #28]
 800b72c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b72e:	f7ff bae5 	b.w	800acfc <_dtoa_r+0x38c>
 800b732:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b736:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800b73a:	d0d0      	beq.n	800b6de <_dtoa_r+0xd6e>
 800b73c:	9b03      	ldr	r3, [sp, #12]
 800b73e:	4635      	mov	r5, r6
 800b740:	2b00      	cmp	r3, #0
 800b742:	9e06      	ldr	r6, [sp, #24]
 800b744:	bfc8      	it	gt
 800b746:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
 800b74a:	f886 a000 	strb.w	sl, [r6]
 800b74e:	f106 0b01 	add.w	fp, r6, #1
 800b752:	463e      	mov	r6, r7
 800b754:	f7ff bbc3 	b.w	800aede <_dtoa_r+0x56e>
 800b758:	f47f aea9 	bne.w	800b4ae <_dtoa_r+0xb3e>
 800b75c:	f01a 0f01 	tst.w	sl, #1
 800b760:	f43f aea5 	beq.w	800b4ae <_dtoa_r+0xb3e>
 800b764:	e69d      	b.n	800b4a2 <_dtoa_r+0xb32>
 800b766:	4631      	mov	r1, r6
 800b768:	4620      	mov	r0, r4
 800b76a:	220a      	movs	r2, #10
 800b76c:	2300      	movs	r3, #0
 800b76e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800b772:	f000 fa0d 	bl	800bb90 <__multadd>
 800b776:	4606      	mov	r6, r0
 800b778:	f7ff bb6c 	b.w	800ae54 <_dtoa_r+0x4e4>
 800b77c:	f04f 0802 	mov.w	r8, #2
 800b780:	e4d2      	b.n	800b128 <_dtoa_r+0x7b8>
 800b782:	f43f ab52 	beq.w	800ae2a <_dtoa_r+0x4ba>
 800b786:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 800b78a:	f7ff bbe2 	b.w	800af52 <_dtoa_r+0x5e2>
 800b78e:	bf00      	nop
 800b790:	0800f0f8 	.word	0x0800f0f8
 800b794:	0800f1c0 	.word	0x0800f1c0
 800b798:	40240000 	.word	0x40240000
 800b79c:	3fe00000 	.word	0x3fe00000
 800b7a0:	401c0000 	.word	0x401c0000
 800b7a4:	f3af 8000 	nop.w

0800b7a8 <_malloc_trim_r>:
 800b7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7aa:	4d23      	ldr	r5, [pc, #140]	; (800b838 <_malloc_trim_r+0x90>)
 800b7ac:	460f      	mov	r7, r1
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	f7fc fd38 	bl	8008224 <__malloc_lock>
 800b7b4:	68ab      	ldr	r3, [r5, #8]
 800b7b6:	685e      	ldr	r6, [r3, #4]
 800b7b8:	f026 0603 	bic.w	r6, r6, #3
 800b7bc:	1bf1      	subs	r1, r6, r7
 800b7be:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 800b7c2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800b7c6:	f021 010f 	bic.w	r1, r1, #15
 800b7ca:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
 800b7ce:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800b7d2:	db07      	blt.n	800b7e4 <_malloc_trim_r+0x3c>
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	f7fc fd28 	bl	800822c <_sbrk_r>
 800b7dc:	68ab      	ldr	r3, [r5, #8]
 800b7de:	4433      	add	r3, r6
 800b7e0:	4298      	cmp	r0, r3
 800b7e2:	d004      	beq.n	800b7ee <_malloc_trim_r+0x46>
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f7fc fd1f 	bl	8008228 <__malloc_unlock>
 800b7ea:	2000      	movs	r0, #0
 800b7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	4279      	negs	r1, r7
 800b7f2:	f7fc fd1b 	bl	800822c <_sbrk_r>
 800b7f6:	3001      	adds	r0, #1
 800b7f8:	d00d      	beq.n	800b816 <_malloc_trim_r+0x6e>
 800b7fa:	4b10      	ldr	r3, [pc, #64]	; (800b83c <_malloc_trim_r+0x94>)
 800b7fc:	68aa      	ldr	r2, [r5, #8]
 800b7fe:	6819      	ldr	r1, [r3, #0]
 800b800:	1bf6      	subs	r6, r6, r7
 800b802:	f046 0601 	orr.w	r6, r6, #1
 800b806:	4620      	mov	r0, r4
 800b808:	1bc9      	subs	r1, r1, r7
 800b80a:	6056      	str	r6, [r2, #4]
 800b80c:	6019      	str	r1, [r3, #0]
 800b80e:	f7fc fd0b 	bl	8008228 <__malloc_unlock>
 800b812:	2001      	movs	r0, #1
 800b814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b816:	4620      	mov	r0, r4
 800b818:	2100      	movs	r1, #0
 800b81a:	f7fc fd07 	bl	800822c <_sbrk_r>
 800b81e:	68ab      	ldr	r3, [r5, #8]
 800b820:	1ac2      	subs	r2, r0, r3
 800b822:	2a0f      	cmp	r2, #15
 800b824:	ddde      	ble.n	800b7e4 <_malloc_trim_r+0x3c>
 800b826:	4d06      	ldr	r5, [pc, #24]	; (800b840 <_malloc_trim_r+0x98>)
 800b828:	4904      	ldr	r1, [pc, #16]	; (800b83c <_malloc_trim_r+0x94>)
 800b82a:	682d      	ldr	r5, [r5, #0]
 800b82c:	f042 0201 	orr.w	r2, r2, #1
 800b830:	1b40      	subs	r0, r0, r5
 800b832:	605a      	str	r2, [r3, #4]
 800b834:	6008      	str	r0, [r1, #0]
 800b836:	e7d5      	b.n	800b7e4 <_malloc_trim_r+0x3c>
 800b838:	20000180 	.word	0x20000180
 800b83c:	20000bf0 	.word	0x20000bf0
 800b840:	2000058c 	.word	0x2000058c

0800b844 <_free_r>:
 800b844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b848:	460d      	mov	r5, r1
 800b84a:	4606      	mov	r6, r0
 800b84c:	2900      	cmp	r1, #0
 800b84e:	d055      	beq.n	800b8fc <_free_r+0xb8>
 800b850:	f7fc fce8 	bl	8008224 <__malloc_lock>
 800b854:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800b858:	f8df c174 	ldr.w	ip, [pc, #372]	; 800b9d0 <_free_r+0x18c>
 800b85c:	f021 0301 	bic.w	r3, r1, #1
 800b860:	f1a5 0408 	sub.w	r4, r5, #8
 800b864:	18e2      	adds	r2, r4, r3
 800b866:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800b86a:	6857      	ldr	r7, [r2, #4]
 800b86c:	4290      	cmp	r0, r2
 800b86e:	f027 0703 	bic.w	r7, r7, #3
 800b872:	d069      	beq.n	800b948 <_free_r+0x104>
 800b874:	f011 0101 	ands.w	r1, r1, #1
 800b878:	6057      	str	r7, [r2, #4]
 800b87a:	d032      	beq.n	800b8e2 <_free_r+0x9e>
 800b87c:	2100      	movs	r1, #0
 800b87e:	19d0      	adds	r0, r2, r7
 800b880:	6840      	ldr	r0, [r0, #4]
 800b882:	07c0      	lsls	r0, r0, #31
 800b884:	d406      	bmi.n	800b894 <_free_r+0x50>
 800b886:	443b      	add	r3, r7
 800b888:	6890      	ldr	r0, [r2, #8]
 800b88a:	2900      	cmp	r1, #0
 800b88c:	d04e      	beq.n	800b92c <_free_r+0xe8>
 800b88e:	68d2      	ldr	r2, [r2, #12]
 800b890:	60c2      	str	r2, [r0, #12]
 800b892:	6090      	str	r0, [r2, #8]
 800b894:	f043 0201 	orr.w	r2, r3, #1
 800b898:	6062      	str	r2, [r4, #4]
 800b89a:	50e3      	str	r3, [r4, r3]
 800b89c:	b9e1      	cbnz	r1, 800b8d8 <_free_r+0x94>
 800b89e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8a2:	d32d      	bcc.n	800b900 <_free_r+0xbc>
 800b8a4:	0a5a      	lsrs	r2, r3, #9
 800b8a6:	2a04      	cmp	r2, #4
 800b8a8:	d86a      	bhi.n	800b980 <_free_r+0x13c>
 800b8aa:	0998      	lsrs	r0, r3, #6
 800b8ac:	3038      	adds	r0, #56	; 0x38
 800b8ae:	0041      	lsls	r1, r0, #1
 800b8b0:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
 800b8b4:	4946      	ldr	r1, [pc, #280]	; (800b9d0 <_free_r+0x18c>)
 800b8b6:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800b8ba:	4562      	cmp	r2, ip
 800b8bc:	d066      	beq.n	800b98c <_free_r+0x148>
 800b8be:	6851      	ldr	r1, [r2, #4]
 800b8c0:	f021 0103 	bic.w	r1, r1, #3
 800b8c4:	428b      	cmp	r3, r1
 800b8c6:	d202      	bcs.n	800b8ce <_free_r+0x8a>
 800b8c8:	6892      	ldr	r2, [r2, #8]
 800b8ca:	4594      	cmp	ip, r2
 800b8cc:	d1f7      	bne.n	800b8be <_free_r+0x7a>
 800b8ce:	68d3      	ldr	r3, [r2, #12]
 800b8d0:	60e3      	str	r3, [r4, #12]
 800b8d2:	60a2      	str	r2, [r4, #8]
 800b8d4:	609c      	str	r4, [r3, #8]
 800b8d6:	60d4      	str	r4, [r2, #12]
 800b8d8:	4630      	mov	r0, r6
 800b8da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8de:	f7fc bca3 	b.w	8008228 <__malloc_unlock>
 800b8e2:	f855 5c08 	ldr.w	r5, [r5, #-8]
 800b8e6:	1b64      	subs	r4, r4, r5
 800b8e8:	f10c 0808 	add.w	r8, ip, #8
 800b8ec:	68a0      	ldr	r0, [r4, #8]
 800b8ee:	4540      	cmp	r0, r8
 800b8f0:	442b      	add	r3, r5
 800b8f2:	d043      	beq.n	800b97c <_free_r+0x138>
 800b8f4:	68e5      	ldr	r5, [r4, #12]
 800b8f6:	60c5      	str	r5, [r0, #12]
 800b8f8:	60a8      	str	r0, [r5, #8]
 800b8fa:	e7c0      	b.n	800b87e <_free_r+0x3a>
 800b8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b900:	08db      	lsrs	r3, r3, #3
 800b902:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
 800b906:	2501      	movs	r5, #1
 800b908:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800b90c:	6891      	ldr	r1, [r2, #8]
 800b90e:	60a1      	str	r1, [r4, #8]
 800b910:	109b      	asrs	r3, r3, #2
 800b912:	fa05 f303 	lsl.w	r3, r5, r3
 800b916:	4318      	orrs	r0, r3
 800b918:	60e2      	str	r2, [r4, #12]
 800b91a:	f8cc 0004 	str.w	r0, [ip, #4]
 800b91e:	6094      	str	r4, [r2, #8]
 800b920:	4630      	mov	r0, r6
 800b922:	60cc      	str	r4, [r1, #12]
 800b924:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b928:	f7fc bc7e 	b.w	8008228 <__malloc_unlock>
 800b92c:	4d29      	ldr	r5, [pc, #164]	; (800b9d4 <_free_r+0x190>)
 800b92e:	42a8      	cmp	r0, r5
 800b930:	d1ad      	bne.n	800b88e <_free_r+0x4a>
 800b932:	f043 0201 	orr.w	r2, r3, #1
 800b936:	f8cc 4014 	str.w	r4, [ip, #20]
 800b93a:	f8cc 4010 	str.w	r4, [ip, #16]
 800b93e:	60e0      	str	r0, [r4, #12]
 800b940:	60a0      	str	r0, [r4, #8]
 800b942:	6062      	str	r2, [r4, #4]
 800b944:	50e3      	str	r3, [r4, r3]
 800b946:	e7c7      	b.n	800b8d8 <_free_r+0x94>
 800b948:	441f      	add	r7, r3
 800b94a:	07cb      	lsls	r3, r1, #31
 800b94c:	d407      	bmi.n	800b95e <_free_r+0x11a>
 800b94e:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800b952:	1ae4      	subs	r4, r4, r3
 800b954:	441f      	add	r7, r3
 800b956:	68a2      	ldr	r2, [r4, #8]
 800b958:	68e3      	ldr	r3, [r4, #12]
 800b95a:	60d3      	str	r3, [r2, #12]
 800b95c:	609a      	str	r2, [r3, #8]
 800b95e:	4b1e      	ldr	r3, [pc, #120]	; (800b9d8 <_free_r+0x194>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f047 0201 	orr.w	r2, r7, #1
 800b966:	429f      	cmp	r7, r3
 800b968:	6062      	str	r2, [r4, #4]
 800b96a:	f8cc 4008 	str.w	r4, [ip, #8]
 800b96e:	d3b3      	bcc.n	800b8d8 <_free_r+0x94>
 800b970:	4b1a      	ldr	r3, [pc, #104]	; (800b9dc <_free_r+0x198>)
 800b972:	4630      	mov	r0, r6
 800b974:	6819      	ldr	r1, [r3, #0]
 800b976:	f7ff ff17 	bl	800b7a8 <_malloc_trim_r>
 800b97a:	e7ad      	b.n	800b8d8 <_free_r+0x94>
 800b97c:	2101      	movs	r1, #1
 800b97e:	e77e      	b.n	800b87e <_free_r+0x3a>
 800b980:	2a14      	cmp	r2, #20
 800b982:	d80c      	bhi.n	800b99e <_free_r+0x15a>
 800b984:	f102 005b 	add.w	r0, r2, #91	; 0x5b
 800b988:	0041      	lsls	r1, r0, #1
 800b98a:	e791      	b.n	800b8b0 <_free_r+0x6c>
 800b98c:	684b      	ldr	r3, [r1, #4]
 800b98e:	1080      	asrs	r0, r0, #2
 800b990:	2501      	movs	r5, #1
 800b992:	fa05 f000 	lsl.w	r0, r5, r0
 800b996:	4303      	orrs	r3, r0
 800b998:	604b      	str	r3, [r1, #4]
 800b99a:	4613      	mov	r3, r2
 800b99c:	e798      	b.n	800b8d0 <_free_r+0x8c>
 800b99e:	2a54      	cmp	r2, #84	; 0x54
 800b9a0:	d803      	bhi.n	800b9aa <_free_r+0x166>
 800b9a2:	0b18      	lsrs	r0, r3, #12
 800b9a4:	306e      	adds	r0, #110	; 0x6e
 800b9a6:	0041      	lsls	r1, r0, #1
 800b9a8:	e782      	b.n	800b8b0 <_free_r+0x6c>
 800b9aa:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b9ae:	d803      	bhi.n	800b9b8 <_free_r+0x174>
 800b9b0:	0bd8      	lsrs	r0, r3, #15
 800b9b2:	3077      	adds	r0, #119	; 0x77
 800b9b4:	0041      	lsls	r1, r0, #1
 800b9b6:	e77b      	b.n	800b8b0 <_free_r+0x6c>
 800b9b8:	f240 5154 	movw	r1, #1364	; 0x554
 800b9bc:	428a      	cmp	r2, r1
 800b9be:	d803      	bhi.n	800b9c8 <_free_r+0x184>
 800b9c0:	0c98      	lsrs	r0, r3, #18
 800b9c2:	307c      	adds	r0, #124	; 0x7c
 800b9c4:	0041      	lsls	r1, r0, #1
 800b9c6:	e773      	b.n	800b8b0 <_free_r+0x6c>
 800b9c8:	21fc      	movs	r1, #252	; 0xfc
 800b9ca:	207e      	movs	r0, #126	; 0x7e
 800b9cc:	e770      	b.n	800b8b0 <_free_r+0x6c>
 800b9ce:	bf00      	nop
 800b9d0:	20000180 	.word	0x20000180
 800b9d4:	20000188 	.word	0x20000188
 800b9d8:	20000588 	.word	0x20000588
 800b9dc:	20000bec 	.word	0x20000bec

0800b9e0 <iswspace>:
 800b9e0:	28ff      	cmp	r0, #255	; 0xff
 800b9e2:	d807      	bhi.n	800b9f4 <iswspace+0x14>
 800b9e4:	4b04      	ldr	r3, [pc, #16]	; (800b9f8 <iswspace+0x18>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4418      	add	r0, r3
 800b9ea:	7840      	ldrb	r0, [r0, #1]
 800b9ec:	f000 0008 	and.w	r0, r0, #8
 800b9f0:	b2c0      	uxtb	r0, r0
 800b9f2:	4770      	bx	lr
 800b9f4:	2000      	movs	r0, #0
 800b9f6:	4770      	bx	lr
 800b9f8:	20000590 	.word	0x20000590

0800b9fc <__locale_charset>:
 800b9fc:	4800      	ldr	r0, [pc, #0]	; (800ba00 <__locale_charset+0x4>)
 800b9fe:	4770      	bx	lr
 800ba00:	200009fc 	.word	0x200009fc

0800ba04 <__locale_mb_cur_max>:
 800ba04:	4b01      	ldr	r3, [pc, #4]	; (800ba0c <__locale_mb_cur_max+0x8>)
 800ba06:	6818      	ldr	r0, [r3, #0]
 800ba08:	4770      	bx	lr
 800ba0a:	bf00      	nop
 800ba0c:	20000a1c 	.word	0x20000a1c

0800ba10 <_localeconv_r>:
 800ba10:	4800      	ldr	r0, [pc, #0]	; (800ba14 <_localeconv_r+0x4>)
 800ba12:	4770      	bx	lr
 800ba14:	200009c4 	.word	0x200009c4

0800ba18 <_mbrtowc_r>:
 800ba18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba1c:	b083      	sub	sp, #12
 800ba1e:	461f      	mov	r7, r3
 800ba20:	4614      	mov	r4, r2
 800ba22:	4605      	mov	r5, r0
 800ba24:	4688      	mov	r8, r1
 800ba26:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ba28:	4b10      	ldr	r3, [pc, #64]	; (800ba6c <_mbrtowc_r+0x54>)
 800ba2a:	b19a      	cbz	r2, 800ba54 <_mbrtowc_r+0x3c>
 800ba2c:	f8d3 9000 	ldr.w	r9, [r3]
 800ba30:	f7ff ffe4 	bl	800b9fc <__locale_charset>
 800ba34:	4641      	mov	r1, r8
 800ba36:	e88d 0041 	stmia.w	sp, {r0, r6}
 800ba3a:	4622      	mov	r2, r4
 800ba3c:	463b      	mov	r3, r7
 800ba3e:	4628      	mov	r0, r5
 800ba40:	47c8      	blx	r9
 800ba42:	1c43      	adds	r3, r0, #1
 800ba44:	d103      	bne.n	800ba4e <_mbrtowc_r+0x36>
 800ba46:	2200      	movs	r2, #0
 800ba48:	238a      	movs	r3, #138	; 0x8a
 800ba4a:	6032      	str	r2, [r6, #0]
 800ba4c:	602b      	str	r3, [r5, #0]
 800ba4e:	b003      	add	sp, #12
 800ba50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba54:	681f      	ldr	r7, [r3, #0]
 800ba56:	f7ff ffd1 	bl	800b9fc <__locale_charset>
 800ba5a:	4621      	mov	r1, r4
 800ba5c:	e88d 0041 	stmia.w	sp, {r0, r6}
 800ba60:	4a03      	ldr	r2, [pc, #12]	; (800ba70 <_mbrtowc_r+0x58>)
 800ba62:	4628      	mov	r0, r5
 800ba64:	2301      	movs	r3, #1
 800ba66:	47b8      	blx	r7
 800ba68:	e7eb      	b.n	800ba42 <_mbrtowc_r+0x2a>
 800ba6a:	bf00      	nop
 800ba6c:	20000a20 	.word	0x20000a20
 800ba70:	0800eb4c 	.word	0x0800eb4c

0800ba74 <__ascii_mbtowc>:
 800ba74:	b082      	sub	sp, #8
 800ba76:	b149      	cbz	r1, 800ba8c <__ascii_mbtowc+0x18>
 800ba78:	b15a      	cbz	r2, 800ba92 <__ascii_mbtowc+0x1e>
 800ba7a:	b16b      	cbz	r3, 800ba98 <__ascii_mbtowc+0x24>
 800ba7c:	7813      	ldrb	r3, [r2, #0]
 800ba7e:	600b      	str	r3, [r1, #0]
 800ba80:	7810      	ldrb	r0, [r2, #0]
 800ba82:	3000      	adds	r0, #0
 800ba84:	bf18      	it	ne
 800ba86:	2001      	movne	r0, #1
 800ba88:	b002      	add	sp, #8
 800ba8a:	4770      	bx	lr
 800ba8c:	a901      	add	r1, sp, #4
 800ba8e:	2a00      	cmp	r2, #0
 800ba90:	d1f3      	bne.n	800ba7a <__ascii_mbtowc+0x6>
 800ba92:	4610      	mov	r0, r2
 800ba94:	b002      	add	sp, #8
 800ba96:	4770      	bx	lr
 800ba98:	f06f 0001 	mvn.w	r0, #1
 800ba9c:	e7f4      	b.n	800ba88 <__ascii_mbtowc+0x14>
 800ba9e:	bf00      	nop

0800baa0 <memchr>:
 800baa0:	0783      	lsls	r3, r0, #30
 800baa2:	b470      	push	{r4, r5, r6}
 800baa4:	b2c9      	uxtb	r1, r1
 800baa6:	d03f      	beq.n	800bb28 <memchr+0x88>
 800baa8:	1e54      	subs	r4, r2, #1
 800baaa:	b32a      	cbz	r2, 800baf8 <memchr+0x58>
 800baac:	7803      	ldrb	r3, [r0, #0]
 800baae:	428b      	cmp	r3, r1
 800bab0:	d023      	beq.n	800bafa <memchr+0x5a>
 800bab2:	1c43      	adds	r3, r0, #1
 800bab4:	e004      	b.n	800bac0 <memchr+0x20>
 800bab6:	b1fc      	cbz	r4, 800baf8 <memchr+0x58>
 800bab8:	7804      	ldrb	r4, [r0, #0]
 800baba:	428c      	cmp	r4, r1
 800babc:	d01d      	beq.n	800bafa <memchr+0x5a>
 800babe:	4614      	mov	r4, r2
 800bac0:	f013 0f03 	tst.w	r3, #3
 800bac4:	4618      	mov	r0, r3
 800bac6:	f104 32ff 	add.w	r2, r4, #4294967295
 800baca:	f103 0301 	add.w	r3, r3, #1
 800bace:	d1f2      	bne.n	800bab6 <memchr+0x16>
 800bad0:	2c03      	cmp	r4, #3
 800bad2:	d814      	bhi.n	800bafe <memchr+0x5e>
 800bad4:	1e65      	subs	r5, r4, #1
 800bad6:	b34c      	cbz	r4, 800bb2c <memchr+0x8c>
 800bad8:	7803      	ldrb	r3, [r0, #0]
 800bada:	428b      	cmp	r3, r1
 800badc:	d00d      	beq.n	800bafa <memchr+0x5a>
 800bade:	1c42      	adds	r2, r0, #1
 800bae0:	2300      	movs	r3, #0
 800bae2:	e002      	b.n	800baea <memchr+0x4a>
 800bae4:	7804      	ldrb	r4, [r0, #0]
 800bae6:	428c      	cmp	r4, r1
 800bae8:	d007      	beq.n	800bafa <memchr+0x5a>
 800baea:	42ab      	cmp	r3, r5
 800baec:	4610      	mov	r0, r2
 800baee:	f103 0301 	add.w	r3, r3, #1
 800baf2:	f102 0201 	add.w	r2, r2, #1
 800baf6:	d1f5      	bne.n	800bae4 <memchr+0x44>
 800baf8:	2000      	movs	r0, #0
 800bafa:	bc70      	pop	{r4, r5, r6}
 800bafc:	4770      	bx	lr
 800bafe:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 800bb02:	4603      	mov	r3, r0
 800bb04:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3304      	adds	r3, #4
 800bb0c:	6802      	ldr	r2, [r0, #0]
 800bb0e:	4072      	eors	r2, r6
 800bb10:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 800bb14:	ea25 0202 	bic.w	r2, r5, r2
 800bb18:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800bb1c:	d1da      	bne.n	800bad4 <memchr+0x34>
 800bb1e:	3c04      	subs	r4, #4
 800bb20:	2c03      	cmp	r4, #3
 800bb22:	4618      	mov	r0, r3
 800bb24:	d8f0      	bhi.n	800bb08 <memchr+0x68>
 800bb26:	e7d5      	b.n	800bad4 <memchr+0x34>
 800bb28:	4614      	mov	r4, r2
 800bb2a:	e7d1      	b.n	800bad0 <memchr+0x30>
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	e7e4      	b.n	800bafa <memchr+0x5a>

0800bb30 <_Balloc>:
 800bb30:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800bb32:	b570      	push	{r4, r5, r6, lr}
 800bb34:	4605      	mov	r5, r0
 800bb36:	460c      	mov	r4, r1
 800bb38:	b14a      	cbz	r2, 800bb4e <_Balloc+0x1e>
 800bb3a:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800bb3e:	b180      	cbz	r0, 800bb62 <_Balloc+0x32>
 800bb40:	6801      	ldr	r1, [r0, #0]
 800bb42:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bb46:	2200      	movs	r2, #0
 800bb48:	6102      	str	r2, [r0, #16]
 800bb4a:	60c2      	str	r2, [r0, #12]
 800bb4c:	bd70      	pop	{r4, r5, r6, pc}
 800bb4e:	2221      	movs	r2, #33	; 0x21
 800bb50:	2104      	movs	r1, #4
 800bb52:	f002 f85f 	bl	800dc14 <_calloc_r>
 800bb56:	64e8      	str	r0, [r5, #76]	; 0x4c
 800bb58:	4602      	mov	r2, r0
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	d1ed      	bne.n	800bb3a <_Balloc+0xa>
 800bb5e:	2000      	movs	r0, #0
 800bb60:	bd70      	pop	{r4, r5, r6, pc}
 800bb62:	2101      	movs	r1, #1
 800bb64:	fa01 f604 	lsl.w	r6, r1, r4
 800bb68:	1d72      	adds	r2, r6, #5
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	0092      	lsls	r2, r2, #2
 800bb6e:	f002 f851 	bl	800dc14 <_calloc_r>
 800bb72:	2800      	cmp	r0, #0
 800bb74:	d0f3      	beq.n	800bb5e <_Balloc+0x2e>
 800bb76:	6044      	str	r4, [r0, #4]
 800bb78:	6086      	str	r6, [r0, #8]
 800bb7a:	e7e4      	b.n	800bb46 <_Balloc+0x16>

0800bb7c <_Bfree>:
 800bb7c:	b131      	cbz	r1, 800bb8c <_Bfree+0x10>
 800bb7e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800bb80:	684a      	ldr	r2, [r1, #4]
 800bb82:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bb86:	6008      	str	r0, [r1, #0]
 800bb88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bb8c:	4770      	bx	lr
 800bb8e:	bf00      	nop

0800bb90 <__multadd>:
 800bb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb94:	f8d1 8010 	ldr.w	r8, [r1, #16]
 800bb98:	b082      	sub	sp, #8
 800bb9a:	4689      	mov	r9, r1
 800bb9c:	4682      	mov	sl, r0
 800bb9e:	f101 0514 	add.w	r5, r1, #20
 800bba2:	2400      	movs	r4, #0
 800bba4:	682f      	ldr	r7, [r5, #0]
 800bba6:	b2be      	uxth	r6, r7
 800bba8:	0c3f      	lsrs	r7, r7, #16
 800bbaa:	fb02 3606 	mla	r6, r2, r6, r3
 800bbae:	fb02 f307 	mul.w	r3, r2, r7
 800bbb2:	eb03 4316 	add.w	r3, r3, r6, lsr #16
 800bbb6:	3401      	adds	r4, #1
 800bbb8:	b2b6      	uxth	r6, r6
 800bbba:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 800bbbe:	45a0      	cmp	r8, r4
 800bbc0:	f845 6b04 	str.w	r6, [r5], #4
 800bbc4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800bbc8:	dcec      	bgt.n	800bba4 <__multadd+0x14>
 800bbca:	b153      	cbz	r3, 800bbe2 <__multadd+0x52>
 800bbcc:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800bbd0:	4590      	cmp	r8, r2
 800bbd2:	da0a      	bge.n	800bbea <__multadd+0x5a>
 800bbd4:	eb09 0188 	add.w	r1, r9, r8, lsl #2
 800bbd8:	f108 0201 	add.w	r2, r8, #1
 800bbdc:	614b      	str	r3, [r1, #20]
 800bbde:	f8c9 2010 	str.w	r2, [r9, #16]
 800bbe2:	4648      	mov	r0, r9
 800bbe4:	b002      	add	sp, #8
 800bbe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbea:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bbee:	9301      	str	r3, [sp, #4]
 800bbf0:	3101      	adds	r1, #1
 800bbf2:	4650      	mov	r0, sl
 800bbf4:	f7ff ff9c 	bl	800bb30 <_Balloc>
 800bbf8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800bbfc:	3202      	adds	r2, #2
 800bbfe:	f109 010c 	add.w	r1, r9, #12
 800bc02:	4604      	mov	r4, r0
 800bc04:	0092      	lsls	r2, r2, #2
 800bc06:	300c      	adds	r0, #12
 800bc08:	f7f5 f96a 	bl	8000ee0 <memcpy>
 800bc0c:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
 800bc10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bc14:	9b01      	ldr	r3, [sp, #4]
 800bc16:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800bc1a:	f8c9 0000 	str.w	r0, [r9]
 800bc1e:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
 800bc22:	46a1      	mov	r9, r4
 800bc24:	e7d6      	b.n	800bbd4 <__multadd+0x44>
 800bc26:	bf00      	nop

0800bc28 <__s2b>:
 800bc28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc2c:	4699      	mov	r9, r3
 800bc2e:	4b23      	ldr	r3, [pc, #140]	; (800bcbc <__s2b+0x94>)
 800bc30:	9e08      	ldr	r6, [sp, #32]
 800bc32:	f109 0408 	add.w	r4, r9, #8
 800bc36:	fb83 5304 	smull	r5, r3, r3, r4
 800bc3a:	17e4      	asrs	r4, r4, #31
 800bc3c:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	4607      	mov	r7, r0
 800bc44:	460c      	mov	r4, r1
 800bc46:	4690      	mov	r8, r2
 800bc48:	dd35      	ble.n	800bcb6 <__s2b+0x8e>
 800bc4a:	2501      	movs	r5, #1
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	006d      	lsls	r5, r5, #1
 800bc50:	42ab      	cmp	r3, r5
 800bc52:	f101 0101 	add.w	r1, r1, #1
 800bc56:	dcfa      	bgt.n	800bc4e <__s2b+0x26>
 800bc58:	4638      	mov	r0, r7
 800bc5a:	f7ff ff69 	bl	800bb30 <_Balloc>
 800bc5e:	2301      	movs	r3, #1
 800bc60:	f1b8 0f09 	cmp.w	r8, #9
 800bc64:	6146      	str	r6, [r0, #20]
 800bc66:	6103      	str	r3, [r0, #16]
 800bc68:	dd21      	ble.n	800bcae <__s2b+0x86>
 800bc6a:	f104 0609 	add.w	r6, r4, #9
 800bc6e:	4635      	mov	r5, r6
 800bc70:	4444      	add	r4, r8
 800bc72:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bc76:	4601      	mov	r1, r0
 800bc78:	3b30      	subs	r3, #48	; 0x30
 800bc7a:	4638      	mov	r0, r7
 800bc7c:	220a      	movs	r2, #10
 800bc7e:	f7ff ff87 	bl	800bb90 <__multadd>
 800bc82:	42a5      	cmp	r5, r4
 800bc84:	d1f5      	bne.n	800bc72 <__s2b+0x4a>
 800bc86:	eb06 0408 	add.w	r4, r6, r8
 800bc8a:	3c08      	subs	r4, #8
 800bc8c:	45c1      	cmp	r9, r8
 800bc8e:	dd0c      	ble.n	800bcaa <__s2b+0x82>
 800bc90:	ebc8 0809 	rsb	r8, r8, r9
 800bc94:	44a0      	add	r8, r4
 800bc96:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bc9a:	4601      	mov	r1, r0
 800bc9c:	3b30      	subs	r3, #48	; 0x30
 800bc9e:	4638      	mov	r0, r7
 800bca0:	220a      	movs	r2, #10
 800bca2:	f7ff ff75 	bl	800bb90 <__multadd>
 800bca6:	4544      	cmp	r4, r8
 800bca8:	d1f5      	bne.n	800bc96 <__s2b+0x6e>
 800bcaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcae:	340a      	adds	r4, #10
 800bcb0:	f04f 0809 	mov.w	r8, #9
 800bcb4:	e7ea      	b.n	800bc8c <__s2b+0x64>
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	e7ce      	b.n	800bc58 <__s2b+0x30>
 800bcba:	bf00      	nop
 800bcbc:	38e38e39 	.word	0x38e38e39

0800bcc0 <__hi0bits>:
 800bcc0:	0c03      	lsrs	r3, r0, #16
 800bcc2:	041b      	lsls	r3, r3, #16
 800bcc4:	b9b3      	cbnz	r3, 800bcf4 <__hi0bits+0x34>
 800bcc6:	0400      	lsls	r0, r0, #16
 800bcc8:	2310      	movs	r3, #16
 800bcca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bcce:	bf04      	itt	eq
 800bcd0:	0200      	lsleq	r0, r0, #8
 800bcd2:	3308      	addeq	r3, #8
 800bcd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bcd8:	bf04      	itt	eq
 800bcda:	0100      	lsleq	r0, r0, #4
 800bcdc:	3304      	addeq	r3, #4
 800bcde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bce2:	bf04      	itt	eq
 800bce4:	0080      	lsleq	r0, r0, #2
 800bce6:	3302      	addeq	r3, #2
 800bce8:	2800      	cmp	r0, #0
 800bcea:	db07      	blt.n	800bcfc <__hi0bits+0x3c>
 800bcec:	0042      	lsls	r2, r0, #1
 800bcee:	d403      	bmi.n	800bcf8 <__hi0bits+0x38>
 800bcf0:	2020      	movs	r0, #32
 800bcf2:	4770      	bx	lr
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	e7e8      	b.n	800bcca <__hi0bits+0xa>
 800bcf8:	1c58      	adds	r0, r3, #1
 800bcfa:	4770      	bx	lr
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	4770      	bx	lr

0800bd00 <__lo0bits>:
 800bd00:	6803      	ldr	r3, [r0, #0]
 800bd02:	f013 0207 	ands.w	r2, r3, #7
 800bd06:	d007      	beq.n	800bd18 <__lo0bits+0x18>
 800bd08:	07d9      	lsls	r1, r3, #31
 800bd0a:	d420      	bmi.n	800bd4e <__lo0bits+0x4e>
 800bd0c:	079a      	lsls	r2, r3, #30
 800bd0e:	d420      	bmi.n	800bd52 <__lo0bits+0x52>
 800bd10:	089b      	lsrs	r3, r3, #2
 800bd12:	6003      	str	r3, [r0, #0]
 800bd14:	2002      	movs	r0, #2
 800bd16:	4770      	bx	lr
 800bd18:	b299      	uxth	r1, r3
 800bd1a:	b909      	cbnz	r1, 800bd20 <__lo0bits+0x20>
 800bd1c:	0c1b      	lsrs	r3, r3, #16
 800bd1e:	2210      	movs	r2, #16
 800bd20:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bd24:	bf04      	itt	eq
 800bd26:	0a1b      	lsreq	r3, r3, #8
 800bd28:	3208      	addeq	r2, #8
 800bd2a:	0719      	lsls	r1, r3, #28
 800bd2c:	bf04      	itt	eq
 800bd2e:	091b      	lsreq	r3, r3, #4
 800bd30:	3204      	addeq	r2, #4
 800bd32:	0799      	lsls	r1, r3, #30
 800bd34:	bf04      	itt	eq
 800bd36:	089b      	lsreq	r3, r3, #2
 800bd38:	3202      	addeq	r2, #2
 800bd3a:	07d9      	lsls	r1, r3, #31
 800bd3c:	d404      	bmi.n	800bd48 <__lo0bits+0x48>
 800bd3e:	085b      	lsrs	r3, r3, #1
 800bd40:	d101      	bne.n	800bd46 <__lo0bits+0x46>
 800bd42:	2020      	movs	r0, #32
 800bd44:	4770      	bx	lr
 800bd46:	3201      	adds	r2, #1
 800bd48:	6003      	str	r3, [r0, #0]
 800bd4a:	4610      	mov	r0, r2
 800bd4c:	4770      	bx	lr
 800bd4e:	2000      	movs	r0, #0
 800bd50:	4770      	bx	lr
 800bd52:	085b      	lsrs	r3, r3, #1
 800bd54:	6003      	str	r3, [r0, #0]
 800bd56:	2001      	movs	r0, #1
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop

0800bd5c <__i2b>:
 800bd5c:	b510      	push	{r4, lr}
 800bd5e:	460c      	mov	r4, r1
 800bd60:	2101      	movs	r1, #1
 800bd62:	f7ff fee5 	bl	800bb30 <_Balloc>
 800bd66:	2201      	movs	r2, #1
 800bd68:	6144      	str	r4, [r0, #20]
 800bd6a:	6102      	str	r2, [r0, #16]
 800bd6c:	bd10      	pop	{r4, pc}
 800bd6e:	bf00      	nop

0800bd70 <__multiply>:
 800bd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd74:	690d      	ldr	r5, [r1, #16]
 800bd76:	f8d2 9010 	ldr.w	r9, [r2, #16]
 800bd7a:	454d      	cmp	r5, r9
 800bd7c:	b085      	sub	sp, #20
 800bd7e:	460c      	mov	r4, r1
 800bd80:	4692      	mov	sl, r2
 800bd82:	da04      	bge.n	800bd8e <__multiply+0x1e>
 800bd84:	462a      	mov	r2, r5
 800bd86:	4654      	mov	r4, sl
 800bd88:	464d      	mov	r5, r9
 800bd8a:	468a      	mov	sl, r1
 800bd8c:	4691      	mov	r9, r2
 800bd8e:	68a3      	ldr	r3, [r4, #8]
 800bd90:	6861      	ldr	r1, [r4, #4]
 800bd92:	eb05 0709 	add.w	r7, r5, r9
 800bd96:	429f      	cmp	r7, r3
 800bd98:	bfc8      	it	gt
 800bd9a:	3101      	addgt	r1, #1
 800bd9c:	f7ff fec8 	bl	800bb30 <_Balloc>
 800bda0:	f100 0614 	add.w	r6, r0, #20
 800bda4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bda8:	4546      	cmp	r6, r8
 800bdaa:	9001      	str	r0, [sp, #4]
 800bdac:	d205      	bcs.n	800bdba <__multiply+0x4a>
 800bdae:	4633      	mov	r3, r6
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	f843 0b04 	str.w	r0, [r3], #4
 800bdb6:	4598      	cmp	r8, r3
 800bdb8:	d8fb      	bhi.n	800bdb2 <__multiply+0x42>
 800bdba:	f10a 0c14 	add.w	ip, sl, #20
 800bdbe:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
 800bdc2:	3414      	adds	r4, #20
 800bdc4:	45cc      	cmp	ip, r9
 800bdc6:	9400      	str	r4, [sp, #0]
 800bdc8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800bdcc:	d25b      	bcs.n	800be86 <__multiply+0x116>
 800bdce:	f8cd 8008 	str.w	r8, [sp, #8]
 800bdd2:	9703      	str	r7, [sp, #12]
 800bdd4:	46c8      	mov	r8, r9
 800bdd6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bdda:	b29c      	uxth	r4, r3
 800bddc:	b324      	cbz	r4, 800be28 <__multiply+0xb8>
 800bdde:	9a00      	ldr	r2, [sp, #0]
 800bde0:	4633      	mov	r3, r6
 800bde2:	f04f 0900 	mov.w	r9, #0
 800bde6:	e000      	b.n	800bdea <__multiply+0x7a>
 800bde8:	460b      	mov	r3, r1
 800bdea:	f852 7b04 	ldr.w	r7, [r2], #4
 800bdee:	6819      	ldr	r1, [r3, #0]
 800bdf0:	fa1f fb87 	uxth.w	fp, r7
 800bdf4:	fa1f fa81 	uxth.w	sl, r1
 800bdf8:	0c38      	lsrs	r0, r7, #16
 800bdfa:	0c09      	lsrs	r1, r1, #16
 800bdfc:	fb04 a70b 	mla	r7, r4, fp, sl
 800be00:	44b9      	add	r9, r7
 800be02:	fb04 1000 	mla	r0, r4, r0, r1
 800be06:	eb00 4019 	add.w	r0, r0, r9, lsr #16
 800be0a:	4619      	mov	r1, r3
 800be0c:	fa1f f989 	uxth.w	r9, r9
 800be10:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
 800be14:	4295      	cmp	r5, r2
 800be16:	ea4f 4910 	mov.w	r9, r0, lsr #16
 800be1a:	f841 7b04 	str.w	r7, [r1], #4
 800be1e:	d8e3      	bhi.n	800bde8 <__multiply+0x78>
 800be20:	f8c3 9004 	str.w	r9, [r3, #4]
 800be24:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 800be28:	ea5f 4913 	movs.w	r9, r3, lsr #16
 800be2c:	d024      	beq.n	800be78 <__multiply+0x108>
 800be2e:	f8d6 a000 	ldr.w	sl, [r6]
 800be32:	9b00      	ldr	r3, [sp, #0]
 800be34:	4650      	mov	r0, sl
 800be36:	4631      	mov	r1, r6
 800be38:	f04f 0b00 	mov.w	fp, #0
 800be3c:	e000      	b.n	800be40 <__multiply+0xd0>
 800be3e:	4611      	mov	r1, r2
 800be40:	881a      	ldrh	r2, [r3, #0]
 800be42:	0c00      	lsrs	r0, r0, #16
 800be44:	fb09 0002 	mla	r0, r9, r2, r0
 800be48:	4483      	add	fp, r0
 800be4a:	fa1f fa8a 	uxth.w	sl, sl
 800be4e:	460a      	mov	r2, r1
 800be50:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
 800be54:	f842 0b04 	str.w	r0, [r2], #4
 800be58:	f853 7b04 	ldr.w	r7, [r3], #4
 800be5c:	6848      	ldr	r0, [r1, #4]
 800be5e:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800be62:	b284      	uxth	r4, r0
 800be64:	fb09 4a0a 	mla	sl, r9, sl, r4
 800be68:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
 800be6c:	429d      	cmp	r5, r3
 800be6e:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
 800be72:	d8e4      	bhi.n	800be3e <__multiply+0xce>
 800be74:	f8c1 a004 	str.w	sl, [r1, #4]
 800be78:	45e0      	cmp	r8, ip
 800be7a:	f106 0604 	add.w	r6, r6, #4
 800be7e:	d8aa      	bhi.n	800bdd6 <__multiply+0x66>
 800be80:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800be84:	9f03      	ldr	r7, [sp, #12]
 800be86:	2f00      	cmp	r7, #0
 800be88:	dd0a      	ble.n	800bea0 <__multiply+0x130>
 800be8a:	f858 3c04 	ldr.w	r3, [r8, #-4]
 800be8e:	f1a8 0804 	sub.w	r8, r8, #4
 800be92:	b11b      	cbz	r3, 800be9c <__multiply+0x12c>
 800be94:	e004      	b.n	800bea0 <__multiply+0x130>
 800be96:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be9a:	b90b      	cbnz	r3, 800bea0 <__multiply+0x130>
 800be9c:	3f01      	subs	r7, #1
 800be9e:	d1fa      	bne.n	800be96 <__multiply+0x126>
 800bea0:	9b01      	ldr	r3, [sp, #4]
 800bea2:	4618      	mov	r0, r3
 800bea4:	611f      	str	r7, [r3, #16]
 800bea6:	b005      	add	sp, #20
 800bea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800beac <__pow5mult>:
 800beac:	f012 0303 	ands.w	r3, r2, #3
 800beb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beb4:	4614      	mov	r4, r2
 800beb6:	4607      	mov	r7, r0
 800beb8:	460e      	mov	r6, r1
 800beba:	d12c      	bne.n	800bf16 <__pow5mult+0x6a>
 800bebc:	10a4      	asrs	r4, r4, #2
 800bebe:	d01c      	beq.n	800befa <__pow5mult+0x4e>
 800bec0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800bec2:	2d00      	cmp	r5, #0
 800bec4:	d030      	beq.n	800bf28 <__pow5mult+0x7c>
 800bec6:	f04f 0800 	mov.w	r8, #0
 800beca:	e004      	b.n	800bed6 <__pow5mult+0x2a>
 800becc:	1064      	asrs	r4, r4, #1
 800bece:	d014      	beq.n	800befa <__pow5mult+0x4e>
 800bed0:	6828      	ldr	r0, [r5, #0]
 800bed2:	b1a8      	cbz	r0, 800bf00 <__pow5mult+0x54>
 800bed4:	4605      	mov	r5, r0
 800bed6:	07e3      	lsls	r3, r4, #31
 800bed8:	d5f8      	bpl.n	800becc <__pow5mult+0x20>
 800beda:	4638      	mov	r0, r7
 800bedc:	4631      	mov	r1, r6
 800bede:	462a      	mov	r2, r5
 800bee0:	f7ff ff46 	bl	800bd70 <__multiply>
 800bee4:	b1ae      	cbz	r6, 800bf12 <__pow5mult+0x66>
 800bee6:	6872      	ldr	r2, [r6, #4]
 800bee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beea:	1064      	asrs	r4, r4, #1
 800beec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bef0:	6031      	str	r1, [r6, #0]
 800bef2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800bef6:	4606      	mov	r6, r0
 800bef8:	d1ea      	bne.n	800bed0 <__pow5mult+0x24>
 800befa:	4630      	mov	r0, r6
 800befc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf00:	4638      	mov	r0, r7
 800bf02:	4629      	mov	r1, r5
 800bf04:	462a      	mov	r2, r5
 800bf06:	f7ff ff33 	bl	800bd70 <__multiply>
 800bf0a:	6028      	str	r0, [r5, #0]
 800bf0c:	f8c0 8000 	str.w	r8, [r0]
 800bf10:	e7e0      	b.n	800bed4 <__pow5mult+0x28>
 800bf12:	4606      	mov	r6, r0
 800bf14:	e7da      	b.n	800becc <__pow5mult+0x20>
 800bf16:	1e5d      	subs	r5, r3, #1
 800bf18:	4a0a      	ldr	r2, [pc, #40]	; (800bf44 <__pow5mult+0x98>)
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800bf20:	f7ff fe36 	bl	800bb90 <__multadd>
 800bf24:	4606      	mov	r6, r0
 800bf26:	e7c9      	b.n	800bebc <__pow5mult+0x10>
 800bf28:	2101      	movs	r1, #1
 800bf2a:	4638      	mov	r0, r7
 800bf2c:	f7ff fe00 	bl	800bb30 <_Balloc>
 800bf30:	f240 2171 	movw	r1, #625	; 0x271
 800bf34:	2201      	movs	r2, #1
 800bf36:	2300      	movs	r3, #0
 800bf38:	6141      	str	r1, [r0, #20]
 800bf3a:	6102      	str	r2, [r0, #16]
 800bf3c:	4605      	mov	r5, r0
 800bf3e:	64b8      	str	r0, [r7, #72]	; 0x48
 800bf40:	6003      	str	r3, [r0, #0]
 800bf42:	e7c0      	b.n	800bec6 <__pow5mult+0x1a>
 800bf44:	0800f1e8 	.word	0x0800f1e8

0800bf48 <__lshift>:
 800bf48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf4c:	4693      	mov	fp, r2
 800bf4e:	690a      	ldr	r2, [r1, #16]
 800bf50:	688b      	ldr	r3, [r1, #8]
 800bf52:	ea4f 1a6b 	mov.w	sl, fp, asr #5
 800bf56:	eb0a 0902 	add.w	r9, sl, r2
 800bf5a:	f109 0601 	add.w	r6, r9, #1
 800bf5e:	429e      	cmp	r6, r3
 800bf60:	460f      	mov	r7, r1
 800bf62:	4680      	mov	r8, r0
 800bf64:	6849      	ldr	r1, [r1, #4]
 800bf66:	dd04      	ble.n	800bf72 <__lshift+0x2a>
 800bf68:	005b      	lsls	r3, r3, #1
 800bf6a:	429e      	cmp	r6, r3
 800bf6c:	f101 0101 	add.w	r1, r1, #1
 800bf70:	dcfa      	bgt.n	800bf68 <__lshift+0x20>
 800bf72:	4640      	mov	r0, r8
 800bf74:	f7ff fddc 	bl	800bb30 <_Balloc>
 800bf78:	f1ba 0f00 	cmp.w	sl, #0
 800bf7c:	f100 0414 	add.w	r4, r0, #20
 800bf80:	dd09      	ble.n	800bf96 <__lshift+0x4e>
 800bf82:	2300      	movs	r3, #0
 800bf84:	461a      	mov	r2, r3
 800bf86:	4625      	mov	r5, r4
 800bf88:	3301      	adds	r3, #1
 800bf8a:	4553      	cmp	r3, sl
 800bf8c:	f845 2b04 	str.w	r2, [r5], #4
 800bf90:	d1fa      	bne.n	800bf88 <__lshift+0x40>
 800bf92:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800bf96:	693a      	ldr	r2, [r7, #16]
 800bf98:	f107 0314 	add.w	r3, r7, #20
 800bf9c:	f01b 0b1f 	ands.w	fp, fp, #31
 800bfa0:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 800bfa4:	d021      	beq.n	800bfea <__lshift+0xa2>
 800bfa6:	f1cb 0a20 	rsb	sl, fp, #32
 800bfaa:	2200      	movs	r2, #0
 800bfac:	e000      	b.n	800bfb0 <__lshift+0x68>
 800bfae:	462c      	mov	r4, r5
 800bfb0:	6819      	ldr	r1, [r3, #0]
 800bfb2:	4625      	mov	r5, r4
 800bfb4:	fa01 f10b 	lsl.w	r1, r1, fp
 800bfb8:	430a      	orrs	r2, r1
 800bfba:	f845 2b04 	str.w	r2, [r5], #4
 800bfbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfc2:	4563      	cmp	r3, ip
 800bfc4:	fa22 f20a 	lsr.w	r2, r2, sl
 800bfc8:	d3f1      	bcc.n	800bfae <__lshift+0x66>
 800bfca:	6062      	str	r2, [r4, #4]
 800bfcc:	b10a      	cbz	r2, 800bfd2 <__lshift+0x8a>
 800bfce:	f109 0602 	add.w	r6, r9, #2
 800bfd2:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	3e01      	subs	r6, #1
 800bfda:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfde:	6106      	str	r6, [r0, #16]
 800bfe0:	6039      	str	r1, [r7, #0]
 800bfe2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 800bfe6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfea:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfee:	f844 2b04 	str.w	r2, [r4], #4
 800bff2:	459c      	cmp	ip, r3
 800bff4:	d9ed      	bls.n	800bfd2 <__lshift+0x8a>
 800bff6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bffa:	f844 2b04 	str.w	r2, [r4], #4
 800bffe:	459c      	cmp	ip, r3
 800c000:	d8f3      	bhi.n	800bfea <__lshift+0xa2>
 800c002:	e7e6      	b.n	800bfd2 <__lshift+0x8a>

0800c004 <__mcmp>:
 800c004:	6902      	ldr	r2, [r0, #16]
 800c006:	690b      	ldr	r3, [r1, #16]
 800c008:	1ad2      	subs	r2, r2, r3
 800c00a:	b410      	push	{r4}
 800c00c:	d115      	bne.n	800c03a <__mcmp+0x36>
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	3014      	adds	r0, #20
 800c012:	3114      	adds	r1, #20
 800c014:	4419      	add	r1, r3
 800c016:	4403      	add	r3, r0
 800c018:	e001      	b.n	800c01e <__mcmp+0x1a>
 800c01a:	4298      	cmp	r0, r3
 800c01c:	d211      	bcs.n	800c042 <__mcmp+0x3e>
 800c01e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c022:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c026:	42a2      	cmp	r2, r4
 800c028:	d0f7      	beq.n	800c01a <__mcmp+0x16>
 800c02a:	4294      	cmp	r4, r2
 800c02c:	bf94      	ite	ls
 800c02e:	2001      	movls	r0, #1
 800c030:	f04f 30ff 	movhi.w	r0, #4294967295
 800c034:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c038:	4770      	bx	lr
 800c03a:	4610      	mov	r0, r2
 800c03c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	2000      	movs	r0, #0
 800c044:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c048:	4770      	bx	lr
 800c04a:	bf00      	nop

0800c04c <__mdiff>:
 800c04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c050:	460d      	mov	r5, r1
 800c052:	4604      	mov	r4, r0
 800c054:	4611      	mov	r1, r2
 800c056:	4628      	mov	r0, r5
 800c058:	4616      	mov	r6, r2
 800c05a:	f7ff ffd3 	bl	800c004 <__mcmp>
 800c05e:	1e07      	subs	r7, r0, #0
 800c060:	d055      	beq.n	800c10e <__mdiff+0xc2>
 800c062:	db4e      	blt.n	800c102 <__mdiff+0xb6>
 800c064:	f04f 0800 	mov.w	r8, #0
 800c068:	6869      	ldr	r1, [r5, #4]
 800c06a:	4620      	mov	r0, r4
 800c06c:	f7ff fd60 	bl	800bb30 <_Balloc>
 800c070:	692f      	ldr	r7, [r5, #16]
 800c072:	6932      	ldr	r2, [r6, #16]
 800c074:	f8c0 800c 	str.w	r8, [r0, #12]
 800c078:	3514      	adds	r5, #20
 800c07a:	3614      	adds	r6, #20
 800c07c:	f100 0314 	add.w	r3, r0, #20
 800c080:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c084:	eb06 0882 	add.w	r8, r6, r2, lsl #2
 800c088:	2100      	movs	r1, #0
 800c08a:	f856 2b04 	ldr.w	r2, [r6], #4
 800c08e:	f855 4b04 	ldr.w	r4, [r5], #4
 800c092:	fa1f f982 	uxth.w	r9, r2
 800c096:	fa11 fa84 	uxtah	sl, r1, r4
 800c09a:	0c11      	lsrs	r1, r2, #16
 800c09c:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
 800c0a0:	ebc9 020a 	rsb	r2, r9, sl
 800c0a4:	eb01 4122 	add.w	r1, r1, r2, asr #16
 800c0a8:	b292      	uxth	r2, r2
 800c0aa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c0ae:	45b0      	cmp	r8, r6
 800c0b0:	f843 2b04 	str.w	r2, [r3], #4
 800c0b4:	ea4f 4121 	mov.w	r1, r1, asr #16
 800c0b8:	462c      	mov	r4, r5
 800c0ba:	d8e6      	bhi.n	800c08a <__mdiff+0x3e>
 800c0bc:	45ac      	cmp	ip, r5
 800c0be:	4698      	mov	r8, r3
 800c0c0:	d915      	bls.n	800c0ee <__mdiff+0xa2>
 800c0c2:	f854 6b04 	ldr.w	r6, [r4], #4
 800c0c6:	fa11 f186 	uxtah	r1, r1, r6
 800c0ca:	0c36      	lsrs	r6, r6, #16
 800c0cc:	eb06 4621 	add.w	r6, r6, r1, asr #16
 800c0d0:	b289      	uxth	r1, r1
 800c0d2:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
 800c0d6:	45a4      	cmp	ip, r4
 800c0d8:	f843 2b04 	str.w	r2, [r3], #4
 800c0dc:	ea4f 4126 	mov.w	r1, r6, asr #16
 800c0e0:	d8ef      	bhi.n	800c0c2 <__mdiff+0x76>
 800c0e2:	43eb      	mvns	r3, r5
 800c0e4:	4463      	add	r3, ip
 800c0e6:	f023 0303 	bic.w	r3, r3, #3
 800c0ea:	3304      	adds	r3, #4
 800c0ec:	4443      	add	r3, r8
 800c0ee:	3b04      	subs	r3, #4
 800c0f0:	b922      	cbnz	r2, 800c0fc <__mdiff+0xb0>
 800c0f2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c0f6:	3f01      	subs	r7, #1
 800c0f8:	2a00      	cmp	r2, #0
 800c0fa:	d0fa      	beq.n	800c0f2 <__mdiff+0xa6>
 800c0fc:	6107      	str	r7, [r0, #16]
 800c0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c102:	462b      	mov	r3, r5
 800c104:	f04f 0801 	mov.w	r8, #1
 800c108:	4635      	mov	r5, r6
 800c10a:	461e      	mov	r6, r3
 800c10c:	e7ac      	b.n	800c068 <__mdiff+0x1c>
 800c10e:	4620      	mov	r0, r4
 800c110:	4639      	mov	r1, r7
 800c112:	f7ff fd0d 	bl	800bb30 <_Balloc>
 800c116:	2301      	movs	r3, #1
 800c118:	6147      	str	r7, [r0, #20]
 800c11a:	6103      	str	r3, [r0, #16]
 800c11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c120 <__ulp>:
 800c120:	4b0e      	ldr	r3, [pc, #56]	; (800c15c <__ulp+0x3c>)
 800c122:	400b      	ands	r3, r1
 800c124:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c128:	2b00      	cmp	r3, #0
 800c12a:	dd02      	ble.n	800c132 <__ulp+0x12>
 800c12c:	4619      	mov	r1, r3
 800c12e:	2000      	movs	r0, #0
 800c130:	4770      	bx	lr
 800c132:	425b      	negs	r3, r3
 800c134:	151b      	asrs	r3, r3, #20
 800c136:	2b13      	cmp	r3, #19
 800c138:	dd0a      	ble.n	800c150 <__ulp+0x30>
 800c13a:	2b32      	cmp	r3, #50	; 0x32
 800c13c:	bfdd      	ittte	le
 800c13e:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
 800c142:	2201      	movle	r2, #1
 800c144:	fa02 f303 	lslle.w	r3, r2, r3
 800c148:	2301      	movgt	r3, #1
 800c14a:	2100      	movs	r1, #0
 800c14c:	4618      	mov	r0, r3
 800c14e:	4770      	bx	lr
 800c150:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c154:	fa42 f103 	asr.w	r1, r2, r3
 800c158:	2000      	movs	r0, #0
 800c15a:	4770      	bx	lr
 800c15c:	7ff00000 	.word	0x7ff00000

0800c160 <__b2d>:
 800c160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c162:	6904      	ldr	r4, [r0, #16]
 800c164:	f100 0614 	add.w	r6, r0, #20
 800c168:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800c16c:	460f      	mov	r7, r1
 800c16e:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800c172:	4628      	mov	r0, r5
 800c174:	f7ff fda4 	bl	800bcc0 <__hi0bits>
 800c178:	f1c0 0320 	rsb	r3, r0, #32
 800c17c:	280a      	cmp	r0, #10
 800c17e:	603b      	str	r3, [r7, #0]
 800c180:	f1a4 0104 	sub.w	r1, r4, #4
 800c184:	dc19      	bgt.n	800c1ba <__b2d+0x5a>
 800c186:	428e      	cmp	r6, r1
 800c188:	f1c0 070b 	rsb	r7, r0, #11
 800c18c:	bf38      	it	cc
 800c18e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 800c192:	fa25 fc07 	lsr.w	ip, r5, r7
 800c196:	f100 0015 	add.w	r0, r0, #21
 800c19a:	bf38      	it	cc
 800c19c:	fa21 f707 	lsrcc.w	r7, r1, r7
 800c1a0:	fa05 f500 	lsl.w	r5, r5, r0
 800c1a4:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
 800c1a8:	bf28      	it	cs
 800c1aa:	2700      	movcs	r7, #0
 800c1ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c1b0:	ea47 0205 	orr.w	r2, r7, r5
 800c1b4:	4610      	mov	r0, r2
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1ba:	428e      	cmp	r6, r1
 800c1bc:	bf36      	itet	cc
 800c1be:	f1a4 0108 	subcc.w	r1, r4, #8
 800c1c2:	2400      	movcs	r4, #0
 800c1c4:	f854 4c08 	ldrcc.w	r4, [r4, #-8]
 800c1c8:	f1b0 070b 	subs.w	r7, r0, #11
 800c1cc:	d019      	beq.n	800c202 <__b2d+0xa2>
 800c1ce:	42b1      	cmp	r1, r6
 800c1d0:	bf88      	it	hi
 800c1d2:	f851 1c04 	ldrhi.w	r1, [r1, #-4]
 800c1d6:	fa05 f507 	lsl.w	r5, r5, r7
 800c1da:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 800c1de:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 800c1e2:	fa24 fc00 	lsr.w	ip, r4, r0
 800c1e6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c1ea:	bf8c      	ite	hi
 800c1ec:	fa21 f000 	lsrhi.w	r0, r1, r0
 800c1f0:	2000      	movls	r0, #0
 800c1f2:	40bc      	lsls	r4, r7
 800c1f4:	ea45 030c 	orr.w	r3, r5, ip
 800c1f8:	ea40 0204 	orr.w	r2, r0, r4
 800c1fc:	4610      	mov	r0, r2
 800c1fe:	4619      	mov	r1, r3
 800c200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c202:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c206:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c20a:	4622      	mov	r2, r4
 800c20c:	4610      	mov	r0, r2
 800c20e:	4619      	mov	r1, r3
 800c210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c212:	bf00      	nop

0800c214 <__d2b>:
 800c214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c218:	b083      	sub	sp, #12
 800c21a:	2101      	movs	r1, #1
 800c21c:	461d      	mov	r5, r3
 800c21e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800c222:	4614      	mov	r4, r2
 800c224:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c226:	f7ff fc83 	bl	800bb30 <_Balloc>
 800c22a:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c22e:	4680      	mov	r8, r0
 800c230:	b10e      	cbz	r6, 800c236 <__d2b+0x22>
 800c232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c236:	9301      	str	r3, [sp, #4]
 800c238:	b324      	cbz	r4, 800c284 <__d2b+0x70>
 800c23a:	a802      	add	r0, sp, #8
 800c23c:	f840 4d08 	str.w	r4, [r0, #-8]!
 800c240:	4668      	mov	r0, sp
 800c242:	f7ff fd5d 	bl	800bd00 <__lo0bits>
 800c246:	2800      	cmp	r0, #0
 800c248:	d135      	bne.n	800c2b6 <__d2b+0xa2>
 800c24a:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800c24e:	f8c8 2014 	str.w	r2, [r8, #20]
 800c252:	2b00      	cmp	r3, #0
 800c254:	bf0c      	ite	eq
 800c256:	2401      	moveq	r4, #1
 800c258:	2402      	movne	r4, #2
 800c25a:	f8c8 3018 	str.w	r3, [r8, #24]
 800c25e:	f8c8 4010 	str.w	r4, [r8, #16]
 800c262:	b9de      	cbnz	r6, 800c29c <__d2b+0x88>
 800c264:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800c268:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c26c:	6038      	str	r0, [r7, #0]
 800c26e:	6918      	ldr	r0, [r3, #16]
 800c270:	f7ff fd26 	bl	800bcc0 <__hi0bits>
 800c274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c276:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800c27a:	6018      	str	r0, [r3, #0]
 800c27c:	4640      	mov	r0, r8
 800c27e:	b003      	add	sp, #12
 800c280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c284:	a801      	add	r0, sp, #4
 800c286:	f7ff fd3b 	bl	800bd00 <__lo0bits>
 800c28a:	2401      	movs	r4, #1
 800c28c:	9b01      	ldr	r3, [sp, #4]
 800c28e:	f8c8 3014 	str.w	r3, [r8, #20]
 800c292:	3020      	adds	r0, #32
 800c294:	f8c8 4010 	str.w	r4, [r8, #16]
 800c298:	2e00      	cmp	r6, #0
 800c29a:	d0e3      	beq.n	800c264 <__d2b+0x50>
 800c29c:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
 800c2a0:	eb09 0300 	add.w	r3, r9, r0
 800c2a4:	603b      	str	r3, [r7, #0]
 800c2a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c2ac:	6018      	str	r0, [r3, #0]
 800c2ae:	4640      	mov	r0, r8
 800c2b0:	b003      	add	sp, #12
 800c2b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2b6:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800c2ba:	f1c0 0120 	rsb	r1, r0, #32
 800c2be:	fa03 f101 	lsl.w	r1, r3, r1
 800c2c2:	430a      	orrs	r2, r1
 800c2c4:	40c3      	lsrs	r3, r0
 800c2c6:	9301      	str	r3, [sp, #4]
 800c2c8:	f8c8 2014 	str.w	r2, [r8, #20]
 800c2cc:	e7c1      	b.n	800c252 <__d2b+0x3e>
 800c2ce:	bf00      	nop

0800c2d0 <__ratio>:
 800c2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	460e      	mov	r6, r1
 800c2d6:	4669      	mov	r1, sp
 800c2d8:	4607      	mov	r7, r0
 800c2da:	f7ff ff41 	bl	800c160 <__b2d>
 800c2de:	4604      	mov	r4, r0
 800c2e0:	460d      	mov	r5, r1
 800c2e2:	4630      	mov	r0, r6
 800c2e4:	a901      	add	r1, sp, #4
 800c2e6:	f7ff ff3b 	bl	800c160 <__b2d>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800c2f2:	693f      	ldr	r7, [r7, #16]
 800c2f4:	6936      	ldr	r6, [r6, #16]
 800c2f6:	1a41      	subs	r1, r0, r1
 800c2f8:	ebc6 0e07 	rsb	lr, r6, r7
 800c2fc:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
 800c300:	f1be 0f00 	cmp.w	lr, #0
 800c304:	dd08      	ble.n	800c318 <__ratio+0x48>
 800c306:	eb05 510e 	add.w	r1, r5, lr, lsl #20
 800c30a:	460d      	mov	r5, r1
 800c30c:	4620      	mov	r0, r4
 800c30e:	4629      	mov	r1, r5
 800c310:	f7f4 fa30 	bl	8000774 <__aeabi_ddiv>
 800c314:	b003      	add	sp, #12
 800c316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c318:	eba3 570e 	sub.w	r7, r3, lr, lsl #20
 800c31c:	463b      	mov	r3, r7
 800c31e:	e7f5      	b.n	800c30c <__ratio+0x3c>

0800c320 <__copybits>:
 800c320:	b470      	push	{r4, r5, r6}
 800c322:	6915      	ldr	r5, [r2, #16]
 800c324:	f102 0314 	add.w	r3, r2, #20
 800c328:	3901      	subs	r1, #1
 800c32a:	114e      	asrs	r6, r1, #5
 800c32c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800c330:	3601      	adds	r6, #1
 800c332:	42ab      	cmp	r3, r5
 800c334:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800c338:	d20c      	bcs.n	800c354 <__copybits+0x34>
 800c33a:	4601      	mov	r1, r0
 800c33c:	f853 4b04 	ldr.w	r4, [r3], #4
 800c340:	f841 4b04 	str.w	r4, [r1], #4
 800c344:	429d      	cmp	r5, r3
 800c346:	d8f9      	bhi.n	800c33c <__copybits+0x1c>
 800c348:	1aab      	subs	r3, r5, r2
 800c34a:	3b15      	subs	r3, #21
 800c34c:	f023 0303 	bic.w	r3, r3, #3
 800c350:	3304      	adds	r3, #4
 800c352:	4418      	add	r0, r3
 800c354:	4286      	cmp	r6, r0
 800c356:	d904      	bls.n	800c362 <__copybits+0x42>
 800c358:	2300      	movs	r3, #0
 800c35a:	f840 3b04 	str.w	r3, [r0], #4
 800c35e:	4286      	cmp	r6, r0
 800c360:	d8fb      	bhi.n	800c35a <__copybits+0x3a>
 800c362:	bc70      	pop	{r4, r5, r6}
 800c364:	4770      	bx	lr
 800c366:	bf00      	nop

0800c368 <__any_on>:
 800c368:	6903      	ldr	r3, [r0, #16]
 800c36a:	114a      	asrs	r2, r1, #5
 800c36c:	4293      	cmp	r3, r2
 800c36e:	b410      	push	{r4}
 800c370:	f100 0414 	add.w	r4, r0, #20
 800c374:	da10      	bge.n	800c398 <__any_on+0x30>
 800c376:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c37a:	429c      	cmp	r4, r3
 800c37c:	d221      	bcs.n	800c3c2 <__any_on+0x5a>
 800c37e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c382:	3b04      	subs	r3, #4
 800c384:	b118      	cbz	r0, 800c38e <__any_on+0x26>
 800c386:	e015      	b.n	800c3b4 <__any_on+0x4c>
 800c388:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c38c:	b992      	cbnz	r2, 800c3b4 <__any_on+0x4c>
 800c38e:	429c      	cmp	r4, r3
 800c390:	d3fa      	bcc.n	800c388 <__any_on+0x20>
 800c392:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c396:	4770      	bx	lr
 800c398:	dd10      	ble.n	800c3bc <__any_on+0x54>
 800c39a:	f011 011f 	ands.w	r1, r1, #31
 800c39e:	d00d      	beq.n	800c3bc <__any_on+0x54>
 800c3a0:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 800c3a4:	fa20 f301 	lsr.w	r3, r0, r1
 800c3a8:	fa03 f101 	lsl.w	r1, r3, r1
 800c3ac:	4281      	cmp	r1, r0
 800c3ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c3b2:	d0e2      	beq.n	800c37a <__any_on+0x12>
 800c3b4:	2001      	movs	r0, #1
 800c3b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3ba:	4770      	bx	lr
 800c3bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c3c0:	e7db      	b.n	800c37a <__any_on+0x12>
 800c3c2:	2000      	movs	r0, #0
 800c3c4:	e7e5      	b.n	800c392 <__any_on+0x2a>
 800c3c6:	bf00      	nop

0800c3c8 <__fpclassifyd>:
 800c3c8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800c3cc:	b410      	push	{r4}
 800c3ce:	d008      	beq.n	800c3e2 <__fpclassifyd+0x1a>
 800c3d0:	4a0f      	ldr	r2, [pc, #60]	; (800c410 <__fpclassifyd+0x48>)
 800c3d2:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
 800c3d6:	4294      	cmp	r4, r2
 800c3d8:	d80a      	bhi.n	800c3f0 <__fpclassifyd+0x28>
 800c3da:	2004      	movs	r0, #4
 800c3dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3e0:	4770      	bx	lr
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	bf0c      	ite	eq
 800c3e6:	2002      	moveq	r0, #2
 800c3e8:	2003      	movne	r0, #3
 800c3ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3ee:	4770      	bx	lr
 800c3f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3f4:	d201      	bcs.n	800c3fa <__fpclassifyd+0x32>
 800c3f6:	2003      	movs	r0, #3
 800c3f8:	e7f7      	b.n	800c3ea <__fpclassifyd+0x22>
 800c3fa:	4a06      	ldr	r2, [pc, #24]	; (800c414 <__fpclassifyd+0x4c>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d001      	beq.n	800c404 <__fpclassifyd+0x3c>
 800c400:	2000      	movs	r0, #0
 800c402:	e7f2      	b.n	800c3ea <__fpclassifyd+0x22>
 800c404:	f1d0 0001 	rsbs	r0, r0, #1
 800c408:	bf38      	it	cc
 800c40a:	2000      	movcc	r0, #0
 800c40c:	e7ed      	b.n	800c3ea <__fpclassifyd+0x22>
 800c40e:	bf00      	nop
 800c410:	7fdfffff 	.word	0x7fdfffff
 800c414:	7ff00000 	.word	0x7ff00000

0800c418 <__sccl>:
 800c418:	b470      	push	{r4, r5, r6}
 800c41a:	780c      	ldrb	r4, [r1, #0]
 800c41c:	2c5e      	cmp	r4, #94	; 0x5e
 800c41e:	d02e      	beq.n	800c47e <__sccl+0x66>
 800c420:	2200      	movs	r2, #0
 800c422:	1c4d      	adds	r5, r1, #1
 800c424:	4616      	mov	r6, r2
 800c426:	2300      	movs	r3, #0
 800c428:	54c2      	strb	r2, [r0, r3]
 800c42a:	3301      	adds	r3, #1
 800c42c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c430:	d1fa      	bne.n	800c428 <__sccl+0x10>
 800c432:	b184      	cbz	r4, 800c456 <__sccl+0x3e>
 800c434:	f086 0201 	eor.w	r2, r6, #1
 800c438:	5502      	strb	r2, [r0, r4]
 800c43a:	1c6e      	adds	r6, r5, #1
 800c43c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c440:	2b2d      	cmp	r3, #45	; 0x2d
 800c442:	d00e      	beq.n	800c462 <__sccl+0x4a>
 800c444:	2b5d      	cmp	r3, #93	; 0x5d
 800c446:	d009      	beq.n	800c45c <__sccl+0x44>
 800c448:	b113      	cbz	r3, 800c450 <__sccl+0x38>
 800c44a:	461c      	mov	r4, r3
 800c44c:	4635      	mov	r5, r6
 800c44e:	e7f3      	b.n	800c438 <__sccl+0x20>
 800c450:	4628      	mov	r0, r5
 800c452:	bc70      	pop	{r4, r5, r6}
 800c454:	4770      	bx	lr
 800c456:	1e68      	subs	r0, r5, #1
 800c458:	bc70      	pop	{r4, r5, r6}
 800c45a:	4770      	bx	lr
 800c45c:	4630      	mov	r0, r6
 800c45e:	bc70      	pop	{r4, r5, r6}
 800c460:	4770      	bx	lr
 800c462:	7869      	ldrb	r1, [r5, #1]
 800c464:	295d      	cmp	r1, #93	; 0x5d
 800c466:	d0f0      	beq.n	800c44a <__sccl+0x32>
 800c468:	428c      	cmp	r4, r1
 800c46a:	dcee      	bgt.n	800c44a <__sccl+0x32>
 800c46c:	3502      	adds	r5, #2
 800c46e:	1903      	adds	r3, r0, r4
 800c470:	3401      	adds	r4, #1
 800c472:	42a1      	cmp	r1, r4
 800c474:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c478:	dcfa      	bgt.n	800c470 <__sccl+0x58>
 800c47a:	3602      	adds	r6, #2
 800c47c:	e7de      	b.n	800c43c <__sccl+0x24>
 800c47e:	2201      	movs	r2, #1
 800c480:	784c      	ldrb	r4, [r1, #1]
 800c482:	4616      	mov	r6, r2
 800c484:	1c8d      	adds	r5, r1, #2
 800c486:	e7ce      	b.n	800c426 <__sccl+0xe>

0800c488 <nanf>:
 800c488:	4800      	ldr	r0, [pc, #0]	; (800c48c <nanf+0x4>)
 800c48a:	4770      	bx	lr
 800c48c:	7fc00000 	.word	0x7fc00000

0800c490 <sulp>:
 800c490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c494:	460d      	mov	r5, r1
 800c496:	4690      	mov	r8, r2
 800c498:	f7ff fe42 	bl	800c120 <__ulp>
 800c49c:	4606      	mov	r6, r0
 800c49e:	460f      	mov	r7, r1
 800c4a0:	f1b8 0f00 	cmp.w	r8, #0
 800c4a4:	d00f      	beq.n	800c4c6 <sulp+0x36>
 800c4a6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c4aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	dd09      	ble.n	800c4c6 <sulp+0x36>
 800c4b2:	051c      	lsls	r4, r3, #20
 800c4b4:	f104 537f 	add.w	r3, r4, #1069547520	; 0x3fc00000
 800c4b8:	f503 1340 	add.w	r3, r3, #3145728	; 0x300000
 800c4bc:	2200      	movs	r2, #0
 800c4be:	f7f4 f82f 	bl	8000520 <__aeabi_dmul>
 800c4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4c6:	4630      	mov	r0, r6
 800c4c8:	4639      	mov	r1, r7
 800c4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4ce:	bf00      	nop

0800c4d0 <_strtod_r>:
 800c4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d4:	b09f      	sub	sp, #124	; 0x7c
 800c4d6:	460d      	mov	r5, r1
 800c4d8:	9119      	str	r1, [sp, #100]	; 0x64
 800c4da:	4683      	mov	fp, r0
 800c4dc:	9205      	str	r2, [sp, #20]
 800c4de:	2000      	movs	r0, #0
 800c4e0:	460a      	mov	r2, r1
 800c4e2:	2100      	movs	r1, #0
 800c4e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	931a      	str	r3, [sp, #104]	; 0x68
 800c4ec:	4616      	mov	r6, r2
 800c4ee:	f812 4b01 	ldrb.w	r4, [r2], #1
 800c4f2:	2c2d      	cmp	r4, #45	; 0x2d
 800c4f4:	f200 8158 	bhi.w	800c7a8 <_strtod_r+0x2d8>
 800c4f8:	e8df f014 	tbh	[pc, r4, lsl #1]
 800c4fc:	01560039 	.word	0x01560039
 800c500:	01560156 	.word	0x01560156
 800c504:	01560156 	.word	0x01560156
 800c508:	01560156 	.word	0x01560156
 800c50c:	007d0156 	.word	0x007d0156
 800c510:	007d007d 	.word	0x007d007d
 800c514:	007d007d 	.word	0x007d007d
 800c518:	01560156 	.word	0x01560156
 800c51c:	01560156 	.word	0x01560156
 800c520:	01560156 	.word	0x01560156
 800c524:	01560156 	.word	0x01560156
 800c528:	01560156 	.word	0x01560156
 800c52c:	01560156 	.word	0x01560156
 800c530:	01560156 	.word	0x01560156
 800c534:	01560156 	.word	0x01560156
 800c538:	01560156 	.word	0x01560156
 800c53c:	0156007d 	.word	0x0156007d
 800c540:	01560156 	.word	0x01560156
 800c544:	01560156 	.word	0x01560156
 800c548:	01560156 	.word	0x01560156
 800c54c:	01560156 	.word	0x01560156
 800c550:	004d0156 	.word	0x004d0156
 800c554:	007f0156 	.word	0x007f0156
 800c558:	2300      	movs	r3, #0
 800c55a:	2101      	movs	r1, #1
 800c55c:	469a      	mov	sl, r3
 800c55e:	910b      	str	r1, [sp, #44]	; 0x2c
 800c560:	2800      	cmp	r0, #0
 800c562:	f040 8151 	bne.w	800c808 <_strtod_r+0x338>
 800c566:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c568:	2a00      	cmp	r2, #0
 800c56a:	f040 814d 	bne.w	800c808 <_strtod_r+0x338>
 800c56e:	2000      	movs	r0, #0
 800c570:	f04f 0800 	mov.w	r8, #0
 800c574:	f04f 0900 	mov.w	r9, #0
 800c578:	9519      	str	r5, [sp, #100]	; 0x64
 800c57a:	9007      	str	r0, [sp, #28]
 800c57c:	9805      	ldr	r0, [sp, #20]
 800c57e:	b108      	cbz	r0, 800c584 <_strtod_r+0xb4>
 800c580:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c582:	6003      	str	r3, [r0, #0]
 800c584:	9907      	ldr	r1, [sp, #28]
 800c586:	2900      	cmp	r1, #0
 800c588:	f040 809e 	bne.w	800c6c8 <_strtod_r+0x1f8>
 800c58c:	4640      	mov	r0, r8
 800c58e:	4649      	mov	r1, r9
 800c590:	b01f      	add	sp, #124	; 0x7c
 800c592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c596:	2300      	movs	r3, #0
 800c598:	9307      	str	r3, [sp, #28]
 800c59a:	1c73      	adds	r3, r6, #1
 800c59c:	9319      	str	r3, [sp, #100]	; 0x64
 800c59e:	7874      	ldrb	r4, [r6, #1]
 800c5a0:	2c00      	cmp	r4, #0
 800c5a2:	d0e4      	beq.n	800c56e <_strtod_r+0x9e>
 800c5a4:	2c30      	cmp	r4, #48	; 0x30
 800c5a6:	461e      	mov	r6, r3
 800c5a8:	f000 8103 	beq.w	800c7b2 <_strtod_r+0x2e2>
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	9606      	str	r6, [sp, #24]
 800c5b0:	930a      	str	r3, [sp, #40]	; 0x28
 800c5b2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c5b6:	2700      	movs	r7, #0
 800c5b8:	2b09      	cmp	r3, #9
 800c5ba:	46b9      	mov	r9, r7
 800c5bc:	463e      	mov	r6, r7
 800c5be:	d81f      	bhi.n	800c600 <_strtod_r+0x130>
 800c5c0:	9806      	ldr	r0, [sp, #24]
 800c5c2:	1c43      	adds	r3, r0, #1
 800c5c4:	e00f      	b.n	800c5e6 <_strtod_r+0x116>
 800c5c6:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 800c5ca:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 800c5ce:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 800c5d2:	9319      	str	r3, [sp, #100]	; 0x64
 800c5d4:	4698      	mov	r8, r3
 800c5d6:	f813 4b01 	ldrb.w	r4, [r3], #1
 800c5da:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800c5de:	2a09      	cmp	r2, #9
 800c5e0:	f106 0601 	add.w	r6, r6, #1
 800c5e4:	d80e      	bhi.n	800c604 <_strtod_r+0x134>
 800c5e6:	2e08      	cmp	r6, #8
 800c5e8:	dded      	ble.n	800c5c6 <_strtod_r+0xf6>
 800c5ea:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800c5ee:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 800c5f2:	3f30      	subs	r7, #48	; 0x30
 800c5f4:	e7ed      	b.n	800c5d2 <_strtod_r+0x102>
 800c5f6:	9219      	str	r2, [sp, #100]	; 0x64
 800c5f8:	e778      	b.n	800c4ec <_strtod_r+0x1c>
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	9207      	str	r2, [sp, #28]
 800c5fe:	e7cc      	b.n	800c59a <_strtod_r+0xca>
 800c600:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c604:	4658      	mov	r0, fp
 800c606:	f7ff fa03 	bl	800ba10 <_localeconv_r>
 800c60a:	f8d0 a000 	ldr.w	sl, [r0]
 800c60e:	4658      	mov	r0, fp
 800c610:	f7ff f9fe 	bl	800ba10 <_localeconv_r>
 800c614:	6800      	ldr	r0, [r0, #0]
 800c616:	f7fb fecd 	bl	80083b4 <strlen>
 800c61a:	4651      	mov	r1, sl
 800c61c:	4602      	mov	r2, r0
 800c61e:	4640      	mov	r0, r8
 800c620:	f7fb fef8 	bl	8008414 <strncmp>
 800c624:	4680      	mov	r8, r0
 800c626:	2800      	cmp	r0, #0
 800c628:	f000 8146 	beq.w	800c8b8 <_strtod_r+0x3e8>
 800c62c:	2000      	movs	r0, #0
 800c62e:	4603      	mov	r3, r0
 800c630:	900b      	str	r0, [sp, #44]	; 0x2c
 800c632:	46b2      	mov	sl, r6
 800c634:	f024 0220 	bic.w	r2, r4, #32
 800c638:	2a45      	cmp	r2, #69	; 0x45
 800c63a:	f000 80e1 	beq.w	800c800 <_strtod_r+0x330>
 800c63e:	2100      	movs	r1, #0
 800c640:	f1ba 0f00 	cmp.w	sl, #0
 800c644:	d054      	beq.n	800c6f0 <_strtod_r+0x220>
 800c646:	1acb      	subs	r3, r1, r3
 800c648:	4648      	mov	r0, r9
 800c64a:	9308      	str	r3, [sp, #32]
 800c64c:	f7f3 fef2 	bl	8000434 <__aeabi_ui2d>
 800c650:	f1ba 0f10 	cmp.w	sl, #16
 800c654:	bfb4      	ite	lt
 800c656:	46d0      	movlt	r8, sl
 800c658:	f04f 0810 	movge.w	r8, #16
 800c65c:	2e00      	cmp	r6, #0
 800c65e:	bf08      	it	eq
 800c660:	4656      	moveq	r6, sl
 800c662:	f1b8 0f09 	cmp.w	r8, #9
 800c666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c66a:	dd13      	ble.n	800c694 <_strtod_r+0x1c4>
 800c66c:	4ba0      	ldr	r3, [pc, #640]	; (800c8f0 <_strtod_r+0x420>)
 800c66e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c672:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c676:	f7f3 ff53 	bl	8000520 <__aeabi_dmul>
 800c67a:	4604      	mov	r4, r0
 800c67c:	4638      	mov	r0, r7
 800c67e:	460d      	mov	r5, r1
 800c680:	f7f3 fed8 	bl	8000434 <__aeabi_ui2d>
 800c684:	4602      	mov	r2, r0
 800c686:	460b      	mov	r3, r1
 800c688:	4620      	mov	r0, r4
 800c68a:	4629      	mov	r1, r5
 800c68c:	f7f3 fd96 	bl	80001bc <__adddf3>
 800c690:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c694:	f1ba 0f0f 	cmp.w	sl, #15
 800c698:	f300 812c 	bgt.w	800c8f4 <_strtod_r+0x424>
 800c69c:	9908      	ldr	r1, [sp, #32]
 800c69e:	2900      	cmp	r1, #0
 800c6a0:	f000 80ab 	beq.w	800c7fa <_strtod_r+0x32a>
 800c6a4:	f340 8580 	ble.w	800d1a8 <_strtod_r+0xcd8>
 800c6a8:	9a08      	ldr	r2, [sp, #32]
 800c6aa:	2a16      	cmp	r2, #22
 800c6ac:	f300 84f2 	bgt.w	800d094 <_strtod_r+0xbc4>
 800c6b0:	4b8f      	ldr	r3, [pc, #572]	; (800c8f0 <_strtod_r+0x420>)
 800c6b2:	eb03 0ac2 	add.w	sl, r3, r2, lsl #3
 800c6b6:	e9da 0100 	ldrd	r0, r1, [sl]
 800c6ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6be:	f7f3 ff2f 	bl	8000520 <__aeabi_dmul>
 800c6c2:	4680      	mov	r8, r0
 800c6c4:	4689      	mov	r9, r1
 800c6c6:	e759      	b.n	800c57c <_strtod_r+0xac>
 800c6c8:	4640      	mov	r0, r8
 800c6ca:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
 800c6ce:	b01f      	add	sp, #124	; 0x7c
 800c6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d4:	4633      	mov	r3, r6
 800c6d6:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
 800c6da:	2a08      	cmp	r2, #8
 800c6dc:	f240 833d 	bls.w	800cd5a <_strtod_r+0x88a>
 800c6e0:	f024 0220 	bic.w	r2, r4, #32
 800c6e4:	2a45      	cmp	r2, #69	; 0x45
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f43f af36 	beq.w	800c558 <_strtod_r+0x88>
 800c6ec:	2101      	movs	r1, #1
 800c6ee:	910b      	str	r1, [sp, #44]	; 0x2c
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	d171      	bne.n	800c7d8 <_strtod_r+0x308>
 800c6f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d16e      	bne.n	800c7d8 <_strtod_r+0x308>
 800c6fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	f47f af36 	bne.w	800c56e <_strtod_r+0x9e>
 800c702:	3c49      	subs	r4, #73	; 0x49
 800c704:	2c25      	cmp	r4, #37	; 0x25
 800c706:	f63f af32 	bhi.w	800c56e <_strtod_r+0x9e>
 800c70a:	a101      	add	r1, pc, #4	; (adr r1, 800c710 <_strtod_r+0x240>)
 800c70c:	f851 f024 	ldr.w	pc, [r1, r4, lsl #2]
 800c710:	0800cdd5 	.word	0x0800cdd5
 800c714:	0800c56f 	.word	0x0800c56f
 800c718:	0800c56f 	.word	0x0800c56f
 800c71c:	0800c56f 	.word	0x0800c56f
 800c720:	0800c56f 	.word	0x0800c56f
 800c724:	0800cd9d 	.word	0x0800cd9d
 800c728:	0800c56f 	.word	0x0800c56f
 800c72c:	0800c56f 	.word	0x0800c56f
 800c730:	0800c56f 	.word	0x0800c56f
 800c734:	0800c56f 	.word	0x0800c56f
 800c738:	0800c56f 	.word	0x0800c56f
 800c73c:	0800c56f 	.word	0x0800c56f
 800c740:	0800c56f 	.word	0x0800c56f
 800c744:	0800c56f 	.word	0x0800c56f
 800c748:	0800c56f 	.word	0x0800c56f
 800c74c:	0800c56f 	.word	0x0800c56f
 800c750:	0800c56f 	.word	0x0800c56f
 800c754:	0800c56f 	.word	0x0800c56f
 800c758:	0800c56f 	.word	0x0800c56f
 800c75c:	0800c56f 	.word	0x0800c56f
 800c760:	0800c56f 	.word	0x0800c56f
 800c764:	0800c56f 	.word	0x0800c56f
 800c768:	0800c56f 	.word	0x0800c56f
 800c76c:	0800c56f 	.word	0x0800c56f
 800c770:	0800c56f 	.word	0x0800c56f
 800c774:	0800c56f 	.word	0x0800c56f
 800c778:	0800c56f 	.word	0x0800c56f
 800c77c:	0800c56f 	.word	0x0800c56f
 800c780:	0800c56f 	.word	0x0800c56f
 800c784:	0800c56f 	.word	0x0800c56f
 800c788:	0800c56f 	.word	0x0800c56f
 800c78c:	0800c56f 	.word	0x0800c56f
 800c790:	0800cdd5 	.word	0x0800cdd5
 800c794:	0800c56f 	.word	0x0800c56f
 800c798:	0800c56f 	.word	0x0800c56f
 800c79c:	0800c56f 	.word	0x0800c56f
 800c7a0:	0800c56f 	.word	0x0800c56f
 800c7a4:	0800cd9d 	.word	0x0800cd9d
 800c7a8:	2000      	movs	r0, #0
 800c7aa:	2c30      	cmp	r4, #48	; 0x30
 800c7ac:	9007      	str	r0, [sp, #28]
 800c7ae:	f47f aefd 	bne.w	800c5ac <_strtod_r+0xdc>
 800c7b2:	7873      	ldrb	r3, [r6, #1]
 800c7b4:	2b58      	cmp	r3, #88	; 0x58
 800c7b6:	f000 8337 	beq.w	800ce28 <_strtod_r+0x958>
 800c7ba:	2b78      	cmp	r3, #120	; 0x78
 800c7bc:	f000 8334 	beq.w	800ce28 <_strtod_r+0x958>
 800c7c0:	3601      	adds	r6, #1
 800c7c2:	9619      	str	r6, [sp, #100]	; 0x64
 800c7c4:	4633      	mov	r3, r6
 800c7c6:	f816 4b01 	ldrb.w	r4, [r6], #1
 800c7ca:	2c30      	cmp	r4, #48	; 0x30
 800c7cc:	d0f9      	beq.n	800c7c2 <_strtod_r+0x2f2>
 800c7ce:	b11c      	cbz	r4, 800c7d8 <_strtod_r+0x308>
 800c7d0:	9306      	str	r3, [sp, #24]
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	930a      	str	r3, [sp, #40]	; 0x28
 800c7d6:	e6ec      	b.n	800c5b2 <_strtod_r+0xe2>
 800c7d8:	f04f 0800 	mov.w	r8, #0
 800c7dc:	f04f 0900 	mov.w	r9, #0
 800c7e0:	e6cc      	b.n	800c57c <_strtod_r+0xac>
 800c7e2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c7e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ea:	9303      	str	r3, [sp, #12]
 800c7ec:	9002      	str	r0, [sp, #8]
 800c7ee:	0722      	lsls	r2, r4, #28
 800c7f0:	bf42      	ittt	mi
 800c7f2:	9903      	ldrmi	r1, [sp, #12]
 800c7f4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c7f8:	9103      	strmi	r1, [sp, #12]
 800c7fa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c7fe:	e6bd      	b.n	800c57c <_strtod_r+0xac>
 800c800:	f1ba 0f00 	cmp.w	sl, #0
 800c804:	f43f aeac 	beq.w	800c560 <_strtod_r+0x90>
 800c808:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800c80a:	1c6a      	adds	r2, r5, #1
 800c80c:	9219      	str	r2, [sp, #100]	; 0x64
 800c80e:	786c      	ldrb	r4, [r5, #1]
 800c810:	2c2b      	cmp	r4, #43	; 0x2b
 800c812:	f000 824c 	beq.w	800ccae <_strtod_r+0x7de>
 800c816:	2c2d      	cmp	r4, #45	; 0x2d
 800c818:	f040 8246 	bne.w	800cca8 <_strtod_r+0x7d8>
 800c81c:	2101      	movs	r1, #1
 800c81e:	9108      	str	r1, [sp, #32]
 800c820:	1caa      	adds	r2, r5, #2
 800c822:	9219      	str	r2, [sp, #100]	; 0x64
 800c824:	78ac      	ldrb	r4, [r5, #2]
 800c826:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800c82a:	2a09      	cmp	r2, #9
 800c82c:	f200 81e5 	bhi.w	800cbfa <_strtod_r+0x72a>
 800c830:	2c30      	cmp	r4, #48	; 0x30
 800c832:	d106      	bne.n	800c842 <_strtod_r+0x372>
 800c834:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c836:	3201      	adds	r2, #1
 800c838:	9219      	str	r2, [sp, #100]	; 0x64
 800c83a:	f812 4b01 	ldrb.w	r4, [r2], #1
 800c83e:	2c30      	cmp	r4, #48	; 0x30
 800c840:	d0fa      	beq.n	800c838 <_strtod_r+0x368>
 800c842:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
 800c846:	2a08      	cmp	r2, #8
 800c848:	f63f aef9 	bhi.w	800c63e <_strtod_r+0x16e>
 800c84c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c84e:	920e      	str	r2, [sp, #56]	; 0x38
 800c850:	f102 0801 	add.w	r8, r2, #1
 800c854:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
 800c858:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
 800c85c:	7854      	ldrb	r4, [r2, #1]
 800c85e:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800c862:	2a09      	cmp	r2, #9
 800c864:	d812      	bhi.n	800c88c <_strtod_r+0x3bc>
 800c866:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c868:	f102 0c02 	add.w	ip, r2, #2
 800c86c:	4662      	mov	r2, ip
 800c86e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c872:	9219      	str	r2, [sp, #100]	; 0x64
 800c874:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800c878:	4690      	mov	r8, r2
 800c87a:	f812 4b01 	ldrb.w	r4, [r2], #1
 800c87e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c882:	f1bc 0f09 	cmp.w	ip, #9
 800c886:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
 800c88a:	d9f0      	bls.n	800c86e <_strtod_r+0x39e>
 800c88c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c88e:	ebc2 0808 	rsb	r8, r2, r8
 800c892:	f1b8 0f08 	cmp.w	r8, #8
 800c896:	f300 83f5 	bgt.w	800d084 <_strtod_r+0xbb4>
 800c89a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800c89e:	4291      	cmp	r1, r2
 800c8a0:	bfa8      	it	ge
 800c8a2:	4611      	movge	r1, r2
 800c8a4:	9a08      	ldr	r2, [sp, #32]
 800c8a6:	2a00      	cmp	r2, #0
 800c8a8:	f43f aeca 	beq.w	800c640 <_strtod_r+0x170>
 800c8ac:	4249      	negs	r1, r1
 800c8ae:	f1ba 0f00 	cmp.w	sl, #0
 800c8b2:	f47f aec8 	bne.w	800c646 <_strtod_r+0x176>
 800c8b6:	e71b      	b.n	800c6f0 <_strtod_r+0x220>
 800c8b8:	4658      	mov	r0, fp
 800c8ba:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800c8bc:	f7ff f8a8 	bl	800ba10 <_localeconv_r>
 800c8c0:	6800      	ldr	r0, [r0, #0]
 800c8c2:	f7fb fd77 	bl	80083b4 <strlen>
 800c8c6:	1823      	adds	r3, r4, r0
 800c8c8:	9319      	str	r3, [sp, #100]	; 0x64
 800c8ca:	5c24      	ldrb	r4, [r4, r0]
 800c8cc:	2e00      	cmp	r6, #0
 800c8ce:	f040 81c3 	bne.w	800cc58 <_strtod_r+0x788>
 800c8d2:	2c30      	cmp	r4, #48	; 0x30
 800c8d4:	f47f aefe 	bne.w	800c6d4 <_strtod_r+0x204>
 800c8d8:	461a      	mov	r2, r3
 800c8da:	4633      	mov	r3, r6
 800c8dc:	e000      	b.n	800c8e0 <_strtod_r+0x410>
 800c8de:	460a      	mov	r2, r1
 800c8e0:	1c51      	adds	r1, r2, #1
 800c8e2:	9119      	str	r1, [sp, #100]	; 0x64
 800c8e4:	7854      	ldrb	r4, [r2, #1]
 800c8e6:	2c30      	cmp	r4, #48	; 0x30
 800c8e8:	f103 0301 	add.w	r3, r3, #1
 800c8ec:	d0f7      	beq.n	800c8de <_strtod_r+0x40e>
 800c8ee:	e6f2      	b.n	800c6d6 <_strtod_r+0x206>
 800c8f0:	0800f0f8 	.word	0x0800f0f8
 800c8f4:	9908      	ldr	r1, [sp, #32]
 800c8f6:	ebc8 080a 	rsb	r8, r8, sl
 800c8fa:	4488      	add	r8, r1
 800c8fc:	f1b8 0f00 	cmp.w	r8, #0
 800c900:	f340 836c 	ble.w	800cfdc <_strtod_r+0xb0c>
 800c904:	f018 030f 	ands.w	r3, r8, #15
 800c908:	d00a      	beq.n	800c920 <_strtod_r+0x450>
 800c90a:	49a7      	ldr	r1, [pc, #668]	; (800cba8 <_strtod_r+0x6d8>)
 800c90c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c910:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c918:	f7f3 fe02 	bl	8000520 <__aeabi_dmul>
 800c91c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c920:	f038 040f 	bics.w	r4, r8, #15
 800c924:	f040 81c9 	bne.w	800ccba <_strtod_r+0x7ea>
 800c928:	2200      	movs	r2, #0
 800c92a:	920a      	str	r2, [sp, #40]	; 0x28
 800c92c:	f8cd 9000 	str.w	r9, [sp]
 800c930:	9906      	ldr	r1, [sp, #24]
 800c932:	4632      	mov	r2, r6
 800c934:	4653      	mov	r3, sl
 800c936:	4658      	mov	r0, fp
 800c938:	f7ff f976 	bl	800bc28 <__s2b>
 800c93c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c93e:	2800      	cmp	r0, #0
 800c940:	f000 82d5 	beq.w	800ceee <_strtod_r+0xa1e>
 800c944:	9908      	ldr	r1, [sp, #32]
 800c946:	2200      	movs	r2, #0
 800c948:	2900      	cmp	r1, #0
 800c94a:	f1c1 0300 	rsb	r3, r1, #0
 800c94e:	bfa8      	it	ge
 800c950:	4613      	movge	r3, r2
 800c952:	930e      	str	r3, [sp, #56]	; 0x38
 800c954:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 800c958:	9206      	str	r2, [sp, #24]
 800c95a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c95c:	4617      	mov	r7, r2
 800c95e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c960:	4658      	mov	r0, fp
 800c962:	6851      	ldr	r1, [r2, #4]
 800c964:	f7ff f8e4 	bl	800bb30 <_Balloc>
 800c968:	4606      	mov	r6, r0
 800c96a:	2800      	cmp	r0, #0
 800c96c:	f000 82cd 	beq.w	800cf0a <_strtod_r+0xa3a>
 800c970:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c972:	6903      	ldr	r3, [r0, #16]
 800c974:	1c9a      	adds	r2, r3, #2
 800c976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c978:	0092      	lsls	r2, r2, #2
 800c97a:	f103 010c 	add.w	r1, r3, #12
 800c97e:	f106 000c 	add.w	r0, r6, #12
 800c982:	f7f4 faad 	bl	8000ee0 <memcpy>
 800c986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c98a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c98e:	a81b      	add	r0, sp, #108	; 0x6c
 800c990:	a91c      	add	r1, sp, #112	; 0x70
 800c992:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c996:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c99a:	4658      	mov	r0, fp
 800c99c:	f7ff fc3a 	bl	800c214 <__d2b>
 800c9a0:	901a      	str	r0, [sp, #104]	; 0x68
 800c9a2:	2800      	cmp	r0, #0
 800c9a4:	f000 8412 	beq.w	800d1cc <_strtod_r+0xcfc>
 800c9a8:	4658      	mov	r0, fp
 800c9aa:	2101      	movs	r1, #1
 800c9ac:	f7ff f9d6 	bl	800bd5c <__i2b>
 800c9b0:	4607      	mov	r7, r0
 800c9b2:	2800      	cmp	r0, #0
 800c9b4:	f000 82a9 	beq.w	800cf0a <_strtod_r+0xa3a>
 800c9b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	f2c0 8110 	blt.w	800cbe0 <_strtod_r+0x710>
 800c9c0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800c9c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c9c6:	4499      	add	r9, r3
 800c9c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c9ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c9cc:	1a1b      	subs	r3, r3, r0
 800c9ce:	4413      	add	r3, r2
 800c9d0:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
 800c9d4:	428b      	cmp	r3, r1
 800c9d6:	f1c2 0a36 	rsb	sl, r2, #54	; 0x36
 800c9da:	f280 80da 	bge.w	800cb92 <_strtod_r+0x6c2>
 800c9de:	1aca      	subs	r2, r1, r3
 800c9e0:	2a1f      	cmp	r2, #31
 800c9e2:	ebc2 0a0a 	rsb	sl, r2, sl
 800c9e6:	f300 8100 	bgt.w	800cbea <_strtod_r+0x71a>
 800c9ea:	f04f 0801 	mov.w	r8, #1
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	fa08 f802 	lsl.w	r8, r8, r2
 800c9f4:	930c      	str	r3, [sp, #48]	; 0x30
 800c9f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c9f8:	4455      	add	r5, sl
 800c9fa:	44ca      	add	sl, r9
 800c9fc:	45ca      	cmp	sl, r9
 800c9fe:	bfb4      	ite	lt
 800ca00:	4653      	movlt	r3, sl
 800ca02:	464b      	movge	r3, r9
 800ca04:	4405      	add	r5, r0
 800ca06:	42ab      	cmp	r3, r5
 800ca08:	bfa8      	it	ge
 800ca0a:	462b      	movge	r3, r5
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	dd04      	ble.n	800ca1a <_strtod_r+0x54a>
 800ca10:	ebc3 0a0a 	rsb	sl, r3, sl
 800ca14:	1aed      	subs	r5, r5, r3
 800ca16:	ebc3 0909 	rsb	r9, r3, r9
 800ca1a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ca1c:	b1b1      	cbz	r1, 800ca4c <_strtod_r+0x57c>
 800ca1e:	4639      	mov	r1, r7
 800ca20:	4658      	mov	r0, fp
 800ca22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca24:	f7ff fa42 	bl	800beac <__pow5mult>
 800ca28:	4607      	mov	r7, r0
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	f000 826d 	beq.w	800cf0a <_strtod_r+0xa3a>
 800ca30:	4658      	mov	r0, fp
 800ca32:	4639      	mov	r1, r7
 800ca34:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ca36:	f7ff f99b 	bl	800bd70 <__multiply>
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	f000 8264 	beq.w	800cf0a <_strtod_r+0xa3a>
 800ca42:	4658      	mov	r0, fp
 800ca44:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ca46:	f7ff f899 	bl	800bb7c <_Bfree>
 800ca4a:	941a      	str	r4, [sp, #104]	; 0x68
 800ca4c:	f1ba 0f00 	cmp.w	sl, #0
 800ca50:	dd08      	ble.n	800ca64 <_strtod_r+0x594>
 800ca52:	4652      	mov	r2, sl
 800ca54:	4658      	mov	r0, fp
 800ca56:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ca58:	f7ff fa76 	bl	800bf48 <__lshift>
 800ca5c:	901a      	str	r0, [sp, #104]	; 0x68
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	f000 83b4 	beq.w	800d1cc <_strtod_r+0xcfc>
 800ca64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ca66:	b142      	cbz	r2, 800ca7a <_strtod_r+0x5aa>
 800ca68:	4631      	mov	r1, r6
 800ca6a:	4658      	mov	r0, fp
 800ca6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ca6e:	f7ff fa1d 	bl	800beac <__pow5mult>
 800ca72:	4606      	mov	r6, r0
 800ca74:	2800      	cmp	r0, #0
 800ca76:	f000 8248 	beq.w	800cf0a <_strtod_r+0xa3a>
 800ca7a:	2d00      	cmp	r5, #0
 800ca7c:	dd08      	ble.n	800ca90 <_strtod_r+0x5c0>
 800ca7e:	4631      	mov	r1, r6
 800ca80:	462a      	mov	r2, r5
 800ca82:	4658      	mov	r0, fp
 800ca84:	f7ff fa60 	bl	800bf48 <__lshift>
 800ca88:	4606      	mov	r6, r0
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	f000 823d 	beq.w	800cf0a <_strtod_r+0xa3a>
 800ca90:	f1b9 0f00 	cmp.w	r9, #0
 800ca94:	dd08      	ble.n	800caa8 <_strtod_r+0x5d8>
 800ca96:	4639      	mov	r1, r7
 800ca98:	464a      	mov	r2, r9
 800ca9a:	4658      	mov	r0, fp
 800ca9c:	f7ff fa54 	bl	800bf48 <__lshift>
 800caa0:	4607      	mov	r7, r0
 800caa2:	2800      	cmp	r0, #0
 800caa4:	f000 8231 	beq.w	800cf0a <_strtod_r+0xa3a>
 800caa8:	4658      	mov	r0, fp
 800caaa:	991a      	ldr	r1, [sp, #104]	; 0x68
 800caac:	4632      	mov	r2, r6
 800caae:	f7ff facd 	bl	800c04c <__mdiff>
 800cab2:	9006      	str	r0, [sp, #24]
 800cab4:	2800      	cmp	r0, #0
 800cab6:	f000 8228 	beq.w	800cf0a <_strtod_r+0xa3a>
 800caba:	9906      	ldr	r1, [sp, #24]
 800cabc:	2300      	movs	r3, #0
 800cabe:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 800cac2:	60cb      	str	r3, [r1, #12]
 800cac4:	4639      	mov	r1, r7
 800cac6:	f7ff fa9d 	bl	800c004 <__mcmp>
 800caca:	2800      	cmp	r0, #0
 800cacc:	f2c0 838a 	blt.w	800d1e4 <_strtod_r+0xd14>
 800cad0:	f000 83da 	beq.w	800d288 <_strtod_r+0xdb8>
 800cad4:	9806      	ldr	r0, [sp, #24]
 800cad6:	4639      	mov	r1, r7
 800cad8:	f7ff fbfa 	bl	800c2d0 <__ratio>
 800cadc:	2200      	movs	r2, #0
 800cade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cae2:	4604      	mov	r4, r0
 800cae4:	460d      	mov	r5, r1
 800cae6:	f7f4 faff 	bl	80010e8 <__aeabi_dcmple>
 800caea:	2800      	cmp	r0, #0
 800caec:	d064      	beq.n	800cbb8 <_strtod_r+0x6e8>
 800caee:	f1ba 0f00 	cmp.w	sl, #0
 800caf2:	f000 808e 	beq.w	800cc12 <_strtod_r+0x742>
 800caf6:	4d2d      	ldr	r5, [pc, #180]	; (800cbac <_strtod_r+0x6dc>)
 800caf8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cafc:	2400      	movs	r4, #0
 800cafe:	4622      	mov	r2, r4
 800cb00:	462b      	mov	r3, r5
 800cb02:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800cb06:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800cbb4 <_strtod_r+0x6e4>
 800cb0a:	4b29      	ldr	r3, [pc, #164]	; (800cbb0 <_strtod_r+0x6e0>)
 800cb0c:	ea09 0808 	and.w	r8, r9, r8
 800cb10:	4598      	cmp	r8, r3
 800cb12:	f000 81bf 	beq.w	800ce94 <_strtod_r+0x9c4>
 800cb16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb18:	b182      	cbz	r2, 800cb3c <_strtod_r+0x66c>
 800cb1a:	f1b8 6fd4 	cmp.w	r8, #111149056	; 0x6a00000
 800cb1e:	d80d      	bhi.n	800cb3c <_strtod_r+0x66c>
 800cb20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cb24:	a31e      	add	r3, pc, #120	; (adr r3, 800cba0 <_strtod_r+0x6d0>)
 800cb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2a:	f7f4 fadd 	bl	80010e8 <__aeabi_dcmple>
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	f040 811c 	bne.w	800cd6c <_strtod_r+0x89c>
 800cb34:	f105 63d6 	add.w	r3, r5, #112197632	; 0x6b00000
 800cb38:	ebc8 0503 	rsb	r5, r8, r3
 800cb3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cb40:	f7ff faee 	bl	800c120 <__ulp>
 800cb44:	4602      	mov	r2, r0
 800cb46:	460b      	mov	r3, r1
 800cb48:	4620      	mov	r0, r4
 800cb4a:	4629      	mov	r1, r5
 800cb4c:	f7f3 fce8 	bl	8000520 <__aeabi_dmul>
 800cb50:	4602      	mov	r2, r0
 800cb52:	460b      	mov	r3, r1
 800cb54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cb58:	f7f3 fb30 	bl	80001bc <__adddf3>
 800cb5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb60:	9c03      	ldr	r4, [sp, #12]
 800cb62:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cb64:	b921      	cbnz	r1, 800cb70 <_strtod_r+0x6a0>
 800cb66:	4b13      	ldr	r3, [pc, #76]	; (800cbb4 <_strtod_r+0x6e4>)
 800cb68:	4023      	ands	r3, r4
 800cb6a:	4598      	cmp	r8, r3
 800cb6c:	f000 81ed 	beq.w	800cf4a <_strtod_r+0xa7a>
 800cb70:	4658      	mov	r0, fp
 800cb72:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cb74:	f7ff f802 	bl	800bb7c <_Bfree>
 800cb78:	4658      	mov	r0, fp
 800cb7a:	4631      	mov	r1, r6
 800cb7c:	f7fe fffe 	bl	800bb7c <_Bfree>
 800cb80:	4658      	mov	r0, fp
 800cb82:	4639      	mov	r1, r7
 800cb84:	f7fe fffa 	bl	800bb7c <_Bfree>
 800cb88:	4658      	mov	r0, fp
 800cb8a:	9906      	ldr	r1, [sp, #24]
 800cb8c:	f7fe fff6 	bl	800bb7c <_Bfree>
 800cb90:	e6e5      	b.n	800c95e <_strtod_r+0x48e>
 800cb92:	2300      	movs	r3, #0
 800cb94:	930c      	str	r3, [sp, #48]	; 0x30
 800cb96:	f04f 0801 	mov.w	r8, #1
 800cb9a:	e72c      	b.n	800c9f6 <_strtod_r+0x526>
 800cb9c:	f3af 8000 	nop.w
 800cba0:	ffc00000 	.word	0xffc00000
 800cba4:	41dfffff 	.word	0x41dfffff
 800cba8:	0800f0f8 	.word	0x0800f0f8
 800cbac:	3ff00000 	.word	0x3ff00000
 800cbb0:	7fe00000 	.word	0x7fe00000
 800cbb4:	7ff00000 	.word	0x7ff00000
 800cbb8:	4620      	mov	r0, r4
 800cbba:	4629      	mov	r1, r5
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	4ba8      	ldr	r3, [pc, #672]	; (800ce60 <_strtod_r+0x990>)
 800cbc0:	f7f3 fcae 	bl	8000520 <__aeabi_dmul>
 800cbc4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cbc8:	f1ba 0f00 	cmp.w	sl, #0
 800cbcc:	d11c      	bne.n	800cc08 <_strtod_r+0x738>
 800cbce:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800cbd2:	9010      	str	r0, [sp, #64]	; 0x40
 800cbd4:	9111      	str	r1, [sp, #68]	; 0x44
 800cbd6:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 800cbda:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cbde:	e792      	b.n	800cb06 <_strtod_r+0x636>
 800cbe0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cbe2:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800cbe6:	1acd      	subs	r5, r1, r3
 800cbe8:	e6ee      	b.n	800c9c8 <_strtod_r+0x4f8>
 800cbea:	4c9e      	ldr	r4, [pc, #632]	; (800ce64 <_strtod_r+0x994>)
 800cbec:	f04f 0801 	mov.w	r8, #1
 800cbf0:	1ae4      	subs	r4, r4, r3
 800cbf2:	fa08 f404 	lsl.w	r4, r8, r4
 800cbf6:	940c      	str	r4, [sp, #48]	; 0x30
 800cbf8:	e6fd      	b.n	800c9f6 <_strtod_r+0x526>
 800cbfa:	9519      	str	r5, [sp, #100]	; 0x64
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	f1ba 0f00 	cmp.w	sl, #0
 800cc02:	f47f ad20 	bne.w	800c646 <_strtod_r+0x176>
 800cc06:	e573      	b.n	800c6f0 <_strtod_r+0x220>
 800cc08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cc0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800cc10:	e7e1      	b.n	800cbd6 <_strtod_r+0x706>
 800cc12:	9b02      	ldr	r3, [sp, #8]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	f040 8093 	bne.w	800cd40 <_strtod_r+0x870>
 800cc1a:	9803      	ldr	r0, [sp, #12]
 800cc1c:	f3c0 0313 	ubfx	r3, r0, #0, #20
 800cc20:	4681      	mov	r9, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	f040 8092 	bne.w	800cd4c <_strtod_r+0x87c>
 800cc28:	4620      	mov	r0, r4
 800cc2a:	4629      	mov	r1, r5
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	4b8e      	ldr	r3, [pc, #568]	; (800ce68 <_strtod_r+0x998>)
 800cc30:	f7f4 fa50 	bl	80010d4 <__aeabi_dcmplt>
 800cc34:	2800      	cmp	r0, #0
 800cc36:	f040 8351 	bne.w	800d2dc <_strtod_r+0xe0c>
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	4629      	mov	r1, r5
 800cc3e:	2200      	movs	r2, #0
 800cc40:	4b87      	ldr	r3, [pc, #540]	; (800ce60 <_strtod_r+0x990>)
 800cc42:	f7f3 fc6d 	bl	8000520 <__aeabi_dmul>
 800cc46:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cc4a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800cc4e:	9016      	str	r0, [sp, #88]	; 0x58
 800cc50:	9117      	str	r1, [sp, #92]	; 0x5c
 800cc52:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 800cc56:	e756      	b.n	800cb06 <_strtod_r+0x636>
 800cc58:	4640      	mov	r0, r8
 800cc5a:	4643      	mov	r3, r8
 800cc5c:	46b2      	mov	sl, r6
 800cc5e:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800cc62:	2a09      	cmp	r2, #9
 800cc64:	d826      	bhi.n	800ccb4 <_strtod_r+0x7e4>
 800cc66:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 800cc6a:	3001      	adds	r0, #1
 800cc6c:	2a00      	cmp	r2, #0
 800cc6e:	f000 81af 	beq.w	800cfd0 <_strtod_r+0xb00>
 800cc72:	2801      	cmp	r0, #1
 800cc74:	4403      	add	r3, r0
 800cc76:	f000 8360 	beq.w	800d33a <_strtod_r+0xe6a>
 800cc7a:	eb0a 0800 	add.w	r8, sl, r0
 800cc7e:	4651      	mov	r1, sl
 800cc80:	f108 34ff 	add.w	r4, r8, #4294967295
 800cc84:	e006      	b.n	800cc94 <_strtod_r+0x7c4>
 800cc86:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 800cc8a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800cc8e:	42a1      	cmp	r1, r4
 800cc90:	f000 8192 	beq.w	800cfb8 <_strtod_r+0xae8>
 800cc94:	3101      	adds	r1, #1
 800cc96:	1e48      	subs	r0, r1, #1
 800cc98:	2808      	cmp	r0, #8
 800cc9a:	ddf4      	ble.n	800cc86 <_strtod_r+0x7b6>
 800cc9c:	2910      	cmp	r1, #16
 800cc9e:	bfdc      	itt	le
 800cca0:	eb07 0787 	addle.w	r7, r7, r7, lsl #2
 800cca4:	007f      	lslle	r7, r7, #1
 800cca6:	e7f2      	b.n	800cc8e <_strtod_r+0x7be>
 800cca8:	2200      	movs	r2, #0
 800ccaa:	9208      	str	r2, [sp, #32]
 800ccac:	e5bb      	b.n	800c826 <_strtod_r+0x356>
 800ccae:	2100      	movs	r1, #0
 800ccb0:	9108      	str	r1, [sp, #32]
 800ccb2:	e5b5      	b.n	800c820 <_strtod_r+0x350>
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	920b      	str	r2, [sp, #44]	; 0x2c
 800ccb8:	e4bc      	b.n	800c634 <_strtod_r+0x164>
 800ccba:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 800ccbe:	f300 8116 	bgt.w	800ceee <_strtod_r+0xa1e>
 800ccc2:	1124      	asrs	r4, r4, #4
 800ccc4:	2c01      	cmp	r4, #1
 800ccc6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800ce90 <_strtod_r+0x9c0>
 800ccca:	f340 831f 	ble.w	800d30c <_strtod_r+0xe3c>
 800ccce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccd2:	4645      	mov	r5, r8
 800ccd4:	2700      	movs	r7, #0
 800ccd6:	f014 0f01 	tst.w	r4, #1
 800ccda:	f107 0701 	add.w	r7, r7, #1
 800ccde:	ea4f 0464 	mov.w	r4, r4, asr #1
 800cce2:	d003      	beq.n	800ccec <_strtod_r+0x81c>
 800cce4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cce8:	f7f3 fc1a 	bl	8000520 <__aeabi_dmul>
 800ccec:	2c01      	cmp	r4, #1
 800ccee:	f105 0508 	add.w	r5, r5, #8
 800ccf2:	dcf0      	bgt.n	800ccd6 <_strtod_r+0x806>
 800ccf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccf8:	9b03      	ldr	r3, [sp, #12]
 800ccfa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ccfe:	9303      	str	r3, [sp, #12]
 800cd00:	eb08 07c7 	add.w	r7, r8, r7, lsl #3
 800cd04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd08:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cd0c:	f7f3 fc08 	bl	8000520 <__aeabi_dmul>
 800cd10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd14:	9803      	ldr	r0, [sp, #12]
 800cd16:	4a55      	ldr	r2, [pc, #340]	; (800ce6c <_strtod_r+0x99c>)
 800cd18:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800cd1c:	0d1b      	lsrs	r3, r3, #20
 800cd1e:	051b      	lsls	r3, r3, #20
 800cd20:	4293      	cmp	r3, r2
 800cd22:	f200 80e4 	bhi.w	800ceee <_strtod_r+0xa1e>
 800cd26:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	f240 82cf 	bls.w	800d2ce <_strtod_r+0xdfe>
 800cd30:	494f      	ldr	r1, [pc, #316]	; (800ce70 <_strtod_r+0x9a0>)
 800cd32:	9103      	str	r1, [sp, #12]
 800cd34:	2200      	movs	r2, #0
 800cd36:	f04f 33ff 	mov.w	r3, #4294967295
 800cd3a:	920a      	str	r2, [sp, #40]	; 0x28
 800cd3c:	9302      	str	r3, [sp, #8]
 800cd3e:	e5f5      	b.n	800c92c <_strtod_r+0x45c>
 800cd40:	9902      	ldr	r1, [sp, #8]
 800cd42:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cd46:	2901      	cmp	r1, #1
 800cd48:	f000 81cb 	beq.w	800d0e2 <_strtod_r+0xc12>
 800cd4c:	4946      	ldr	r1, [pc, #280]	; (800ce68 <_strtod_r+0x998>)
 800cd4e:	4d49      	ldr	r5, [pc, #292]	; (800ce74 <_strtod_r+0x9a4>)
 800cd50:	2000      	movs	r0, #0
 800cd52:	2400      	movs	r4, #0
 800cd54:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cd58:	e6d5      	b.n	800cb06 <_strtod_r+0x636>
 800cd5a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800cd5c:	9106      	str	r1, [sp, #24]
 800cd5e:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800cd62:	468c      	mov	ip, r1
 800cd64:	f04f 0a00 	mov.w	sl, #0
 800cd68:	2001      	movs	r0, #1
 800cd6a:	e77f      	b.n	800cc6c <_strtod_r+0x79c>
 800cd6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cd70:	f7f3 fde8 	bl	8000944 <__aeabi_d2uiz>
 800cd74:	2800      	cmp	r0, #0
 800cd76:	f000 81af 	beq.w	800d0d8 <_strtod_r+0xc08>
 800cd7a:	f7f3 fb5b 	bl	8000434 <__aeabi_ui2d>
 800cd7e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cd82:	f1ba 0f00 	cmp.w	sl, #0
 800cd86:	f040 81a2 	bne.w	800d0ce <_strtod_r+0xbfe>
 800cd8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cd8e:	9114      	str	r1, [sp, #80]	; 0x50
 800cd90:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800cd94:	9215      	str	r2, [sp, #84]	; 0x54
 800cd96:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 800cd9a:	e6cb      	b.n	800cb34 <_strtod_r+0x664>
 800cd9c:	4836      	ldr	r0, [pc, #216]	; (800ce78 <_strtod_r+0x9a8>)
 800cd9e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800cda0:	e009      	b.n	800cdb6 <_strtod_r+0x8e6>
 800cda2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cda6:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
 800cdaa:	2c19      	cmp	r4, #25
 800cdac:	bf98      	it	ls
 800cdae:	3320      	addls	r3, #32
 800cdb0:	4293      	cmp	r3, r2
 800cdb2:	f47f abdc 	bne.w	800c56e <_strtod_r+0x9e>
 800cdb6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800cdba:	2a00      	cmp	r2, #0
 800cdbc:	d1f1      	bne.n	800cda2 <_strtod_r+0x8d2>
 800cdbe:	1c4b      	adds	r3, r1, #1
 800cdc0:	9319      	str	r3, [sp, #100]	; 0x64
 800cdc2:	784b      	ldrb	r3, [r1, #1]
 800cdc4:	2b28      	cmp	r3, #40	; 0x28
 800cdc6:	f000 82e6 	beq.w	800d396 <_strtod_r+0xec6>
 800cdca:	4a2c      	ldr	r2, [pc, #176]	; (800ce7c <_strtod_r+0x9ac>)
 800cdcc:	9203      	str	r2, [sp, #12]
 800cdce:	2300      	movs	r3, #0
 800cdd0:	9302      	str	r3, [sp, #8]
 800cdd2:	e512      	b.n	800c7fa <_strtod_r+0x32a>
 800cdd4:	482a      	ldr	r0, [pc, #168]	; (800ce80 <_strtod_r+0x9b0>)
 800cdd6:	9919      	ldr	r1, [sp, #100]	; 0x64
 800cdd8:	e009      	b.n	800cdee <_strtod_r+0x91e>
 800cdda:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cdde:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
 800cde2:	2c19      	cmp	r4, #25
 800cde4:	bf98      	it	ls
 800cde6:	3320      	addls	r3, #32
 800cde8:	4293      	cmp	r3, r2
 800cdea:	f47f abc0 	bne.w	800c56e <_strtod_r+0x9e>
 800cdee:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800cdf2:	2a00      	cmp	r2, #0
 800cdf4:	d1f1      	bne.n	800cdda <_strtod_r+0x90a>
 800cdf6:	9119      	str	r1, [sp, #100]	; 0x64
 800cdf8:	4c22      	ldr	r4, [pc, #136]	; (800ce84 <_strtod_r+0x9b4>)
 800cdfa:	4608      	mov	r0, r1
 800cdfc:	e009      	b.n	800ce12 <_strtod_r+0x942>
 800cdfe:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800ce02:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 800ce06:	2d19      	cmp	r5, #25
 800ce08:	bf98      	it	ls
 800ce0a:	3320      	addls	r3, #32
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	f040 827f 	bne.w	800d310 <_strtod_r+0xe40>
 800ce12:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800ce16:	2a00      	cmp	r2, #0
 800ce18:	d1f1      	bne.n	800cdfe <_strtod_r+0x92e>
 800ce1a:	3001      	adds	r0, #1
 800ce1c:	9019      	str	r0, [sp, #100]	; 0x64
 800ce1e:	4a1a      	ldr	r2, [pc, #104]	; (800ce88 <_strtod_r+0x9b8>)
 800ce20:	9203      	str	r2, [sp, #12]
 800ce22:	2300      	movs	r3, #0
 800ce24:	9302      	str	r3, [sp, #8]
 800ce26:	e4e8      	b.n	800c7fa <_strtod_r+0x32a>
 800ce28:	9907      	ldr	r1, [sp, #28]
 800ce2a:	9101      	str	r1, [sp, #4]
 800ce2c:	ab1a      	add	r3, sp, #104	; 0x68
 800ce2e:	9300      	str	r3, [sp, #0]
 800ce30:	4658      	mov	r0, fp
 800ce32:	a919      	add	r1, sp, #100	; 0x64
 800ce34:	4a15      	ldr	r2, [pc, #84]	; (800ce8c <_strtod_r+0x9bc>)
 800ce36:	ab1b      	add	r3, sp, #108	; 0x6c
 800ce38:	f000 ff6c 	bl	800dd14 <__gethex>
 800ce3c:	f010 0507 	ands.w	r5, r0, #7
 800ce40:	4604      	mov	r4, r0
 800ce42:	f43f acc9 	beq.w	800c7d8 <_strtod_r+0x308>
 800ce46:	2d06      	cmp	r5, #6
 800ce48:	f040 8159 	bne.w	800d0fe <_strtod_r+0xc2e>
 800ce4c:	3601      	adds	r6, #1
 800ce4e:	2200      	movs	r2, #0
 800ce50:	9619      	str	r6, [sp, #100]	; 0x64
 800ce52:	f04f 0800 	mov.w	r8, #0
 800ce56:	f04f 0900 	mov.w	r9, #0
 800ce5a:	9207      	str	r2, [sp, #28]
 800ce5c:	f7ff bb8e 	b.w	800c57c <_strtod_r+0xac>
 800ce60:	3fe00000 	.word	0x3fe00000
 800ce64:	fffffbe3 	.word	0xfffffbe3
 800ce68:	3ff00000 	.word	0x3ff00000
 800ce6c:	7ca00000 	.word	0x7ca00000
 800ce70:	7fefffff 	.word	0x7fefffff
 800ce74:	bff00000 	.word	0xbff00000
 800ce78:	0800f227 	.word	0x0800f227
 800ce7c:	fff80000 	.word	0xfff80000
 800ce80:	0800f21b 	.word	0x0800f21b
 800ce84:	0800f21f 	.word	0x0800f21f
 800ce88:	7ff00000 	.word	0x7ff00000
 800ce8c:	0800f1f4 	.word	0x0800f1f4
 800ce90:	0800f1c0 	.word	0x0800f1c0
 800ce94:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ce98:	f8cd 900c 	str.w	r9, [sp, #12]
 800ce9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cea0:	f7ff f93e 	bl	800c120 <__ulp>
 800cea4:	4602      	mov	r2, r0
 800cea6:	460b      	mov	r3, r1
 800cea8:	4620      	mov	r0, r4
 800ceaa:	4629      	mov	r1, r5
 800ceac:	f7f3 fb38 	bl	8000520 <__aeabi_dmul>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ceb8:	f7f3 f980 	bl	80001bc <__adddf3>
 800cebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cec0:	9903      	ldr	r1, [sp, #12]
 800cec2:	4aad      	ldr	r2, [pc, #692]	; (800d178 <_strtod_r+0xca8>)
 800cec4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cec8:	0d1b      	lsrs	r3, r3, #20
 800ceca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cece:	051b      	lsls	r3, r3, #20
 800ced0:	4293      	cmp	r3, r2
 800ced2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800ced6:	f240 80d8 	bls.w	800d08a <_strtod_r+0xbba>
 800ceda:	4ba8      	ldr	r3, [pc, #672]	; (800d17c <_strtod_r+0xcac>)
 800cedc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cede:	4299      	cmp	r1, r3
 800cee0:	d010      	beq.n	800cf04 <_strtod_r+0xa34>
 800cee2:	4ba6      	ldr	r3, [pc, #664]	; (800d17c <_strtod_r+0xcac>)
 800cee4:	9303      	str	r3, [sp, #12]
 800cee6:	f04f 30ff 	mov.w	r0, #4294967295
 800ceea:	9002      	str	r0, [sp, #8]
 800ceec:	e640      	b.n	800cb70 <_strtod_r+0x6a0>
 800ceee:	4aa4      	ldr	r2, [pc, #656]	; (800d180 <_strtod_r+0xcb0>)
 800cef0:	9203      	str	r2, [sp, #12]
 800cef2:	2000      	movs	r0, #0
 800cef4:	2322      	movs	r3, #34	; 0x22
 800cef6:	9002      	str	r0, [sp, #8]
 800cef8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cefc:	f8cb 3000 	str.w	r3, [fp]
 800cf00:	f7ff bb3c 	b.w	800c57c <_strtod_r+0xac>
 800cf04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cf06:	3201      	adds	r2, #1
 800cf08:	d1eb      	bne.n	800cee2 <_strtod_r+0xa12>
 800cf0a:	46b2      	mov	sl, r6
 800cf0c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cf0e:	4a9c      	ldr	r2, [pc, #624]	; (800d180 <_strtod_r+0xcb0>)
 800cf10:	9203      	str	r2, [sp, #12]
 800cf12:	2000      	movs	r0, #0
 800cf14:	9002      	str	r0, [sp, #8]
 800cf16:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cf1a:	2322      	movs	r3, #34	; 0x22
 800cf1c:	f8cb 3000 	str.w	r3, [fp]
 800cf20:	4658      	mov	r0, fp
 800cf22:	f7fe fe2b 	bl	800bb7c <_Bfree>
 800cf26:	4658      	mov	r0, fp
 800cf28:	4651      	mov	r1, sl
 800cf2a:	f7fe fe27 	bl	800bb7c <_Bfree>
 800cf2e:	4658      	mov	r0, fp
 800cf30:	4639      	mov	r1, r7
 800cf32:	f7fe fe23 	bl	800bb7c <_Bfree>
 800cf36:	4658      	mov	r0, fp
 800cf38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf3a:	f7fe fe1f 	bl	800bb7c <_Bfree>
 800cf3e:	4658      	mov	r0, fp
 800cf40:	9906      	ldr	r1, [sp, #24]
 800cf42:	f7fe fe1b 	bl	800bb7c <_Bfree>
 800cf46:	f7ff bb19 	b.w	800c57c <_strtod_r+0xac>
 800cf4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cf4e:	f7f4 f8e9 	bl	8001124 <__aeabi_d2iz>
 800cf52:	f7f3 fa7f 	bl	8000454 <__aeabi_i2d>
 800cf56:	4602      	mov	r2, r0
 800cf58:	460b      	mov	r3, r1
 800cf5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cf5e:	f7f3 f92b 	bl	80001b8 <__aeabi_dsub>
 800cf62:	4680      	mov	r8, r0
 800cf64:	4689      	mov	r9, r1
 800cf66:	f1ba 0f00 	cmp.w	sl, #0
 800cf6a:	d111      	bne.n	800cf90 <_strtod_r+0xac0>
 800cf6c:	9a02      	ldr	r2, [sp, #8]
 800cf6e:	b97a      	cbnz	r2, 800cf90 <_strtod_r+0xac0>
 800cf70:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cf74:	b964      	cbnz	r4, 800cf90 <_strtod_r+0xac0>
 800cf76:	a37a      	add	r3, pc, #488	; (adr r3, 800d160 <_strtod_r+0xc90>)
 800cf78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7c:	f7f4 f8aa 	bl	80010d4 <__aeabi_dcmplt>
 800cf80:	2800      	cmp	r0, #0
 800cf82:	f43f adf5 	beq.w	800cb70 <_strtod_r+0x6a0>
 800cf86:	46b2      	mov	sl, r6
 800cf88:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cf8c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cf8e:	e7c7      	b.n	800cf20 <_strtod_r+0xa50>
 800cf90:	4640      	mov	r0, r8
 800cf92:	4649      	mov	r1, r9
 800cf94:	a374      	add	r3, pc, #464	; (adr r3, 800d168 <_strtod_r+0xc98>)
 800cf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9a:	f7f4 f89b 	bl	80010d4 <__aeabi_dcmplt>
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	d1f1      	bne.n	800cf86 <_strtod_r+0xab6>
 800cfa2:	4640      	mov	r0, r8
 800cfa4:	4649      	mov	r1, r9
 800cfa6:	a372      	add	r3, pc, #456	; (adr r3, 800d170 <_strtod_r+0xca0>)
 800cfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfac:	f7f4 f8b0 	bl	8001110 <__aeabi_dcmpgt>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	f43f addd 	beq.w	800cb70 <_strtod_r+0x6a0>
 800cfb6:	e7e6      	b.n	800cf86 <_strtod_r+0xab6>
 800cfb8:	f108 31ff 	add.w	r1, r8, #4294967295
 800cfbc:	2908      	cmp	r1, #8
 800cfbe:	f101 0a01 	add.w	sl, r1, #1
 800cfc2:	f300 8106 	bgt.w	800d1d2 <_strtod_r+0xd02>
 800cfc6:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 800cfca:	eb02 0949 	add.w	r9, r2, r9, lsl #1
 800cfce:	2000      	movs	r0, #0
 800cfd0:	f10c 0201 	add.w	r2, ip, #1
 800cfd4:	9219      	str	r2, [sp, #100]	; 0x64
 800cfd6:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800cfda:	e640      	b.n	800cc5e <_strtod_r+0x78e>
 800cfdc:	f43f aca4 	beq.w	800c928 <_strtod_r+0x458>
 800cfe0:	f1c8 0400 	rsb	r4, r8, #0
 800cfe4:	f014 030f 	ands.w	r3, r4, #15
 800cfe8:	d00a      	beq.n	800d000 <_strtod_r+0xb30>
 800cfea:	4a66      	ldr	r2, [pc, #408]	; (800d184 <_strtod_r+0xcb4>)
 800cfec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cff0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff8:	f7f3 fbbc 	bl	8000774 <__aeabi_ddiv>
 800cffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d000:	1124      	asrs	r4, r4, #4
 800d002:	f43f ac91 	beq.w	800c928 <_strtod_r+0x458>
 800d006:	2c1f      	cmp	r4, #31
 800d008:	dc33      	bgt.n	800d072 <_strtod_r+0xba2>
 800d00a:	f014 0f10 	tst.w	r4, #16
 800d00e:	bf14      	ite	ne
 800d010:	216a      	movne	r1, #106	; 0x6a
 800d012:	2100      	moveq	r1, #0
 800d014:	2c00      	cmp	r4, #0
 800d016:	910a      	str	r1, [sp, #40]	; 0x28
 800d018:	dd0e      	ble.n	800d038 <_strtod_r+0xb68>
 800d01a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d01e:	4d5a      	ldr	r5, [pc, #360]	; (800d188 <_strtod_r+0xcb8>)
 800d020:	07e3      	lsls	r3, r4, #31
 800d022:	d503      	bpl.n	800d02c <_strtod_r+0xb5c>
 800d024:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d028:	f7f3 fa7a 	bl	8000520 <__aeabi_dmul>
 800d02c:	1064      	asrs	r4, r4, #1
 800d02e:	f105 0508 	add.w	r5, r5, #8
 800d032:	d1f5      	bne.n	800d020 <_strtod_r+0xb50>
 800d034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d03a:	b18a      	cbz	r2, 800d060 <_strtod_r+0xb90>
 800d03c:	9803      	ldr	r0, [sp, #12]
 800d03e:	f3c0 530a 	ubfx	r3, r0, #20, #11
 800d042:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d046:	2b00      	cmp	r3, #0
 800d048:	dd0a      	ble.n	800d060 <_strtod_r+0xb90>
 800d04a:	2b1f      	cmp	r3, #31
 800d04c:	f340 81b5 	ble.w	800d3ba <_strtod_r+0xeea>
 800d050:	2100      	movs	r1, #0
 800d052:	2b34      	cmp	r3, #52	; 0x34
 800d054:	9102      	str	r1, [sp, #8]
 800d056:	f340 81b8 	ble.w	800d3ca <_strtod_r+0xefa>
 800d05a:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
 800d05e:	9203      	str	r2, [sp, #12]
 800d060:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d064:	2200      	movs	r2, #0
 800d066:	2300      	movs	r3, #0
 800d068:	f7f4 f82a 	bl	80010c0 <__aeabi_dcmpeq>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	f43f ac5d 	beq.w	800c92c <_strtod_r+0x45c>
 800d072:	2322      	movs	r3, #34	; 0x22
 800d074:	f8cb 3000 	str.w	r3, [fp]
 800d078:	f04f 0800 	mov.w	r8, #0
 800d07c:	f04f 0900 	mov.w	r9, #0
 800d080:	f7ff ba7c 	b.w	800c57c <_strtod_r+0xac>
 800d084:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800d088:	e40c      	b.n	800c8a4 <_strtod_r+0x3d4>
 800d08a:	9903      	ldr	r1, [sp, #12]
 800d08c:	f101 7454 	add.w	r4, r1, #55574528	; 0x3500000
 800d090:	9403      	str	r4, [sp, #12]
 800d092:	e566      	b.n	800cb62 <_strtod_r+0x692>
 800d094:	9808      	ldr	r0, [sp, #32]
 800d096:	f1ca 0325 	rsb	r3, sl, #37	; 0x25
 800d09a:	4298      	cmp	r0, r3
 800d09c:	f73f ac2a 	bgt.w	800c8f4 <_strtod_r+0x424>
 800d0a0:	4c38      	ldr	r4, [pc, #224]	; (800d184 <_strtod_r+0xcb4>)
 800d0a2:	f1ca 050f 	rsb	r5, sl, #15
 800d0a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d0aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0b2:	f7f3 fa35 	bl	8000520 <__aeabi_dmul>
 800d0b6:	9a08      	ldr	r2, [sp, #32]
 800d0b8:	1b55      	subs	r5, r2, r5
 800d0ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d0be:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d0c2:	f7f3 fa2d 	bl	8000520 <__aeabi_dmul>
 800d0c6:	4680      	mov	r8, r0
 800d0c8:	4689      	mov	r9, r1
 800d0ca:	f7ff ba57 	b.w	800c57c <_strtod_r+0xac>
 800d0ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d0d2:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 800d0d6:	e65e      	b.n	800cd96 <_strtod_r+0x8c6>
 800d0d8:	492c      	ldr	r1, [pc, #176]	; (800d18c <_strtod_r+0xcbc>)
 800d0da:	2000      	movs	r0, #0
 800d0dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d0e0:	e64f      	b.n	800cd82 <_strtod_r+0x8b2>
 800d0e2:	464a      	mov	r2, r9
 800d0e4:	2a00      	cmp	r2, #0
 800d0e6:	f47f ae31 	bne.w	800cd4c <_strtod_r+0x87c>
 800d0ea:	46b2      	mov	sl, r6
 800d0ec:	2322      	movs	r3, #34	; 0x22
 800d0ee:	f8cb 3000 	str.w	r3, [fp]
 800d0f2:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d0f4:	f04f 0800 	mov.w	r8, #0
 800d0f8:	f04f 0900 	mov.w	r9, #0
 800d0fc:	e710      	b.n	800cf20 <_strtod_r+0xa50>
 800d0fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d100:	b13a      	cbz	r2, 800d112 <_strtod_r+0xc42>
 800d102:	a81c      	add	r0, sp, #112	; 0x70
 800d104:	2135      	movs	r1, #53	; 0x35
 800d106:	f7ff f90b 	bl	800c320 <__copybits>
 800d10a:	4658      	mov	r0, fp
 800d10c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d10e:	f7fe fd35 	bl	800bb7c <_Bfree>
 800d112:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d114:	2d06      	cmp	r5, #6
 800d116:	f63f ab6a 	bhi.w	800c7ee <_strtod_r+0x31e>
 800d11a:	a001      	add	r0, pc, #4	; (adr r0, 800d120 <_strtod_r+0xc50>)
 800d11c:	f850 f025 	ldr.w	pc, [r0, r5, lsl #2]
 800d120:	0800d155 	.word	0x0800d155
 800d124:	0800d191 	.word	0x0800d191
 800d128:	0800d149 	.word	0x0800d149
 800d12c:	0800d13d 	.word	0x0800d13d
 800d130:	0800c7e3 	.word	0x0800c7e3
 800d134:	0800d191 	.word	0x0800d191
 800d138:	0800d155 	.word	0x0800d155
 800d13c:	4910      	ldr	r1, [pc, #64]	; (800d180 <_strtod_r+0xcb0>)
 800d13e:	9103      	str	r1, [sp, #12]
 800d140:	2200      	movs	r2, #0
 800d142:	9202      	str	r2, [sp, #8]
 800d144:	f7ff bb53 	b.w	800c7ee <_strtod_r+0x31e>
 800d148:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d14a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d14c:	9202      	str	r2, [sp, #8]
 800d14e:	9303      	str	r3, [sp, #12]
 800d150:	f7ff bb4d 	b.w	800c7ee <_strtod_r+0x31e>
 800d154:	2100      	movs	r1, #0
 800d156:	9103      	str	r1, [sp, #12]
 800d158:	9102      	str	r1, [sp, #8]
 800d15a:	f7ff bb48 	b.w	800c7ee <_strtod_r+0x31e>
 800d15e:	bf00      	nop
 800d160:	94a03595 	.word	0x94a03595
 800d164:	3fcfffff 	.word	0x3fcfffff
 800d168:	94a03595 	.word	0x94a03595
 800d16c:	3fdfffff 	.word	0x3fdfffff
 800d170:	35afe535 	.word	0x35afe535
 800d174:	3fe00000 	.word	0x3fe00000
 800d178:	7c9fffff 	.word	0x7c9fffff
 800d17c:	7fefffff 	.word	0x7fefffff
 800d180:	7ff00000 	.word	0x7ff00000
 800d184:	0800f0f8 	.word	0x0800f0f8
 800d188:	0800f230 	.word	0x0800f230
 800d18c:	3ff00000 	.word	0x3ff00000
 800d190:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d192:	981c      	ldr	r0, [sp, #112]	; 0x70
 800d194:	9002      	str	r0, [sp, #8]
 800d196:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d19a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800d19e:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
 800d1a2:	9203      	str	r2, [sp, #12]
 800d1a4:	f7ff bb23 	b.w	800c7ee <_strtod_r+0x31e>
 800d1a8:	9b08      	ldr	r3, [sp, #32]
 800d1aa:	3316      	adds	r3, #22
 800d1ac:	f6ff aba2 	blt.w	800c8f4 <_strtod_r+0x424>
 800d1b0:	4b8b      	ldr	r3, [pc, #556]	; (800d3e0 <_strtod_r+0xf10>)
 800d1b2:	9808      	ldr	r0, [sp, #32]
 800d1b4:	eba3 0ac0 	sub.w	sl, r3, r0, lsl #3
 800d1b8:	e9da 2300 	ldrd	r2, r3, [sl]
 800d1bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1c0:	f7f3 fad8 	bl	8000774 <__aeabi_ddiv>
 800d1c4:	4680      	mov	r8, r0
 800d1c6:	4689      	mov	r9, r1
 800d1c8:	f7ff b9d8 	b.w	800c57c <_strtod_r+0xac>
 800d1cc:	46b2      	mov	sl, r6
 800d1ce:	4601      	mov	r1, r0
 800d1d0:	e69d      	b.n	800cf0e <_strtod_r+0xa3e>
 800d1d2:	f1ba 0f10 	cmp.w	sl, #16
 800d1d6:	bfdc      	itt	le
 800d1d8:	eb07 0787 	addle.w	r7, r7, r7, lsl #2
 800d1dc:	eb02 0747 	addle.w	r7, r2, r7, lsl #1
 800d1e0:	2000      	movs	r0, #0
 800d1e2:	e6f5      	b.n	800cfd0 <_strtod_r+0xb00>
 800d1e4:	4655      	mov	r5, sl
 800d1e6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800d1ea:	46b2      	mov	sl, r6
 800d1ec:	2d00      	cmp	r5, #0
 800d1ee:	d130      	bne.n	800d252 <_strtod_r+0xd82>
 800d1f0:	9a02      	ldr	r2, [sp, #8]
 800d1f2:	bb72      	cbnz	r2, 800d252 <_strtod_r+0xd82>
 800d1f4:	9803      	ldr	r0, [sp, #12]
 800d1f6:	f3c0 0313 	ubfx	r3, r0, #0, #20
 800d1fa:	4604      	mov	r4, r0
 800d1fc:	bb4b      	cbnz	r3, 800d252 <_strtod_r+0xd82>
 800d1fe:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800d202:	0d1b      	lsrs	r3, r3, #20
 800d204:	051b      	lsls	r3, r3, #20
 800d206:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d20a:	d922      	bls.n	800d252 <_strtod_r+0xd82>
 800d20c:	9906      	ldr	r1, [sp, #24]
 800d20e:	694b      	ldr	r3, [r1, #20]
 800d210:	b913      	cbnz	r3, 800d218 <_strtod_r+0xd48>
 800d212:	690b      	ldr	r3, [r1, #16]
 800d214:	2b01      	cmp	r3, #1
 800d216:	dd1c      	ble.n	800d252 <_strtod_r+0xd82>
 800d218:	9906      	ldr	r1, [sp, #24]
 800d21a:	2201      	movs	r2, #1
 800d21c:	4658      	mov	r0, fp
 800d21e:	f7fe fe93 	bl	800bf48 <__lshift>
 800d222:	4639      	mov	r1, r7
 800d224:	9006      	str	r0, [sp, #24]
 800d226:	f7fe feed 	bl	800c004 <__mcmp>
 800d22a:	2800      	cmp	r0, #0
 800d22c:	dd11      	ble.n	800d252 <_strtod_r+0xd82>
 800d22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d230:	2b00      	cmp	r3, #0
 800d232:	f040 80a5 	bne.w	800d380 <_strtod_r+0xeb0>
 800d236:	4b6b      	ldr	r3, [pc, #428]	; (800d3e4 <_strtod_r+0xf14>)
 800d238:	4023      	ands	r3, r4
 800d23a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d23e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800d242:	ea6f 5003 	mvn.w	r0, r3, lsl #20
 800d246:	f04f 31ff 	mov.w	r1, #4294967295
 800d24a:	9003      	str	r0, [sp, #12]
 800d24c:	9102      	str	r1, [sp, #8]
 800d24e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d254:	b1b3      	cbz	r3, 800d284 <_strtod_r+0xdb4>
 800d256:	4864      	ldr	r0, [pc, #400]	; (800d3e8 <_strtod_r+0xf18>)
 800d258:	9013      	str	r0, [sp, #76]	; 0x4c
 800d25a:	2100      	movs	r1, #0
 800d25c:	9112      	str	r1, [sp, #72]	; 0x48
 800d25e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d262:	4640      	mov	r0, r8
 800d264:	4649      	mov	r1, r9
 800d266:	f7f3 f95b 	bl	8000520 <__aeabi_dmul>
 800d26a:	4680      	mov	r8, r0
 800d26c:	4689      	mov	r9, r1
 800d26e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d272:	9a03      	ldr	r2, [sp, #12]
 800d274:	b932      	cbnz	r2, 800d284 <_strtod_r+0xdb4>
 800d276:	9b02      	ldr	r3, [sp, #8]
 800d278:	b923      	cbnz	r3, 800d284 <_strtod_r+0xdb4>
 800d27a:	2322      	movs	r3, #34	; 0x22
 800d27c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d27e:	f8cb 3000 	str.w	r3, [fp]
 800d282:	e64d      	b.n	800cf20 <_strtod_r+0xa50>
 800d284:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d286:	e64b      	b.n	800cf20 <_strtod_r+0xa50>
 800d288:	4655      	mov	r5, sl
 800d28a:	46c4      	mov	ip, r8
 800d28c:	46b2      	mov	sl, r6
 800d28e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800d292:	2d00      	cmp	r5, #0
 800d294:	d02b      	beq.n	800d2ee <_strtod_r+0xe1e>
 800d296:	9a03      	ldr	r2, [sp, #12]
 800d298:	4b54      	ldr	r3, [pc, #336]	; (800d3ec <_strtod_r+0xf1c>)
 800d29a:	f3c2 0113 	ubfx	r1, r2, #0, #20
 800d29e:	4299      	cmp	r1, r3
 800d2a0:	d04d      	beq.n	800d33e <_strtod_r+0xe6e>
 800d2a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d02c      	beq.n	800d302 <_strtod_r+0xe32>
 800d2a8:	9803      	ldr	r0, [sp, #12]
 800d2aa:	4203      	tst	r3, r0
 800d2ac:	d0d1      	beq.n	800d252 <_strtod_r+0xd82>
 800d2ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2b4:	2d00      	cmp	r5, #0
 800d2b6:	d02e      	beq.n	800d316 <_strtod_r+0xe46>
 800d2b8:	f7ff f8ea 	bl	800c490 <sulp>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	460b      	mov	r3, r1
 800d2c0:	4640      	mov	r0, r8
 800d2c2:	4649      	mov	r1, r9
 800d2c4:	f7f2 ff7a 	bl	80001bc <__adddf3>
 800d2c8:	4680      	mov	r8, r0
 800d2ca:	4689      	mov	r9, r1
 800d2cc:	e7c1      	b.n	800d252 <_strtod_r+0xd82>
 800d2ce:	f100 7154 	add.w	r1, r0, #55574528	; 0x3500000
 800d2d2:	2000      	movs	r0, #0
 800d2d4:	9103      	str	r1, [sp, #12]
 800d2d6:	900a      	str	r0, [sp, #40]	; 0x28
 800d2d8:	f7ff bb28 	b.w	800c92c <_strtod_r+0x45c>
 800d2dc:	4b44      	ldr	r3, [pc, #272]	; (800d3f0 <_strtod_r+0xf20>)
 800d2de:	4945      	ldr	r1, [pc, #276]	; (800d3f4 <_strtod_r+0xf24>)
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	2000      	movs	r0, #0
 800d2e4:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800d2e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d2ec:	e4b1      	b.n	800cc52 <_strtod_r+0x782>
 800d2ee:	9903      	ldr	r1, [sp, #12]
 800d2f0:	f3c1 0313 	ubfx	r3, r1, #0, #20
 800d2f4:	460c      	mov	r4, r1
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d1d3      	bne.n	800d2a2 <_strtod_r+0xdd2>
 800d2fa:	9a02      	ldr	r2, [sp, #8]
 800d2fc:	2a00      	cmp	r2, #0
 800d2fe:	d1d0      	bne.n	800d2a2 <_strtod_r+0xdd2>
 800d300:	e795      	b.n	800d22e <_strtod_r+0xd5e>
 800d302:	9902      	ldr	r1, [sp, #8]
 800d304:	ea1c 0f01 	tst.w	ip, r1
 800d308:	d0a3      	beq.n	800d252 <_strtod_r+0xd82>
 800d30a:	e7d0      	b.n	800d2ae <_strtod_r+0xdde>
 800d30c:	2700      	movs	r7, #0
 800d30e:	e4f3      	b.n	800ccf8 <_strtod_r+0x828>
 800d310:	3101      	adds	r1, #1
 800d312:	9119      	str	r1, [sp, #100]	; 0x64
 800d314:	e583      	b.n	800ce1e <_strtod_r+0x94e>
 800d316:	f7ff f8bb 	bl	800c490 <sulp>
 800d31a:	4602      	mov	r2, r0
 800d31c:	460b      	mov	r3, r1
 800d31e:	4640      	mov	r0, r8
 800d320:	4649      	mov	r1, r9
 800d322:	f7f2 ff49 	bl	80001b8 <__aeabi_dsub>
 800d326:	2200      	movs	r2, #0
 800d328:	2300      	movs	r3, #0
 800d32a:	4680      	mov	r8, r0
 800d32c:	4689      	mov	r9, r1
 800d32e:	f7f3 fec7 	bl	80010c0 <__aeabi_dcmpeq>
 800d332:	2800      	cmp	r0, #0
 800d334:	f47f aeda 	bne.w	800d0ec <_strtod_r+0xc1c>
 800d338:	e78b      	b.n	800d252 <_strtod_r+0xd82>
 800d33a:	4651      	mov	r1, sl
 800d33c:	e63e      	b.n	800cfbc <_strtod_r+0xaec>
 800d33e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d340:	9902      	ldr	r1, [sp, #8]
 800d342:	b1d3      	cbz	r3, 800d37a <_strtod_r+0xeaa>
 800d344:	4b27      	ldr	r3, [pc, #156]	; (800d3e4 <_strtod_r+0xf14>)
 800d346:	4013      	ands	r3, r2
 800d348:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d34c:	d815      	bhi.n	800d37a <_strtod_r+0xeaa>
 800d34e:	0d1b      	lsrs	r3, r3, #20
 800d350:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d354:	f04f 30ff 	mov.w	r0, #4294967295
 800d358:	fa00 f303 	lsl.w	r3, r0, r3
 800d35c:	4299      	cmp	r1, r3
 800d35e:	d1a0      	bne.n	800d2a2 <_strtod_r+0xdd2>
 800d360:	4b25      	ldr	r3, [pc, #148]	; (800d3f8 <_strtod_r+0xf28>)
 800d362:	429a      	cmp	r2, r3
 800d364:	d039      	beq.n	800d3da <_strtod_r+0xf0a>
 800d366:	4b1f      	ldr	r3, [pc, #124]	; (800d3e4 <_strtod_r+0xf14>)
 800d368:	4013      	ands	r3, r2
 800d36a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d36e:	2000      	movs	r0, #0
 800d370:	9303      	str	r3, [sp, #12]
 800d372:	9002      	str	r0, [sp, #8]
 800d374:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d378:	e76b      	b.n	800d252 <_strtod_r+0xd82>
 800d37a:	f04f 33ff 	mov.w	r3, #4294967295
 800d37e:	e7ed      	b.n	800d35c <_strtod_r+0xe8c>
 800d380:	4b18      	ldr	r3, [pc, #96]	; (800d3e4 <_strtod_r+0xf14>)
 800d382:	4023      	ands	r3, r4
 800d384:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d388:	f63f af57 	bhi.w	800d23a <_strtod_r+0xd6a>
 800d38c:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 800d390:	f63f af61 	bhi.w	800d256 <_strtod_r+0xd86>
 800d394:	e6aa      	b.n	800d0ec <_strtod_r+0xc1c>
 800d396:	a819      	add	r0, sp, #100	; 0x64
 800d398:	4918      	ldr	r1, [pc, #96]	; (800d3fc <_strtod_r+0xf2c>)
 800d39a:	aa1c      	add	r2, sp, #112	; 0x70
 800d39c:	f000 ff52 	bl	800e244 <__hexnan>
 800d3a0:	2805      	cmp	r0, #5
 800d3a2:	f47f ad12 	bne.w	800cdca <_strtod_r+0x8fa>
 800d3a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d3a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d3aa:	9102      	str	r1, [sp, #8]
 800d3ac:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
 800d3b0:	f443 00e0 	orr.w	r0, r3, #7340032	; 0x700000
 800d3b4:	9003      	str	r0, [sp, #12]
 800d3b6:	f7ff ba20 	b.w	800c7fa <_strtod_r+0x32a>
 800d3ba:	9802      	ldr	r0, [sp, #8]
 800d3bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800d3c4:	4003      	ands	r3, r0
 800d3c6:	9302      	str	r3, [sp, #8]
 800d3c8:	e64a      	b.n	800d060 <_strtod_r+0xb90>
 800d3ca:	3b20      	subs	r3, #32
 800d3cc:	f04f 31ff 	mov.w	r1, #4294967295
 800d3d0:	fa01 f303 	lsl.w	r3, r1, r3
 800d3d4:	4003      	ands	r3, r0
 800d3d6:	9303      	str	r3, [sp, #12]
 800d3d8:	e642      	b.n	800d060 <_strtod_r+0xb90>
 800d3da:	3101      	adds	r1, #1
 800d3dc:	d1c3      	bne.n	800d366 <_strtod_r+0xe96>
 800d3de:	e595      	b.n	800cf0c <_strtod_r+0xa3c>
 800d3e0:	0800f0f8 	.word	0x0800f0f8
 800d3e4:	7ff00000 	.word	0x7ff00000
 800d3e8:	39500000 	.word	0x39500000
 800d3ec:	000fffff 	.word	0x000fffff
 800d3f0:	bfe00000 	.word	0xbfe00000
 800d3f4:	3fe00000 	.word	0x3fe00000
 800d3f8:	7fefffff 	.word	0x7fefffff
 800d3fc:	0800f208 	.word	0x0800f208

0800d400 <_strtol_r>:
 800d400:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d404:	4c42      	ldr	r4, [pc, #264]	; (800d510 <_strtol_r+0x110>)
 800d406:	b082      	sub	sp, #8
 800d408:	f8d4 c000 	ldr.w	ip, [r4]
 800d40c:	9001      	str	r0, [sp, #4]
 800d40e:	460e      	mov	r6, r1
 800d410:	e000      	b.n	800d414 <_strtol_r+0x14>
 800d412:	4626      	mov	r6, r4
 800d414:	4634      	mov	r4, r6
 800d416:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d41a:	eb0c 0005 	add.w	r0, ip, r5
 800d41e:	7840      	ldrb	r0, [r0, #1]
 800d420:	f000 0008 	and.w	r0, r0, #8
 800d424:	f000 0aff 	and.w	sl, r0, #255	; 0xff
 800d428:	2800      	cmp	r0, #0
 800d42a:	d1f2      	bne.n	800d412 <_strtol_r+0x12>
 800d42c:	2d2d      	cmp	r5, #45	; 0x2d
 800d42e:	d05b      	beq.n	800d4e8 <_strtol_r+0xe8>
 800d430:	2d2b      	cmp	r5, #43	; 0x2b
 800d432:	bf04      	itt	eq
 800d434:	7875      	ldrbeq	r5, [r6, #1]
 800d436:	1cb4      	addeq	r4, r6, #2
 800d438:	f033 0010 	bics.w	r0, r3, #16
 800d43c:	d03c      	beq.n	800d4b8 <_strtol_r+0xb8>
 800d43e:	4699      	mov	r9, r3
 800d440:	f1ba 0f00 	cmp.w	sl, #0
 800d444:	bf0c      	ite	eq
 800d446:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
 800d44a:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
 800d44e:	fbbb f8f9 	udiv	r8, fp, r9
 800d452:	2700      	movs	r7, #0
 800d454:	fb09 bb18 	mls	fp, r9, r8, fp
 800d458:	4638      	mov	r0, r7
 800d45a:	e00c      	b.n	800d476 <_strtol_r+0x76>
 800d45c:	3d30      	subs	r5, #48	; 0x30
 800d45e:	42ab      	cmp	r3, r5
 800d460:	dd19      	ble.n	800d496 <_strtol_r+0x96>
 800d462:	1c7e      	adds	r6, r7, #1
 800d464:	d005      	beq.n	800d472 <_strtol_r+0x72>
 800d466:	4540      	cmp	r0, r8
 800d468:	d823      	bhi.n	800d4b2 <_strtol_r+0xb2>
 800d46a:	d020      	beq.n	800d4ae <_strtol_r+0xae>
 800d46c:	fb09 5000 	mla	r0, r9, r0, r5
 800d470:	2701      	movs	r7, #1
 800d472:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d476:	eb0c 0605 	add.w	r6, ip, r5
 800d47a:	7876      	ldrb	r6, [r6, #1]
 800d47c:	f016 0f04 	tst.w	r6, #4
 800d480:	d1ec      	bne.n	800d45c <_strtol_r+0x5c>
 800d482:	f016 0603 	ands.w	r6, r6, #3
 800d486:	d006      	beq.n	800d496 <_strtol_r+0x96>
 800d488:	2e01      	cmp	r6, #1
 800d48a:	bf14      	ite	ne
 800d48c:	2657      	movne	r6, #87	; 0x57
 800d48e:	2637      	moveq	r6, #55	; 0x37
 800d490:	1bad      	subs	r5, r5, r6
 800d492:	42ab      	cmp	r3, r5
 800d494:	dce5      	bgt.n	800d462 <_strtol_r+0x62>
 800d496:	1c7b      	adds	r3, r7, #1
 800d498:	d015      	beq.n	800d4c6 <_strtol_r+0xc6>
 800d49a:	f1ba 0f00 	cmp.w	sl, #0
 800d49e:	d121      	bne.n	800d4e4 <_strtol_r+0xe4>
 800d4a0:	b10a      	cbz	r2, 800d4a6 <_strtol_r+0xa6>
 800d4a2:	b9ef      	cbnz	r7, 800d4e0 <_strtol_r+0xe0>
 800d4a4:	6011      	str	r1, [r2, #0]
 800d4a6:	b002      	add	sp, #8
 800d4a8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d4ac:	4770      	bx	lr
 800d4ae:	455d      	cmp	r5, fp
 800d4b0:	dddc      	ble.n	800d46c <_strtol_r+0x6c>
 800d4b2:	f04f 37ff 	mov.w	r7, #4294967295
 800d4b6:	e7dc      	b.n	800d472 <_strtol_r+0x72>
 800d4b8:	2d30      	cmp	r5, #48	; 0x30
 800d4ba:	d01a      	beq.n	800d4f2 <_strtol_r+0xf2>
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d1be      	bne.n	800d43e <_strtol_r+0x3e>
 800d4c0:	230a      	movs	r3, #10
 800d4c2:	4699      	mov	r9, r3
 800d4c4:	e7bc      	b.n	800d440 <_strtol_r+0x40>
 800d4c6:	9901      	ldr	r1, [sp, #4]
 800d4c8:	f1ba 0f00 	cmp.w	sl, #0
 800d4cc:	f04f 0322 	mov.w	r3, #34	; 0x22
 800d4d0:	bf0c      	ite	eq
 800d4d2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800d4d6:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 800d4da:	600b      	str	r3, [r1, #0]
 800d4dc:	2a00      	cmp	r2, #0
 800d4de:	d0e2      	beq.n	800d4a6 <_strtol_r+0xa6>
 800d4e0:	1e61      	subs	r1, r4, #1
 800d4e2:	e7df      	b.n	800d4a4 <_strtol_r+0xa4>
 800d4e4:	4240      	negs	r0, r0
 800d4e6:	e7db      	b.n	800d4a0 <_strtol_r+0xa0>
 800d4e8:	1cb4      	adds	r4, r6, #2
 800d4ea:	7875      	ldrb	r5, [r6, #1]
 800d4ec:	f04f 0a01 	mov.w	sl, #1
 800d4f0:	e7a2      	b.n	800d438 <_strtol_r+0x38>
 800d4f2:	7820      	ldrb	r0, [r4, #0]
 800d4f4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d4f8:	2858      	cmp	r0, #88	; 0x58
 800d4fa:	d003      	beq.n	800d504 <_strtol_r+0x104>
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d19e      	bne.n	800d43e <_strtol_r+0x3e>
 800d500:	2308      	movs	r3, #8
 800d502:	e79c      	b.n	800d43e <_strtol_r+0x3e>
 800d504:	2310      	movs	r3, #16
 800d506:	7865      	ldrb	r5, [r4, #1]
 800d508:	4699      	mov	r9, r3
 800d50a:	3402      	adds	r4, #2
 800d50c:	e798      	b.n	800d440 <_strtol_r+0x40>
 800d50e:	bf00      	nop
 800d510:	20000590 	.word	0x20000590

0800d514 <_strtoll_r>:
 800d514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d518:	4c64      	ldr	r4, [pc, #400]	; (800d6ac <_strtoll_r+0x198>)
 800d51a:	b087      	sub	sp, #28
 800d51c:	4694      	mov	ip, r2
 800d51e:	9104      	str	r1, [sp, #16]
 800d520:	f8d4 8000 	ldr.w	r8, [r4]
 800d524:	9005      	str	r0, [sp, #20]
 800d526:	4699      	mov	r9, r3
 800d528:	460a      	mov	r2, r1
 800d52a:	e000      	b.n	800d52e <_strtoll_r+0x1a>
 800d52c:	4632      	mov	r2, r6
 800d52e:	4616      	mov	r6, r2
 800d530:	f816 7b01 	ldrb.w	r7, [r6], #1
 800d534:	eb08 0307 	add.w	r3, r8, r7
 800d538:	785b      	ldrb	r3, [r3, #1]
 800d53a:	f003 0308 	and.w	r3, r3, #8
 800d53e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800d542:	2b00      	cmp	r3, #0
 800d544:	d1f2      	bne.n	800d52c <_strtoll_r+0x18>
 800d546:	2f2d      	cmp	r7, #45	; 0x2d
 800d548:	f000 808d 	beq.w	800d666 <_strtoll_r+0x152>
 800d54c:	2f2b      	cmp	r7, #43	; 0x2b
 800d54e:	bf08      	it	eq
 800d550:	7857      	ldrbeq	r7, [r2, #1]
 800d552:	9102      	str	r1, [sp, #8]
 800d554:	bf08      	it	eq
 800d556:	1c96      	addeq	r6, r2, #2
 800d558:	f039 0110 	bics.w	r1, r9, #16
 800d55c:	d05e      	beq.n	800d61c <_strtoll_r+0x108>
 800d55e:	46ca      	mov	sl, r9
 800d560:	ea4f 7be9 	mov.w	fp, r9, asr #31
 800d564:	9c02      	ldr	r4, [sp, #8]
 800d566:	2c00      	cmp	r4, #0
 800d568:	d066      	beq.n	800d638 <_strtoll_r+0x124>
 800d56a:	2400      	movs	r4, #0
 800d56c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800d570:	4620      	mov	r0, r4
 800d572:	4629      	mov	r1, r5
 800d574:	4652      	mov	r2, sl
 800d576:	465b      	mov	r3, fp
 800d578:	f8cd c004 	str.w	ip, [sp, #4]
 800d57c:	f7f3 fdfa 	bl	8001174 <__aeabi_uldivmod>
 800d580:	4620      	mov	r0, r4
 800d582:	9203      	str	r2, [sp, #12]
 800d584:	465b      	mov	r3, fp
 800d586:	4652      	mov	r2, sl
 800d588:	4629      	mov	r1, r5
 800d58a:	f7f3 fdf3 	bl	8001174 <__aeabi_uldivmod>
 800d58e:	2400      	movs	r4, #0
 800d590:	2200      	movs	r2, #0
 800d592:	2300      	movs	r3, #0
 800d594:	f8dd c004 	ldr.w	ip, [sp, #4]
 800d598:	e019      	b.n	800d5ce <_strtoll_r+0xba>
 800d59a:	3f30      	subs	r7, #48	; 0x30
 800d59c:	45b9      	cmp	r9, r7
 800d59e:	dd26      	ble.n	800d5ee <_strtoll_r+0xda>
 800d5a0:	1c65      	adds	r5, r4, #1
 800d5a2:	d012      	beq.n	800d5ca <_strtoll_r+0xb6>
 800d5a4:	4299      	cmp	r1, r3
 800d5a6:	bf08      	it	eq
 800d5a8:	4290      	cmpeq	r0, r2
 800d5aa:	d334      	bcc.n	800d616 <_strtoll_r+0x102>
 800d5ac:	428b      	cmp	r3, r1
 800d5ae:	bf08      	it	eq
 800d5b0:	4282      	cmpeq	r2, r0
 800d5b2:	d02d      	beq.n	800d610 <_strtoll_r+0xfc>
 800d5b4:	fb02 f40b 	mul.w	r4, r2, fp
 800d5b8:	fb0a 4403 	mla	r4, sl, r3, r4
 800d5bc:	fba2 230a 	umull	r2, r3, r2, sl
 800d5c0:	4423      	add	r3, r4
 800d5c2:	19d2      	adds	r2, r2, r7
 800d5c4:	eb43 73e7 	adc.w	r3, r3, r7, asr #31
 800d5c8:	2401      	movs	r4, #1
 800d5ca:	f816 7b01 	ldrb.w	r7, [r6], #1
 800d5ce:	eb08 0507 	add.w	r5, r8, r7
 800d5d2:	786d      	ldrb	r5, [r5, #1]
 800d5d4:	f015 0f04 	tst.w	r5, #4
 800d5d8:	d1df      	bne.n	800d59a <_strtoll_r+0x86>
 800d5da:	f015 0503 	ands.w	r5, r5, #3
 800d5de:	d006      	beq.n	800d5ee <_strtoll_r+0xda>
 800d5e0:	2d01      	cmp	r5, #1
 800d5e2:	bf14      	ite	ne
 800d5e4:	2557      	movne	r5, #87	; 0x57
 800d5e6:	2537      	moveq	r5, #55	; 0x37
 800d5e8:	1b7f      	subs	r7, r7, r5
 800d5ea:	45b9      	cmp	r9, r7
 800d5ec:	dcd8      	bgt.n	800d5a0 <_strtoll_r+0x8c>
 800d5ee:	1c61      	adds	r1, r4, #1
 800d5f0:	d027      	beq.n	800d642 <_strtoll_r+0x12e>
 800d5f2:	9902      	ldr	r1, [sp, #8]
 800d5f4:	2900      	cmp	r1, #0
 800d5f6:	d132      	bne.n	800d65e <_strtoll_r+0x14a>
 800d5f8:	4610      	mov	r0, r2
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	f1bc 0f00 	cmp.w	ip, #0
 800d600:	d003      	beq.n	800d60a <_strtoll_r+0xf6>
 800d602:	bb54      	cbnz	r4, 800d65a <_strtoll_r+0x146>
 800d604:	9e04      	ldr	r6, [sp, #16]
 800d606:	f8cc 6000 	str.w	r6, [ip]
 800d60a:	b007      	add	sp, #28
 800d60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d610:	9c03      	ldr	r4, [sp, #12]
 800d612:	42a7      	cmp	r7, r4
 800d614:	ddce      	ble.n	800d5b4 <_strtoll_r+0xa0>
 800d616:	f04f 34ff 	mov.w	r4, #4294967295
 800d61a:	e7d6      	b.n	800d5ca <_strtoll_r+0xb6>
 800d61c:	2f30      	cmp	r7, #48	; 0x30
 800d61e:	d027      	beq.n	800d670 <_strtoll_r+0x15c>
 800d620:	f1b9 0f00 	cmp.w	r9, #0
 800d624:	d19b      	bne.n	800d55e <_strtoll_r+0x4a>
 800d626:	9c02      	ldr	r4, [sp, #8]
 800d628:	f04f 0a0a 	mov.w	sl, #10
 800d62c:	f04f 0b00 	mov.w	fp, #0
 800d630:	f04f 090a 	mov.w	r9, #10
 800d634:	2c00      	cmp	r4, #0
 800d636:	d198      	bne.n	800d56a <_strtoll_r+0x56>
 800d638:	f04f 34ff 	mov.w	r4, #4294967295
 800d63c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800d640:	e796      	b.n	800d570 <_strtoll_r+0x5c>
 800d642:	9c02      	ldr	r4, [sp, #8]
 800d644:	bb24      	cbnz	r4, 800d690 <_strtoll_r+0x17c>
 800d646:	f04f 30ff 	mov.w	r0, #4294967295
 800d64a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d64e:	9c05      	ldr	r4, [sp, #20]
 800d650:	2322      	movs	r3, #34	; 0x22
 800d652:	6023      	str	r3, [r4, #0]
 800d654:	f1bc 0f00 	cmp.w	ip, #0
 800d658:	d0d7      	beq.n	800d60a <_strtoll_r+0xf6>
 800d65a:	3e01      	subs	r6, #1
 800d65c:	e7d3      	b.n	800d606 <_strtoll_r+0xf2>
 800d65e:	4252      	negs	r2, r2
 800d660:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800d664:	e7c8      	b.n	800d5f8 <_strtoll_r+0xe4>
 800d666:	2401      	movs	r4, #1
 800d668:	1c96      	adds	r6, r2, #2
 800d66a:	7857      	ldrb	r7, [r2, #1]
 800d66c:	9402      	str	r4, [sp, #8]
 800d66e:	e773      	b.n	800d558 <_strtoll_r+0x44>
 800d670:	7833      	ldrb	r3, [r6, #0]
 800d672:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d676:	2b58      	cmp	r3, #88	; 0x58
 800d678:	d00e      	beq.n	800d698 <_strtoll_r+0x184>
 800d67a:	f1b9 0f00 	cmp.w	r9, #0
 800d67e:	f47f af6e 	bne.w	800d55e <_strtoll_r+0x4a>
 800d682:	f04f 0a08 	mov.w	sl, #8
 800d686:	f04f 0b00 	mov.w	fp, #0
 800d68a:	f04f 0908 	mov.w	r9, #8
 800d68e:	e769      	b.n	800d564 <_strtoll_r+0x50>
 800d690:	2000      	movs	r0, #0
 800d692:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d696:	e7da      	b.n	800d64e <_strtoll_r+0x13a>
 800d698:	7877      	ldrb	r7, [r6, #1]
 800d69a:	f04f 0a10 	mov.w	sl, #16
 800d69e:	f04f 0b00 	mov.w	fp, #0
 800d6a2:	3602      	adds	r6, #2
 800d6a4:	f04f 0910 	mov.w	r9, #16
 800d6a8:	e75c      	b.n	800d564 <_strtoll_r+0x50>
 800d6aa:	bf00      	nop
 800d6ac:	20000590 	.word	0x20000590

0800d6b0 <_strtoul_r>:
 800d6b0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d6b4:	4c44      	ldr	r4, [pc, #272]	; (800d7c8 <_strtoul_r+0x118>)
 800d6b6:	b082      	sub	sp, #8
 800d6b8:	f8d4 c000 	ldr.w	ip, [r4]
 800d6bc:	9001      	str	r0, [sp, #4]
 800d6be:	460e      	mov	r6, r1
 800d6c0:	e000      	b.n	800d6c4 <_strtoul_r+0x14>
 800d6c2:	4626      	mov	r6, r4
 800d6c4:	4634      	mov	r4, r6
 800d6c6:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d6ca:	eb0c 0005 	add.w	r0, ip, r5
 800d6ce:	7840      	ldrb	r0, [r0, #1]
 800d6d0:	f000 0008 	and.w	r0, r0, #8
 800d6d4:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 800d6d8:	2800      	cmp	r0, #0
 800d6da:	d1f2      	bne.n	800d6c2 <_strtoul_r+0x12>
 800d6dc:	2d2d      	cmp	r5, #45	; 0x2d
 800d6de:	d057      	beq.n	800d790 <_strtoul_r+0xe0>
 800d6e0:	2d2b      	cmp	r5, #43	; 0x2b
 800d6e2:	bf08      	it	eq
 800d6e4:	7875      	ldrbeq	r5, [r6, #1]
 800d6e6:	46ba      	mov	sl, r7
 800d6e8:	bf08      	it	eq
 800d6ea:	1cb4      	addeq	r4, r6, #2
 800d6ec:	f033 0010 	bics.w	r0, r3, #16
 800d6f0:	d039      	beq.n	800d766 <_strtoul_r+0xb6>
 800d6f2:	f04f 38ff 	mov.w	r8, #4294967295
 800d6f6:	fbb8 f8f3 	udiv	r8, r8, r3
 800d6fa:	fb03 fb08 	mul.w	fp, r3, r8
 800d6fe:	ea6f 0b0b 	mvn.w	fp, fp
 800d702:	4699      	mov	r9, r3
 800d704:	2700      	movs	r7, #0
 800d706:	4638      	mov	r0, r7
 800d708:	e00c      	b.n	800d724 <_strtoul_r+0x74>
 800d70a:	3d30      	subs	r5, #48	; 0x30
 800d70c:	42ab      	cmp	r3, r5
 800d70e:	dd19      	ble.n	800d744 <_strtoul_r+0x94>
 800d710:	2f00      	cmp	r7, #0
 800d712:	db25      	blt.n	800d760 <_strtoul_r+0xb0>
 800d714:	4540      	cmp	r0, r8
 800d716:	d823      	bhi.n	800d760 <_strtoul_r+0xb0>
 800d718:	d020      	beq.n	800d75c <_strtoul_r+0xac>
 800d71a:	fb09 5000 	mla	r0, r9, r0, r5
 800d71e:	2701      	movs	r7, #1
 800d720:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d724:	eb0c 0605 	add.w	r6, ip, r5
 800d728:	7876      	ldrb	r6, [r6, #1]
 800d72a:	f016 0f04 	tst.w	r6, #4
 800d72e:	d1ec      	bne.n	800d70a <_strtoul_r+0x5a>
 800d730:	f016 0603 	ands.w	r6, r6, #3
 800d734:	d006      	beq.n	800d744 <_strtoul_r+0x94>
 800d736:	2e01      	cmp	r6, #1
 800d738:	bf14      	ite	ne
 800d73a:	2657      	movne	r6, #87	; 0x57
 800d73c:	2637      	moveq	r6, #55	; 0x37
 800d73e:	1bad      	subs	r5, r5, r6
 800d740:	42ab      	cmp	r3, r5
 800d742:	dce5      	bgt.n	800d710 <_strtoul_r+0x60>
 800d744:	2f00      	cmp	r7, #0
 800d746:	db1d      	blt.n	800d784 <_strtoul_r+0xd4>
 800d748:	f1ba 0f00 	cmp.w	sl, #0
 800d74c:	d118      	bne.n	800d780 <_strtoul_r+0xd0>
 800d74e:	b10a      	cbz	r2, 800d754 <_strtoul_r+0xa4>
 800d750:	b9a7      	cbnz	r7, 800d77c <_strtoul_r+0xcc>
 800d752:	6011      	str	r1, [r2, #0]
 800d754:	b002      	add	sp, #8
 800d756:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d75a:	4770      	bx	lr
 800d75c:	455d      	cmp	r5, fp
 800d75e:	dddc      	ble.n	800d71a <_strtoul_r+0x6a>
 800d760:	f04f 37ff 	mov.w	r7, #4294967295
 800d764:	e7dc      	b.n	800d720 <_strtoul_r+0x70>
 800d766:	2d30      	cmp	r5, #48	; 0x30
 800d768:	d017      	beq.n	800d79a <_strtoul_r+0xea>
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d1c1      	bne.n	800d6f2 <_strtoul_r+0x42>
 800d76e:	230a      	movs	r3, #10
 800d770:	4699      	mov	r9, r3
 800d772:	f04f 0b05 	mov.w	fp, #5
 800d776:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800d7cc <_strtoul_r+0x11c>
 800d77a:	e7c3      	b.n	800d704 <_strtoul_r+0x54>
 800d77c:	1e61      	subs	r1, r4, #1
 800d77e:	e7e8      	b.n	800d752 <_strtoul_r+0xa2>
 800d780:	4240      	negs	r0, r0
 800d782:	e7e4      	b.n	800d74e <_strtoul_r+0x9e>
 800d784:	9801      	ldr	r0, [sp, #4]
 800d786:	2322      	movs	r3, #34	; 0x22
 800d788:	6003      	str	r3, [r0, #0]
 800d78a:	f04f 30ff 	mov.w	r0, #4294967295
 800d78e:	e7de      	b.n	800d74e <_strtoul_r+0x9e>
 800d790:	1cb4      	adds	r4, r6, #2
 800d792:	7875      	ldrb	r5, [r6, #1]
 800d794:	f04f 0a01 	mov.w	sl, #1
 800d798:	e7a8      	b.n	800d6ec <_strtoul_r+0x3c>
 800d79a:	7820      	ldrb	r0, [r4, #0]
 800d79c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d7a0:	2858      	cmp	r0, #88	; 0x58
 800d7a2:	d008      	beq.n	800d7b6 <_strtoul_r+0x106>
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d1a4      	bne.n	800d6f2 <_strtoul_r+0x42>
 800d7a8:	2308      	movs	r3, #8
 800d7aa:	4699      	mov	r9, r3
 800d7ac:	f04f 0b07 	mov.w	fp, #7
 800d7b0:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 800d7b4:	e7a6      	b.n	800d704 <_strtoul_r+0x54>
 800d7b6:	2310      	movs	r3, #16
 800d7b8:	7865      	ldrb	r5, [r4, #1]
 800d7ba:	4699      	mov	r9, r3
 800d7bc:	f04f 0b0f 	mov.w	fp, #15
 800d7c0:	3402      	adds	r4, #2
 800d7c2:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 800d7c6:	e79d      	b.n	800d704 <_strtoul_r+0x54>
 800d7c8:	20000590 	.word	0x20000590
 800d7cc:	19999999 	.word	0x19999999

0800d7d0 <_strtoull_r>:
 800d7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d4:	4c60      	ldr	r4, [pc, #384]	; (800d958 <_strtoull_r+0x188>)
 800d7d6:	b085      	sub	sp, #20
 800d7d8:	f8d4 8000 	ldr.w	r8, [r4]
 800d7dc:	9200      	str	r2, [sp, #0]
 800d7de:	9101      	str	r1, [sp, #4]
 800d7e0:	9003      	str	r0, [sp, #12]
 800d7e2:	4699      	mov	r9, r3
 800d7e4:	460a      	mov	r2, r1
 800d7e6:	e000      	b.n	800d7ea <_strtoull_r+0x1a>
 800d7e8:	4632      	mov	r2, r6
 800d7ea:	4616      	mov	r6, r2
 800d7ec:	f816 7b01 	ldrb.w	r7, [r6], #1
 800d7f0:	eb08 0307 	add.w	r3, r8, r7
 800d7f4:	785b      	ldrb	r3, [r3, #1]
 800d7f6:	f003 0308 	and.w	r3, r3, #8
 800d7fa:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d1f2      	bne.n	800d7e8 <_strtoull_r+0x18>
 800d802:	2f2d      	cmp	r7, #45	; 0x2d
 800d804:	d07d      	beq.n	800d902 <_strtoull_r+0x132>
 800d806:	2f2b      	cmp	r7, #43	; 0x2b
 800d808:	bf08      	it	eq
 800d80a:	7857      	ldrbeq	r7, [r2, #1]
 800d80c:	9102      	str	r1, [sp, #8]
 800d80e:	bf08      	it	eq
 800d810:	1c96      	addeq	r6, r2, #2
 800d812:	f039 0210 	bics.w	r2, r9, #16
 800d816:	d055      	beq.n	800d8c4 <_strtoull_r+0xf4>
 800d818:	ea4f 7be9 	mov.w	fp, r9, asr #31
 800d81c:	464a      	mov	r2, r9
 800d81e:	465b      	mov	r3, fp
 800d820:	f04f 30ff 	mov.w	r0, #4294967295
 800d824:	f04f 31ff 	mov.w	r1, #4294967295
 800d828:	f7f3 fca4 	bl	8001174 <__aeabi_uldivmod>
 800d82c:	464a      	mov	r2, r9
 800d82e:	4604      	mov	r4, r0
 800d830:	460d      	mov	r5, r1
 800d832:	465b      	mov	r3, fp
 800d834:	f04f 30ff 	mov.w	r0, #4294967295
 800d838:	f04f 31ff 	mov.w	r1, #4294967295
 800d83c:	f7f3 fc9a 	bl	8001174 <__aeabi_uldivmod>
 800d840:	46ca      	mov	sl, r9
 800d842:	4694      	mov	ip, r2
 800d844:	2300      	movs	r3, #0
 800d846:	2000      	movs	r0, #0
 800d848:	2100      	movs	r1, #0
 800d84a:	e019      	b.n	800d880 <_strtoull_r+0xb0>
 800d84c:	3f30      	subs	r7, #48	; 0x30
 800d84e:	45b9      	cmp	r9, r7
 800d850:	dd26      	ble.n	800d8a0 <_strtoull_r+0xd0>
 800d852:	2b00      	cmp	r3, #0
 800d854:	db33      	blt.n	800d8be <_strtoull_r+0xee>
 800d856:	428d      	cmp	r5, r1
 800d858:	bf08      	it	eq
 800d85a:	4284      	cmpeq	r4, r0
 800d85c:	d32f      	bcc.n	800d8be <_strtoull_r+0xee>
 800d85e:	42a9      	cmp	r1, r5
 800d860:	bf08      	it	eq
 800d862:	42a0      	cmpeq	r0, r4
 800d864:	d029      	beq.n	800d8ba <_strtoull_r+0xea>
 800d866:	fb00 f30b 	mul.w	r3, r0, fp
 800d86a:	fb0a 3301 	mla	r3, sl, r1, r3
 800d86e:	fba0 010a 	umull	r0, r1, r0, sl
 800d872:	4419      	add	r1, r3
 800d874:	19c0      	adds	r0, r0, r7
 800d876:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
 800d87a:	2301      	movs	r3, #1
 800d87c:	f816 7b01 	ldrb.w	r7, [r6], #1
 800d880:	eb08 0207 	add.w	r2, r8, r7
 800d884:	7852      	ldrb	r2, [r2, #1]
 800d886:	f012 0f04 	tst.w	r2, #4
 800d88a:	d1df      	bne.n	800d84c <_strtoull_r+0x7c>
 800d88c:	f012 0203 	ands.w	r2, r2, #3
 800d890:	d006      	beq.n	800d8a0 <_strtoull_r+0xd0>
 800d892:	2a01      	cmp	r2, #1
 800d894:	bf14      	ite	ne
 800d896:	2257      	movne	r2, #87	; 0x57
 800d898:	2237      	moveq	r2, #55	; 0x37
 800d89a:	1abf      	subs	r7, r7, r2
 800d89c:	45b9      	cmp	r9, r7
 800d89e:	dcd8      	bgt.n	800d852 <_strtoull_r+0x82>
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	db26      	blt.n	800d8f2 <_strtoull_r+0x122>
 800d8a4:	9a02      	ldr	r2, [sp, #8]
 800d8a6:	bb02      	cbnz	r2, 800d8ea <_strtoull_r+0x11a>
 800d8a8:	9a00      	ldr	r2, [sp, #0]
 800d8aa:	b11a      	cbz	r2, 800d8b4 <_strtoull_r+0xe4>
 800d8ac:	b9db      	cbnz	r3, 800d8e6 <_strtoull_r+0x116>
 800d8ae:	9e01      	ldr	r6, [sp, #4]
 800d8b0:	9b00      	ldr	r3, [sp, #0]
 800d8b2:	601e      	str	r6, [r3, #0]
 800d8b4:	b005      	add	sp, #20
 800d8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ba:	4567      	cmp	r7, ip
 800d8bc:	ddd3      	ble.n	800d866 <_strtoull_r+0x96>
 800d8be:	f04f 33ff 	mov.w	r3, #4294967295
 800d8c2:	e7db      	b.n	800d87c <_strtoull_r+0xac>
 800d8c4:	2f30      	cmp	r7, #48	; 0x30
 800d8c6:	d021      	beq.n	800d90c <_strtoull_r+0x13c>
 800d8c8:	f1b9 0f00 	cmp.w	r9, #0
 800d8cc:	d1a4      	bne.n	800d818 <_strtoull_r+0x48>
 800d8ce:	f04f 0c05 	mov.w	ip, #5
 800d8d2:	f04f 3499 	mov.w	r4, #2576980377	; 0x99999999
 800d8d6:	4d21      	ldr	r5, [pc, #132]	; (800d95c <_strtoull_r+0x18c>)
 800d8d8:	f04f 0a0a 	mov.w	sl, #10
 800d8dc:	f04f 0b00 	mov.w	fp, #0
 800d8e0:	f04f 090a 	mov.w	r9, #10
 800d8e4:	e7ae      	b.n	800d844 <_strtoull_r+0x74>
 800d8e6:	3e01      	subs	r6, #1
 800d8e8:	e7e2      	b.n	800d8b0 <_strtoull_r+0xe0>
 800d8ea:	4240      	negs	r0, r0
 800d8ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800d8f0:	e7da      	b.n	800d8a8 <_strtoull_r+0xd8>
 800d8f2:	9903      	ldr	r1, [sp, #12]
 800d8f4:	2222      	movs	r2, #34	; 0x22
 800d8f6:	600a      	str	r2, [r1, #0]
 800d8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8fc:	f04f 31ff 	mov.w	r1, #4294967295
 800d900:	e7d2      	b.n	800d8a8 <_strtoull_r+0xd8>
 800d902:	2101      	movs	r1, #1
 800d904:	1c96      	adds	r6, r2, #2
 800d906:	7857      	ldrb	r7, [r2, #1]
 800d908:	9102      	str	r1, [sp, #8]
 800d90a:	e782      	b.n	800d812 <_strtoull_r+0x42>
 800d90c:	7833      	ldrb	r3, [r6, #0]
 800d90e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d912:	2b58      	cmp	r3, #88	; 0x58
 800d914:	d010      	beq.n	800d938 <_strtoull_r+0x168>
 800d916:	f1b9 0f00 	cmp.w	r9, #0
 800d91a:	f47f af7d 	bne.w	800d818 <_strtoull_r+0x48>
 800d91e:	f04f 0c07 	mov.w	ip, #7
 800d922:	f04f 34ff 	mov.w	r4, #4294967295
 800d926:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 800d92a:	f04f 0a08 	mov.w	sl, #8
 800d92e:	f04f 0b00 	mov.w	fp, #0
 800d932:	f04f 0908 	mov.w	r9, #8
 800d936:	e785      	b.n	800d844 <_strtoull_r+0x74>
 800d938:	7877      	ldrb	r7, [r6, #1]
 800d93a:	f04f 0c0f 	mov.w	ip, #15
 800d93e:	3602      	adds	r6, #2
 800d940:	f04f 34ff 	mov.w	r4, #4294967295
 800d944:	f06f 4570 	mvn.w	r5, #4026531840	; 0xf0000000
 800d948:	f04f 0a10 	mov.w	sl, #16
 800d94c:	f04f 0b00 	mov.w	fp, #0
 800d950:	f04f 0910 	mov.w	r9, #16
 800d954:	e776      	b.n	800d844 <_strtoull_r+0x74>
 800d956:	bf00      	nop
 800d958:	20000590 	.word	0x20000590
 800d95c:	19999999 	.word	0x19999999

0800d960 <__ssprint_r>:
 800d960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d964:	6894      	ldr	r4, [r2, #8]
 800d966:	6816      	ldr	r6, [r2, #0]
 800d968:	b083      	sub	sp, #12
 800d96a:	4692      	mov	sl, r2
 800d96c:	4680      	mov	r8, r0
 800d96e:	460d      	mov	r5, r1
 800d970:	2c00      	cmp	r4, #0
 800d972:	d06f      	beq.n	800da54 <__ssprint_r+0xf4>
 800d974:	f04f 0b00 	mov.w	fp, #0
 800d978:	6808      	ldr	r0, [r1, #0]
 800d97a:	688b      	ldr	r3, [r1, #8]
 800d97c:	465c      	mov	r4, fp
 800d97e:	2c00      	cmp	r4, #0
 800d980:	d043      	beq.n	800da0a <__ssprint_r+0xaa>
 800d982:	429c      	cmp	r4, r3
 800d984:	461f      	mov	r7, r3
 800d986:	d345      	bcc.n	800da14 <__ssprint_r+0xb4>
 800d988:	89ab      	ldrh	r3, [r5, #12]
 800d98a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800d98e:	d044      	beq.n	800da1a <__ssprint_r+0xba>
 800d990:	696f      	ldr	r7, [r5, #20]
 800d992:	6929      	ldr	r1, [r5, #16]
 800d994:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800d998:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800d99c:	ebc1 0900 	rsb	r9, r1, r0
 800d9a0:	1c62      	adds	r2, r4, #1
 800d9a2:	107f      	asrs	r7, r7, #1
 800d9a4:	444a      	add	r2, r9
 800d9a6:	4297      	cmp	r7, r2
 800d9a8:	bf34      	ite	cc
 800d9aa:	4617      	movcc	r7, r2
 800d9ac:	463a      	movcs	r2, r7
 800d9ae:	055b      	lsls	r3, r3, #21
 800d9b0:	d535      	bpl.n	800da1e <__ssprint_r+0xbe>
 800d9b2:	4611      	mov	r1, r2
 800d9b4:	4640      	mov	r0, r8
 800d9b6:	f7fa f94f 	bl	8007c58 <_malloc_r>
 800d9ba:	2800      	cmp	r0, #0
 800d9bc:	d039      	beq.n	800da32 <__ssprint_r+0xd2>
 800d9be:	6929      	ldr	r1, [r5, #16]
 800d9c0:	9001      	str	r0, [sp, #4]
 800d9c2:	464a      	mov	r2, r9
 800d9c4:	f7f3 fa8c 	bl	8000ee0 <memcpy>
 800d9c8:	89aa      	ldrh	r2, [r5, #12]
 800d9ca:	9b01      	ldr	r3, [sp, #4]
 800d9cc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800d9d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d9d4:	81aa      	strh	r2, [r5, #12]
 800d9d6:	ebc9 0207 	rsb	r2, r9, r7
 800d9da:	eb03 0009 	add.w	r0, r3, r9
 800d9de:	616f      	str	r7, [r5, #20]
 800d9e0:	612b      	str	r3, [r5, #16]
 800d9e2:	6028      	str	r0, [r5, #0]
 800d9e4:	60aa      	str	r2, [r5, #8]
 800d9e6:	4627      	mov	r7, r4
 800d9e8:	46a1      	mov	r9, r4
 800d9ea:	464a      	mov	r2, r9
 800d9ec:	4659      	mov	r1, fp
 800d9ee:	f000 fcf3 	bl	800e3d8 <memmove>
 800d9f2:	f8da 2008 	ldr.w	r2, [sl, #8]
 800d9f6:	68ab      	ldr	r3, [r5, #8]
 800d9f8:	6828      	ldr	r0, [r5, #0]
 800d9fa:	1bdb      	subs	r3, r3, r7
 800d9fc:	4448      	add	r0, r9
 800d9fe:	1b14      	subs	r4, r2, r4
 800da00:	60ab      	str	r3, [r5, #8]
 800da02:	6028      	str	r0, [r5, #0]
 800da04:	f8ca 4008 	str.w	r4, [sl, #8]
 800da08:	b324      	cbz	r4, 800da54 <__ssprint_r+0xf4>
 800da0a:	f8d6 b000 	ldr.w	fp, [r6]
 800da0e:	6874      	ldr	r4, [r6, #4]
 800da10:	3608      	adds	r6, #8
 800da12:	e7b4      	b.n	800d97e <__ssprint_r+0x1e>
 800da14:	4627      	mov	r7, r4
 800da16:	46a1      	mov	r9, r4
 800da18:	e7e7      	b.n	800d9ea <__ssprint_r+0x8a>
 800da1a:	46b9      	mov	r9, r7
 800da1c:	e7e5      	b.n	800d9ea <__ssprint_r+0x8a>
 800da1e:	4640      	mov	r0, r8
 800da20:	f000 fd3a 	bl	800e498 <_realloc_r>
 800da24:	4603      	mov	r3, r0
 800da26:	2800      	cmp	r0, #0
 800da28:	d1d5      	bne.n	800d9d6 <__ssprint_r+0x76>
 800da2a:	4640      	mov	r0, r8
 800da2c:	6929      	ldr	r1, [r5, #16]
 800da2e:	f7fd ff09 	bl	800b844 <_free_r>
 800da32:	89aa      	ldrh	r2, [r5, #12]
 800da34:	230c      	movs	r3, #12
 800da36:	f8c8 3000 	str.w	r3, [r8]
 800da3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da3e:	2300      	movs	r3, #0
 800da40:	f04f 30ff 	mov.w	r0, #4294967295
 800da44:	81aa      	strh	r2, [r5, #12]
 800da46:	f8ca 3008 	str.w	r3, [sl, #8]
 800da4a:	f8ca 3004 	str.w	r3, [sl, #4]
 800da4e:	b003      	add	sp, #12
 800da50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da54:	4620      	mov	r0, r4
 800da56:	f8ca 4004 	str.w	r4, [sl, #4]
 800da5a:	b003      	add	sp, #12
 800da5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800da60 <_sungetc_r>:
 800da60:	b538      	push	{r3, r4, r5, lr}
 800da62:	1c4b      	adds	r3, r1, #1
 800da64:	4614      	mov	r4, r2
 800da66:	d019      	beq.n	800da9c <_sungetc_r+0x3c>
 800da68:	8992      	ldrh	r2, [r2, #12]
 800da6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800da6c:	f022 0220 	bic.w	r2, r2, #32
 800da70:	b2cd      	uxtb	r5, r1
 800da72:	81a2      	strh	r2, [r4, #12]
 800da74:	b1ab      	cbz	r3, 800daa2 <_sungetc_r+0x42>
 800da76:	6862      	ldr	r2, [r4, #4]
 800da78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da7a:	429a      	cmp	r2, r3
 800da7c:	da09      	bge.n	800da92 <_sungetc_r+0x32>
 800da7e:	6823      	ldr	r3, [r4, #0]
 800da80:	1e5a      	subs	r2, r3, #1
 800da82:	6022      	str	r2, [r4, #0]
 800da84:	f803 5c01 	strb.w	r5, [r3, #-1]
 800da88:	6863      	ldr	r3, [r4, #4]
 800da8a:	3301      	adds	r3, #1
 800da8c:	4628      	mov	r0, r5
 800da8e:	6063      	str	r3, [r4, #4]
 800da90:	bd38      	pop	{r3, r4, r5, pc}
 800da92:	4621      	mov	r1, r4
 800da94:	f000 f882 	bl	800db9c <__submore>
 800da98:	2800      	cmp	r0, #0
 800da9a:	d0f0      	beq.n	800da7e <_sungetc_r+0x1e>
 800da9c:	f04f 30ff 	mov.w	r0, #4294967295
 800daa0:	bd38      	pop	{r3, r4, r5, pc}
 800daa2:	6923      	ldr	r3, [r4, #16]
 800daa4:	6822      	ldr	r2, [r4, #0]
 800daa6:	b12b      	cbz	r3, 800dab4 <_sungetc_r+0x54>
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d203      	bcs.n	800dab4 <_sungetc_r+0x54>
 800daac:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 800dab0:	42a8      	cmp	r0, r5
 800dab2:	d00f      	beq.n	800dad4 <_sungetc_r+0x74>
 800dab4:	4623      	mov	r3, r4
 800dab6:	6861      	ldr	r1, [r4, #4]
 800dab8:	63a2      	str	r2, [r4, #56]	; 0x38
 800daba:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800dabe:	2203      	movs	r2, #3
 800dac0:	6320      	str	r0, [r4, #48]	; 0x30
 800dac2:	6362      	str	r2, [r4, #52]	; 0x34
 800dac4:	63e1      	str	r1, [r4, #60]	; 0x3c
 800dac6:	f803 5f42 	strb.w	r5, [r3, #66]!
 800daca:	2201      	movs	r2, #1
 800dacc:	6023      	str	r3, [r4, #0]
 800dace:	4628      	mov	r0, r5
 800dad0:	6062      	str	r2, [r4, #4]
 800dad2:	bd38      	pop	{r3, r4, r5, pc}
 800dad4:	6863      	ldr	r3, [r4, #4]
 800dad6:	3a01      	subs	r2, #1
 800dad8:	3301      	adds	r3, #1
 800dada:	e884 000c 	stmia.w	r4, {r2, r3}
 800dade:	bd38      	pop	{r3, r4, r5, pc}

0800dae0 <__ssrefill_r>:
 800dae0:	b510      	push	{r4, lr}
 800dae2:	460c      	mov	r4, r1
 800dae4:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800dae6:	b169      	cbz	r1, 800db04 <__ssrefill_r+0x24>
 800dae8:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800daec:	4299      	cmp	r1, r3
 800daee:	d001      	beq.n	800daf4 <__ssrefill_r+0x14>
 800daf0:	f7fd fea8 	bl	800b844 <_free_r>
 800daf4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800daf6:	6063      	str	r3, [r4, #4]
 800daf8:	2000      	movs	r0, #0
 800dafa:	6320      	str	r0, [r4, #48]	; 0x30
 800dafc:	b113      	cbz	r3, 800db04 <__ssrefill_r+0x24>
 800dafe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800db00:	6023      	str	r3, [r4, #0]
 800db02:	bd10      	pop	{r4, pc}
 800db04:	89a2      	ldrh	r2, [r4, #12]
 800db06:	6923      	ldr	r3, [r4, #16]
 800db08:	6023      	str	r3, [r4, #0]
 800db0a:	f042 0220 	orr.w	r2, r2, #32
 800db0e:	2300      	movs	r3, #0
 800db10:	81a2      	strh	r2, [r4, #12]
 800db12:	6063      	str	r3, [r4, #4]
 800db14:	f04f 30ff 	mov.w	r0, #4294967295
 800db18:	bd10      	pop	{r4, pc}
 800db1a:	bf00      	nop

0800db1c <_sfread_r>:
 800db1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db20:	b083      	sub	sp, #12
 800db22:	fb02 f903 	mul.w	r9, r2, r3
 800db26:	9201      	str	r2, [sp, #4]
 800db28:	469a      	mov	sl, r3
 800db2a:	4607      	mov	r7, r0
 800db2c:	460e      	mov	r6, r1
 800db2e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800db30:	f1b9 0f00 	cmp.w	r9, #0
 800db34:	d026      	beq.n	800db84 <_sfread_r+0x68>
 800db36:	464d      	mov	r5, r9
 800db38:	f04f 0800 	mov.w	r8, #0
 800db3c:	e00e      	b.n	800db5c <_sfread_r+0x40>
 800db3e:	f7f3 f9cf 	bl	8000ee0 <memcpy>
 800db42:	6822      	ldr	r2, [r4, #0]
 800db44:	f8c4 8004 	str.w	r8, [r4, #4]
 800db48:	445a      	add	r2, fp
 800db4a:	6022      	str	r2, [r4, #0]
 800db4c:	4638      	mov	r0, r7
 800db4e:	4621      	mov	r1, r4
 800db50:	445e      	add	r6, fp
 800db52:	ebcb 0505 	rsb	r5, fp, r5
 800db56:	f7ff ffc3 	bl	800dae0 <__ssrefill_r>
 800db5a:	b9b8      	cbnz	r0, 800db8c <_sfread_r+0x70>
 800db5c:	f8d4 b004 	ldr.w	fp, [r4, #4]
 800db60:	6821      	ldr	r1, [r4, #0]
 800db62:	455d      	cmp	r5, fp
 800db64:	4630      	mov	r0, r6
 800db66:	465a      	mov	r2, fp
 800db68:	d8e9      	bhi.n	800db3e <_sfread_r+0x22>
 800db6a:	462a      	mov	r2, r5
 800db6c:	f7f3 f9b8 	bl	8000ee0 <memcpy>
 800db70:	6862      	ldr	r2, [r4, #4]
 800db72:	6823      	ldr	r3, [r4, #0]
 800db74:	1b52      	subs	r2, r2, r5
 800db76:	442b      	add	r3, r5
 800db78:	4650      	mov	r0, sl
 800db7a:	6062      	str	r2, [r4, #4]
 800db7c:	6023      	str	r3, [r4, #0]
 800db7e:	b003      	add	sp, #12
 800db80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db84:	4648      	mov	r0, r9
 800db86:	b003      	add	sp, #12
 800db88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db8c:	9b01      	ldr	r3, [sp, #4]
 800db8e:	ebc5 0909 	rsb	r9, r5, r9
 800db92:	fbb9 f0f3 	udiv	r0, r9, r3
 800db96:	b003      	add	sp, #12
 800db98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800db9c <__submore>:
 800db9c:	f101 0340 	add.w	r3, r1, #64	; 0x40
 800dba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dba4:	460c      	mov	r4, r1
 800dba6:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800dba8:	4299      	cmp	r1, r3
 800dbaa:	d014      	beq.n	800dbd6 <__submore+0x3a>
 800dbac:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800dbae:	0077      	lsls	r7, r6, #1
 800dbb0:	463a      	mov	r2, r7
 800dbb2:	f000 fc71 	bl	800e498 <_realloc_r>
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	b340      	cbz	r0, 800dc0c <__submore+0x70>
 800dbba:	eb00 0806 	add.w	r8, r0, r6
 800dbbe:	4632      	mov	r2, r6
 800dbc0:	4640      	mov	r0, r8
 800dbc2:	4629      	mov	r1, r5
 800dbc4:	f7f3 f98c 	bl	8000ee0 <memcpy>
 800dbc8:	f8c4 8000 	str.w	r8, [r4]
 800dbcc:	6325      	str	r5, [r4, #48]	; 0x30
 800dbce:	6367      	str	r7, [r4, #52]	; 0x34
 800dbd0:	2000      	movs	r0, #0
 800dbd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dbda:	f7fa f83d 	bl	8007c58 <_malloc_r>
 800dbde:	b1a8      	cbz	r0, 800dc0c <__submore+0x70>
 800dbe0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800dbe4:	6320      	str	r0, [r4, #48]	; 0x30
 800dbe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dbea:	6362      	str	r2, [r4, #52]	; 0x34
 800dbec:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800dbf0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800dbf4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800dbf8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800dbfc:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800dc00:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800dc04:	6020      	str	r0, [r4, #0]
 800dc06:	2000      	movs	r0, #0
 800dc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dc14 <_calloc_r>:
 800dc14:	b510      	push	{r4, lr}
 800dc16:	fb02 f101 	mul.w	r1, r2, r1
 800dc1a:	f7fa f81d 	bl	8007c58 <_malloc_r>
 800dc1e:	4604      	mov	r4, r0
 800dc20:	b168      	cbz	r0, 800dc3e <_calloc_r+0x2a>
 800dc22:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800dc26:	f022 0203 	bic.w	r2, r2, #3
 800dc2a:	3a04      	subs	r2, #4
 800dc2c:	2a24      	cmp	r2, #36	; 0x24
 800dc2e:	d818      	bhi.n	800dc62 <_calloc_r+0x4e>
 800dc30:	2a13      	cmp	r2, #19
 800dc32:	d806      	bhi.n	800dc42 <_calloc_r+0x2e>
 800dc34:	4603      	mov	r3, r0
 800dc36:	2200      	movs	r2, #0
 800dc38:	601a      	str	r2, [r3, #0]
 800dc3a:	605a      	str	r2, [r3, #4]
 800dc3c:	609a      	str	r2, [r3, #8]
 800dc3e:	4620      	mov	r0, r4
 800dc40:	bd10      	pop	{r4, pc}
 800dc42:	2300      	movs	r3, #0
 800dc44:	2a1b      	cmp	r2, #27
 800dc46:	6003      	str	r3, [r0, #0]
 800dc48:	6043      	str	r3, [r0, #4]
 800dc4a:	d90f      	bls.n	800dc6c <_calloc_r+0x58>
 800dc4c:	2a24      	cmp	r2, #36	; 0x24
 800dc4e:	6083      	str	r3, [r0, #8]
 800dc50:	60c3      	str	r3, [r0, #12]
 800dc52:	bf05      	ittet	eq
 800dc54:	6103      	streq	r3, [r0, #16]
 800dc56:	6143      	streq	r3, [r0, #20]
 800dc58:	f100 0310 	addne.w	r3, r0, #16
 800dc5c:	f100 0318 	addeq.w	r3, r0, #24
 800dc60:	e7e9      	b.n	800dc36 <_calloc_r+0x22>
 800dc62:	2100      	movs	r1, #0
 800dc64:	f7fa fa94 	bl	8008190 <memset>
 800dc68:	4620      	mov	r0, r4
 800dc6a:	bd10      	pop	{r4, pc}
 800dc6c:	f100 0308 	add.w	r3, r0, #8
 800dc70:	e7e1      	b.n	800dc36 <_calloc_r+0x22>
 800dc72:	bf00      	nop

0800dc74 <rshift>:
 800dc74:	6902      	ldr	r2, [r0, #16]
 800dc76:	114b      	asrs	r3, r1, #5
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 800dc7e:	f100 0814 	add.w	r8, r0, #20
 800dc82:	da28      	bge.n	800dcd6 <rshift+0x62>
 800dc84:	f011 0c1f 	ands.w	ip, r1, #31
 800dc88:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 800dc8c:	eb08 0783 	add.w	r7, r8, r3, lsl #2
 800dc90:	d028      	beq.n	800dce4 <rshift+0x70>
 800dc92:	f858 4023 	ldr.w	r4, [r8, r3, lsl #2]
 800dc96:	1d3b      	adds	r3, r7, #4
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	fa24 f40c 	lsr.w	r4, r4, ip
 800dc9e:	f1cc 0120 	rsb	r1, ip, #32
 800dca2:	d935      	bls.n	800dd10 <rshift+0x9c>
 800dca4:	4645      	mov	r5, r8
 800dca6:	681e      	ldr	r6, [r3, #0]
 800dca8:	408e      	lsls	r6, r1
 800dcaa:	4334      	orrs	r4, r6
 800dcac:	f845 4b04 	str.w	r4, [r5], #4
 800dcb0:	f853 4b04 	ldr.w	r4, [r3], #4
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	fa24 f40c 	lsr.w	r4, r4, ip
 800dcba:	d3f4      	bcc.n	800dca6 <rshift+0x32>
 800dcbc:	1bd3      	subs	r3, r2, r7
 800dcbe:	3b05      	subs	r3, #5
 800dcc0:	f023 0303 	bic.w	r3, r3, #3
 800dcc4:	3304      	adds	r3, #4
 800dcc6:	4443      	add	r3, r8
 800dcc8:	601c      	str	r4, [r3, #0]
 800dcca:	b104      	cbz	r4, 800dcce <rshift+0x5a>
 800dccc:	3304      	adds	r3, #4
 800dcce:	ebc8 0303 	rsb	r3, r8, r3
 800dcd2:	109b      	asrs	r3, r3, #2
 800dcd4:	e016      	b.n	800dd04 <rshift+0x90>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	6103      	str	r3, [r0, #16]
 800dcda:	2300      	movs	r3, #0
 800dcdc:	6143      	str	r3, [r0, #20]
 800dcde:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800dce2:	4770      	bx	lr
 800dce4:	42ba      	cmp	r2, r7
 800dce6:	d9f6      	bls.n	800dcd6 <rshift+0x62>
 800dce8:	4641      	mov	r1, r8
 800dcea:	463b      	mov	r3, r7
 800dcec:	f853 4b04 	ldr.w	r4, [r3], #4
 800dcf0:	f841 4b04 	str.w	r4, [r1], #4
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d8f9      	bhi.n	800dcec <rshift+0x78>
 800dcf8:	43fb      	mvns	r3, r7
 800dcfa:	4413      	add	r3, r2
 800dcfc:	f023 0303 	bic.w	r3, r3, #3
 800dd00:	3304      	adds	r3, #4
 800dd02:	109b      	asrs	r3, r3, #2
 800dd04:	6103      	str	r3, [r0, #16]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d0e7      	beq.n	800dcda <rshift+0x66>
 800dd0a:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800dd0e:	4770      	bx	lr
 800dd10:	4643      	mov	r3, r8
 800dd12:	e7d9      	b.n	800dcc8 <rshift+0x54>

0800dd14 <__gethex>:
 800dd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd18:	b08b      	sub	sp, #44	; 0x2c
 800dd1a:	4688      	mov	r8, r1
 800dd1c:	9206      	str	r2, [sp, #24]
 800dd1e:	9309      	str	r3, [sp, #36]	; 0x24
 800dd20:	9007      	str	r0, [sp, #28]
 800dd22:	f7fd fe75 	bl	800ba10 <_localeconv_r>
 800dd26:	6800      	ldr	r0, [r0, #0]
 800dd28:	9002      	str	r0, [sp, #8]
 800dd2a:	f7fa fb43 	bl	80083b4 <strlen>
 800dd2e:	f8d8 3000 	ldr.w	r3, [r8]
 800dd32:	9902      	ldr	r1, [sp, #8]
 800dd34:	789a      	ldrb	r2, [r3, #2]
 800dd36:	9003      	str	r0, [sp, #12]
 800dd38:	4401      	add	r1, r0
 800dd3a:	2a30      	cmp	r2, #48	; 0x30
 800dd3c:	f811 ac01 	ldrb.w	sl, [r1, #-1]
 800dd40:	f103 0502 	add.w	r5, r3, #2
 800dd44:	f040 81a6 	bne.w	800e094 <__gethex+0x380>
 800dd48:	3303      	adds	r3, #3
 800dd4a:	2700      	movs	r7, #0
 800dd4c:	461d      	mov	r5, r3
 800dd4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd52:	2a30      	cmp	r2, #48	; 0x30
 800dd54:	f107 0701 	add.w	r7, r7, #1
 800dd58:	d0f8      	beq.n	800dd4c <__gethex+0x38>
 800dd5a:	4eb1      	ldr	r6, [pc, #708]	; (800e020 <__gethex+0x30c>)
 800dd5c:	5cb4      	ldrb	r4, [r6, r2]
 800dd5e:	2c00      	cmp	r4, #0
 800dd60:	f000 80f4 	beq.w	800df4c <__gethex+0x238>
 800dd64:	782b      	ldrb	r3, [r5, #0]
 800dd66:	f04f 0900 	mov.w	r9, #0
 800dd6a:	5cf3      	ldrb	r3, [r6, r3]
 800dd6c:	46cb      	mov	fp, r9
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	f000 8198 	beq.w	800e0a4 <__gethex+0x390>
 800dd74:	1c6b      	adds	r3, r5, #1
 800dd76:	461c      	mov	r4, r3
 800dd78:	3301      	adds	r3, #1
 800dd7a:	7822      	ldrb	r2, [r4, #0]
 800dd7c:	5cb2      	ldrb	r2, [r6, r2]
 800dd7e:	2a00      	cmp	r2, #0
 800dd80:	d1f9      	bne.n	800dd76 <__gethex+0x62>
 800dd82:	4620      	mov	r0, r4
 800dd84:	9902      	ldr	r1, [sp, #8]
 800dd86:	9a03      	ldr	r2, [sp, #12]
 800dd88:	f7fa fb44 	bl	8008414 <strncmp>
 800dd8c:	b1e0      	cbz	r0, 800ddc8 <__gethex+0xb4>
 800dd8e:	7823      	ldrb	r3, [r4, #0]
 800dd90:	f1bb 0f00 	cmp.w	fp, #0
 800dd94:	f000 816c 	beq.w	800e070 <__gethex+0x35c>
 800dd98:	ebc4 0b0b 	rsb	fp, r4, fp
 800dd9c:	ea4f 028b 	mov.w	r2, fp, lsl #2
 800dda0:	9204      	str	r2, [sp, #16]
 800dda2:	2b50      	cmp	r3, #80	; 0x50
 800dda4:	f000 809d 	beq.w	800dee2 <__gethex+0x1ce>
 800dda8:	2b70      	cmp	r3, #112	; 0x70
 800ddaa:	f000 809a 	beq.w	800dee2 <__gethex+0x1ce>
 800ddae:	4623      	mov	r3, r4
 800ddb0:	f8c8 3000 	str.w	r3, [r8]
 800ddb4:	f1b9 0f00 	cmp.w	r9, #0
 800ddb8:	d00c      	beq.n	800ddd4 <__gethex+0xc0>
 800ddba:	2f00      	cmp	r7, #0
 800ddbc:	bf0c      	ite	eq
 800ddbe:	2006      	moveq	r0, #6
 800ddc0:	2000      	movne	r0, #0
 800ddc2:	b00b      	add	sp, #44	; 0x2c
 800ddc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc8:	f1bb 0f00 	cmp.w	fp, #0
 800ddcc:	f000 818c 	beq.w	800e0e8 <__gethex+0x3d4>
 800ddd0:	7823      	ldrb	r3, [r4, #0]
 800ddd2:	e7e1      	b.n	800dd98 <__gethex+0x84>
 800ddd4:	1b63      	subs	r3, r4, r5
 800ddd6:	3b01      	subs	r3, #1
 800ddd8:	2b07      	cmp	r3, #7
 800ddda:	4649      	mov	r1, r9
 800dddc:	dd04      	ble.n	800dde8 <__gethex+0xd4>
 800ddde:	105b      	asrs	r3, r3, #1
 800dde0:	2b07      	cmp	r3, #7
 800dde2:	f101 0101 	add.w	r1, r1, #1
 800dde6:	dcfa      	bgt.n	800ddde <__gethex+0xca>
 800dde8:	9807      	ldr	r0, [sp, #28]
 800ddea:	f7fd fea1 	bl	800bb30 <_Balloc>
 800ddee:	42a5      	cmp	r5, r4
 800ddf0:	f100 0314 	add.w	r3, r0, #20
 800ddf4:	9005      	str	r0, [sp, #20]
 800ddf6:	9308      	str	r3, [sp, #32]
 800ddf8:	f080 81cd 	bcs.w	800e196 <__gethex+0x482>
 800ddfc:	469b      	mov	fp, r3
 800ddfe:	9b03      	ldr	r3, [sp, #12]
 800de00:	f04f 0900 	mov.w	r9, #0
 800de04:	464f      	mov	r7, r9
 800de06:	f1c3 0c01 	rsb	ip, r3, #1
 800de0a:	e00e      	b.n	800de2a <__gethex+0x116>
 800de0c:	2f20      	cmp	r7, #32
 800de0e:	d05f      	beq.n	800ded0 <__gethex+0x1bc>
 800de10:	463a      	mov	r2, r7
 800de12:	3704      	adds	r7, #4
 800de14:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800de18:	5cf3      	ldrb	r3, [r6, r3]
 800de1a:	f003 030f 	and.w	r3, r3, #15
 800de1e:	4093      	lsls	r3, r2
 800de20:	4545      	cmp	r5, r8
 800de22:	ea49 0903 	orr.w	r9, r9, r3
 800de26:	d21a      	bcs.n	800de5e <__gethex+0x14a>
 800de28:	4644      	mov	r4, r8
 800de2a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800de2e:	4553      	cmp	r3, sl
 800de30:	f104 38ff 	add.w	r8, r4, #4294967295
 800de34:	d1ea      	bne.n	800de0c <__gethex+0xf8>
 800de36:	eb08 030c 	add.w	r3, r8, ip
 800de3a:	429d      	cmp	r5, r3
 800de3c:	d8e6      	bhi.n	800de0c <__gethex+0xf8>
 800de3e:	4618      	mov	r0, r3
 800de40:	9902      	ldr	r1, [sp, #8]
 800de42:	9a03      	ldr	r2, [sp, #12]
 800de44:	9301      	str	r3, [sp, #4]
 800de46:	f8cd c000 	str.w	ip, [sp]
 800de4a:	f7fa fae3 	bl	8008414 <strncmp>
 800de4e:	9b01      	ldr	r3, [sp, #4]
 800de50:	f8dd c000 	ldr.w	ip, [sp]
 800de54:	2800      	cmp	r0, #0
 800de56:	d1d9      	bne.n	800de0c <__gethex+0xf8>
 800de58:	4698      	mov	r8, r3
 800de5a:	4545      	cmp	r5, r8
 800de5c:	d3e4      	bcc.n	800de28 <__gethex+0x114>
 800de5e:	f84b 9b04 	str.w	r9, [fp], #4
 800de62:	9b08      	ldr	r3, [sp, #32]
 800de64:	9905      	ldr	r1, [sp, #20]
 800de66:	ebc3 0b0b 	rsb	fp, r3, fp
 800de6a:	ea4f 03ab 	mov.w	r3, fp, asr #2
 800de6e:	4648      	mov	r0, r9
 800de70:	610b      	str	r3, [r1, #16]
 800de72:	015d      	lsls	r5, r3, #5
 800de74:	f7fd ff24 	bl	800bcc0 <__hi0bits>
 800de78:	9a06      	ldr	r2, [sp, #24]
 800de7a:	6814      	ldr	r4, [r2, #0]
 800de7c:	1a28      	subs	r0, r5, r0
 800de7e:	42a0      	cmp	r0, r4
 800de80:	f300 80d0 	bgt.w	800e024 <__gethex+0x310>
 800de84:	f2c0 80f7 	blt.w	800e076 <__gethex+0x362>
 800de88:	2600      	movs	r6, #0
 800de8a:	9806      	ldr	r0, [sp, #24]
 800de8c:	9904      	ldr	r1, [sp, #16]
 800de8e:	6883      	ldr	r3, [r0, #8]
 800de90:	4299      	cmp	r1, r3
 800de92:	f300 8092 	bgt.w	800dfba <__gethex+0x2a6>
 800de96:	9806      	ldr	r0, [sp, #24]
 800de98:	9904      	ldr	r1, [sp, #16]
 800de9a:	6843      	ldr	r3, [r0, #4]
 800de9c:	4299      	cmp	r1, r3
 800de9e:	f280 80a2 	bge.w	800dfe6 <__gethex+0x2d2>
 800dea2:	1a5d      	subs	r5, r3, r1
 800dea4:	42ac      	cmp	r4, r5
 800dea6:	f300 80ff 	bgt.w	800e0a8 <__gethex+0x394>
 800deaa:	68c2      	ldr	r2, [r0, #12]
 800deac:	2a02      	cmp	r2, #2
 800deae:	f000 8188 	beq.w	800e1c2 <__gethex+0x4ae>
 800deb2:	2a03      	cmp	r2, #3
 800deb4:	f000 8156 	beq.w	800e164 <__gethex+0x450>
 800deb8:	2a01      	cmp	r2, #1
 800deba:	f000 8173 	beq.w	800e1a4 <__gethex+0x490>
 800debe:	9807      	ldr	r0, [sp, #28]
 800dec0:	9905      	ldr	r1, [sp, #20]
 800dec2:	f7fd fe5b 	bl	800bb7c <_Bfree>
 800dec6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dec8:	2300      	movs	r3, #0
 800deca:	6013      	str	r3, [r2, #0]
 800decc:	2050      	movs	r0, #80	; 0x50
 800dece:	e778      	b.n	800ddc2 <__gethex+0xae>
 800ded0:	f8cb 9000 	str.w	r9, [fp]
 800ded4:	f04f 0900 	mov.w	r9, #0
 800ded8:	f10b 0b04 	add.w	fp, fp, #4
 800dedc:	464a      	mov	r2, r9
 800dede:	2704      	movs	r7, #4
 800dee0:	e798      	b.n	800de14 <__gethex+0x100>
 800dee2:	7863      	ldrb	r3, [r4, #1]
 800dee4:	2b2b      	cmp	r3, #43	; 0x2b
 800dee6:	f000 8097 	beq.w	800e018 <__gethex+0x304>
 800deea:	2b2d      	cmp	r3, #45	; 0x2d
 800deec:	d070      	beq.n	800dfd0 <__gethex+0x2bc>
 800deee:	1c60      	adds	r0, r4, #1
 800def0:	f04f 0b00 	mov.w	fp, #0
 800def4:	5cf2      	ldrb	r2, [r6, r3]
 800def6:	494a      	ldr	r1, [pc, #296]	; (800e020 <__gethex+0x30c>)
 800def8:	1e53      	subs	r3, r2, #1
 800defa:	2b18      	cmp	r3, #24
 800defc:	f63f af57 	bhi.w	800ddae <__gethex+0x9a>
 800df00:	7843      	ldrb	r3, [r0, #1]
 800df02:	5cc9      	ldrb	r1, [r1, r3]
 800df04:	f101 3cff 	add.w	ip, r1, #4294967295
 800df08:	f1bc 0f18 	cmp.w	ip, #24
 800df0c:	f1a2 0210 	sub.w	r2, r2, #16
 800df10:	f100 0301 	add.w	r3, r0, #1
 800df14:	d812      	bhi.n	800df3c <__gethex+0x228>
 800df16:	3002      	adds	r0, #2
 800df18:	f890 c000 	ldrb.w	ip, [r0]
 800df1c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800df20:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800df24:	f816 100c 	ldrb.w	r1, [r6, ip]
 800df28:	f101 3cff 	add.w	ip, r1, #4294967295
 800df2c:	f1bc 0f18 	cmp.w	ip, #24
 800df30:	4603      	mov	r3, r0
 800df32:	f1a2 0210 	sub.w	r2, r2, #16
 800df36:	f100 0001 	add.w	r0, r0, #1
 800df3a:	d9ed      	bls.n	800df18 <__gethex+0x204>
 800df3c:	f1bb 0f00 	cmp.w	fp, #0
 800df40:	d000      	beq.n	800df44 <__gethex+0x230>
 800df42:	4252      	negs	r2, r2
 800df44:	9804      	ldr	r0, [sp, #16]
 800df46:	4410      	add	r0, r2
 800df48:	9004      	str	r0, [sp, #16]
 800df4a:	e731      	b.n	800ddb0 <__gethex+0x9c>
 800df4c:	4628      	mov	r0, r5
 800df4e:	9902      	ldr	r1, [sp, #8]
 800df50:	9a03      	ldr	r2, [sp, #12]
 800df52:	f7fa fa5f 	bl	8008414 <strncmp>
 800df56:	2800      	cmp	r0, #0
 800df58:	d13f      	bne.n	800dfda <__gethex+0x2c6>
 800df5a:	9803      	ldr	r0, [sp, #12]
 800df5c:	5c2b      	ldrb	r3, [r5, r0]
 800df5e:	5cf2      	ldrb	r2, [r6, r3]
 800df60:	4604      	mov	r4, r0
 800df62:	442c      	add	r4, r5
 800df64:	2a00      	cmp	r2, #0
 800df66:	f000 8097 	beq.w	800e098 <__gethex+0x384>
 800df6a:	2b30      	cmp	r3, #48	; 0x30
 800df6c:	f040 8142 	bne.w	800e1f4 <__gethex+0x4e0>
 800df70:	1c62      	adds	r2, r4, #1
 800df72:	4615      	mov	r5, r2
 800df74:	3201      	adds	r2, #1
 800df76:	782b      	ldrb	r3, [r5, #0]
 800df78:	2b30      	cmp	r3, #48	; 0x30
 800df7a:	d0fa      	beq.n	800df72 <__gethex+0x25e>
 800df7c:	5cf3      	ldrb	r3, [r6, r3]
 800df7e:	f1d3 0901 	rsbs	r9, r3, #1
 800df82:	46a3      	mov	fp, r4
 800df84:	bf38      	it	cc
 800df86:	f04f 0900 	movcc.w	r9, #0
 800df8a:	2701      	movs	r7, #1
 800df8c:	e6ef      	b.n	800dd6e <__gethex+0x5a>
 800df8e:	4447      	add	r7, r8
 800df90:	f857 0c04 	ldr.w	r0, [r7, #-4]
 800df94:	f7fd fe94 	bl	800bcc0 <__hi0bits>
 800df98:	f1c4 0320 	rsb	r3, r4, #32
 800df9c:	4298      	cmp	r0, r3
 800df9e:	f280 80dd 	bge.w	800e15c <__gethex+0x448>
 800dfa2:	9805      	ldr	r0, [sp, #20]
 800dfa4:	2101      	movs	r1, #1
 800dfa6:	f7ff fe65 	bl	800dc74 <rshift>
 800dfaa:	9806      	ldr	r0, [sp, #24]
 800dfac:	9904      	ldr	r1, [sp, #16]
 800dfae:	6883      	ldr	r3, [r0, #8]
 800dfb0:	3101      	adds	r1, #1
 800dfb2:	4299      	cmp	r1, r3
 800dfb4:	9104      	str	r1, [sp, #16]
 800dfb6:	f340 80d1 	ble.w	800e15c <__gethex+0x448>
 800dfba:	9807      	ldr	r0, [sp, #28]
 800dfbc:	9905      	ldr	r1, [sp, #20]
 800dfbe:	f7fd fddd 	bl	800bb7c <_Bfree>
 800dfc2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	20a3      	movs	r0, #163	; 0xa3
 800dfc8:	6013      	str	r3, [r2, #0]
 800dfca:	b00b      	add	sp, #44	; 0x2c
 800dfcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd0:	f04f 0b01 	mov.w	fp, #1
 800dfd4:	78a3      	ldrb	r3, [r4, #2]
 800dfd6:	1ca0      	adds	r0, r4, #2
 800dfd8:	e78c      	b.n	800def4 <__gethex+0x1e0>
 800dfda:	9404      	str	r4, [sp, #16]
 800dfdc:	782b      	ldrb	r3, [r5, #0]
 800dfde:	462c      	mov	r4, r5
 800dfe0:	f04f 0901 	mov.w	r9, #1
 800dfe4:	e6dd      	b.n	800dda2 <__gethex+0x8e>
 800dfe6:	2501      	movs	r5, #1
 800dfe8:	b166      	cbz	r6, 800e004 <__gethex+0x2f0>
 800dfea:	9806      	ldr	r0, [sp, #24]
 800dfec:	68c3      	ldr	r3, [r0, #12]
 800dfee:	2b02      	cmp	r3, #2
 800dff0:	f000 808b 	beq.w	800e10a <__gethex+0x3f6>
 800dff4:	2b03      	cmp	r3, #3
 800dff6:	f000 808c 	beq.w	800e112 <__gethex+0x3fe>
 800dffa:	2b01      	cmp	r3, #1
 800dffc:	f000 80c2 	beq.w	800e184 <__gethex+0x470>
 800e000:	f045 0510 	orr.w	r5, r5, #16
 800e004:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e006:	9b05      	ldr	r3, [sp, #20]
 800e008:	6003      	str	r3, [r0, #0]
 800e00a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e00c:	9b04      	ldr	r3, [sp, #16]
 800e00e:	600b      	str	r3, [r1, #0]
 800e010:	4628      	mov	r0, r5
 800e012:	b00b      	add	sp, #44	; 0x2c
 800e014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e018:	f04f 0b00 	mov.w	fp, #0
 800e01c:	e7da      	b.n	800dfd4 <__gethex+0x2c0>
 800e01e:	bf00      	nop
 800e020:	0800f258 	.word	0x0800f258
 800e024:	1b05      	subs	r5, r0, r4
 800e026:	4629      	mov	r1, r5
 800e028:	9805      	ldr	r0, [sp, #20]
 800e02a:	f7fe f99d 	bl	800c368 <__any_on>
 800e02e:	2800      	cmp	r0, #0
 800e030:	d036      	beq.n	800e0a0 <__gethex+0x38c>
 800e032:	1e6b      	subs	r3, r5, #1
 800e034:	115a      	asrs	r2, r3, #5
 800e036:	9808      	ldr	r0, [sp, #32]
 800e038:	f003 011f 	and.w	r1, r3, #31
 800e03c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800e040:	2601      	movs	r6, #1
 800e042:	fa06 f101 	lsl.w	r1, r6, r1
 800e046:	4211      	tst	r1, r2
 800e048:	d00a      	beq.n	800e060 <__gethex+0x34c>
 800e04a:	42b3      	cmp	r3, r6
 800e04c:	f340 80a8 	ble.w	800e1a0 <__gethex+0x48c>
 800e050:	9805      	ldr	r0, [sp, #20]
 800e052:	1ea9      	subs	r1, r5, #2
 800e054:	f7fe f988 	bl	800c368 <__any_on>
 800e058:	2800      	cmp	r0, #0
 800e05a:	f000 80a1 	beq.w	800e1a0 <__gethex+0x48c>
 800e05e:	2603      	movs	r6, #3
 800e060:	9b04      	ldr	r3, [sp, #16]
 800e062:	9805      	ldr	r0, [sp, #20]
 800e064:	442b      	add	r3, r5
 800e066:	4629      	mov	r1, r5
 800e068:	9304      	str	r3, [sp, #16]
 800e06a:	f7ff fe03 	bl	800dc74 <rshift>
 800e06e:	e70c      	b.n	800de8a <__gethex+0x176>
 800e070:	f8cd b010 	str.w	fp, [sp, #16]
 800e074:	e695      	b.n	800dda2 <__gethex+0x8e>
 800e076:	1a25      	subs	r5, r4, r0
 800e078:	9905      	ldr	r1, [sp, #20]
 800e07a:	9807      	ldr	r0, [sp, #28]
 800e07c:	462a      	mov	r2, r5
 800e07e:	f7fd ff63 	bl	800bf48 <__lshift>
 800e082:	9b04      	ldr	r3, [sp, #16]
 800e084:	9005      	str	r0, [sp, #20]
 800e086:	1b5b      	subs	r3, r3, r5
 800e088:	9304      	str	r3, [sp, #16]
 800e08a:	f100 0314 	add.w	r3, r0, #20
 800e08e:	9308      	str	r3, [sp, #32]
 800e090:	2600      	movs	r6, #0
 800e092:	e6fa      	b.n	800de8a <__gethex+0x176>
 800e094:	2700      	movs	r7, #0
 800e096:	e660      	b.n	800dd5a <__gethex+0x46>
 800e098:	9204      	str	r2, [sp, #16]
 800e09a:	f04f 0901 	mov.w	r9, #1
 800e09e:	e680      	b.n	800dda2 <__gethex+0x8e>
 800e0a0:	4606      	mov	r6, r0
 800e0a2:	e7dd      	b.n	800e060 <__gethex+0x34c>
 800e0a4:	462c      	mov	r4, r5
 800e0a6:	e66c      	b.n	800dd82 <__gethex+0x6e>
 800e0a8:	1e6f      	subs	r7, r5, #1
 800e0aa:	2e00      	cmp	r6, #0
 800e0ac:	d158      	bne.n	800e160 <__gethex+0x44c>
 800e0ae:	2f00      	cmp	r7, #0
 800e0b0:	dd04      	ble.n	800e0bc <__gethex+0x3a8>
 800e0b2:	9805      	ldr	r0, [sp, #20]
 800e0b4:	4639      	mov	r1, r7
 800e0b6:	f7fe f957 	bl	800c368 <__any_on>
 800e0ba:	4606      	mov	r6, r0
 800e0bc:	9808      	ldr	r0, [sp, #32]
 800e0be:	117b      	asrs	r3, r7, #5
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e0c6:	9805      	ldr	r0, [sp, #20]
 800e0c8:	f007 071f 	and.w	r7, r7, #31
 800e0cc:	40ba      	lsls	r2, r7
 800e0ce:	421a      	tst	r2, r3
 800e0d0:	4629      	mov	r1, r5
 800e0d2:	bf18      	it	ne
 800e0d4:	f046 0602 	orrne.w	r6, r6, #2
 800e0d8:	f7ff fdcc 	bl	800dc74 <rshift>
 800e0dc:	9b06      	ldr	r3, [sp, #24]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	9304      	str	r3, [sp, #16]
 800e0e2:	1b64      	subs	r4, r4, r5
 800e0e4:	2502      	movs	r5, #2
 800e0e6:	e77f      	b.n	800dfe8 <__gethex+0x2d4>
 800e0e8:	9903      	ldr	r1, [sp, #12]
 800e0ea:	5c63      	ldrb	r3, [r4, r1]
 800e0ec:	5cf2      	ldrb	r2, [r6, r3]
 800e0ee:	468b      	mov	fp, r1
 800e0f0:	44a3      	add	fp, r4
 800e0f2:	2a00      	cmp	r2, #0
 800e0f4:	f000 8081 	beq.w	800e1fa <__gethex+0x4e6>
 800e0f8:	f10b 0201 	add.w	r2, fp, #1
 800e0fc:	4614      	mov	r4, r2
 800e0fe:	3201      	adds	r2, #1
 800e100:	7823      	ldrb	r3, [r4, #0]
 800e102:	5cf1      	ldrb	r1, [r6, r3]
 800e104:	2900      	cmp	r1, #0
 800e106:	d1f9      	bne.n	800e0fc <__gethex+0x3e8>
 800e108:	e646      	b.n	800dd98 <__gethex+0x84>
 800e10a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e10c:	f1c2 0201 	rsb	r2, r2, #1
 800e110:	9215      	str	r2, [sp, #84]	; 0x54
 800e112:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e114:	2b00      	cmp	r3, #0
 800e116:	f43f af73 	beq.w	800e000 <__gethex+0x2ec>
 800e11a:	9b05      	ldr	r3, [sp, #20]
 800e11c:	9f08      	ldr	r7, [sp, #32]
 800e11e:	691e      	ldr	r6, [r3, #16]
 800e120:	9b08      	ldr	r3, [sp, #32]
 800e122:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800e126:	4447      	add	r7, r8
 800e128:	2000      	movs	r0, #0
 800e12a:	e003      	b.n	800e134 <__gethex+0x420>
 800e12c:	429f      	cmp	r7, r3
 800e12e:	f843 0c04 	str.w	r0, [r3, #-4]
 800e132:	d94a      	bls.n	800e1ca <__gethex+0x4b6>
 800e134:	4619      	mov	r1, r3
 800e136:	f853 2b04 	ldr.w	r2, [r3], #4
 800e13a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e13e:	d0f5      	beq.n	800e12c <__gethex+0x418>
 800e140:	3201      	adds	r2, #1
 800e142:	9f08      	ldr	r7, [sp, #32]
 800e144:	600a      	str	r2, [r1, #0]
 800e146:	2d02      	cmp	r5, #2
 800e148:	d04d      	beq.n	800e1e6 <__gethex+0x4d2>
 800e14a:	9a05      	ldr	r2, [sp, #20]
 800e14c:	6913      	ldr	r3, [r2, #16]
 800e14e:	429e      	cmp	r6, r3
 800e150:	f6ff af27 	blt.w	800dfa2 <__gethex+0x28e>
 800e154:	f014 041f 	ands.w	r4, r4, #31
 800e158:	f47f af19 	bne.w	800df8e <__gethex+0x27a>
 800e15c:	2521      	movs	r5, #33	; 0x21
 800e15e:	e751      	b.n	800e004 <__gethex+0x2f0>
 800e160:	2601      	movs	r6, #1
 800e162:	e7ab      	b.n	800e0bc <__gethex+0x3a8>
 800e164:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e166:	2900      	cmp	r1, #0
 800e168:	f43f aea9 	beq.w	800debe <__gethex+0x1aa>
 800e16c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e16e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e170:	6003      	str	r3, [r0, #0]
 800e172:	9b05      	ldr	r3, [sp, #20]
 800e174:	2201      	movs	r2, #1
 800e176:	611a      	str	r2, [r3, #16]
 800e178:	9b08      	ldr	r3, [sp, #32]
 800e17a:	601a      	str	r2, [r3, #0]
 800e17c:	9b05      	ldr	r3, [sp, #20]
 800e17e:	600b      	str	r3, [r1, #0]
 800e180:	2062      	movs	r0, #98	; 0x62
 800e182:	e61e      	b.n	800ddc2 <__gethex+0xae>
 800e184:	07b2      	lsls	r2, r6, #30
 800e186:	f57f af3b 	bpl.w	800e000 <__gethex+0x2ec>
 800e18a:	9908      	ldr	r1, [sp, #32]
 800e18c:	680b      	ldr	r3, [r1, #0]
 800e18e:	4333      	orrs	r3, r6
 800e190:	07db      	lsls	r3, r3, #31
 800e192:	d4c2      	bmi.n	800e11a <__gethex+0x406>
 800e194:	e734      	b.n	800e000 <__gethex+0x2ec>
 800e196:	f8dd b020 	ldr.w	fp, [sp, #32]
 800e19a:	f04f 0900 	mov.w	r9, #0
 800e19e:	e65e      	b.n	800de5e <__gethex+0x14a>
 800e1a0:	2602      	movs	r6, #2
 800e1a2:	e75d      	b.n	800e060 <__gethex+0x34c>
 800e1a4:	42a5      	cmp	r5, r4
 800e1a6:	f47f ae8a 	bne.w	800debe <__gethex+0x1aa>
 800e1aa:	2c01      	cmp	r4, #1
 800e1ac:	ddde      	ble.n	800e16c <__gethex+0x458>
 800e1ae:	1e61      	subs	r1, r4, #1
 800e1b0:	9805      	ldr	r0, [sp, #20]
 800e1b2:	f7fe f8d9 	bl	800c368 <__any_on>
 800e1b6:	2800      	cmp	r0, #0
 800e1b8:	f43f ae81 	beq.w	800debe <__gethex+0x1aa>
 800e1bc:	9a06      	ldr	r2, [sp, #24]
 800e1be:	6853      	ldr	r3, [r2, #4]
 800e1c0:	e7d4      	b.n	800e16c <__gethex+0x458>
 800e1c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	d0d1      	beq.n	800e16c <__gethex+0x458>
 800e1c8:	e679      	b.n	800debe <__gethex+0x1aa>
 800e1ca:	9805      	ldr	r0, [sp, #20]
 800e1cc:	6883      	ldr	r3, [r0, #8]
 800e1ce:	429e      	cmp	r6, r3
 800e1d0:	da15      	bge.n	800e1fe <__gethex+0x4ea>
 800e1d2:	9f08      	ldr	r7, [sp, #32]
 800e1d4:	4633      	mov	r3, r6
 800e1d6:	9805      	ldr	r0, [sp, #20]
 800e1d8:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800e1dc:	2101      	movs	r1, #1
 800e1de:	3301      	adds	r3, #1
 800e1e0:	6103      	str	r3, [r0, #16]
 800e1e2:	6151      	str	r1, [r2, #20]
 800e1e4:	e7af      	b.n	800e146 <__gethex+0x432>
 800e1e6:	9906      	ldr	r1, [sp, #24]
 800e1e8:	680b      	ldr	r3, [r1, #0]
 800e1ea:	3b01      	subs	r3, #1
 800e1ec:	42a3      	cmp	r3, r4
 800e1ee:	d01c      	beq.n	800e22a <__gethex+0x516>
 800e1f0:	2522      	movs	r5, #34	; 0x22
 800e1f2:	e707      	b.n	800e004 <__gethex+0x2f0>
 800e1f4:	4613      	mov	r3, r2
 800e1f6:	4625      	mov	r5, r4
 800e1f8:	e6c1      	b.n	800df7e <__gethex+0x26a>
 800e1fa:	465c      	mov	r4, fp
 800e1fc:	e5cc      	b.n	800dd98 <__gethex+0x84>
 800e1fe:	6841      	ldr	r1, [r0, #4]
 800e200:	9807      	ldr	r0, [sp, #28]
 800e202:	3101      	adds	r1, #1
 800e204:	f7fd fc94 	bl	800bb30 <_Balloc>
 800e208:	9905      	ldr	r1, [sp, #20]
 800e20a:	690b      	ldr	r3, [r1, #16]
 800e20c:	1c9a      	adds	r2, r3, #2
 800e20e:	4607      	mov	r7, r0
 800e210:	0092      	lsls	r2, r2, #2
 800e212:	310c      	adds	r1, #12
 800e214:	300c      	adds	r0, #12
 800e216:	f7f2 fe63 	bl	8000ee0 <memcpy>
 800e21a:	9807      	ldr	r0, [sp, #28]
 800e21c:	9905      	ldr	r1, [sp, #20]
 800e21e:	f7fd fcad 	bl	800bb7c <_Bfree>
 800e222:	9705      	str	r7, [sp, #20]
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	3714      	adds	r7, #20
 800e228:	e7d5      	b.n	800e1d6 <__gethex+0x4c2>
 800e22a:	1163      	asrs	r3, r4, #5
 800e22c:	2201      	movs	r2, #1
 800e22e:	f004 041f 	and.w	r4, r4, #31
 800e232:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800e236:	40a2      	lsls	r2, r4
 800e238:	421a      	tst	r2, r3
 800e23a:	bf14      	ite	ne
 800e23c:	2521      	movne	r5, #33	; 0x21
 800e23e:	2522      	moveq	r5, #34	; 0x22
 800e240:	e6e0      	b.n	800e004 <__gethex+0x2f0>
 800e242:	bf00      	nop

0800e244 <__hexnan>:
 800e244:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e248:	680b      	ldr	r3, [r1, #0]
 800e24a:	f8df 8188 	ldr.w	r8, [pc, #392]	; 800e3d4 <__hexnan+0x190>
 800e24e:	b084      	sub	sp, #16
 800e250:	4691      	mov	r9, r2
 800e252:	115a      	asrs	r2, r3, #5
 800e254:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800e258:	f013 031f 	ands.w	r3, r3, #31
 800e25c:	9200      	str	r2, [sp, #0]
 800e25e:	9001      	str	r0, [sp, #4]
 800e260:	bf1c      	itt	ne
 800e262:	3204      	addne	r2, #4
 800e264:	9200      	strne	r2, [sp, #0]
 800e266:	9a01      	ldr	r2, [sp, #4]
 800e268:	9800      	ldr	r0, [sp, #0]
 800e26a:	9303      	str	r3, [sp, #12]
 800e26c:	6811      	ldr	r1, [r2, #0]
 800e26e:	2300      	movs	r3, #0
 800e270:	f840 3c04 	str.w	r3, [r0, #-4]
 800e274:	469a      	mov	sl, r3
 800e276:	461d      	mov	r5, r3
 800e278:	461e      	mov	r6, r3
 800e27a:	784b      	ldrb	r3, [r1, #1]
 800e27c:	1f07      	subs	r7, r0, #4
 800e27e:	46bc      	mov	ip, r7
 800e280:	4638      	mov	r0, r7
 800e282:	9702      	str	r7, [sp, #8]
 800e284:	b33b      	cbz	r3, 800e2d6 <__hexnan+0x92>
 800e286:	f818 2003 	ldrb.w	r2, [r8, r3]
 800e28a:	2a00      	cmp	r2, #0
 800e28c:	d148      	bne.n	800e320 <__hexnan+0xdc>
 800e28e:	2b20      	cmp	r3, #32
 800e290:	d866      	bhi.n	800e360 <__hexnan+0x11c>
 800e292:	42ae      	cmp	r6, r5
 800e294:	dd1b      	ble.n	800e2ce <__hexnan+0x8a>
 800e296:	4560      	cmp	r0, ip
 800e298:	d215      	bcs.n	800e2c6 <__hexnan+0x82>
 800e29a:	f1ba 0f07 	cmp.w	sl, #7
 800e29e:	dc12      	bgt.n	800e2c6 <__hexnan+0x82>
 800e2a0:	f1ca 0a08 	rsb	sl, sl, #8
 800e2a4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800e2a8:	6802      	ldr	r2, [r0, #0]
 800e2aa:	f1ca 0b20 	rsb	fp, sl, #32
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	685c      	ldr	r4, [r3, #4]
 800e2b2:	fa04 f70b 	lsl.w	r7, r4, fp
 800e2b6:	4317      	orrs	r7, r2
 800e2b8:	fa24 f20a 	lsr.w	r2, r4, sl
 800e2bc:	601f      	str	r7, [r3, #0]
 800e2be:	f843 2f04 	str.w	r2, [r3, #4]!
 800e2c2:	459c      	cmp	ip, r3
 800e2c4:	d8f4      	bhi.n	800e2b0 <__hexnan+0x6c>
 800e2c6:	4548      	cmp	r0, r9
 800e2c8:	d841      	bhi.n	800e34e <__hexnan+0x10a>
 800e2ca:	f04f 0a08 	mov.w	sl, #8
 800e2ce:	3101      	adds	r1, #1
 800e2d0:	784b      	ldrb	r3, [r1, #1]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d1d7      	bne.n	800e286 <__hexnan+0x42>
 800e2d6:	9f02      	ldr	r7, [sp, #8]
 800e2d8:	2e00      	cmp	r6, #0
 800e2da:	d044      	beq.n	800e366 <__hexnan+0x122>
 800e2dc:	4560      	cmp	r0, ip
 800e2de:	d202      	bcs.n	800e2e6 <__hexnan+0xa2>
 800e2e0:	f1ba 0f07 	cmp.w	sl, #7
 800e2e4:	dd62      	ble.n	800e3ac <__hexnan+0x168>
 800e2e6:	4581      	cmp	r9, r0
 800e2e8:	d242      	bcs.n	800e370 <__hexnan+0x12c>
 800e2ea:	464b      	mov	r3, r9
 800e2ec:	f850 2b04 	ldr.w	r2, [r0], #4
 800e2f0:	f843 2b04 	str.w	r2, [r3], #4
 800e2f4:	4287      	cmp	r7, r0
 800e2f6:	d2f9      	bcs.n	800e2ec <__hexnan+0xa8>
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f843 2b04 	str.w	r2, [r3], #4
 800e2fe:	429f      	cmp	r7, r3
 800e300:	d2fb      	bcs.n	800e2fa <__hexnan+0xb6>
 800e302:	9800      	ldr	r0, [sp, #0]
 800e304:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e308:	b92b      	cbnz	r3, 800e316 <__hexnan+0xd2>
 800e30a:	45b9      	cmp	r9, r7
 800e30c:	d041      	beq.n	800e392 <__hexnan+0x14e>
 800e30e:	f857 3d04 	ldr.w	r3, [r7, #-4]!
 800e312:	2b00      	cmp	r3, #0
 800e314:	d0f9      	beq.n	800e30a <__hexnan+0xc6>
 800e316:	2005      	movs	r0, #5
 800e318:	b004      	add	sp, #16
 800e31a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e31e:	4770      	bx	lr
 800e320:	f10a 0a01 	add.w	sl, sl, #1
 800e324:	f1ba 0f08 	cmp.w	sl, #8
 800e328:	f106 0601 	add.w	r6, r6, #1
 800e32c:	dc06      	bgt.n	800e33c <__hexnan+0xf8>
 800e32e:	6803      	ldr	r3, [r0, #0]
 800e330:	011b      	lsls	r3, r3, #4
 800e332:	f002 020f 	and.w	r2, r2, #15
 800e336:	431a      	orrs	r2, r3
 800e338:	6002      	str	r2, [r0, #0]
 800e33a:	e7c8      	b.n	800e2ce <__hexnan+0x8a>
 800e33c:	4548      	cmp	r0, r9
 800e33e:	d9c6      	bls.n	800e2ce <__hexnan+0x8a>
 800e340:	2300      	movs	r3, #0
 800e342:	f840 3c04 	str.w	r3, [r0, #-4]
 800e346:	f04f 0a01 	mov.w	sl, #1
 800e34a:	3804      	subs	r0, #4
 800e34c:	e7f1      	b.n	800e332 <__hexnan+0xee>
 800e34e:	2300      	movs	r3, #0
 800e350:	f1a0 0c04 	sub.w	ip, r0, #4
 800e354:	f840 3c04 	str.w	r3, [r0, #-4]
 800e358:	4635      	mov	r5, r6
 800e35a:	4660      	mov	r0, ip
 800e35c:	469a      	mov	sl, r3
 800e35e:	e7b6      	b.n	800e2ce <__hexnan+0x8a>
 800e360:	2b29      	cmp	r3, #41	; 0x29
 800e362:	9f02      	ldr	r7, [sp, #8]
 800e364:	d01c      	beq.n	800e3a0 <__hexnan+0x15c>
 800e366:	2004      	movs	r0, #4
 800e368:	b004      	add	sp, #16
 800e36a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e36e:	4770      	bx	lr
 800e370:	9a03      	ldr	r2, [sp, #12]
 800e372:	2a00      	cmp	r2, #0
 800e374:	d0c5      	beq.n	800e302 <__hexnan+0xbe>
 800e376:	9b03      	ldr	r3, [sp, #12]
 800e378:	9800      	ldr	r0, [sp, #0]
 800e37a:	f1c3 0220 	rsb	r2, r3, #32
 800e37e:	f04f 31ff 	mov.w	r1, #4294967295
 800e382:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e386:	fa21 f202 	lsr.w	r2, r1, r2
 800e38a:	4013      	ands	r3, r2
 800e38c:	f840 3c04 	str.w	r3, [r0, #-4]
 800e390:	e7ba      	b.n	800e308 <__hexnan+0xc4>
 800e392:	2301      	movs	r3, #1
 800e394:	2005      	movs	r0, #5
 800e396:	603b      	str	r3, [r7, #0]
 800e398:	b004      	add	sp, #16
 800e39a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e39e:	4770      	bx	lr
 800e3a0:	9a01      	ldr	r2, [sp, #4]
 800e3a2:	3102      	adds	r1, #2
 800e3a4:	6011      	str	r1, [r2, #0]
 800e3a6:	2e00      	cmp	r6, #0
 800e3a8:	d198      	bne.n	800e2dc <__hexnan+0x98>
 800e3aa:	e7dc      	b.n	800e366 <__hexnan+0x122>
 800e3ac:	f1ca 0508 	rsb	r5, sl, #8
 800e3b0:	00ad      	lsls	r5, r5, #2
 800e3b2:	6802      	ldr	r2, [r0, #0]
 800e3b4:	f1c5 0620 	rsb	r6, r5, #32
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	6859      	ldr	r1, [r3, #4]
 800e3bc:	fa01 f406 	lsl.w	r4, r1, r6
 800e3c0:	4314      	orrs	r4, r2
 800e3c2:	fa21 f205 	lsr.w	r2, r1, r5
 800e3c6:	601c      	str	r4, [r3, #0]
 800e3c8:	f843 2f04 	str.w	r2, [r3, #4]!
 800e3cc:	4563      	cmp	r3, ip
 800e3ce:	d3f4      	bcc.n	800e3ba <__hexnan+0x176>
 800e3d0:	e789      	b.n	800e2e6 <__hexnan+0xa2>
 800e3d2:	bf00      	nop
 800e3d4:	0800f258 	.word	0x0800f258

0800e3d8 <memmove>:
 800e3d8:	4288      	cmp	r0, r1
 800e3da:	b4f0      	push	{r4, r5, r6, r7}
 800e3dc:	d910      	bls.n	800e400 <memmove+0x28>
 800e3de:	188c      	adds	r4, r1, r2
 800e3e0:	42a0      	cmp	r0, r4
 800e3e2:	d20d      	bcs.n	800e400 <memmove+0x28>
 800e3e4:	1885      	adds	r5, r0, r2
 800e3e6:	1e53      	subs	r3, r2, #1
 800e3e8:	b142      	cbz	r2, 800e3fc <memmove+0x24>
 800e3ea:	4621      	mov	r1, r4
 800e3ec:	462a      	mov	r2, r5
 800e3ee:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 800e3f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e3f6:	3b01      	subs	r3, #1
 800e3f8:	1c5c      	adds	r4, r3, #1
 800e3fa:	d1f8      	bne.n	800e3ee <memmove+0x16>
 800e3fc:	bcf0      	pop	{r4, r5, r6, r7}
 800e3fe:	4770      	bx	lr
 800e400:	2a0f      	cmp	r2, #15
 800e402:	d93f      	bls.n	800e484 <memmove+0xac>
 800e404:	ea40 0301 	orr.w	r3, r0, r1
 800e408:	079b      	lsls	r3, r3, #30
 800e40a:	d13f      	bne.n	800e48c <memmove+0xb4>
 800e40c:	f1a2 0710 	sub.w	r7, r2, #16
 800e410:	093f      	lsrs	r7, r7, #4
 800e412:	eb00 1607 	add.w	r6, r0, r7, lsl #4
 800e416:	3610      	adds	r6, #16
 800e418:	460c      	mov	r4, r1
 800e41a:	4603      	mov	r3, r0
 800e41c:	6825      	ldr	r5, [r4, #0]
 800e41e:	601d      	str	r5, [r3, #0]
 800e420:	6865      	ldr	r5, [r4, #4]
 800e422:	605d      	str	r5, [r3, #4]
 800e424:	68a5      	ldr	r5, [r4, #8]
 800e426:	609d      	str	r5, [r3, #8]
 800e428:	68e5      	ldr	r5, [r4, #12]
 800e42a:	60dd      	str	r5, [r3, #12]
 800e42c:	3310      	adds	r3, #16
 800e42e:	42b3      	cmp	r3, r6
 800e430:	f104 0410 	add.w	r4, r4, #16
 800e434:	d1f2      	bne.n	800e41c <memmove+0x44>
 800e436:	1c7b      	adds	r3, r7, #1
 800e438:	f002 0c0f 	and.w	ip, r2, #15
 800e43c:	011b      	lsls	r3, r3, #4
 800e43e:	f1bc 0f03 	cmp.w	ip, #3
 800e442:	4419      	add	r1, r3
 800e444:	4403      	add	r3, r0
 800e446:	d923      	bls.n	800e490 <memmove+0xb8>
 800e448:	460e      	mov	r6, r1
 800e44a:	461d      	mov	r5, r3
 800e44c:	4664      	mov	r4, ip
 800e44e:	3c04      	subs	r4, #4
 800e450:	f856 7b04 	ldr.w	r7, [r6], #4
 800e454:	f845 7b04 	str.w	r7, [r5], #4
 800e458:	2c03      	cmp	r4, #3
 800e45a:	d8f8      	bhi.n	800e44e <memmove+0x76>
 800e45c:	f1ac 0404 	sub.w	r4, ip, #4
 800e460:	f024 0403 	bic.w	r4, r4, #3
 800e464:	3404      	adds	r4, #4
 800e466:	f002 0203 	and.w	r2, r2, #3
 800e46a:	4423      	add	r3, r4
 800e46c:	4421      	add	r1, r4
 800e46e:	2a00      	cmp	r2, #0
 800e470:	d0c4      	beq.n	800e3fc <memmove+0x24>
 800e472:	441a      	add	r2, r3
 800e474:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e478:	f803 4b01 	strb.w	r4, [r3], #1
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d1f9      	bne.n	800e474 <memmove+0x9c>
 800e480:	bcf0      	pop	{r4, r5, r6, r7}
 800e482:	4770      	bx	lr
 800e484:	4603      	mov	r3, r0
 800e486:	2a00      	cmp	r2, #0
 800e488:	d1f3      	bne.n	800e472 <memmove+0x9a>
 800e48a:	e7b7      	b.n	800e3fc <memmove+0x24>
 800e48c:	4603      	mov	r3, r0
 800e48e:	e7f0      	b.n	800e472 <memmove+0x9a>
 800e490:	4662      	mov	r2, ip
 800e492:	2a00      	cmp	r2, #0
 800e494:	d1ed      	bne.n	800e472 <memmove+0x9a>
 800e496:	e7b1      	b.n	800e3fc <memmove+0x24>

0800e498 <_realloc_r>:
 800e498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e49c:	460c      	mov	r4, r1
 800e49e:	b083      	sub	sp, #12
 800e4a0:	4690      	mov	r8, r2
 800e4a2:	4681      	mov	r9, r0
 800e4a4:	2900      	cmp	r1, #0
 800e4a6:	f000 80e2 	beq.w	800e66e <_realloc_r+0x1d6>
 800e4aa:	f7f9 febb 	bl	8008224 <__malloc_lock>
 800e4ae:	f108 060b 	add.w	r6, r8, #11
 800e4b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e4b6:	2e16      	cmp	r6, #22
 800e4b8:	f023 0503 	bic.w	r5, r3, #3
 800e4bc:	f1a4 0708 	sub.w	r7, r4, #8
 800e4c0:	d84b      	bhi.n	800e55a <_realloc_r+0xc2>
 800e4c2:	2110      	movs	r1, #16
 800e4c4:	460e      	mov	r6, r1
 800e4c6:	45b0      	cmp	r8, r6
 800e4c8:	d84c      	bhi.n	800e564 <_realloc_r+0xcc>
 800e4ca:	428d      	cmp	r5, r1
 800e4cc:	da78      	bge.n	800e5c0 <_realloc_r+0x128>
 800e4ce:	f8df b390 	ldr.w	fp, [pc, #912]	; 800e860 <_realloc_r+0x3c8>
 800e4d2:	f8db e008 	ldr.w	lr, [fp, #8]
 800e4d6:	1978      	adds	r0, r7, r5
 800e4d8:	4586      	cmp	lr, r0
 800e4da:	f000 80ce 	beq.w	800e67a <_realloc_r+0x1e2>
 800e4de:	6842      	ldr	r2, [r0, #4]
 800e4e0:	f022 0c01 	bic.w	ip, r2, #1
 800e4e4:	4484      	add	ip, r0
 800e4e6:	f8dc c004 	ldr.w	ip, [ip, #4]
 800e4ea:	f01c 0f01 	tst.w	ip, #1
 800e4ee:	d07a      	beq.n	800e5e6 <_realloc_r+0x14e>
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	4610      	mov	r0, r2
 800e4f4:	07db      	lsls	r3, r3, #31
 800e4f6:	f100 8092 	bmi.w	800e61e <_realloc_r+0x186>
 800e4fa:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800e4fe:	ebc3 0a07 	rsb	sl, r3, r7
 800e502:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e506:	f023 0303 	bic.w	r3, r3, #3
 800e50a:	442b      	add	r3, r5
 800e50c:	b388      	cbz	r0, 800e572 <_realloc_r+0xda>
 800e50e:	4570      	cmp	r0, lr
 800e510:	f000 80ed 	beq.w	800e6ee <_realloc_r+0x256>
 800e514:	eb02 0e03 	add.w	lr, r2, r3
 800e518:	458e      	cmp	lr, r1
 800e51a:	db2a      	blt.n	800e572 <_realloc_r+0xda>
 800e51c:	68c3      	ldr	r3, [r0, #12]
 800e51e:	6882      	ldr	r2, [r0, #8]
 800e520:	4657      	mov	r7, sl
 800e522:	60d3      	str	r3, [r2, #12]
 800e524:	609a      	str	r2, [r3, #8]
 800e526:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800e52a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800e52e:	60cb      	str	r3, [r1, #12]
 800e530:	1f2a      	subs	r2, r5, #4
 800e532:	2a24      	cmp	r2, #36	; 0x24
 800e534:	6099      	str	r1, [r3, #8]
 800e536:	f200 8126 	bhi.w	800e786 <_realloc_r+0x2ee>
 800e53a:	2a13      	cmp	r2, #19
 800e53c:	f240 80b3 	bls.w	800e6a6 <_realloc_r+0x20e>
 800e540:	6823      	ldr	r3, [r4, #0]
 800e542:	f8ca 3008 	str.w	r3, [sl, #8]
 800e546:	6863      	ldr	r3, [r4, #4]
 800e548:	f8ca 300c 	str.w	r3, [sl, #12]
 800e54c:	2a1b      	cmp	r2, #27
 800e54e:	f200 8130 	bhi.w	800e7b2 <_realloc_r+0x31a>
 800e552:	3408      	adds	r4, #8
 800e554:	f10a 0310 	add.w	r3, sl, #16
 800e558:	e0a6      	b.n	800e6a8 <_realloc_r+0x210>
 800e55a:	f026 0607 	bic.w	r6, r6, #7
 800e55e:	2e00      	cmp	r6, #0
 800e560:	4631      	mov	r1, r6
 800e562:	dab0      	bge.n	800e4c6 <_realloc_r+0x2e>
 800e564:	230c      	movs	r3, #12
 800e566:	2000      	movs	r0, #0
 800e568:	f8c9 3000 	str.w	r3, [r9]
 800e56c:	b003      	add	sp, #12
 800e56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e572:	428b      	cmp	r3, r1
 800e574:	db53      	blt.n	800e61e <_realloc_r+0x186>
 800e576:	4657      	mov	r7, sl
 800e578:	f8da 100c 	ldr.w	r1, [sl, #12]
 800e57c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800e580:	1f2a      	subs	r2, r5, #4
 800e582:	2a24      	cmp	r2, #36	; 0x24
 800e584:	60c1      	str	r1, [r0, #12]
 800e586:	6088      	str	r0, [r1, #8]
 800e588:	f200 8109 	bhi.w	800e79e <_realloc_r+0x306>
 800e58c:	2a13      	cmp	r2, #19
 800e58e:	f240 8104 	bls.w	800e79a <_realloc_r+0x302>
 800e592:	6821      	ldr	r1, [r4, #0]
 800e594:	f8ca 1008 	str.w	r1, [sl, #8]
 800e598:	6861      	ldr	r1, [r4, #4]
 800e59a:	f8ca 100c 	str.w	r1, [sl, #12]
 800e59e:	2a1b      	cmp	r2, #27
 800e5a0:	f200 811c 	bhi.w	800e7dc <_realloc_r+0x344>
 800e5a4:	3408      	adds	r4, #8
 800e5a6:	f10a 0210 	add.w	r2, sl, #16
 800e5aa:	6821      	ldr	r1, [r4, #0]
 800e5ac:	6011      	str	r1, [r2, #0]
 800e5ae:	6861      	ldr	r1, [r4, #4]
 800e5b0:	6051      	str	r1, [r2, #4]
 800e5b2:	68a1      	ldr	r1, [r4, #8]
 800e5b4:	6091      	str	r1, [r2, #8]
 800e5b6:	461d      	mov	r5, r3
 800e5b8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e5bc:	463c      	mov	r4, r7
 800e5be:	4657      	mov	r7, sl
 800e5c0:	1baa      	subs	r2, r5, r6
 800e5c2:	2a0f      	cmp	r2, #15
 800e5c4:	f003 0301 	and.w	r3, r3, #1
 800e5c8:	d819      	bhi.n	800e5fe <_realloc_r+0x166>
 800e5ca:	432b      	orrs	r3, r5
 800e5cc:	443d      	add	r5, r7
 800e5ce:	607b      	str	r3, [r7, #4]
 800e5d0:	686b      	ldr	r3, [r5, #4]
 800e5d2:	f043 0301 	orr.w	r3, r3, #1
 800e5d6:	606b      	str	r3, [r5, #4]
 800e5d8:	4648      	mov	r0, r9
 800e5da:	f7f9 fe25 	bl	8008228 <__malloc_unlock>
 800e5de:	4620      	mov	r0, r4
 800e5e0:	b003      	add	sp, #12
 800e5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5e6:	f022 0203 	bic.w	r2, r2, #3
 800e5ea:	eb02 0c05 	add.w	ip, r2, r5
 800e5ee:	458c      	cmp	ip, r1
 800e5f0:	db80      	blt.n	800e4f4 <_realloc_r+0x5c>
 800e5f2:	68c2      	ldr	r2, [r0, #12]
 800e5f4:	6881      	ldr	r1, [r0, #8]
 800e5f6:	4665      	mov	r5, ip
 800e5f8:	60ca      	str	r2, [r1, #12]
 800e5fa:	6091      	str	r1, [r2, #8]
 800e5fc:	e7e0      	b.n	800e5c0 <_realloc_r+0x128>
 800e5fe:	19b9      	adds	r1, r7, r6
 800e600:	f042 0001 	orr.w	r0, r2, #1
 800e604:	431e      	orrs	r6, r3
 800e606:	440a      	add	r2, r1
 800e608:	607e      	str	r6, [r7, #4]
 800e60a:	6048      	str	r0, [r1, #4]
 800e60c:	6853      	ldr	r3, [r2, #4]
 800e60e:	f043 0301 	orr.w	r3, r3, #1
 800e612:	3108      	adds	r1, #8
 800e614:	6053      	str	r3, [r2, #4]
 800e616:	4648      	mov	r0, r9
 800e618:	f7fd f914 	bl	800b844 <_free_r>
 800e61c:	e7dc      	b.n	800e5d8 <_realloc_r+0x140>
 800e61e:	4641      	mov	r1, r8
 800e620:	4648      	mov	r0, r9
 800e622:	f7f9 fb19 	bl	8007c58 <_malloc_r>
 800e626:	4680      	mov	r8, r0
 800e628:	b1d0      	cbz	r0, 800e660 <_realloc_r+0x1c8>
 800e62a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e62e:	f023 0201 	bic.w	r2, r3, #1
 800e632:	443a      	add	r2, r7
 800e634:	f1a0 0108 	sub.w	r1, r0, #8
 800e638:	4291      	cmp	r1, r2
 800e63a:	f000 809e 	beq.w	800e77a <_realloc_r+0x2e2>
 800e63e:	1f2a      	subs	r2, r5, #4
 800e640:	2a24      	cmp	r2, #36	; 0x24
 800e642:	d850      	bhi.n	800e6e6 <_realloc_r+0x24e>
 800e644:	2a13      	cmp	r2, #19
 800e646:	d823      	bhi.n	800e690 <_realloc_r+0x1f8>
 800e648:	4603      	mov	r3, r0
 800e64a:	4622      	mov	r2, r4
 800e64c:	6811      	ldr	r1, [r2, #0]
 800e64e:	6019      	str	r1, [r3, #0]
 800e650:	6851      	ldr	r1, [r2, #4]
 800e652:	6059      	str	r1, [r3, #4]
 800e654:	6892      	ldr	r2, [r2, #8]
 800e656:	609a      	str	r2, [r3, #8]
 800e658:	4621      	mov	r1, r4
 800e65a:	4648      	mov	r0, r9
 800e65c:	f7fd f8f2 	bl	800b844 <_free_r>
 800e660:	4648      	mov	r0, r9
 800e662:	f7f9 fde1 	bl	8008228 <__malloc_unlock>
 800e666:	4640      	mov	r0, r8
 800e668:	b003      	add	sp, #12
 800e66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e66e:	4611      	mov	r1, r2
 800e670:	b003      	add	sp, #12
 800e672:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e676:	f7f9 baef 	b.w	8007c58 <_malloc_r>
 800e67a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800e67e:	f022 0203 	bic.w	r2, r2, #3
 800e682:	1950      	adds	r0, r2, r5
 800e684:	f106 0c10 	add.w	ip, r6, #16
 800e688:	4560      	cmp	r0, ip
 800e68a:	da19      	bge.n	800e6c0 <_realloc_r+0x228>
 800e68c:	4670      	mov	r0, lr
 800e68e:	e731      	b.n	800e4f4 <_realloc_r+0x5c>
 800e690:	6823      	ldr	r3, [r4, #0]
 800e692:	6003      	str	r3, [r0, #0]
 800e694:	6863      	ldr	r3, [r4, #4]
 800e696:	6043      	str	r3, [r0, #4]
 800e698:	2a1b      	cmp	r2, #27
 800e69a:	d863      	bhi.n	800e764 <_realloc_r+0x2cc>
 800e69c:	f100 0308 	add.w	r3, r0, #8
 800e6a0:	f104 0208 	add.w	r2, r4, #8
 800e6a4:	e7d2      	b.n	800e64c <_realloc_r+0x1b4>
 800e6a6:	463b      	mov	r3, r7
 800e6a8:	6822      	ldr	r2, [r4, #0]
 800e6aa:	601a      	str	r2, [r3, #0]
 800e6ac:	6862      	ldr	r2, [r4, #4]
 800e6ae:	605a      	str	r2, [r3, #4]
 800e6b0:	68a2      	ldr	r2, [r4, #8]
 800e6b2:	609a      	str	r2, [r3, #8]
 800e6b4:	463c      	mov	r4, r7
 800e6b6:	4675      	mov	r5, lr
 800e6b8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e6bc:	4657      	mov	r7, sl
 800e6be:	e77f      	b.n	800e5c0 <_realloc_r+0x128>
 800e6c0:	4437      	add	r7, r6
 800e6c2:	1b83      	subs	r3, r0, r6
 800e6c4:	f043 0301 	orr.w	r3, r3, #1
 800e6c8:	f8cb 7008 	str.w	r7, [fp, #8]
 800e6cc:	607b      	str	r3, [r7, #4]
 800e6ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e6d2:	f003 0301 	and.w	r3, r3, #1
 800e6d6:	431e      	orrs	r6, r3
 800e6d8:	4648      	mov	r0, r9
 800e6da:	f844 6c04 	str.w	r6, [r4, #-4]
 800e6de:	f7f9 fda3 	bl	8008228 <__malloc_unlock>
 800e6e2:	4620      	mov	r0, r4
 800e6e4:	e77c      	b.n	800e5e0 <_realloc_r+0x148>
 800e6e6:	4621      	mov	r1, r4
 800e6e8:	f7ff fe76 	bl	800e3d8 <memmove>
 800e6ec:	e7b4      	b.n	800e658 <_realloc_r+0x1c0>
 800e6ee:	eb02 0c03 	add.w	ip, r2, r3
 800e6f2:	f106 0210 	add.w	r2, r6, #16
 800e6f6:	4594      	cmp	ip, r2
 800e6f8:	f6ff af3b 	blt.w	800e572 <_realloc_r+0xda>
 800e6fc:	4657      	mov	r7, sl
 800e6fe:	f8da 300c 	ldr.w	r3, [sl, #12]
 800e702:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800e706:	1f2a      	subs	r2, r5, #4
 800e708:	2a24      	cmp	r2, #36	; 0x24
 800e70a:	60cb      	str	r3, [r1, #12]
 800e70c:	6099      	str	r1, [r3, #8]
 800e70e:	f200 8087 	bhi.w	800e820 <_realloc_r+0x388>
 800e712:	2a13      	cmp	r2, #19
 800e714:	d978      	bls.n	800e808 <_realloc_r+0x370>
 800e716:	6823      	ldr	r3, [r4, #0]
 800e718:	f8ca 3008 	str.w	r3, [sl, #8]
 800e71c:	6863      	ldr	r3, [r4, #4]
 800e71e:	f8ca 300c 	str.w	r3, [sl, #12]
 800e722:	2a1b      	cmp	r2, #27
 800e724:	f200 8085 	bhi.w	800e832 <_realloc_r+0x39a>
 800e728:	3408      	adds	r4, #8
 800e72a:	f10a 0310 	add.w	r3, sl, #16
 800e72e:	6822      	ldr	r2, [r4, #0]
 800e730:	601a      	str	r2, [r3, #0]
 800e732:	6862      	ldr	r2, [r4, #4]
 800e734:	605a      	str	r2, [r3, #4]
 800e736:	68a2      	ldr	r2, [r4, #8]
 800e738:	609a      	str	r2, [r3, #8]
 800e73a:	eb0a 0306 	add.w	r3, sl, r6
 800e73e:	ebc6 020c 	rsb	r2, r6, ip
 800e742:	f042 0201 	orr.w	r2, r2, #1
 800e746:	f8cb 3008 	str.w	r3, [fp, #8]
 800e74a:	605a      	str	r2, [r3, #4]
 800e74c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e750:	f003 0301 	and.w	r3, r3, #1
 800e754:	431e      	orrs	r6, r3
 800e756:	4648      	mov	r0, r9
 800e758:	f8ca 6004 	str.w	r6, [sl, #4]
 800e75c:	f7f9 fd64 	bl	8008228 <__malloc_unlock>
 800e760:	4638      	mov	r0, r7
 800e762:	e73d      	b.n	800e5e0 <_realloc_r+0x148>
 800e764:	68a3      	ldr	r3, [r4, #8]
 800e766:	6083      	str	r3, [r0, #8]
 800e768:	68e3      	ldr	r3, [r4, #12]
 800e76a:	60c3      	str	r3, [r0, #12]
 800e76c:	2a24      	cmp	r2, #36	; 0x24
 800e76e:	d02c      	beq.n	800e7ca <_realloc_r+0x332>
 800e770:	f100 0310 	add.w	r3, r0, #16
 800e774:	f104 0210 	add.w	r2, r4, #16
 800e778:	e768      	b.n	800e64c <_realloc_r+0x1b4>
 800e77a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e77e:	f022 0203 	bic.w	r2, r2, #3
 800e782:	4415      	add	r5, r2
 800e784:	e71c      	b.n	800e5c0 <_realloc_r+0x128>
 800e786:	4621      	mov	r1, r4
 800e788:	4638      	mov	r0, r7
 800e78a:	4675      	mov	r5, lr
 800e78c:	463c      	mov	r4, r7
 800e78e:	f7ff fe23 	bl	800e3d8 <memmove>
 800e792:	4657      	mov	r7, sl
 800e794:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e798:	e712      	b.n	800e5c0 <_realloc_r+0x128>
 800e79a:	463a      	mov	r2, r7
 800e79c:	e705      	b.n	800e5aa <_realloc_r+0x112>
 800e79e:	4621      	mov	r1, r4
 800e7a0:	4638      	mov	r0, r7
 800e7a2:	461d      	mov	r5, r3
 800e7a4:	463c      	mov	r4, r7
 800e7a6:	f7ff fe17 	bl	800e3d8 <memmove>
 800e7aa:	4657      	mov	r7, sl
 800e7ac:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e7b0:	e706      	b.n	800e5c0 <_realloc_r+0x128>
 800e7b2:	68a3      	ldr	r3, [r4, #8]
 800e7b4:	f8ca 3010 	str.w	r3, [sl, #16]
 800e7b8:	68e3      	ldr	r3, [r4, #12]
 800e7ba:	f8ca 3014 	str.w	r3, [sl, #20]
 800e7be:	2a24      	cmp	r2, #36	; 0x24
 800e7c0:	d018      	beq.n	800e7f4 <_realloc_r+0x35c>
 800e7c2:	3410      	adds	r4, #16
 800e7c4:	f10a 0318 	add.w	r3, sl, #24
 800e7c8:	e76e      	b.n	800e6a8 <_realloc_r+0x210>
 800e7ca:	6923      	ldr	r3, [r4, #16]
 800e7cc:	6103      	str	r3, [r0, #16]
 800e7ce:	6963      	ldr	r3, [r4, #20]
 800e7d0:	6143      	str	r3, [r0, #20]
 800e7d2:	f104 0218 	add.w	r2, r4, #24
 800e7d6:	f100 0318 	add.w	r3, r0, #24
 800e7da:	e737      	b.n	800e64c <_realloc_r+0x1b4>
 800e7dc:	68a1      	ldr	r1, [r4, #8]
 800e7de:	f8ca 1010 	str.w	r1, [sl, #16]
 800e7e2:	68e1      	ldr	r1, [r4, #12]
 800e7e4:	f8ca 1014 	str.w	r1, [sl, #20]
 800e7e8:	2a24      	cmp	r2, #36	; 0x24
 800e7ea:	d00f      	beq.n	800e80c <_realloc_r+0x374>
 800e7ec:	3410      	adds	r4, #16
 800e7ee:	f10a 0218 	add.w	r2, sl, #24
 800e7f2:	e6da      	b.n	800e5aa <_realloc_r+0x112>
 800e7f4:	6923      	ldr	r3, [r4, #16]
 800e7f6:	f8ca 3018 	str.w	r3, [sl, #24]
 800e7fa:	6963      	ldr	r3, [r4, #20]
 800e7fc:	f8ca 301c 	str.w	r3, [sl, #28]
 800e800:	3418      	adds	r4, #24
 800e802:	f10a 0320 	add.w	r3, sl, #32
 800e806:	e74f      	b.n	800e6a8 <_realloc_r+0x210>
 800e808:	463b      	mov	r3, r7
 800e80a:	e790      	b.n	800e72e <_realloc_r+0x296>
 800e80c:	6922      	ldr	r2, [r4, #16]
 800e80e:	f8ca 2018 	str.w	r2, [sl, #24]
 800e812:	6962      	ldr	r2, [r4, #20]
 800e814:	f8ca 201c 	str.w	r2, [sl, #28]
 800e818:	3418      	adds	r4, #24
 800e81a:	f10a 0220 	add.w	r2, sl, #32
 800e81e:	e6c4      	b.n	800e5aa <_realloc_r+0x112>
 800e820:	4621      	mov	r1, r4
 800e822:	4638      	mov	r0, r7
 800e824:	f8cd c004 	str.w	ip, [sp, #4]
 800e828:	f7ff fdd6 	bl	800e3d8 <memmove>
 800e82c:	f8dd c004 	ldr.w	ip, [sp, #4]
 800e830:	e783      	b.n	800e73a <_realloc_r+0x2a2>
 800e832:	68a3      	ldr	r3, [r4, #8]
 800e834:	f8ca 3010 	str.w	r3, [sl, #16]
 800e838:	68e3      	ldr	r3, [r4, #12]
 800e83a:	f8ca 3014 	str.w	r3, [sl, #20]
 800e83e:	2a24      	cmp	r2, #36	; 0x24
 800e840:	d003      	beq.n	800e84a <_realloc_r+0x3b2>
 800e842:	3410      	adds	r4, #16
 800e844:	f10a 0318 	add.w	r3, sl, #24
 800e848:	e771      	b.n	800e72e <_realloc_r+0x296>
 800e84a:	6923      	ldr	r3, [r4, #16]
 800e84c:	f8ca 3018 	str.w	r3, [sl, #24]
 800e850:	6963      	ldr	r3, [r4, #20]
 800e852:	f8ca 301c 	str.w	r3, [sl, #28]
 800e856:	3418      	adds	r4, #24
 800e858:	f10a 0320 	add.w	r3, sl, #32
 800e85c:	e767      	b.n	800e72e <_realloc_r+0x296>
 800e85e:	bf00      	nop
 800e860:	20000180 	.word	0x20000180
 800e864:	6d315b1b 	.word	0x6d315b1b
 800e868:	6f666e49 	.word	0x6f666e49
 800e86c:	325b1b73 	.word	0x325b1b73
 800e870:	0a0d6d32 	.word	0x0a0d6d32
 800e874:	00000000 	.word	0x00000000
 800e878:	65657053 	.word	0x65657053
 800e87c:	09093a64 	.word	0x09093a64
 800e880:	0a0d7525 	.word	0x0a0d7525
 800e884:	00000000 	.word	0x00000000
 800e888:	69766544 	.word	0x69766544
 800e88c:	492d6563 	.word	0x492d6563
 800e890:	25093a44 	.word	0x25093a44
 800e894:	20583830 	.word	0x20583830
 800e898:	58383025 	.word	0x58383025
 800e89c:	38302520 	.word	0x38302520
 800e8a0:	000a0d58 	.word	0x000a0d58
 800e8a4:	3a474e52 	.word	0x3a474e52
 800e8a8:	75250909 	.word	0x75250909
 800e8ac:	00000a0d 	.word	0x00000a0d
 800e8b0:	706d6554 	.word	0x706d6554
 800e8b4:	2509093a 	.word	0x2509093a
 800e8b8:	66312e34 	.word	0x66312e34
 800e8bc:	43b0c220 	.word	0x43b0c220
 800e8c0:	00000a0d 	.word	0x00000a0d
 800e8c4:	3b305b1b 	.word	0x3b305b1b
 800e8c8:	006d3233 	.word	0x006d3233
 800e8cc:	3b305b1b 	.word	0x3b305b1b
 800e8d0:	006d3333 	.word	0x006d3333
 800e8d4:	6d315b1b 	.word	0x6d315b1b
 800e8d8:	66726556 	.word	0x66726556
 800e8dc:	6267bcc3 	.word	0x6267bcc3
 800e8e0:	20657261 	.word	0x20657261
 800e8e4:	6d6d6f4b 	.word	0x6d6d6f4b
 800e8e8:	6f646e61 	.word	0x6f646e61
 800e8ec:	325b1b73 	.word	0x325b1b73
 800e8f0:	0a0d6d32 	.word	0x0a0d6d32
 800e8f4:	00000000 	.word	0x00000000
 800e8f8:	3b305b1b 	.word	0x3b305b1b
 800e8fc:	416d3233 	.word	0x416d3233
 800e900:	69657a6e 	.word	0x69657a6e
 800e904:	72706567 	.word	0x72706567
 800e908:	6172676f 	.word	0x6172676f
 800e90c:	09206d6d 	.word	0x09206d6d
 800e910:	3b305b1b 	.word	0x3b305b1b
 800e914:	426d3333 	.word	0x426d3333
 800e918:	68656665 	.word	0x68656665
 800e91c:	305b1b6c 	.word	0x305b1b6c
 800e920:	6d39333b 	.word	0x6d39333b
 800e924:	00000a0d 	.word	0x00000a0d
 800e928:	09642523 	.word	0x09642523
 800e92c:	73257325 	.word	0x73257325
 800e930:	3b305b1b 	.word	0x3b305b1b
 800e934:	0d6d3933 	.word	0x0d6d3933
 800e938:	0000000a 	.word	0x0000000a
 800e93c:	3b305b1b 	.word	0x3b305b1b
 800e940:	006d3133 	.word	0x006d3133
 800e944:	20205f5f 	.word	0x20205f5f
 800e948:	20202020 	.word	0x20202020
 800e94c:	20202020 	.word	0x20202020
 800e950:	5f5f5f5f 	.word	0x5f5f5f5f
 800e954:	205f5f5f 	.word	0x205f5f5f
 800e958:	5f5f5f5f 	.word	0x5f5f5f5f
 800e95c:	5f5f205f 	.word	0x5f5f205f
 800e960:	205f5f5f 	.word	0x205f5f5f
 800e964:	20202020 	.word	0x20202020
 800e968:	20202020 	.word	0x20202020
 800e96c:	5f5f5f20 	.word	0x5f5f5f20
 800e970:	0d205f5f 	.word	0x0d205f5f
 800e974:	0000000a 	.word	0x0000000a
 800e978:	205c205c 	.word	0x205c205c
 800e97c:	20202020 	.word	0x20202020
 800e980:	2f202020 	.word	0x2f202020
 800e984:	205f2f20 	.word	0x205f2f20
 800e988:	2f5f2020 	.word	0x2f5f2020
 800e98c:	5f5f5f20 	.word	0x5f5f5f20
 800e990:	5f202f5f 	.word	0x5f202f5f
 800e994:	7c5f5f5f 	.word	0x7c5f5f5f
 800e998:	2f202020 	.word	0x2f202020
 800e99c:	2020205c 	.word	0x2020205c
 800e9a0:	5f20207c 	.word	0x5f20207c
 800e9a4:	205c205f 	.word	0x205c205f
 800e9a8:	00000a0d 	.word	0x00000a0d
 800e9ac:	5c205c20 	.word	0x5c205c20
 800e9b0:	5c2f2020 	.word	0x5c2f2020
 800e9b4:	202f2020 	.word	0x202f2020
 800e9b8:	7c20202f 	.word	0x7c20202f
 800e9bc:	207c7c20 	.word	0x207c7c20
 800e9c0:	2020207c 	.word	0x2020207c
 800e9c4:	207c207c 	.word	0x207c207c
 800e9c8:	20202020 	.word	0x20202020
 800e9cc:	202f2020 	.word	0x202f2020
 800e9d0:	20205c20 	.word	0x20205c20
 800e9d4:	207c207c 	.word	0x207c207c
 800e9d8:	7c207c20 	.word	0x7c207c20
 800e9dc:	00000a0d 	.word	0x00000a0d
 800e9e0:	205c2020 	.word	0x205c2020
 800e9e4:	20202f5c 	.word	0x20202f5c
 800e9e8:	2f202f5c 	.word	0x2f202f5c
 800e9ec:	7c202020 	.word	0x7c202020
 800e9f0:	207c7c20 	.word	0x207c7c20
 800e9f4:	2020207c 	.word	0x2020207c
 800e9f8:	207c207c 	.word	0x207c207c
 800e9fc:	20202020 	.word	0x20202020
 800ea00:	2f202f20 	.word	0x2f202f20
 800ea04:	205c205c 	.word	0x205c205c
 800ea08:	207c207c 	.word	0x207c207c
 800ea0c:	7c207c20 	.word	0x7c207c20
 800ea10:	00000a0d 	.word	0x00000a0d
 800ea14:	5c202020 	.word	0x5c202020
 800ea18:	5c2f2020 	.word	0x5c2f2020
 800ea1c:	202f2020 	.word	0x202f2020
 800ea20:	7c5f2020 	.word	0x7c5f2020
 800ea24:	207c7c20 	.word	0x207c7c20
 800ea28:	5f5f5f7c 	.word	0x5f5f5f7c
 800ea2c:	5f7c207c 	.word	0x5f7c207c
 800ea30:	205f5f5f 	.word	0x205f5f5f
 800ea34:	5f5f202f 	.word	0x5f5f202f
 800ea38:	5c205f5f 	.word	0x5c205f5f
 800ea3c:	5f7c207c 	.word	0x5f7c207c
 800ea40:	7c207c5f 	.word	0x7c207c5f
 800ea44:	00000a0d 	.word	0x00000a0d
 800ea48:	20202020 	.word	0x20202020
 800ea4c:	20202f5c 	.word	0x20202f5c
 800ea50:	20202f5c 	.word	0x20202f5c
 800ea54:	5f5f7c20 	.word	0x5f5f7c20
 800ea58:	5c5f5f5f 	.word	0x5c5f5f5f
 800ea5c:	5f5f5f5f 	.word	0x5f5f5f5f
 800ea60:	5f5f5c5f 	.word	0x5f5f5c5f
 800ea64:	2f5f5f5f 	.word	0x2f5f5f5f
 800ea68:	20202f5f 	.word	0x20202f5f
 800ea6c:	5f5c2020 	.word	0x5f5c2020
 800ea70:	5f5f5f5c 	.word	0x5f5f5f5c
 800ea74:	0d2f5f5f 	.word	0x0d2f5f5f
 800ea78:	000a0d0a 	.word	0x000a0d0a
 800ea7c:	3b305b1b 	.word	0x3b305b1b
 800ea80:	006d3933 	.word	0x006d3933
 800ea84:	6d315b1b 	.word	0x6d315b1b
 800ea88:	3b305b1b 	.word	0x3b305b1b
 800ea8c:	5f6d3133 	.word	0x5f6d3133
 800ea90:	2020205f 	.word	0x2020205f
 800ea94:	5f202020 	.word	0x5f202020
 800ea98:	5f5f5f5f 	.word	0x5f5f5f5f
 800ea9c:	5f5f5f20 	.word	0x5f5f5f20
 800eaa0:	5f5f5f20 	.word	0x5f5f5f20
 800eaa4:	5f202020 	.word	0x5f202020
 800eaa8:	5f202020 	.word	0x5f202020
 800eaac:	0d205f5f 	.word	0x0d205f5f
 800eab0:	0000000a 	.word	0x0000000a
 800eab4:	205c205c 	.word	0x205c205c
 800eab8:	2f202020 	.word	0x2f202020
 800eabc:	205f2f20 	.word	0x205f2f20
 800eac0:	5f202f5f 	.word	0x5f202f5f
 800eac4:	5f202f5f 	.word	0x5f202f5f
 800eac8:	2f207c5f 	.word	0x2f207c5f
 800eacc:	7c205c5f 	.word	0x7c205c5f
 800ead0:	5c202020 	.word	0x5c202020
 800ead4:	000a0d20 	.word	0x000a0d20
 800ead8:	5c205c20 	.word	0x5c205c20
 800eadc:	202f5c2f 	.word	0x202f5c2f
 800eae0:	207c202f 	.word	0x207c202f
 800eae4:	5f28207c 	.word	0x5f28207c
 800eae8:	5f28207c 	.word	0x5f28207c
 800eaec:	202f205f 	.word	0x202f205f
 800eaf0:	7c5c205f 	.word	0x7c5c205f
 800eaf4:	20297c20 	.word	0x20297c20
 800eaf8:	000a0d7c 	.word	0x000a0d7c
 800eafc:	5f5c2020 	.word	0x5f5c2020
 800eb00:	2f5f5c2f 	.word	0x2f5f5c2f
 800eb04:	5f5f7c20 	.word	0x5f5f7c20
 800eb08:	5f5f5c5f 	.word	0x5f5f5c5f
 800eb0c:	5f5f5c5f 	.word	0x5f5f5c5f
 800eb10:	2f5f2f5f 	.word	0x2f5f2f5f
 800eb14:	5c5f5c20 	.word	0x5c5f5c20
 800eb18:	2f5f5f5f 	.word	0x2f5f5f5f
 800eb1c:	0a0d0a0d 	.word	0x0a0d0a0d
 800eb20:	32325b1b 	.word	0x32325b1b
 800eb24:	305b1b6d 	.word	0x305b1b6d
 800eb28:	6d39333b 	.word	0x6d39333b
 800eb2c:	00000000 	.word	0x00000000
 800eb30:	3b325b1b 	.word	0x3b325b1b
 800eb34:	303b3733 	.word	0x303b3733
 800eb38:	0000006d 	.word	0x0000006d
 800eb3c:	4a325b1b 	.word	0x4a325b1b
 800eb40:	00000000 	.word	0x00000000
 800eb44:	00485b1b 	.word	0x00485b1b
 800eb48:	0a0d0a0d 	.word	0x0a0d0a0d
 800eb4c:	00000000 	.word	0x00000000
 800eb50:	4b325b1b 	.word	0x4b325b1b
 800eb54:	47315b1b 	.word	0x47315b1b
 800eb58:	3b305b1b 	.word	0x3b305b1b
 800eb5c:	3e6d3933 	.word	0x3e6d3933
 800eb60:	305b1b20 	.word	0x305b1b20
 800eb64:	6d36333b 	.word	0x6d36333b
 800eb68:	00000000 	.word	0x00000000
 800eb6c:	0000002f 	.word	0x0000002f
 800eb70:	0000002d 	.word	0x0000002d
 800eb74:	0000005c 	.word	0x0000005c
 800eb78:	0000007c 	.word	0x0000007c
 800eb7c:	0a0d0a0d 	.word	0x0a0d0a0d
 800eb80:	5b1b0a0d 	.word	0x5b1b0a0d
 800eb84:	75446d31 	.word	0x75446d31
 800eb88:	6e656b20 	.word	0x6e656b20
 800eb8c:	2074736e 	.word	0x2074736e
 800eb90:	20656964 	.word	0x20656964
 800eb94:	77746e41 	.word	0x77746e41
 800eb98:	2e74726f 	.word	0x2e74726f
 800eb9c:	62410a0d 	.word	0x62410a0d
 800eba0:	6b207265 	.word	0x6b207265
 800eba4:	736e6e65 	.word	0x736e6e65
 800eba8:	75642074 	.word	0x75642074
 800ebac:	63756120 	.word	0x63756120
 800ebb0:	69642068 	.word	0x69642068
 800ebb4:	72462065 	.word	0x72462065
 800ebb8:	3f656761 	.word	0x3f656761
 800ebbc:	32325b1b 	.word	0x32325b1b
 800ebc0:	0d0a0d6d 	.word	0x0d0a0d6d
 800ebc4:	0000000a 	.word	0x0000000a
 800ebc8:	4c454853 	.word	0x4c454853
 800ebcc:	4d435f4c 	.word	0x4d435f4c
 800ebd0:	535f7344 	.word	0x535f7344
 800ebd4:	53544f4c 	.word	0x53544f4c
 800ebd8:	6947203a 	.word	0x6947203a
 800ebdc:	6d206576 	.word	0x6d206576
 800ebe0:	6f6d2065 	.word	0x6f6d2065
 800ebe4:	73206572 	.word	0x73206572
 800ebe8:	73746f6c 	.word	0x73746f6c
 800ebec:	656c7020 	.word	0x656c7020
 800ebf0:	20657361 	.word	0x20657361
 800ebf4:	2028273a 	.word	0x2028273a
 800ebf8:	20646e41 	.word	0x20646e41
 800ebfc:	656e6f6d 	.word	0x656e6f6d
 800ec00:	44202179 	.word	0x44202179
 800ec04:	74276e6f 	.word	0x74276e6f
 800ec08:	726f6620 	.word	0x726f6620
 800ec0c:	20746567 	.word	0x20746567
 800ec10:	20656874 	.word	0x20656874
 800ec14:	656e6f6d 	.word	0x656e6f6d
 800ec18:	293a2079 	.word	0x293a2079
 800ec1c:	00000000 	.word	0x00000000
 800ec20:	4c454853 	.word	0x4c454853
 800ec24:	554f5f4c 	.word	0x554f5f4c
 800ec28:	535f7354 	.word	0x535f7354
 800ec2c:	53544f4c 	.word	0x53544f4c
 800ec30:	6947203a 	.word	0x6947203a
 800ec34:	6d206576 	.word	0x6d206576
 800ec38:	6f6d2065 	.word	0x6f6d2065
 800ec3c:	73206572 	.word	0x73206572
 800ec40:	73746f6c 	.word	0x73746f6c
 800ec44:	656c7020 	.word	0x656c7020
 800ec48:	20657361 	.word	0x20657361
 800ec4c:	2028273a 	.word	0x2028273a
 800ec50:	20646e41 	.word	0x20646e41
 800ec54:	656e6f6d 	.word	0x656e6f6d
 800ec58:	44202179 	.word	0x44202179
 800ec5c:	74276e6f 	.word	0x74276e6f
 800ec60:	726f6620 	.word	0x726f6620
 800ec64:	20746567 	.word	0x20746567
 800ec68:	20656874 	.word	0x20656874
 800ec6c:	656e6f6d 	.word	0x656e6f6d
 800ec70:	293a2079 	.word	0x293a2079
 800ec74:	00000000 	.word	0x00000000
 800ec78:	5f425355 	.word	0x5f425355
 800ec7c:	004e4f43 	.word	0x004e4f43
 800ec80:	6c656873 	.word	0x6c656873
 800ec84:	00725f6c 	.word	0x00725f6c
 800ec88:	6c656873 	.word	0x6c656873
 800ec8c:	006f5f6c 	.word	0x006f5f6c
 800ec90:	00003234 	.word	0x00003234
 800ec94:	74697865 	.word	0x74697865
 800ec98:	00000000 	.word	0x00000000
 800ec9c:	706c6568 	.word	0x706c6568
 800eca0:	00000000 	.word	0x00000000
 800eca4:	6f666e69 	.word	0x6f666e69
 800eca8:	00000000 	.word	0x00000000
 800ecac:	00006425 	.word	0x00006425
 800ecb0:	45454554 	.word	0x45454554
 800ecb4:	00005453 	.word	0x00005453
 800ecb8:	3a6c6774 	.word	0x3a6c6774
 800ecbc:	00000000 	.word	0x00000000
 800ecc0:	74736574 	.word	0x74736574
 800ecc4:	00000000 	.word	0x00000000
 800ecc8:	76696c61 	.word	0x76696c61
 800eccc:	00000065 	.word	0x00000065
 800ecd0:	6f6d6564 	.word	0x6f6d6564
 800ecd4:	00000031 	.word	0x00000031
 800ecd8:	6f6d6564 	.word	0x6f6d6564
 800ecdc:	00000032 	.word	0x00000032
 800ece0:	6f6d6564 	.word	0x6f6d6564
 800ece4:	00000033 	.word	0x00000033
 800ece8:	2e333231 	.word	0x2e333231
 800ecec:	00747874 	.word	0x00747874
 800ecf0:	73726946 	.word	0x73726946
 800ecf4:	74732074 	.word	0x74732074
 800ecf8:	676e6972 	.word	0x676e6972
 800ecfc:	206e6920 	.word	0x206e6920
 800ed00:	6620796d 	.word	0x6620796d
 800ed04:	0a656c69 	.word	0x0a656c69
 800ed08:	00000000 	.word	0x00000000
 800ed0c:	6d315b1b 	.word	0x6d315b1b
 800ed10:	65686353 	.word	0x65686353
 800ed14:	656c7564 	.word	0x656c7564
 800ed18:	6e492d72 	.word	0x6e492d72
 800ed1c:	6d726f66 	.word	0x6d726f66
 800ed20:	6f697461 	.word	0x6f697461
 800ed24:	1b6e656e 	.word	0x1b6e656e
 800ed28:	6d32325b 	.word	0x6d32325b
 800ed2c:	00000a0d 	.word	0x00000a0d
 800ed30:	3b305b1b 	.word	0x3b305b1b
 800ed34:	006d3733 	.word	0x006d3733
 800ed38:	25237325 	.word	0x25237325
 800ed3c:	73250964 	.word	0x73250964
 800ed40:	09642509 	.word	0x09642509
 800ed44:	64256425 	.word	0x64256425
 800ed48:	64256425 	.word	0x64256425
 800ed4c:	64256425 	.word	0x64256425
 800ed50:	64256425 	.word	0x64256425
 800ed54:	09642509 	.word	0x09642509
 800ed58:	0a0d6425 	.word	0x0a0d6425
 800ed5c:	00000000 	.word	0x00000000
 800ed60:	252c6425 	.word	0x252c6425
 800ed64:	00000064 	.word	0x00000064
 800ed68:	65686373 	.word	0x65686373
 800ed6c:	656c7564 	.word	0x656c7564
 800ed70:	6e695f72 	.word	0x6e695f72
 800ed74:	76726574 	.word	0x76726574
 800ed78:	003a6c61 	.word	0x003a6c61
 800ed7c:	65686373 	.word	0x65686373
 800ed80:	656c7564 	.word	0x656c7564
 800ed84:	65645f72 	.word	0x65645f72
 800ed88:	6574656c 	.word	0x6574656c
 800ed8c:	0000003a 	.word	0x0000003a
 800ed90:	65686373 	.word	0x65686373
 800ed94:	656c7564 	.word	0x656c7564
 800ed98:	61745f72 	.word	0x61745f72
 800ed9c:	003a6b73 	.word	0x003a6b73
 800eda0:	65686373 	.word	0x65686373
 800eda4:	656c7564 	.word	0x656c7564
 800eda8:	00000072 	.word	0x00000072
 800edac:	0a0d0a0d 	.word	0x0a0d0a0d
 800edb0:	656c6946 	.word	0x656c6946
 800edb4:	0a0d3a73 	.word	0x0a0d3a73
 800edb8:	00000000 	.word	0x00000000
 800edbc:	3b305b1b 	.word	0x3b305b1b
 800edc0:	256d3533 	.word	0x256d3533
 800edc4:	73252f73 	.word	0x73252f73
 800edc8:	000a0d2f 	.word	0x000a0d2f
 800edcc:	3b305b1b 	.word	0x3b305b1b
 800edd0:	256d3633 	.word	0x256d3633
 800edd4:	73252f73 	.word	0x73252f73
 800edd8:	00000a0d 	.word	0x00000a0d
 800eddc:	3b305b1b 	.word	0x3b305b1b
 800ede0:	4b6d3133 	.word	0x4b6d3133
 800ede4:	656e6965 	.word	0x656e6965
 800ede8:	2d445320 	.word	0x2d445320
 800edec:	7472614b 	.word	0x7472614b
 800edf0:	65672065 	.word	0x65672065
 800edf4:	646e7566 	.word	0x646e7566
 800edf8:	0d216e65 	.word	0x0d216e65
 800edfc:	0000000a 	.word	0x0000000a
 800ee00:	62756c62 	.word	0x62756c62
 800ee04:	00000000 	.word	0x00000000
 800ee08:	0000736c 	.word	0x0000736c
 800ee0c:	69646b6d 	.word	0x69646b6d
 800ee10:	00000072 	.word	0x00000072
 800ee14:	00003a30 	.word	0x00003a30
 800ee18:	00003a31 	.word	0x00003a31
 800ee1c:	334d5453 	.word	0x334d5453
 800ee20:	69562032 	.word	0x69562032
 800ee24:	61757472 	.word	0x61757472
 800ee28:	6f43206c 	.word	0x6f43206c
 800ee2c:	726f506d 	.word	0x726f506d
 800ee30:	6e692074 	.word	0x6e692074
 800ee34:	20534820 	.word	0x20534820
 800ee38:	65646f4d 	.word	0x65646f4d
 800ee3c:	00000000 	.word	0x00000000
 800ee40:	334d5453 	.word	0x334d5453
 800ee44:	69562032 	.word	0x69562032
 800ee48:	61757472 	.word	0x61757472
 800ee4c:	6f43206c 	.word	0x6f43206c
 800ee50:	726f506d 	.word	0x726f506d
 800ee54:	6e692074 	.word	0x6e692074
 800ee58:	20534620 	.word	0x20534620
 800ee5c:	65646f4d 	.word	0x65646f4d
 800ee60:	00000000 	.word	0x00000000
 800ee64:	694d5453 	.word	0x694d5453
 800ee68:	656f7263 	.word	0x656f7263
 800ee6c:	7463656c 	.word	0x7463656c
 800ee70:	696e6f72 	.word	0x696e6f72
 800ee74:	00007363 	.word	0x00007363
 800ee78:	20504356 	.word	0x20504356
 800ee7c:	666e6f43 	.word	0x666e6f43
 800ee80:	00006769 	.word	0x00006769
 800ee84:	20504356 	.word	0x20504356
 800ee88:	65746e49 	.word	0x65746e49
 800ee8c:	63616672 	.word	0x63616672
 800ee90:	00000065 	.word	0x00000065

0800ee94 <APBAHBPrescTable>:
 800ee94:	00000000 04030201 04030201 09080706     ................
 800eea4:	2c2b2a22 3d3c3b3a 5d5b3f3e 00007f7c     "*+,:;<=>?[]|...
 800eeb4:	2c2b2a22 3c3b3a2e 5b3f3e3d 007f7c5d     "*+,.:;<=>?[]|..

0800eec4 <ExCvt>:
 800eec4:	83828180 87868584 8b8a8988 8f8e8d8c     ................
 800eed4:	93929190 97969594 9bad9998 9fae9d8c     ................
 800eee4:	a3a221a0 a7a6a5a4 abaaa9a8 afaeadac     .!..............
 800eef4:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
 800ef04:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
 800ef14:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
 800ef24:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
 800ef34:	d3d2d1d0 f7d6d5d4 dbdad9d8 9fdedddc     ................

0800ef44 <zeroes.6760>:
 800ef44:	30303030 30303030 30303030 30303030     0000000000000000
 800ef54:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 800ef64:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 800ef74:	00000000 33323130 37363534 62613938     ....0123456789ab
 800ef84:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 800ef94:	00000030                                0...

0800ef98 <blanks.6759>:
 800ef98:	20202020 20202020 20202020 20202020                     

0800efa8 <basefix.6711>:
 800efa8:	0001000a 00030002 00050004 00070006     ................
 800efb8:	00090008 000b000a 000d000c 000f000e     ................
 800efc8:	00000010 646c2565 00000000              ....e%ld....

0800efd4 <_ctype_>:
 800efd4:	20202000 20202020 28282020 20282828     .         ((((( 
 800efe4:	20202020 20202020 20202020 20202020                     
 800eff4:	10108820 10101010 10101010 10101010      ...............
 800f004:	04040410 04040404 10040404 10101010     ................
 800f014:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800f024:	01010101 01010101 01010101 10101010     ................
 800f034:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800f044:	02020202 02020202 02020202 10101010     ................
 800f054:	00000020 00000000 00000000 00000000      ...............
	...
 800f0d8:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 800f0e8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0800f0f8 <__mprec_tens>:
 800f0f8:	00000000 3ff00000 00000000 40240000     .......?......$@
 800f108:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800f118:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800f128:	00000000 412e8480 00000000 416312d0     .......A......cA
 800f138:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800f148:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800f158:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800f168:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800f178:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800f188:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800f198:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800f1a8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800f1b8:	79d99db4 44ea7843                       ...yCx.D

0800f1c0 <__mprec_bigtens>:
 800f1c0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800f1d0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800f1e0:	7f73bf3c 75154fdd                       <.s..O.u

0800f1e8 <p05.5266>:
 800f1e8:	00000005 00000019 0000007d              ........}...

0800f1f4 <fpi.5235>:
 800f1f4:	00000035 fffffbce 000003cb 00000001     5...............
 800f204:	00000000                                ....

0800f208 <fpinan.5271>:
 800f208:	00000034 fffffbce 000003cb 00000001     4...............
 800f218:	00000000 0000666e 74696e69 00000079     ....nf..inity...
 800f228:	00006e61 00000000                       an......

0800f230 <tinytens>:
 800f230:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 800f240:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 800f250:	64ac6f43 11680628                       Co.d(.h.

0800f258 <__hexdig>:
	...
 800f288:	13121110 17161514 00001918 00000000     ................
 800f298:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...
 800f2b8:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...
